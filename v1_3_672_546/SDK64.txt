Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x60, Size: 0x58]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0xb8, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0xc0, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0xd0, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0xe0, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0xf0, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x100, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x128, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x138, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x140, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x148, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x150, Size: 0x8]
	WorldRegionManager RegionManager;//[Offset: 0x158, Size: 0x1b8]
	float[] DefaultSkylightSH;//[Offset: 0x310, Size: 0x10]
	float DefaultSkylightSHPower;//[Offset: 0x320, Size: 0x4]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x328, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x346, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x348, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x350, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x358, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x360, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x368, Size: 0x8]
	Level*[] Levels;//[Offset: 0x370, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x380, Size: 0x10]
	MaterialLodManager* MaterialLodManager;//[Offset: 0x398, Size: 0x8]
	GameInstance* OwningGameInstance;//[Offset: 0x3a8, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x3b0, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x3c0, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x3c8, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x440, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x450, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnWorkerThreadOnly;//[Offset: 0x460, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x850, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x8c8, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x99d1f1c
	void HandleTimelineScrubbed();// 0x99d1f68

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x578, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	PrimitiveComponent* MergeAggreDestComponent;//[Offset: 0x260, Size: 0x8]
	bool EnableScreenSizeCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float MinDrawDistance;//[Offset: 0x26c, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x270, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x274, Size: 0x4]
	float MinScreenSize;//[Offset: 0x278, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x27c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x27d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x27e, Size: 0x1]
	enum LightmapType;//[Offset: 0x27f, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x280, Size: 0x1]
	bool bDelayedCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x280, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x281, Size: 0x1]
	Texture* DitherMaskTexture;//[Offset: 0x288, Size: 0x8]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x290, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x290, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x290, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x291, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x291, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x291, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x291, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x291, Size: 0x1]
	bool bDisableTranslucentOptimization;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x291, Size: 0x1]
	bool bNotRenderInTranslucentOptimizationPass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x291, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x291, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x292, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x292, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x292, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x292, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x292, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x292, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x292, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x292, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x293, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x293, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x293, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x293, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x293, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x293, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x293, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x293, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]
	bool bEnableCSMForLowEndDevice;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x294, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x294, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x295, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x295, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x295, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x295, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x295, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x295, Size: 0x1]
	bool bUseSkySH;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x295, Size: 0x1]
	bool bKeepOutLinePass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x295, Size: 0x1]
	bool bEnemyMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x296, Size: 0x1]
	bool bHideHotZone;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x296, Size: 0x1]
	bool bOutlineMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x296, Size: 0x1]
	bool bVisibleMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x296, Size: 0x1]
	bool bDisableIOSAsyncPSO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x296, Size: 0x1]
	bool bILCSampleWorldPosition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x296, Size: 0x1]
	enum RenderPass;//[Offset: 0x297, Size: 0x1]
	ExtraRenderPassConfig ExtraRenderPassConfig;//[Offset: 0x298, Size: 0x80]
	float ILCSampleScalar;//[Offset: 0x318, Size: 0x4]
	float ILCSampleLerpSkyLightWeight;//[Offset: 0x31c, Size: 0x4]
	byte bHasCustomNavigableGeometry;//[Offset: 0x321, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x323, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x324, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x325, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x328, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x330, Size: 0x10]
	Vector4 GlobalSH;//[Offset: 0x340, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x350, Size: 0x4]
	int VisibilityId;//[Offset: 0x354, Size: 0x4]
	int ReflectionCaptureIndex;//[Offset: 0x358, Size: 0x4]
	FString ReflectionCaptureName;//[Offset: 0x360, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x370, Size: 0x10]
	int VirtualTextureLodBias;//[Offset: 0x380, Size: 0x4]
	int VirtualTextureCullMips;//[Offset: 0x384, Size: 0x4]
	int VirtualTextureMinCoverage;//[Offset: 0x388, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x38c, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x394, Size: 0x4]
	bool bSkipOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	float BoundsScale;//[Offset: 0x3a4, Size: 0x4]
	float OCBoundsScale;//[Offset: 0x3a8, Size: 0x4]
	int OCBoundsExtent;//[Offset: 0x3ac, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3c0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3d0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x3f0, Size: 0x110]
	delegate OnComponentHit;//[Offset: 0x500, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x520, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x521, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x522, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x523, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x525, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x526, Size: 0x1]
	delegate OnClicked;//[Offset: 0x527, Size: 0x1]
	delegate OnReleased;//[Offset: 0x528, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x529, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x52a, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x52b, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x52c, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x548, Size: 0x8]
	SceneComponent* ClusterParentPrimitive;//[Offset: 0x550, Size: 0x8]
	byte PhysicalMode;//[Offset: 0x558, Size: 0x1]
	byte PhysicalSurface;//[Offset: 0x559, Size: 0x1]
	void WakeRigidBody(FName BoneName);// 0xa37d308
	void WakeAllRigidBodies();// 0xa37c9dc
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xa37fae0
	void SetVisibleMask(bool bInVisibleMask);// 0x9975dd8
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xa37bd78
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x9977f30
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x9978000
	void SetSimulatePhysics(bool bSimulate);// 0xa37fa00
	void SetRenderPass(enum NewRenderPass);// 0x99797d0
	void SetRenderInMainPass(bool bValue);// 0x9975c30
	void SetRenderCustomDepth(bool bValue);// 0x997637c
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x9977e58
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xa37b948
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x997897c
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x9978b6c
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x9978d6c
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xa37db68
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xa37d5f0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xa37d3e0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xa37d7e8
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x99782d4
	void SetOutlineMask(bool bInOutlineMask);// 0x9975eb0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x99781fc
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xa37d228
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xa380198
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xa380300
	void SetMassScale(FName BoneName, float InMassScale);// 0xa37c52c
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xa37c17c
	void SetLinearDamping(float InDamping);// 0xa37c7e4
	void SetKeepOutLinePass(bool bInKeepOutLinePass);// 0x9976138
	void SetILCSampleScalar(float F);// 0x9977cb0
	void SetILCSampleLerpSkyLightWeight(float F);// 0x9977be0
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xa3806dc
	void SetExtraRenderPassConfig(out const ExtraRenderPassConfig Config);// 0x99791ec
	void SetEnemyMask(bool bInEnemyMask);// 0x9976060
	void SetEnableScreenSizeCull(const bool bEnableScreenCull);// 0x9975948
	void SetEnableGravity(bool bGravityEnabled);// 0xa37c8fc
	void SetDitherMaskTexture(Texture* NewDitherMaskTexture);// 0x997a1dc
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x99798b4
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x9979a80
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x9979be0
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x9979d3c
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x9975d08
	void SetCustomDepthStencilValue(int Value);// 0x99762ac
	void SetCullDistance(float NewCullDistance);// 0x9975878
	void SetConstraintMode(byte ConstraintMode);// 0xa37f928
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xa37baf8
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xa37ba20
	void SetCollisionProfileName(FName InCollisionProfileName);// 0xa37d078
	void SetCollisionObjectType(byte Channel);// 0xa37cfa0
	void SetCollisionEnabled(byte NewType);// 0xa37d150
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x997847c
	void SetCastShadow(bool NewCastShadow);// 0x99780d8
	void SetCanUseSkylightSH(bool bNewUseSkylightSH);// 0x9977d80
	void SetBoundsScale(float NewBoundsScale);// 0x9979454
	void SetAngularDamping(float InDamping);// 0xa37c6d0
	void SetAllUseCCD(bool InUseCCD);// 0xa37bc98
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xa37d9f8
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xa37c9f8
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xa37cb74
	void SetAllMassScale(float InMassScale);// 0xa37c374
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xa37bee8
	void PutRigidBodyToSleep(FName BoneName);// 0x99783ac
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x9976fe4
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x9976454
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x997760c
	bool K2_IsQueryCollisionEnabled();// 0xa37ce9c
	bool K2_IsPhysicsCollisionEnabled();// 0xa37ce54
	bool K2_IsCollisionEnabled();// 0xa37cee4
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x99769f4
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x9979648
	bool IsOverlappingActor(const Actor* Other);// 0xa380564
	bool IsGravityEnabled();// 0xa37c8bc
	bool IsAnyRigidBodyAwake();// 0xa37bc58
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x527c9e0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x997a074
	void HideHotZone(bool bInHideHotZone);// 0x9975f88
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x99791b4
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x9978f6c
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x99790d8
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x99786b8
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x9978794
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x9978888
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x9979538
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x5185690
	int GetNumMaterials();// 0xa37cf64
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xa37fbd4
	MaterialInterface* GetMaterial(int ElementIndex);// 0xa380484
	float GetMassScale(FName BoneName);// 0xa37c44c
	float GetMass();// 0xa37c140
	float GetLinearDamping();// 0xa37c7a8
	Vector GetInertiaTensor(FName BoneName);// 0xa37c05c
	bool GetGenerateOverlapEvents();// 0xa380814
	byte GetCollisionResponseToChannel(byte Channel);// 0xa37cd74
	FName GetCollisionProfileName();// 0x9977bac
	byte GetCollisionObjectType();// 0xa37cd38
	byte GetCollisionEnabled();// 0xa37cf28
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x9975a20
	Vector GetCenterOfMass(FName BoneName);// 0x99785dc
	float GetAngularDamping();// 0xa37c694
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xa37fd54
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0xa37ff48
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xa3800b8
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x9979ec0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x9979fa4
	void ClearMoveIgnoreComponents();// 0x9979e94
	void ClearMoveIgnoreActors();// 0x9979f90
	void ClearExtraRenderPassConfig();// 0xa380468
	bool CanCharacterStepUp(Pawn* Pawn);// 0xa37b864
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xa37df70
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xa37dd60
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0xa37e168
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xa37ec3c
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xa37e360
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xa37ef40
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xa37f730
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xa37e664
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xa37e854
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xa37ea44
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xa37f340
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xa37f130
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xa37f538

--------------------------------
Class: SceneComponent.ActorComponent.Object
	bool bApplyParentSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	float DitherFactor;//[Offset: 0xfc, Size: 0x4]
	bool UseParentDitherFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bUIFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bSkipBasePitchRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	PhysicsVolume* PhysicsVolume;//[Offset: 0x110, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0x118, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x120, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0x128, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x138, Size: 0x10]
	bool bRebaseRelativeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	Vector RelativeLocation;//[Offset: 0x178, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x184, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x190, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x19c, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a8, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a8, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a8, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a8, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a8, Size: 0x1]
	bool bHiddenEnterVoidInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a8, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a9, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a9, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a9, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a9, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a9, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a9, Size: 0x1]
	byte Mobility;//[Offset: 0x1ab, Size: 0x1]
	bool bMovableForStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 0x1]
	byte DetailMode;//[Offset: 0x1ad, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x1ae, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x9988158
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x9988318
	void SetWorldScale3D(Vector NewScale);// 0xa386e04
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x478b9ac
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x998aaf0
	void SetRelativeScale3D(Vector NewScale3D);// 0xa386fa4
	void SetMobility(byte NewMobility);// 0xa386368
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x9987fe4
	void SetDitherFactor(float NewDitherFactor, bool bPropagateToChildren);// 0xa3870bc
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x5c5db28
	void ResetRelativeTransform();// 0x998a688
	void OnRep_Visibility(bool OldValue);// 0x998a9b8
	void OnRep_Transform();// 0xa38707c
	void OnRep_RelativeLocation();// 0x538c004
	void OnRep_AttachSocketName();// 0x998aa90
	void OnRep_AttachParent();// 0x998aac0
	void OnRep_AttachChildren();// 0x5e79120
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x998985c
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4529990
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x99878d0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x9989b70
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x611d150
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x998a708
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x9987c78
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x46311e0
	Transform K2_GetComponentToWorld();// 0xa386d78
	Vector K2_GetComponentScale();// 0x9988ee4
	Rotator K2_GetComponentRotation();// 0x9988f2c
	Vector K2_GetComponentLocation();// 0xa386de0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x5beee98
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x9988480
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x9988828
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x9988ff4
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x9989304
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x99895b0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x998a130
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x998a3dc
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x9989e20
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6078c88
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x488ec48
	bool IsVisible();// 0xa386440
	bool IsSimulatingPhysics(FName BoneName);// 0xa386bf4
	bool IsAnySimulatingPhysics();// 0xa386bb4
	Vector GetUpVector();// 0x9988eac
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xa38685c
	Rotator GetSocketRotation(FName InSocketName);// 0xa386694
	Quat GetSocketQuaternion(FName InSocketName);// 0xa3865a4
	Vector GetSocketLocation(FName InSocketName);// 0xa386778
	bool GetShouldUpdatePhysicsVolume();// 0xa38709c
	Vector GetRightVector();// 0x9988e74
	Transform GetRelativeTransform();// 0x998a69c
	PhysicsVolume* GetPhysicsVolume();// 0x9987fb0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x9988d64
	int GetNumChildrenComponents();// 0x9988d30
	Vector GetForwardVector();// 0xa386cd8
	Vector GetComponentVelocity();// 0xa386480
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x9988aac
	SceneComponent* GetChildComponent(int ChildIndex);// 0x9988c58
	FName GetAttachSocketName();// 0xa386b7c
	SceneComponent* GetAttachParent();// 0xa386b98
	FName[] GetAllSocketNames();// 0x9988248
	bool DoesSocketExist(FName InSocketName);// 0xa3864c0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xa386a04

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x60]
	FName[] ComponentTags;//[Offset: 0x90, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0xa8, Size: 0x10]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbc, Size: 0x1]
	float NetUpdateFrequency;//[Offset: 0xc0, Size: 0x4]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcd, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcd, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcd, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xcd, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xce, Size: 0x1]
	enum CreationMethod;//[Offset: 0xd0, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0xd1, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0xd2, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xd8, Size: 0x10]
	void ToggleActive();// 0xa313444
	void SetTickGroup(byte NewTickGroup);// 0x97e2f88
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x97e33fc
	void SetIsReplicated(bool ShouldReplicate);// 0x97e3360
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x97e3050
	void SetComponentTickInterval(float TickInterval);// 0x97e30e4
	void SetComponentTickEnabled(bool bEnabled);// 0x97e3174
	void SetAutoActivate(bool bNewAutoActivate);// 0x97e34a8
	void SetActive(bool bNewActive, bool bReset);// 0x97e354c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x97e2d18
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x97e2db4
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void ReceiveOnReused();// 0xa1d39f8
	void ReceiveOnRecycled();// 0xa1d39f8
	void ReceiveEndPlay(byte EndPlayReason);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void PauseNetUpdate(bool bPause);// 0x97e3218
	void OnRep_IsActive();// 0xa313498
	void K2_DestroyComponent(Object* Object);// 0x5265598
	bool IsComponentTickEnabled();// 0xa3133a8
	bool IsBeingDestroyed();// 0xa3134b4
	bool IsActive();// 0xa313404
	Actor* GetOwner();// 0xa31347c
	float GetComponentTickInterval();// 0x97e301c
	void ForceNetUpdateWithOwner(bool bForceOwner);// 0x97e32bc
	void ForceNetUpdate();// 0xa3133e8
	void Deactivate();// 0xa313460
	bool ComponentHasTag(FName Tag);// 0x97e36f0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x97e2e50
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x97e2eec
	void Activate(bool bReset);// 0x97e364c

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	float TickInterval;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometryOnDS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bPutBodiesInAggregation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x110, Size: 0x110]
	Vector BuildScale3D;//[Offset: 0x228, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	Box ElemBox;//[Offset: 0x40, Size: 0x1c]
	Transform Transform;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2a8, Size: 0x4]
	int Priority;//[Offset: 0x2ac, Size: 0x4]
	float FluidFriction;//[Offset: 0x2b0, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x270, Size: 0x1]
	Color BrushColor;//[Offset: 0x274, Size: 0x4]
	int PolyFlags;//[Offset: 0x278, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 0x1]
	Model* Brush;//[Offset: 0x280, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x288, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x298, Size: 0x10]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x38, Size: 0x60]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x98, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x98, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x98, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x98, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x98, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x98, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x99, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x99, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x99, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x99, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x99, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x99, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x99, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 0x1]
	byte RemoteRole;//[Offset: 0x9d, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0xa0, Size: 0x38]
	float InitialLifeSpan;//[Offset: 0xd8, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xdc, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xe8, Size: 0x40]
	Actor* Owner;//[Offset: 0x128, Size: 0x8]
	FName NetDriverName;//[Offset: 0x130, Size: 0x8]
	byte Role;//[Offset: 0x138, Size: 0x1]
	byte NetDormancy;//[Offset: 0x139, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x13a, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x13b, Size: 0x1]
	int InputPriority;//[Offset: 0x13c, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x140, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x148, Size: 0x4]
	float ReplayNetCullDistanceSquared;//[Offset: 0x14c, Size: 0x4]
	int NetTag;//[Offset: 0x150, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x154, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x158, Size: 0x4]
	float NetPriority;//[Offset: 0x15c, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x168, Size: 0x8]
	Actor*[] Children;//[Offset: 0x170, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x180, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x188, Size: 0x10]
	FName[] Layers;//[Offset: 0x1a0, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x1b0, Size: 0x8]
	FName[] Tags;//[Offset: 0x1b8, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1c8, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x1c9, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x1ca, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x1cb, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x1cc, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x1cd, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x1ce, Size: 0x1]
	delegate OnClicked;//[Offset: 0x1cf, Size: 0x1]
	delegate OnReleased;//[Offset: 0x1d0, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x1d1, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x1d2, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x1d3, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x1d4, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x1d5, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x1d7, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x1d8, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x240, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x250, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x97dafdc
	bool WasRecentlyPassOCRendered(float Tolerance);// 0x97dae78
	void UserConstructionScript();// 0xa1d39f8
	void TearOff();// 0xa312ea8
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x97dc024
	bool ShouldCollectedByApex();// 0xa312d18
	void SetTickGroup(byte NewTickGroup);// 0x97db0b8
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x97dbdec
	void SetReplicates(bool bInReplicates);// 0x97dfa54
	void SetReplicateMovement(bool bInReplicateMovement);// 0xa312dac
	void SetOwner(Actor* NewOwner);// 0xa311a88
	void SetNetDormancy(byte NewDormancy);// 0x97db730
	void SetLifeSpan(float InLifespan);// 0xa311bb8
	void SetActorTickIntervalAndCooldown(float TickInterval);// 0x97db910
	void SetActorTickInterval(float TickInterval);// 0x97db9e0
	void SetActorTickEnabled(bool bEnabled);// 0x97dbaf0
	void SetActorScale3D(Vector NewScale3D);// 0x582863c
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x97dcf50
	void SetActorHiddenInGame(bool bNewHidden);// 0xa3123b0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x46811b8
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xa311cb0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xa311d88
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xa1d39f8
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xa1d39f8
	void ReceiveOnReused();// 0xa1d39f8
	void ReceiveOnRecycled();// 0xa1d39f8
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0xa1d39f8
	void ReceiveEndPlay(byte EndPlayReason);// 0xa1d39f8
	void ReceiveDestroyed();// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xa1d39f8
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xa1d39f8
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xa1d39f8
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xa1d39f8
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xa1d39f8
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xa1d39f8
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xa1d39f8
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xa1d39f8
	void ReceiveActorEndCursorOver();// 0xa1d39f8
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xa1d39f8
	void ReceiveActorBeginCursorOver();// 0xa1d39f8
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0xa311790
	void OnRep_ReplicateMovement();// 0xa312ec4
	void OnRep_ReplicatedMovement();// 0xa311b60
	void OnRep_Owner();// 0xa312e8c
	void OnRep_Instigator();// 0xa312cfc
	void OnRep_AttachmentReplication();// 0xa312d58
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x97da830
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x97dbd0c
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x97db2d8
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4642168
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x97df09c
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97dd020
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5deefa4
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97dd3c4
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97decd4
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xa312710
	void K2_OnReset();// 0xa1d39f8
	void K2_OnEndViewTarget(PlayerController* PC);// 0xa1d39f8
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xa1d39f8
	SceneComponent* K2_GetRootComponent();// 0xa312638
	Rotator K2_GetActorRotation();// 0x97df4ec
	Vector K2_GetActorLocation();// 0xa312a5c
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0xa31213c
	void K2_DestroyComponent(ActorComponent* Component);// 0x97dcdf8
	void K2_DestroyActor();// 0xa312374
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x97dc7dc
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x97dc184
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x97dc564
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x97dcb80
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97ddf48
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97de258
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97de504
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97dd684
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97dd994
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x97ddc40
	bool IsOverlappingActor(const Actor* Other);// 0x97db800
	bool IsChildActor();// 0x97db66c
	bool IsActorTickEnabled();// 0x97dbab8
	bool IsActorBeingDestroyed();// 0xa311c90
	bool HasAuthority();// 0xa312350
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x97de9d0
	Vector GetVelocity();// 0xa3125f8
	Transform GetTransform();// 0xa312ab4
	bool GetTickableWhenPaused();// 0x97dbed4
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x97debc4
	byte GetRemoteRole();// 0xa312d74
	ChildActorComponent* GetParentComponent();// 0x97db48c
	Actor* GetParentActor();// 0xa3119d0
	Actor* GetOwner();// 0xa311a6c
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x97dbbc8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x486ff64
	byte GetLocalRole();// 0xa312d90
	float GetLifeSpan();// 0xa311b7c
	Controller* GetInstigatorController();// 0x97df5cc
	Pawn* GetInstigator();// 0xa312b30
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x97df600
	float GetInputAxisValue(const FName InputAxisName);// 0x97df97c
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x97df7c0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x97de820
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x97deaec
	float GetGameTimeSinceCreation();// 0x97dbcd8
	float GetDotProductTo(const Actor* OtherActor);// 0x97de8f8
	float GetDistanceTo(const Actor* OtherActor);// 0xa312490
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x97dab24
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x97dad14
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0xa311530
	FName GetAttachParentSocketName();// 0x5d4bdb8
	Actor* GetAttachParentActor();// 0xa3119a4
	void GetAttachedActors(out Actor*[] OutActors);// 0x97db188
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x97db4c0
	Vector GetActorUpVector();// 0x97df444
	float GetActorTimeDilation();// 0x97dbf18
	float GetActorTickInterval();// 0x97db8dc
	Vector GetActorScale3D();// 0x97dec9c
	Vector GetActorRightVector();// 0xa312654
	Vector GetActorRelativeScale3D();// 0x97dcef0
	Vector GetActorForwardVector();// 0x97df498
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0xa311610
	bool GetActorEnableCollision();// 0xa312390
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x97df234
	void ForceNetUpdate();// 0xa311988
	void FlushNetDormancy();// 0x97db71c
	void EnableInput(PlayerController* PlayerController);// 0xa312c24
	void DisableInput(PlayerController* PlayerController);// 0xa312b4c
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x97dbf4c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xa311e60
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xa311f38
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x5879ed8
	bool ActorHasTag(FName Tag);// 0xa312010

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	float ServerTimeStamp;//[Offset: 0x30, Size: 0x4]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bHasServerTimeStamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x35, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x36, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x37, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x560, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x568, Size: 0x8]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x168, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x988bd3c
	bool WasControllerKeyJustPressed(Key Key);// 0x988bec8
	bool IsControllerKeyDown(Key Key);// 0x988c054
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x988b870
	Vector GetControllerVectorKeyState(Key Key);// 0x988ba2c
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x988b5dc
	float GetControllerKeyTimeDown(Key Key);// 0x988b6e8
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x988b484
	float GetControllerAnalogKeyState(Key Key);// 0x988bbb4

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x996c968
	void SetBind(FName BindName, FString Command);// 0x996c87c
	void InvertAxisKey(const Key AxisKey);// 0x996c724
	void InvertAxis(const FName AxisName);// 0x996c6a8
	void ClearSmoothing();// 0x996c694

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x278, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x278, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x27c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x280, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x281, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x282, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x288, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x290, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x2a0, Size: 0x8]
	Controller* Controller;//[Offset: 0x2a8, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x2b4, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x2c0, Size: 0xc]
	void SpawnDefaultController();// 0xa371378
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x9956168
	void ReceiveUnpossessed(Controller* OldController);// 0xa1d39f8
	void ReceivePossessed(Controller* NewController);// 0xa1d39f8
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x99562ac
	void OnRep_PlayerState();// 0xa3714f0
	void OnRep_Controller();// 0xa37150c
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x9955d5c
	Vector K2_GetMovementInputVector();// 0x9955d14
	bool IsPlayerControlled();// 0xa371430
	bool IsMoveInputIgnored();// 0xa3712f8
	bool IsLocallyControlled();// 0xa371470
	bool IsControlled();// 0x591d88c
	bool IsBotControlled();// 0xa3713f0
	Vector GetPendingMovementInputVector();// 0x995602c
	Vector GetNavAgentLocation();// 0xa3714b0
	PawnMovementComponent* GetMovementComponent();// 0xa371584
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x9956230
	Vector GetLastMovementInputVector();// 0x9955ff4
	Rotator GetControlRotation();// 0xa371528
	Controller* GetController();// 0xa371568
	Rotator GetBaseAimRotation();// 0xa3713b0
	void DetachFromControllerPendingDestroy();// 0xa371394
	Vector ConsumeMovementInputVector();// 0xa371338
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x9956064
	void AddControllerYawInput(float Val);// 0x9955eec
	void AddControllerRollInput(float Val);// 0x9955e68
	void AddControllerPitchInput(float Val);// 0x9955f70

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x278, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x288, Size: 0x10]
	FName StateName;//[Offset: 0x298, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x2a0, Size: 0x8]
	Character* Character;//[Offset: 0x2b0, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x2b8, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2d8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 0x1]
	void UnPossess();// 0x9843138
	void StopMovement();// 0xa32b2d4
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0xa32b94c
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0xa32b1f4
	void SetIgnoreLookInput(bool bNewLookInput);// 0xa32b0b8
	void SetControlRotation(out const Rotator NewRotation);// 0xa32bacc
	void ResetIgnoreMoveInput();// 0xa32b1d8
	void ResetIgnoreLookInput();// 0xa32b09c
	void ResetIgnoreInputFlags();// 0xa32b040
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0xa1d39f8
	void ReceivePossess(Pawn* PossessedPawn);// 0xa1d39f8
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xa1d39f8
	void Possess(Pawn* InPawn);// 0x984314c
	void OnRep_PlayerState();// 0xa32b710
	void OnRep_Pawn();// 0xa32b72c
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0xa32b748
	Pawn* K2_GetPawn();// 0xa32b41c
	bool IsPlayerController();// 0xa32b380
	bool IsMoveInputIgnored();// 0xa32b198
	bool IsLookInputIgnored();// 0xa32b05c
	bool IsLocalPlayerController();// 0xa32b330
	bool IsLocalController();// 0xa32b2f0
	Actor* GetViewTarget();// 0xa32b3e0
	Rotator GetDesiredRotation();// 0xa32b3a0
	Rotator GetControlRotation();// 0xa32bbb0
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0xa32b438
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0xa32b5a8
	PlayerController* CastToPlayerController();// 0x984321c

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x270, Size: 0x4]
	int PlayerID;//[Offset: 0x274, Size: 0x4]
	byte ping;//[Offset: 0x278, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27a, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27a, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27a, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27a, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27a, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27a, Size: 0x1]
	int StartTime;//[Offset: 0x27c, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x280, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x290, Size: 0x10]
	UniqueNetIdRepl UniqueID;//[Offset: 0x2a0, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x2d0, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x2f0, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xa1d39f8
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xa1d39f8
	void OnRep_UniqueId();// 0xa37a144
	void OnRep_Score();// 0xa37a1b4
	void OnRep_PlayerName();// 0xa37a198
	void OnRep_PlayerId();// 0xa37a160
	void OnRep_bIsInactive();// 0xa37a17c
	FString GetPlayerName();// 0x996d0cc

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2d0, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x2d8, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2e0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2f0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x320, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x350, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x354, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x360, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x370, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x374, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x378, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x37c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x380, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x380, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x380, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x380, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x380, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x380, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x380, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x381, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x381, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x381, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x384, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x388, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x38c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x390, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x394, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x398, Size: 0x4]
	bool EnableTestNameID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	delegate OnReachedJumpApex;//[Offset: 0x3a8, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x3c8, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x3d8, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3e8, Size: 0xf8]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4e0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x520, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x530, Size: 0x158]
	void UnCrouch(bool bClientSimulation);// 0xa32659c
	void StopJumping();// 0xa326f94
	void StopAnimMontage(AnimMontage* AnimMontage);// 0xa326c34
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x98352a8
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x9836b50
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x9835cd0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x98354dc
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x983635c
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x9836f98
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x98341f4
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xa326d0c
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0xa32675c
	void OnRep_RootMotion();// 0x5213358
	void OnRep_ReplicatedBasedMovement();// 0xa327010
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x9834420
	void OnRep_IsCrouched();// 0xa326fcc
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xa1d39f8
	void OnLanded(out const HitResult Hit);// 0xa1d39f8
	void OnJumped();// 0xa326a18
	void OnCallUpdateBaseMovement();// 0xa327194
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xa326a34
	void K2_UpdateCustomMovement(float DeltaTime);// 0xa1d39f8
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xa1d39f8
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xa1d39f8
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xa1d39f8
	void Jump();// 0xa326fb0
	bool IsPlayingRootMotion();// 0x98341bc
	bool IsPlayingNetworkedRootMotionMontage();// 0x983414c
	bool IsJumpProvidingForce();// 0xa326f14
	bool HasAnyRootMotion();// 0x9834184
	AnimMontage* GetCurrentMontage();// 0x98342fc
	Vector GetBaseTranslationOffset();// 0xa326fe8
	Rotator GetBaseRotationOffsetRotator();// 0x98343cc
	float GetAnimRootMotionTranslationScale();// 0x9834110
	void Crouch(bool bClientSimulation);// 0xa32667c
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xa327210
	void ClientCheatWalk();// 0xa326540
	void ClientCheatGhost();// 0xa326508
	void ClientCheatFly();// 0xa326524
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x9834440
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x9834cd4
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xa327658
	void ClientAckGoodMove(float Timestamp);// 0xa327b30
	bool CanJumpInternal();// 0xa326f54
	bool CanJump();// 0x9834394
	bool CanCrouch();// 0xa32655c
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0xa32702c

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0xa3170d8

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0xa31a7f8

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x98449a0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x9844200
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x9844380

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x68, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x69, Size: 0x1]
	float DefaultValue;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool bIsNotifyWithTriggerTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool Received_Notify_With_TriggerTime(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TriggerTime, bool bIsBranchingPoint);// 0xa1d39f8
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xa1d39f8
	FString GetNotifyName();// 0x97fd2f4

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x760, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x768, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x770, Size: 0x8]
	AnimInstance*[] SubInstances;//[Offset: 0x778, Size: 0x10]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x788, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x790, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x7b8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x7c4, Size: 0xc]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x7f0, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x800, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x830, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x834, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x835, Size: 0x1]
	byte AnimationMode;//[Offset: 0x837, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x839, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x839, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x839, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x839, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x839, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83a, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83a, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83a, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83a, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83a, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83b, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83b, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83b, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83b, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x83b, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x83b, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83b, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83c, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83c, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83c, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x83c, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x83c, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83c, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83d, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83d, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83d, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83d, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83d, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x83d, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x83d, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83d, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83e, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83e, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83e, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x840, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x844, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x848, Size: 0x4]
	float BendingStiffness;//[Offset: 0x84c, Size: 0x4]
	float AreaStiffness;//[Offset: 0x850, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x854, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x858, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x85c, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x860, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x870, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x880, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x890, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x998, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x99c, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9a8, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa00, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xad0, Size: 0x10]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x9996344
	void ToggleDisablePostProcessBlueprint();// 0x999740c
	void TermBodiesBelow(FName ParentBoneName);// 0x999501c
	void SuspendClothingSimulation();// 0x999646c
	void Stop();// 0x9996c30
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x9996580
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x99962a4
	void SetTeleportRotationThreshold(float Threshold);// 0x9995d9c
	void SetTeleportDistanceThreshold(float Threshold);// 0x9995cbc
	void SetPosition(float InPos, bool bFireNotifies);// 0x9996b48
	void SetPlayRate(float Rate);// 0x5f31354
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x9994eec
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x9995a3c
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x99967f8
	void SetLayerOverlay(class AnimInstance InClass);// 0x9996fc4
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x9994e24
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x999573c
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x999594c
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x9997328
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x99961c0
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x9994280
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x9994370
	void SetClothMaxDistanceScale(float Scale);// 0x99964a8
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x9995b88
	void SetAnimClass(class Object NewClass);// 0x999728c
	void SetAnimationMode(byte InAnimationMode);// 0x9996da8
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x9996ce0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x9993f34
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x9995ea4
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x99960dc
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x9994630
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x9994784
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x99944ac
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x9994f80
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x9994bcc
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x9994cc8
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x9994a24
	void ResumeClothingSimulation();// 0x9996458
	void ResetClothTeleportMode();// 0x99963f4
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x9996e3c
	void ResetAllowedAnimCurveEvaluation();// 0x9995fd8
	void ResetAllBodiesSimulatePhysics();// 0x9994cb4
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x4c5ae80
	void Play(bool bLooping);// 0x9996c44
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x9996934
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x9995510
	bool IsPlaying();// 0x4f8f7e4
	bool IsClothingSimulationSuspended();// 0x9996410
	bool IsBodyGravityEnabled(FName BoneName);// 0x9995880
	bool HasValidAnimationInstance();// 0x9996ed0
	float GetTeleportRotationThreshold();// 0x9995e68
	float GetTeleportDistanceThreshold();// 0x9995d60
	void GetSubInstancesByTag(FName InTag, out AnimInstance*[] OutSubInstances);// 0x9997058
	AnimInstance* GetSubInstanceByTag(FName InTag);// 0x9997180
	Vector GetSkeletalCenterOfMass();// 0x99953e0
	AnimInstance* GetPostProcessInstance();// 0x999721c
	float GetPosition();// 0x4f2ba44
	float GetPlayRate();// 0x9996b14
	float GetMorphTarget(FName MorphTargetName);// 0x999668c
	AnimInstance* GetLayerSubInstanceByGroup(FName InGroup);// 0x9996f28
	bool GetDisablePostProcessBlueprint();// 0x99973c4
	bool GetDisableAnimCurves();// 0xa388d40
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x9993d7c
	float GetClothMaxDistanceScale();// 0x9996544
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x9995c80
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x9995418
	AnimInstance* GetAnimInstance();// 0xa388d68
	class Object GetAnimClass();// 0x9997258
	byte GetAnimationMode();// 0x9996d74
	bool GetAllowedAnimCurveEvaluate();// 0xa388d1c
	void ForceClothNextUpdateTeleportAndReset();// 0x9996480
	void ForceClothNextUpdateTeleport();// 0x9996494
	FName FindConstraintBoneName(int ConstraintIndex);// 0x99941e4
	void ClearMorphTargets();// 0x99967e4
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x99940b0
	void BindClothToMasterPoseComponent();// 0x99963e0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x9995fec
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x99950b0
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x9995248
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x99948d8

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5a0, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5a8, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x6a8, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x6b0, Size: 0x4]
	int MinLodModel;//[Offset: 0x6b4, Size: 0x4]
	int ShadowLodBias;//[Offset: 0x6b8, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6c4, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6d0, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x704, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x706, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x706, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x706, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x706, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x706, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x706, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x707, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x707, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x707, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x707, Size: 0x1]
	bool bUseAnimScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x707, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x707, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x707, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x707, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x708, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x708, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x708, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x708, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x708, Size: 0x1]
	bool bTickPoseOnDS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x708, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x708, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x709, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x709, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x70c, Size: 0x4]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x720, Size: 0x1c]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x999c43c
	void UnHideBoneByName(FName BoneName);// 0x999bc5c
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x999bf7c
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x593eec8
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0x999b894
	void ShowAllMaterialSections(int LODIndex);// 0x999b800
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x999c7d4
	bool SetSkinWeightProfile(FName InProfileName);// 0x999c4e4
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x999c618
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReInitPose);// 0x999cc24
	void SetRenderStatic(bool bNewValue);// 0x999b61c
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x999d2e4
	void SetMinLOD(int InNewMinLOD);// 0x999d1d0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x999c34c
	void SetForcedLOD(int InNewForcedLOD);// 0x999d108
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x999cfd0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x999d06c
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x999cf3c
	bool IsUsingSkinWeightProfile();// 0xa3896a8
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x999b6b8
	bool IsBoneHiddenByName(FName BoneName);// 0x999b9d0
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x999bcf0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x999c8fc
	FName GetSocketBoneName(FName InSocketName);// 0x999cd1c
	Vector GetRefPosePosition(int BoneIndex);// 0x999c160
	FName GetParentBone(FName BoneName);// 0x999cb88
	int GetNumLODs();// 0x999d2b0
	int GetNumBones();// 0x999cef0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x999ca64
	FName GetCurrentSkinWeightProfileName();// 0xa3896c8
	FName GetBoneName(int BoneIndex);// 0x999cdb8
	int GetBoneIndex(FName BoneName);// 0x999ce54
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x999bdd8
	void ClearVertexColorOverride(int LODIndex);// 0x999c740
	void ClearSkinWeightProfile();// 0x999c4d0
	void ClearSkinWeightOverride(int LODIndex);// 0x999c584
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x999c25c

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x560, Size: 0x10]
	int TargetLodLevel;//[Offset: 0x570, Size: 0x4]
	bool bUseCustomDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574, Size: 0x1]
	float[] DistanceArray;//[Offset: 0x578, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x99300f0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x9930250
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xa3697f0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xa3699e8
	FName[] GetMaterialSlotNames();// 0x99303b0
	MaterialInterface*[] GetMaterials();// 0x9930488
	int GetMaterialIndex(FName MaterialSlotName);// 0xa369acc

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x50, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x6c, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x88, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x94, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xa0, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xb0, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xc0, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x120, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x124, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x125, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x126, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x127, Size: 0x1]
	bool bUseVertexCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x127, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x127, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x127, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x127, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x127, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x128, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x130, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x138, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x140, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x150, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2d8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x2e0, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x2f0, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x320, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x330, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x350, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x9990dbc
	int NumSockets();// 0x99905b8
	FString[] K2_GetAllMorphTargetNames();// 0x9990b0c
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x99903c4
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x99904f0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x9990d38
	BoxSphereBounds GetImportedBounds();// 0x9990e3c
	BoxSphereBounds GetBounds();// 0x9990e9c
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x9990604
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x99908d4
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x9990a88
	int[] CheckSkinnedBoneSectionNum(int Threshold);// 0x99901d4
	int[] CheckExtraBoneReferences();// 0x99902ec

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	float StreamableFirstChunkSize;//[Offset: 0xc0, Size: 0x4]
	float StreamableFollowingChunkSize;//[Offset: 0xc4, Size: 0x4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xf0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xf8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x170, Size: 0x1]
	byte RefPoseType;//[Offset: 0x171, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x178, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x180, Size: 0x4]
	FName RetargetSource;//[Offset: 0x184, Size: 0x8]
	bool bDisableRetargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	enum Interpolation;//[Offset: 0x18d, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x18f, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x198, Size: 0x10]
	AnimStreameableFrameGroup StreamableFrameGroups;//[Offset: 0x1bc, Size: 0x8]
	float ClosestScreenPercentage;//[Offset: 0x1c4, Size: 0x4]
	bool AlwaysHighestForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	int GetRawTrackNum();// 0x97ff200
	void BPSwitchFidelity(enum inFidelity);// 0x97ff178
	void BPStreamOutTrackCluster(int inTrackClusterIndex);// 0x97ff068
	void BPStreamInTrackCluster(int inTrackClusterIndex);// 0x97ff0f0

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AnimStreameableFrameGroup
	FName FrameGroupName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x999a1e8
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x999a31c

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x268, Size: 0x10]
	<int,int> BoneClusterIndex;//[Offset: 0x278, Size: 0x50]
	int BoneClusterCount;//[Offset: 0x2c8, Size: 0x4]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x2d0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x68, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0xa367c08
	PhysicalMaterial* GetPhysicalMaterial();// 0xa367e98
	Material* GetBaseMaterial();// 0x992d390

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x24, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x34, Size: 0x4]
	float NormalScale;//[Offset: 0x38, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x3c, Size: 0x4]
	float IOR;//[Offset: 0x40, Size: 0x4]
	float Roughness0;//[Offset: 0x44, Size: 0x4]
	float Roughness1;//[Offset: 0x48, Size: 0x4]
	float LobeMix;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bUseGlobalBakeTextureDiffuseValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0x90, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xa4, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0xb8, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0xcc, Size: 0xc]
	byte MaterialDomain;//[Offset: 0xe0, Size: 0x1]
	byte BlendMode;//[Offset: 0xe1, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0xe2, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0xe3, Size: 0x1]
	byte ShadingModel;//[Offset: 0xe4, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0xe6, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0xe8, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0xf0, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x104, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x118, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x130, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x144, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 0x1]
	bool bEnableLDRACESFit;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 0x1]
	bool WireAA;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x158, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x159, Size: 0x1]
	float WireAARadius;//[Offset: 0x15c, Size: 0x4]
	int NumCustomizedUVs;//[Offset: 0x160, Size: 0x4]
	int ExtraMaterialFlags;//[Offset: 0x164, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x168, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x16c, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x174, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x178, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x17c, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x180, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x184, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x188, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x198, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19c, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19c, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19c, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19c, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19c, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19c, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19c, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19d, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19e, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithMultiProbe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19e, Size: 0x1]
	bool bUsedWithILC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19f, Size: 0x1]
	bool bUsedWithLocalVertexFactory;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19f, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19f, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19f, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19f, Size: 0x1]
	bool bUsingIn3DUIPass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19f, Size: 0x1]
	bool bDisableIBLSpecular;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19f, Size: 0x1]
	bool bUseInstanceSHVertexLit;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19f, Size: 0x1]
	bool bCSMHardBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 0x1]
	bool bForcePCFOneX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a0, Size: 0x1]
	bool bDynamicLightScalar;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a0, Size: 0x1]
	bool bDynamicLightScalarPrimitiveData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a0, Size: 0x1]
	bool bAdditiveFadeBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a0, Size: 0x1]
	bool bISMMobilityStationary;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a0, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a0, Size: 0x1]
	bool bSpecularAA;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a0, Size: 0x1]
	bool bIsUseNonLinearDiffuseTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a1, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a1, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a1, Size: 0x1]
	bool bUseLightmapDirectionalInTangent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a1, Size: 0x1]
	bool bUseFPPZoffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a1, Size: 0x1]
	bool bUseDither;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a1, Size: 0x1]
	bool bUseDitherMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a1, Size: 0x1]
	bool bUsedWithMobileBentNormalGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a1, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a2, Size: 0x1]
	bool bTranslucencyOptimization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a2, Size: 0x1]
	bool bUsesMobileDynamicPointLights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a2, Size: 0x1]
	bool bWS3DUIUseACESFit;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a2, Size: 0x1]
	bool bMixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a2, Size: 0x1]
	bool bIgnoreTonemapping;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a2, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a2, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a2, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a3, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1a4, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a5, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a5, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x1a8, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 0x1]
	byte ShadingRate;//[Offset: 0x1ad, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ae, Size: 0x1]
	MaterialExpression*[] Expressions;//[Offset: 0x1b0, Size: 0x10]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x1d0, Size: 0x10]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e0, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e0, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e0, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e0, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e0, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e0, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e0, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e0, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e1, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e1, Size: 0x1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e1, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e1, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x1e4, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x1e8, Size: 0x1]
	int BlendablePriority;//[Offset: 0x1ec, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	byte StencilCompare;//[Offset: 0x1f2, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x1f3, Size: 0x1]
	byte RefractionMode;//[Offset: 0x1f4, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x1f8, Size: 0x4]
	Guid StateID;//[Offset: 0x1fc, Size: 0x10]
	bool[] CachedQualityLevelsUsed;//[Offset: 0x218, Size: 0x10]
	Object*[] ExpressionTextureReferences;//[Offset: 0x2c8, Size: 0x10]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bFunctionUseFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x58, Size: 0x10]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateID;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateID;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateID;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateID;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x18, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x58, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x68, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x78, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x80, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x88, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0x90, Size: 0x10]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x108, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x248, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x97ec2c8
	Pawn* TryGetPawnOwner();// 0xa3150c4
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x50d1198
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x97ef044
	void SetSubInstanceClassByTag(FName InTag, class AnimInstance InClass);// 0x97ed484
	void SetRootMotionMode(byte Value);// 0x97ed2b8
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x97ec5dc
	void SetLayerOverlay(class AnimInstance InClass);// 0x97ed3f0
	void SavePoseSnapshot(FName SnapshotName);// 0x97ef158
	void ResetDynamics(enum InTeleportType);// 0x97ebd9c
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x97eeb40
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x97eedec
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x97ee78c
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x97edbec
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x97ee07c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x97ee29c
	void Montage_Resume(const AnimMontage* Montage);// 0x97ee59c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x97ee874
	void Montage_Pause(const AnimMontage* Montage);// 0x570d024
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x97ee3cc
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x97ee4b4
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x97ede0c
	bool Montage_IsActive(const AnimMontage* Montage);// 0x97edeac
	float Montage_GetPosition(const AnimMontage* Montage);// 0x97edcd4
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x97ed79c
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x97edb4c
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x97edd70
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x97ed974
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x97ec3c0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x97ebef8
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x97eea50
	bool IsAnyMontagePlaying();// 0x97ed764
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x97ec088
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x97ec178
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x97ebe44
	void GetSubInstancesByTag(FName InTag, out AnimInstance*[] OutSubInstances);// 0x97ed56c
	AnimInstance* GetSubInstanceByTag(FName InTag);// 0x97ed694
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x49a3580
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x4ae8774
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x47a02ec
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x97eca0c
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x97ecafc
	SkeletalMeshComponent* GetOwningComponent();// 0x97ef008
	Actor* GetOwningActor();// 0xa3150a4
	AnimInstance* GetLayerSubInstanceByGroup(FName InGroup);// 0x97ed354
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x97ecbec
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x97eccdc
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x97ecdcc
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x97ecf58
	float GetInstanceMachineWeight(int MachineIndex);// 0x97ed048
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x97ecebc
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x5022670
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x4ac0a44
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x97ed0e4
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x97ed180
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x97ed21c
	float GetCurveValue(FName CurveName);// 0x97ec95c
	FName GetCurrentStateName(int MachineIndex);// 0x97ec6c4
	AnimMontage* GetCurrentActiveMontage();// 0x97ed730
	void GetAllCurveNames(out FName[] OutNames);// 0x97ec760
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x97ec834
	void ClearMorphTargets();// 0x97ec5c8
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x97ec4b8
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xa1d39f8
	void BlueprintPostEvaluateAnimation();// 0xa1d39f8
	void BlueprintInitializeAnimation();// 0xa1d39f8
	void BlueprintBeginPlay();// 0xa1d39f8

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x88, Size: 0x8]
	byte BlueprintType;//[Offset: 0x90, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x94, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50]
	FName AttachToName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x90, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x98, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa8, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb8, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc8, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x9846160

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	Quat GetRotationValue(float InTime);// 0x9844ef4
	LinearColor GetLinearColorValue(float InTime);// 0xa32be9c
	LinearColor GetClampedLinearColorValue(float InTime);// 0xa32bdb8

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void PhysicsAssetUpdated();// 0xa297b4c
	void ClothConfigUpdated();// 0xa297b30

--------------------------------
Class: AnimNotifyState.Object
	bool bIsNotifyWithTriggerTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0xa1d39f8
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xa1d39f8
	bool Received_NotifyBegin_With_TriggerTime(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration, float TriggerTime, bool bIsBranchingPoint);// 0xa1d39f8
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0xa1d39f8
	FString GetNotifyName();// 0x97fe0c0

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xe9, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x190, Size: 0x8]
	float GravityScale;//[Offset: 0x198, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x19c, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x1a0, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x1a4, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1a8, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x1ac, Size: 0x4]
	bool EnableSimulationOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool EnableDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	bool EnableFastDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 0x1]
	float UseDRAcceleration;//[Offset: 0x1b4, Size: 0x4]
	float UseDRRotationSpeed;//[Offset: 0x1b8, Size: 0x4]
	bool NetNeedDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	bool bLastHasBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 0x1]
	Vector LastNotZeroDRVelocity;//[Offset: 0x1c0, Size: 0xc]
	Vector DRVelocity;//[Offset: 0x1cc, Size: 0xc]
	Vector DRAcceleration;//[Offset: 0x1d8, Size: 0xc]
	Quat DRRotationSpeed;//[Offset: 0x1f0, Size: 0x10]
	float DRLerpTime;//[Offset: 0x228, Size: 0x4]
	float DRSimulateTime;//[Offset: 0x22c, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x230, Size: 0x4]
	bool bAllForDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bDRFindFllor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	float DRFindFloorInterval;//[Offset: 0x238, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x23c, Size: 0x4]
	PrimitiveComponent* DRBase;//[Offset: 0x248, Size: 0x8]
	FName DRBoneName;//[Offset: 0x250, Size: 0x8]
	bool DRLocationReach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	int NeedMovementLodNum;//[Offset: 0x27c, Size: 0x4]
	byte MovementMode;//[Offset: 0x290, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x291, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x292, Size: 0x1]
	float GroundFriction;//[Offset: 0x294, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x2bc, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x2c0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x2c4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x2c8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x2cc, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x2d0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x2d4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x2d8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x2dc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x2e0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x2e4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x2e8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x2ec, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x2f0, Size: 0x4]
	float AirControl;//[Offset: 0x2f4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x2f8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x2fc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x300, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x304, Size: 0x4]
	float Buoyancy;//[Offset: 0x308, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x30c, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x310, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x314, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x320, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x320, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x321, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x321, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x321, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x321, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x321, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x321, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x321, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x322, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x322, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x322, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x322, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x322, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x322, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x322, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x323, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x328, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x330, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x334, Size: 0x4]
	float Mass;//[Offset: 0x338, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x33c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x340, Size: 0x4]
	float PushForceFactor;//[Offset: 0x344, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x348, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x34c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x350, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x354, Size: 0x4]
	float RepulsionForce;//[Offset: 0x358, Size: 0x4]
	Vector Acceleration;//[Offset: 0x35c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x370, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x380, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x38c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x398, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x39c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x3a0, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x3a4, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x3b0, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x3bc, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x3cc, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x3d0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x3d4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x3d8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x3dc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x3e0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x3e4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x3e8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x3ec, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x3f0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x3f4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x3f8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x3fc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x400, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x404, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x408, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x40c, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x410, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x414, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x418, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x41c, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x420, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x4b4, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x4b5, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x4b6, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b7, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4b7, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4b7, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4b7, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4b7, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4b7, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4b7, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4b7, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b8, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4b8, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4b8, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4b8, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4b8, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4b8, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4b8, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4b8, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b9, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4b9, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4b9, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4b9, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4b9, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4b9, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4b9, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ba, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4ba, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4ba, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4ba, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4ba, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4ba, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x4cc, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x4d0, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x4dc, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x4e0, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x4e4, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x4e8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x4ec, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x4f0, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x5a0, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x5a4, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x5a8, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x5ac, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x5b0, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x5b4, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x5b8, Size: 0x60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x630, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x638, Size: 0xf8]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x7c0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x800, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x9839b98
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x9839cec
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x983a470
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x983a674
	void SetGroupsToIgnore(int GroupFlags);// 0x983a748
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x983a80c
	void SetGroupsToAvoid(int GroupFlags);// 0x983a8e0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x983a9a4
	void SetAvoidanceGroup(int GroupFlags);// 0x983aa78
	void SetAvoidanceEnabled(bool bEnable);// 0x983a5b0
	float K2_GetWalkableFloorZ();// 0x9839cb0
	float K2_GetWalkableFloorAngle();// 0x9839df8
	float K2_GetModifiedMaxAcceleration();// 0xa328a18
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x9839a2c
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x9839750
	bool IsWalking();// 0xa328b64
	bool IsWalkable(out const HitResult Hit);// 0x9839e34
	float GetValidPerchRadius();// 0x9839f30
	float GetPerchRadiusThreshold();// 0x9839f64
	PrimitiveComponent* GetMovementBase();// 0x573e5b4
	float GetMinAnalogSpeed();// 0xa328a54
	float GetMaxJumpHeightWithJumpTime();// 0xa328a90
	float GetMaxJumpHeight();// 0xa328acc
	float GetMaxBrakingDeceleration();// 0xa3289a0
	float GetMaxAcceleration();// 0xa3289dc
	Vector GetLastUpdateVelocity();// 0xa328bc0
	Rotator GetLastUpdateRotation();// 0x983ab3c
	Vector GetLastUpdateLocation();// 0xa328be8
	Vector GetImpartedMovementBaseVelocity();// 0xa328b08
	Vector GetCurrentAcceleration();// 0x983a1f4
	Character* GetCharacterOwner();// 0xa328ba4
	float GetAnalogInputModifier();// 0x983a1b8
	void DisableMovement();// 0xa328b48
	void ClearAccumulatedForces();// 0xa328984
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x98393f0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x983a22c
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x983a070
	void AddForce(Vector Force);// 0x9839fac

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x178, Size: 0x8]
	Vector K2_GetInputVector();// 0x9956f00
	bool IsMoveInputIgnored();// 0xa37168c
	Vector GetPendingInputVector();// 0x9956fe4
	Pawn* GetPawnOwner();// 0x9956f78
	Vector GetLastInputVector();// 0x9956fac
	Vector ConsumeInputVector();// 0xa3716cc
	void AddInputVector(Vector WorldVector, bool bForce);// 0x995701c

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x138, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x168, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16c, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16c, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x16d, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x170, Size: 0x8]
	void StopMovementKeepPathing();// 0xa36c458
	void StopActiveMovement();// 0xa36c4a8
	bool IsSwimming();// 0xa36c358
	bool IsMovingOnGround();// 0xa36c398
	bool IsFlying();// 0xa36c318
	bool IsFalling();// 0xa36c3d8
	bool IsCrouching();// 0xa36c418

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xf8, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x100, Size: 0x8]
	Vector Velocity;//[Offset: 0x10c, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0x118, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0x124, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x130, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x130, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x130, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x130, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x130, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x130, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x133, Size: 0x1]
	void StopMovementImmediately();// 0xa36aa18
	void SnapUpdatedComponentToPlane();// 0xa36a9a4
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x9933b44
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x99334bc
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x99336c0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x9933580
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x99333f0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x9933784
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x9933c08
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x9933848
	float K2_GetModifiedMaxSpeed();// 0xa36aa34
	float K2_GetMaxSpeedModifier();// 0xa36aa70
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x9933ccc
	Vector GetPlaneConstraintOrigin();// 0x9933360
	Vector GetPlaneConstraintNormal();// 0x99333a8
	enum GetPlaneConstraintAxisSetting();// 0xa36a9c0
	PhysicsVolume* GetPhysicsVolume();// 0xa36a9dc
	float GetMaxSpeed();// 0xa36aaac
	float GetGravityZ();// 0xa36aae8
	Vector ConstrainNormalToPlane(Vector Normal);// 0x99330d8
	Vector ConstrainLocationToPlane(Vector Location);// 0x99331b0
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x9933288

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x578, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x57c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x9833290
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x983312c
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x9832fc8
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xa325d10
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xa325ea0
	float GetUnscaledCapsuleRadius();// 0xa326068
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0xa326028
	float GetUnscaledCapsuleHalfHeight();// 0xa32604c
	float GetShapeScale();// 0xa325cd0
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xa326084
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xa326244
	float GetScaledCapsuleRadius();// 0xa32644c
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0xa3263e8
	float GetScaledCapsuleHalfHeight();// 0xa326428

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x560, Size: 0x8]
	Color ShapeColor;//[Offset: 0x568, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56c, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56c, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x570, Size: 0x8]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	float Timestamp;//[Offset: 0x8, Size: 0x4]
	FName BoneName;//[Offset: 0xc, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x158]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0xf8]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x140, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x14c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x338, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x340, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x348, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x350, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x358, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x360, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	byte TargetViewRotationPitch;//[Offset: 0x369, Size: 0x1]
	uint16 TargetViewRotationYaw;//[Offset: 0x36a, Size: 0x2]
	byte TargetViewRotationRoll;//[Offset: 0x36c, Size: 0x1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x388, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x398, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3a8, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x3bc, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3c0, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3cc, Size: 0xc]
	int ClientCap;//[Offset: 0x3d8, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x3e0, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x3e8, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x3f0, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3f8, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x478, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x479, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x4b8, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x4c0, Size: 0x8]
	float InputYawScale;//[Offset: 0x4d4, Size: 0x4]
	float InputPitchScale;//[Offset: 0x4d8, Size: 0x4]
	float InputRollScale;//[Offset: 0x4dc, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e0, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e0, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e0, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e0, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e0, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e0, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x4e4, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x4e8, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x4f8, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x4f9, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x4fa, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x4fb, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x4fc, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x500, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x502, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x578, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x580, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x598, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x648, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x658, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x99630ec
	bool WasInputKeyJustPressed(Key Key);// 0x99632ac
	void ToggleSpeaking(bool bInSpeaking);// 0xa378f14
	void SwitchLevel(FString URL);// 0x996807c
	void StopHapticEffect(enum Hand);// 0x9965144
	void StartFire(byte FireModeNum);// 0xa3790d4
	void SetVirtualJoystickVisibility(bool bVisible);// 0xa3758a0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0xa37548c
	void SetName(FString S);// 0x9968184
	void SetMouseLocation(const int X, const int Y);// 0x9966954
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x99657a4
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x9964f60
	void SetDisableHaptics(bool bNewDisabled);// 0xa376444
	void SetControllerLightColor(Color Color);// 0x9964e28
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xa375114
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x9961ec0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x9961d34
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x9963930
	void ServerViewPrevPlayer();// 0x9963a44
	void ServerViewNextPlayer();// 0x9963aa0
	void ServerVerifyViewTarget();// 0x9963afc
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x9963b58
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x4cdc16c
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x9963c78
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x99662c4
	void ServerToggleAILogging();// 0x996362c
	void ServerShortTimeout();// 0x9963e10
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x9968654
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x9963f24
	void ServerRestartPlayer();// 0x99640c0
	void ServerPause();// 0x996411c
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x9964178
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x996660c
	void ServerCheckClientPossessionReliable();// 0x9963e6c
	void ServerCheckClientPossession();// 0x9963ec8
	void ServerChangeName(FString S);// 0x9964268
	void ServerCamera(FName NewMode);// 0x9964398
	void ServerAcknowledgePossession(Pawn* P);// 0x9964498
	void SendToConsole(FString Command);// 0x9965d14
	void RestartLevel();// 0xa3792a0
	void ResetControllerLightColor();// 0x9964db0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x9966aa8
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x9965214
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x599df28
	void Pause();// 0xa3791ac
	void OnServerStartedVisualLogger(bool bIsLogging);// 0xa375034
	void OnRep_TargetViewRotationYaw();// 0xa379490
	void OnRep_TargetViewRotationRoll();// 0x524a458
	void OnRep_TargetViewRotationPitch();// 0xa3794c8
	void LocalTravel(FString URL);// 0x996854c
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x996548c
	bool IsInputKeyDown(Key Key);// 0x996346c
	void InitVirtualJoystickBySetting();// 0xa375884
	void GetViewportSize(out int SizeX, out int SizeY);// 0x579ed64
	SpectatorPawn* GetSpectatorPawn();// 0xa375018
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x99625ec
	Vector GetInputVectorKeyState(Key Key);// 0x9962d70
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x9962a20
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x99622b0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x9962778
	float GetInputKeyTimeDown(Key Key);// 0x9962430
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x99620a8
	float GetInputAnalogKeyState(Key Key);// 0x9962f30
	HUD* GetHUD();// 0xa376cbc
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x996716c
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x9967460
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x9967710
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x99679c0
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x9967c2c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x9967e54
	Vector GetFocalLocation();// 0xa374fd8
	void FOV(float NewFOV);// 0xa3792bc
	void EnableCheats();// 0xa379394
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection, bool bRebasing);// 0x9966cb8
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x9966fe0
	void ConsoleKey(Key Key);// 0xa378d44
	void ClientWasKicked(const FText KickReason);// 0x9964598
	void ClientVoiceHandshakeComplete();// 0xa378ef8
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x9964750
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0xa376104
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x9965e1c
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x9964858
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x9964b08
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x9963688
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0xa376524
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0xa3767fc
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0xa37696c
	void ClientStartOnlineSession();// 0xa3760e8
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xa376a60
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0xa376b38
	void ClientSetSpectatorWaiting(bool bWaiting);// 0xa3793b0
	void ClientSetHUD(class HUD NewHUDClass);// 0xa376cd8
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0xa376db0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0xa376fa0
	void ClientSetCameraMode(FName NewCamMode);// 0xa377258
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0xa377330
	void ClientSetBlockOnAsyncLoading();// 0xa377638
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x996828c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x9968444
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xa375ff4
	void ClientRestart(Pawn* NewPawn);// 0xa377654
	void ClientReset();// 0xa37772c
	void ClientRepObjRef(Object* Object);// 0xa3791c8
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0xa375ce0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0xa377748
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0xa3779c8
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0xa377bc8
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xa377e3c
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0xa37668c
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0xa37802c
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0xa3782a4
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x9966070
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x9965904
	void ClientIgnoreMoveInput(bool bIgnore);// 0xa378810
	void ClientIgnoreLookInput(bool bIgnore);// 0xa3788f0
	void ClientGotoState(FName NewState);// 0xa3789d0
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0xa378aa8
	void ClientForceGarbageCollection();// 0xa378c18
	void ClientFlushLevelStreaming();// 0x5b90f28
	void ClientEndOnlineSession();// 0xa3760cc
	void ClientEnableNetworkVoice(bool bEnable);// 0xa378ff4
	void ClientCommitMapChange();// 0xa378c34
	void ClientClearCameraLensEffects();// 0xa376a44
	void ClientCapBandwidth(int Cap);// 0xa378c50
	void ClientCancelPendingMapChange();// 0xa378d28
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x9965b24
	void ClearAudioListenerOverride();// 0x9961e94
	void ClearAudioListenerAttenuationOverride();// 0x9961d08
	bool CanRestartPlayer();// 0xa37544c
	void Camera(FName NewMode);// 0xa3757ac
	void AddYawInput(float Val);// 0xa375b30
	void AddRollInput(float Val);// 0xa375a58
	void AddPitchInput(float Val);// 0xa375c08
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0xa375980

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x270, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x278, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x27c, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x288, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x2a0, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x2b0, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x2c0, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x2c8, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x2d0, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2e0, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2e8, Size: 0x8]
	void ShowHUD();// 0xa3391a0
	void ShowDebugToggleSubCategory(FName Category);// 0x9885918
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x9885888
	void ShowDebug(FName DebugType);// 0x9885994
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x98857b4
	void RemoveAllDebugStrings();// 0x9885874
	void ReceiveHitBoxRelease(const FName BoxName);// 0xa1d39f8
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xa1d39f8
	void ReceiveHitBoxClick(const FName BoxName);// 0xa1d39f8
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0xa1d39f8
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0xa1d39f8
	Vector Project(Vector Location);// 0x988430c
	void PreviousDebugTarget();// 0xa339168
	void NextDebugTarget();// 0xa339184
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x98855e8
	PlayerController* GetOwningPlayerController();// 0x9883de4
	Pawn* GetOwningPawn();// 0x9883d98
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x9883f94
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x9884b80
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x9884cf0
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x98853d0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x98850c8
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x988439c
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x9884648
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x988482c
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x988522c
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x98841c0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x9883e20
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x612e31c

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x982f3cc
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x982f5e8
	Vector K2_Project(Vector WorldLocation);// 0x982f97c
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x982fff8
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x983184c
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x9830d38
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x982fb08
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x982fdf8
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x9831450
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x9831d64
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x98301f8
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x9830470
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x982f780

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xdc, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xe0, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe4, Size: 0x1]
	byte AddressX;//[Offset: 0xe5, Size: 0x1]
	byte AddressY;//[Offset: 0xe6, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xe8, Size: 0x8]
	int Blueprint_GetSizeY();// 0x99c1278
	int Blueprint_GetSizeX();// 0x99c12c4

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x50, Size: 0x10]
	int LODBias;//[Offset: 0x60, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x64, Size: 0x1]
	byte Filter;//[Offset: 0x65, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x66, Size: 0x1]
	byte LODGroup;//[Offset: 0x67, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInUltraQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bCookedForHD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	float LoadPriorityFactor;//[Offset: 0x40, Size: 0x4]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]
	SoftObjectPath FontSoftPath;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	Int32Range[] CharacterRangesCache;//[Offset: 0x28, Size: 0x10]
	FString Cultures;//[Offset: 0x38, Size: 0x10]
	FString JustCultures;//[Offset: 0x48, Size: 0x10]
	FString CommonFlag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x270, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x278, Size: 0x8]
	float DefaultFOV;//[Offset: 0x288, Size: 0x4]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x290, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x298, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x2a0, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2f0, Size: 0x6c0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x9b0, Size: 0x6c0]
	TViewTarget ViewTarget;//[Offset: 0x1070, Size: 0x6d0]
	TViewTarget PendingViewTarget;//[Offset: 0x1740, Size: 0x6d0]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1e30, Size: 0x6c0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x24f0, Size: 0x6c0]
	CameraModifier*[] ModifierList;//[Offset: 0x2bb0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2bc0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2bd0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2bd4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2be0, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2c00, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2c10, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2c18, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2c58, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2c78, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2c88, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2c98, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ca0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ca0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ca0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ca0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ca1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2ca4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2ca8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2cac, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2cb0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2cb4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2cb8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2cc0, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0xa373ed0
	void StopCameraFade();// 0xa3738d0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0xa372e38
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0xa373d60
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0xa372fa8
	void StopAllCameraShakes(bool bImmediately);// 0xa373c80
	void StopAllCameraAnims(bool bImmediate);// 0xa372d58
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0xa3738ec
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0xa3736d8
	void SetGameCameraCutThisFrame();// 0xa372d34
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0xa3748a8
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0xa374634
	void PlayShakeCamera(CameraShake* CameraShake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0xa3742c0
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0xa374040
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0xa373118
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0xa374bf8
	void OnPhotographySessionStart();// 0xa374bdc
	void OnPhotographySessionEnd();// 0xa374bc0
	void OnPhotographyMultiPartCaptureStart();// 0xa374ba4
	void OnPhotographyMultiPartCaptureEnd();// 0xa374b88
	PlayerController* GetOwningPlayerController();// 0xa374b4c
	float GetFOVAngle();// 0xa37486c
	Rotator GetCameraRotation();// 0xa37482c
	Vector GetCameraLocation();// 0xa3747ec
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0xa37498c
	CameraShake* CreateShakeCamera(class CameraShake ShakeClass);// 0xa374538
	void ClearCameraLensEffects();// 0xa374618
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xa1d39f8
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0xa374a6c
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xa37470c

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0xa1d39f8
	void ReceivePlayShake(float Scale);// 0xa1d39f8
	bool ReceiveIsFinished();// 0xa324480
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0xa1d39f8

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x20, Size: 0x4]
	float DesiredFOV;//[Offset: 0x24, Size: 0x4]
	float OrthoWidth;//[Offset: 0x28, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 0x4]
	float AspectRatio;//[Offset: 0x34, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x39, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x620]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x660, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_ACESFitParam;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_WhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_ColorGradingParam2;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_ColorGradingParam3;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_Brightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMaxHeight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRClampNumMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRClampNumMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMinBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMaxBrightness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_Fog_FogColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_Fog_DistanceNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DistanceFar;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_Density;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_MinFogHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_MaxFogHeight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringStartDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	byte BloomMethod;//[Offset: 0x1b, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x1c, Size: 0x1]
	float WhiteTemp;//[Offset: 0x20, Size: 0x4]
	float WhiteTint;//[Offset: 0x24, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float FilmSlope;//[Offset: 0x180, Size: 0x4]
	float FilmToe;//[Offset: 0x184, Size: 0x4]
	float FilmShoulder;//[Offset: 0x188, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x18c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x190, Size: 0x4]
	Vector4 ACESFitParam;//[Offset: 0x1a0, Size: 0x10]
	float WhitePoint;//[Offset: 0x1b0, Size: 0x4]
	Vector4 ColorGradingParam2;//[Offset: 0x1c0, Size: 0x10]
	Vector2D ColorGradingParam3;//[Offset: 0x1d0, Size: 0x8]
	LinearColor FilmWhitePoint;//[Offset: 0x1d8, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1e8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1f8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1fc, Size: 0x4]
	float FilmSaturation;//[Offset: 0x200, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x204, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x214, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x224, Size: 0x10]
	float FilmContrast;//[Offset: 0x234, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x238, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x23c, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x240, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x244, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x254, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x258, Size: 0x4]
	float Brightness;//[Offset: 0x25c, Size: 0x4]
	float LDRBrightness;//[Offset: 0x260, Size: 0x4]
	float BloomIntensity;//[Offset: 0x268, Size: 0x4]
	float BloomThreshold;//[Offset: 0x26c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x270, Size: 0x4]
	float Bloom1Size;//[Offset: 0x274, Size: 0x4]
	float Bloom2Size;//[Offset: 0x278, Size: 0x4]
	float Bloom3Size;//[Offset: 0x27c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x280, Size: 0x4]
	float Bloom5Size;//[Offset: 0x284, Size: 0x4]
	float Bloom6Size;//[Offset: 0x288, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x28c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2cc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2dc, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2ec, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2f0, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2f8, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x300, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x304, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x308, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x30c, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x310, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x318, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x31c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x32c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x33c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x340, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x348, Size: 0x4]
	float CameraISO;//[Offset: 0x34c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x350, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x354, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x358, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x35c, Size: 0x4]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x360, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x368, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x36c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x370, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x374, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x378, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x37c, Size: 0x4]
	float AutoExposureLDRMaxHeight;//[Offset: 0x380, Size: 0x4]
	int AutoExposureLDRClampNumMin;//[Offset: 0x384, Size: 0x4]
	int AutoExposureLDRClampNumMax;//[Offset: 0x388, Size: 0x4]
	float AutoExposureLDRMinBrightness;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureLDRMaxBrightness;//[Offset: 0x390, Size: 0x4]
	float AutoExposureLDRBias;//[Offset: 0x394, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x398, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x39c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x3a0, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x3a4, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x3a8, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3b8, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3bc, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3c0, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3c8, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x448, Size: 0x4]
	float GrainJitter;//[Offset: 0x44c, Size: 0x4]
	float GrainIntensity;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x45c, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x464, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x468, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x46c, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x470, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x474, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x484, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x48c, Size: 0x4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x490, Size: 0x10]
	float SRTIndirectLightingIntensity;//[Offset: 0x4a0, Size: 0x4]
	float SRTMaxOcclusionDistance;//[Offset: 0x4a4, Size: 0x4]
	float SRTOcclusionContrast;//[Offset: 0x4a8, Size: 0x4]
	float SRTOcclusionExponent;//[Offset: 0x4ac, Size: 0x4]
	float SRTMinOcclusion;//[Offset: 0x4b0, Size: 0x4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x4b4, Size: 0x4]
	float SRTSpecularMinOcclusion;//[Offset: 0x4b8, Size: 0x4]
	LinearColor SRTOcclusionTint;//[Offset: 0x4bc, Size: 0x10]
	float SRTFilterSmoothness;//[Offset: 0x4cc, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x4d0, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4e0, Size: 0x4]
	bool RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e4, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4e8, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4ec, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4f0, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4f8, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x500, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x504, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x508, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x50c, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x510, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x514, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x518, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x51c, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x520, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x524, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x528, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x52c, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x530, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x534, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x538, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x53c, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x540, Size: 0x4]
	float LPVIntensity;//[Offset: 0x544, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x548, Size: 0x4]
	float LPVSize;//[Offset: 0x54c, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x550, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x554, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x558, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x55c, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x560, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x564, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x568, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x56c, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x570, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x574, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x578, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x57c, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x580, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x584, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x588, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x58c, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x590, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x594, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x595, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x598, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x59c, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x5a0, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x5a4, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a5, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x5a8, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x5ac, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x5b0, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x5b4, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x5b8, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x5c0, Size: 0x10]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x5d0, Size: 0x4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x5d4, Size: 0x4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x5d8, Size: 0x4]
	LinearColor Fog_FogColor;//[Offset: 0x5dc, Size: 0x10]
	float Fog_DistanceNear;//[Offset: 0x5ec, Size: 0x4]
	float Fog_DistanceFar;//[Offset: 0x5f0, Size: 0x4]
	float Fog_Density;//[Offset: 0x5f4, Size: 0x4]
	float Fog_MinFogHeight;//[Offset: 0x5f8, Size: 0x4]
	float Fog_MaxFogHeight;//[Offset: 0x5fc, Size: 0x4]
	LinearColor Fog_DirectionalInscatteringColor;//[Offset: 0x600, Size: 0x10]
	float Fog_DirectionalInscatteringExponent;//[Offset: 0x610, Size: 0x4]
	float Fog_DirectionalInscatteringStartDistance;//[Offset: 0x614, Size: 0x4]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x620]
	float BasePostProcessBlendWeight;//[Offset: 0x680, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x982baa0
	void SetScale(float NewDuration);// 0x982b8f8
	void SetDuration(float NewDuration);// 0x982b9d0

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0xa3243e8
	Actor* GetViewTarget();// 0xa3243ac
	void EnableModifier();// 0xa3242b0
	void DisableModifier(bool bImmediate);// 0xa3242cc
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xa1d39f8
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xa1d39f8

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2c0, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x2c8, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x2d0, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x2e0, Size: 0x30]
	float BaseFOV;//[Offset: 0x310, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x318, Size: 0x10]
	float DistFromCamera;//[Offset: 0x328, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x270, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x278, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x280, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x290, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x2a0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x2b0, Size: 0x10]
	void ToggleActive();// 0x985866c
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x98582b8
	void SetTemplate(ParticleSystem* NewTemplate);// 0x9858558
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x9857ee8
	void SetFloatParameter(FName ParameterName, float Param);// 0x9858408
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x9858168
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x985801c
	void OnRep_bCurrentlyActive();// 0xa32efb0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x98586f0
	bool IsActive();// 0x985861c
	void Deactivate();// 0x98586dc
	void Activate();// 0x5b22c4c

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bEnableTranslucentOptimization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bRenderingInFullResolution;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool bCalCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float CoverageBoundScale;//[Offset: 0x64, Size: 0x4]
	float OverDrawScale;//[Offset: 0x68, Size: 0x4]
	float LODDistanceCheckTime;//[Offset: 0x6c, Size: 0x4]
	byte LODMethod;//[Offset: 0x70, Size: 0x1]
	float[] LODDistances;//[Offset: 0x78, Size: 0x10]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x90, Size: 0x10]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0xa4, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xc0, Size: 0x4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1]
	float Delay;//[Offset: 0xc8, Size: 0x4]
	float DelayLow;//[Offset: 0xcc, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xd4, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xd8, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xdc, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xe0, Size: 0x1]
	uint32 MaxPoolSize;//[Offset: 0xe4, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xe8, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xf4, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0xf8, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0xfc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0x118, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x128, Size: 0x10]
	FName[] Tags;//[Offset: 0x140, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x9951630

--------------------------------
Class: FXSystemAsset.Object

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	bool bSupportMergedCrossEmitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bFixedLODOverLifetime;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	int SubUVDataOffset;//[Offset: 0x34, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x38, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x39, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	Vector EmitterOrigin;//[Offset: 0x38, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x44, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x50, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	byte SortMode;//[Offset: 0x5d, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 0x1]
	float EmitterDuration;//[Offset: 0x60, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x64, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	int EmitterLoops;//[Offset: 0x6c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x70, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 0x10]
	float EmitterDelay;//[Offset: 0xc0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xc4, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xc9, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xcc, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xd0, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float RandomImageTime;//[Offset: 0xd8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xdc, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	int MaxDrawCount;//[Offset: 0xf8, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xfc, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0x100, Size: 0x8]
	byte BoundingMode;//[Offset: 0x108, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x109, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x10c, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0x110, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0x114, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0x120, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0x10, Size: 0x10]
	byte LockFlag;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x38]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 0x38]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x50]
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 0x50]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x50]
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x560, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x568, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x578, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x589, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x589, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x589, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x589, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58a, Size: 0x1]
	bool bParallelForForcedOnlyWorkerThread;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58a, Size: 0x1]
	byte LODMethod;//[Offset: 0x595, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x596, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x598, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x5a8, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x5b8, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5c8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5d8, Size: 0x10]
	Vector OldPosition;//[Offset: 0x5e8, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x5f4, Size: 0xc]
	float WarmupTime;//[Offset: 0x600, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x604, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x60c, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x614, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x638, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x650, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x6a8, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x6b0, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x6b8, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x6b9, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x6ba, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x6e8, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x995273c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x9952bb8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x9952c4c
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x9952d34
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x9953860
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x9953724
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x9953998
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x9953c0c
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x9953ad0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x9953d44
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x9953e7c
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x9954150
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x9953f6c
	void ReleaseToPool();// 0x9952728
	int GetNumActiveParticles();// 0x9952b84
	MaterialInterface* GetNamedMaterial(FName InName);// 0x9952590
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x9952f84
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x9952e2c
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x99530d4
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x995337c
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x9953224
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x99534cc
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x995361c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x99523c0
	void EndTrails();// 0x995293c
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x9952634
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x9952a04

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x9951f30
	void SetFloatParameter(FName ParameterName, float Param);// 0x9952020
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x9951e40
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x9951d50

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x992c598
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x992c7e8
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x992ca1c
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x992c2d4
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x992c4bc
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x992c710
	float K2_GetScalarParameterValue(FName ParameterName);// 0x992c944
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x992c16c
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x992bfcc
	void CopyInterpParameters(MaterialInstance* Source);// 0x992c09c

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0x90, Size: 0x8]
	MaterialParameterCollection* OverridedParameterCollection;//[Offset: 0x98, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xb0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xc0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xd0, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0xe0, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xf0, Size: 0x10]
	Object*[] PermutationTextureReferences;//[Offset: 0x110, Size: 0x10]
	StaticParameterSet StaticParameters;//[Offset: 0x120, Size: 0x40]
	uint32 ParamsHash;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_UseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool UseAsEarlyZ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_DisableDepthTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool DisableDepthTest;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_TranslucencyOptimization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool TranslucencyOptimization;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_MixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bMixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_EnableLDRACESFit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bEnableLDRACESFit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ExtraMaterialFlags;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	byte BlendMode;//[Offset: 0x3, Size: 0x1]
	byte ShadingModel;//[Offset: 0x4, Size: 0x1]
	byte ShadingRate;//[Offset: 0x5, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	int ExtraMaterialFlags;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x40]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD
	float WarmupTime;//[Offset: 0x0, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6b0]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6b0]
	PlayerState* PlayerState;//[Offset: 0x6c0, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x270, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x278, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x280, Size: 0x8]
	bool bEnableBeginPlayBrostCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	float AspectRatio;//[Offset: 0x294, Size: 0x4]
	float FOVAngle;//[Offset: 0x298, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x29c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2a0, Size: 0x620]
	int GetAutoActivatePlayerIndex();// 0x982b3c0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x258, Size: 0x4]
	float OrthoWidth;//[Offset: 0x25c, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x260, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x264, Size: 0x4]
	float AspectRatio;//[Offset: 0x268, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x270, Size: 0x4]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x275, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2b0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 0x620]
	void SetUseLODTransimitFOV(bool bInUseLODTransimitFOV);// 0xa323b80
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0xa323c60
	void SetProjectionMode(byte InProjectionMode);// 0xa3239e8
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0xa32391c
	void SetOrthoWidth(float InOrthoWidth);// 0xa324084
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0xa323fb8
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0xa323eec
	void SetLODTransimitFOV(float InLODTransimitFOV);// 0xa323ab4
	void SetFieldOfView(float InFieldOfView);// 0xa324150
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0xa323d40
	void SetAspectRatio(float InAspectRatio);// 0xa323e20
	void RemoveBlendable(interface classNone InBlendableObject);// 0x982c19c
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x982c4b0
	void FrustumCullActors(out Actor*[] InActorList, byte AxisConstraint, bool bIntersectPoint);// 0x982bf68
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x982c338

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0xa32971c
	void ViewSelf();// 0xa329674
	void ViewPlayer(FString S);// 0x983c854
	void ViewClass(class Actor DesiredClass);// 0x983c74c
	void ViewActor(FName ActorName);// 0x983c7d0
	void UpdateSafeArea();// 0x983bde4
	void ToggleServerStatReplicatorUpdateStatNet();// 0x983bdf8
	void ToggleServerStatReplicatorClientOverwrite();// 0x983be0c
	void ToggleDebugCamera();// 0xa329658
	void ToggleAILogging();// 0xa32963c
	void TestCollisionDistance();// 0xa3295b0
	void Teleport();// 0xa329754
	void Summon(FString ClassName);// 0x983c908
	void StreamLevelOut(FName PackageName);// 0x983c5c0
	void StreamLevelIn(FName PackageName);// 0x983c6c8
	void SpawnServerStatReplicator();// 0x983be34
	void Slomo(float NewTimeDilation);// 0x983cb48
	void SetWorldOrigin();// 0x983bf64
	void SetMouseSensitivityToDefault();// 0xa3294ec
	void ServerToggleAILogging();// 0x983c564
	void ReceiveInitCheatManager();// 0xa1d39f8
	void ReceiveEndPlay();// 0xa1d39f8
	void PlayersOnly();// 0xa329690
	void OnlyLoadLevel(FName PackageName);// 0x983c644
	void LogLoc();// 0xa329508
	void InvertMouse();// 0xa3294d0
	void God();// 0xa3296e4
	void Ghost();// 0xa329700
	void FreezeFrame(float Delay);// 0x983cc50
	void Fly();// 0xa329738
	void FlushLog();// 0xa329524
	void EnableDebugCamera();// 0xa3294b4
	void DumpVoiceMutingState();// 0xa329540
	void DumpPartyState();// 0xa329578
	void DumpOnlineSessionState();// 0xa329594
	void DumpChatState();// 0xa32955c
	void DisableDebugCamera();// 0xa329498
	void DestroyTarget();// 0xa3296c8
	void DestroyServerStatReplicator();// 0x983be20
	void DestroyPawns(class Pawn aClass);// 0x983c9bc
	void DestroyAllPawnsExceptTarget();// 0xa3296ac
	void DestroyAll(class Actor aClass);// 0x983ca40
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x983c4a4
	void DebugCapsuleSweepPawn();// 0xa3295e8
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x983c394
	void DebugCapsuleSweepClear();// 0xa3295cc
	void DebugCapsuleSweepChannel(byte Channel);// 0x983c420
	void DebugCapsuleSweepCapture();// 0xa329604
	void DebugCapsuleSweep();// 0xa329620
	void DamageTarget(float DamageAmount);// 0x983cac4
	void ClearUnloadLevelKeyword();// 0x983bd1c
	void CheatScript(FString ScriptName);// 0x983be48
	void ChangeSize(float F);// 0x983cbcc
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x983bf78
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x983c1ec
	void BugIt(FString ScreenShotDescription);// 0x983c138
	void AddUnloadLevelKeyword(FString Keyword);// 0x983bd34

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x66d, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x66d, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x66d, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x66d, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x66d, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x66d, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x66d, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x66d, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x670, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x678, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x680, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x688, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x710, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x718, Size: 0x8]
	float SpeedScale;//[Offset: 0x720, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x724, Size: 0x4]
	float InitialAccel;//[Offset: 0x728, Size: 0x4]
	float InitialDecel;//[Offset: 0x72c, Size: 0x4]
	void ToggleDisplay();// 0x984a3d4
	void ShowDebugSelectedInfo();// 0xa32d208
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x984a2f4
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xa1d39f8
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0xa1d39f8
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xa1d39f8
	Actor* GetSelectedActor();// 0x984a398

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x55c, Size: 0x4]
	float FrustumAngle;//[Offset: 0x560, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x564, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x568, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x56c, Size: 0x4]
	Texture* Texture;//[Offset: 0x570, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	bool bObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	int MaxPacket;//[Offset: 0xa4, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	UniqueNetIdRepl PlayerID;//[Offset: 0x168, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1f8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x14c0, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x19a8, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x1d8, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1e8, Size: 0x50]
	FilteredActorSetting[] FilteredActorSettings;//[Offset: 0x238, Size: 0x10]
	FilteredActorSetting DefaultFilterSettings;//[Offset: 0x248, Size: 0x38]
	FilteredActorSetting[] FilteredActorSettingsRuntime;//[Offset: 0x280, Size: 0x10]
	Channel*[] ActorChannelPool;//[Offset: 0x298, Size: 0x10]
	float Time;//[Offset: 0x2b0, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x788, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: FilteredActorSetting
	FName ClassName;//[Offset: 0x0, Size: 0x8]
	class Object* FilteredClass;//[Offset: 0x8, Size: 0x8]
	FName SpawnBudgetType;//[Offset: 0x10, Size: 0x8]
	FName SpawnBudgetSlot;//[Offset: 0x18, Size: 0x8]
	FName DestroyBudgetType;//[Offset: 0x24, Size: 0x8]
	FName DestroyBudgetSlot;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	bool IsUseAtlas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D AtlasSize;//[Offset: 0x4, Size: 0x8]
	IntPoint Image1Pos;//[Offset: 0xc, Size: 0x8]
	IntPoint Image1Size;//[Offset: 0x14, Size: 0x8]
	IntPoint Image2Pos;//[Offset: 0x1c, Size: 0x8]
	IntPoint Image2Size;//[Offset: 0x24, Size: 0x8]
	Texture2D* Image1;//[Offset: 0x30, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x38, Size: 0x8]
	Vector2D Center;//[Offset: 0x40, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x48, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x50, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x58, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x60, Size: 0x8]
	Key MainInputKey;//[Offset: 0x68, Size: 0x18]
	Key AltInputKey;//[Offset: 0x80, Size: 0x18]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x2cc, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x2d0, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x2d8, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x2e0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2e8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x984bc58
	void MoveUp_World(float Val);// 0x984bcf4
	void MoveRight(float Val);// 0x984bd90
	void MoveForward(float Val);// 0x984be2c
	void LookUpAtRate(float Rate);// 0x984bbbc

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x578, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x99aba4c
	float GetUnscaledSphereRadius();// 0xa38dbe8
	float GetShapeScale();// 0xa38dba8
	float GetScaledSphereRadius();// 0xa38dc04

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PreviousLODLevel;//[Offset: 0x59c, Size: 0x4]
	float LODBoundScale;//[Offset: 0x5a0, Size: 0x4]
	int MinLOD;//[Offset: 0x5a4, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x5a8, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x5c0, Size: 0x4]
	bool bReuseLightMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c4, Size: 0x1]
	MapBuildDataRegistry* MapBuildDataRegistry;//[Offset: 0x5c8, Size: 0x8]
	MapBuildDataRegistry* OwnerBuildDataRegistry;//[Offset: 0x5d0, Size: 0x8]
	OrientedBox OrientedBox;//[Offset: 0x5d8, Size: 0x3c]
	Guid MeshCompGuid;//[Offset: 0x614, Size: 0x10]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x624, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x624, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x624, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x624, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x624, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x624, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x624, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x624, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x625, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x625, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x625, Size: 0x1]
	bool bMeshProbesLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x625, Size: 0x1]
	float MeshProbesVisibilityFraction;//[Offset: 0x628, Size: 0x4]
	float MeshProbesIntensity;//[Offset: 0x62c, Size: 0x4]
	int OverriddenLightMapRes;//[Offset: 0x630, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x634, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x638, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x63c, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x640, Size: 0x10]
	Guid[] CachedMapBuildId;//[Offset: 0x650, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x660, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x670, Size: 0x18]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x688, Size: 0x18]
	bool bCalCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	Vector CoverageBound;//[Offset: 0x6a4, Size: 0xc]
	float BakedProbeIntensityScalar;//[Offset: 0x6b0, Size: 0x4]
	void SharedSHToOtherStaticMeshComponent(StaticMeshComponent* Other);// 0x99ba7f0
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x99ba884
	void SetReverseCulling(bool ReverseCulling);// 0x99ba440
	void SetLODBoundScale(float NewLODBoundScale);// 0x99ba3ac
	void SetForcedLodModel(int NewForcedLodModel);// 0x99ba670
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x99ba5dc
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x99ba92c
	bool IsSharedSHSample();// 0x99ba708
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x99ba4dc
	bool CompareSharedSH(StaticMeshComponent* Other);// 0x99ba748

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformFloat ScreenSizeMid;//[Offset: 0x68, Size: 0x4]
	PerPlatformFloat ScreenSizeLow;//[Offset: 0x88, Size: 0x4]
	bool bUseOrientedBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0xbc, Size: 0x4]
	byte ShadowLodBias;//[Offset: 0xc0, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0xc4, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0xc8, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0xd8, Size: 0x4]
	int LightMapResolution;//[Offset: 0xdc, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0xe0, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xe4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xe8, Size: 0x8]
	int LODForCollision;//[Offset: 0xf0, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0xf4, Size: 0x4]
	float MinScreenSize;//[Offset: 0xf8, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 0x1]
	bool bUseVertexCompress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfc, Size: 0x1]
	StaticMesh*[] LODResourceOverride;//[Offset: 0x110, Size: 0x10]
	Guid MeshGuid;//[Offset: 0x130, Size: 0x10]
	StaticMeshSocket*[] Sockets;//[Offset: 0x140, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0x160, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x16c, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x178, Size: 0x1c]
	OrientedBox ExtendedOrientedBox;//[Offset: 0x194, Size: 0x3c]
	float OrientedBoxSphereRadius;//[Offset: 0x1d0, Size: 0x4]
	int ElementToIgnoreForTexFactor;//[Offset: 0x1d4, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1d8, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x1f0, Size: 0x8]
	Object*[] EditableMeshLODs;//[Offset: 0x1f8, Size: 0x10]
	StaticMesh* ComplexCollisionMesh;//[Offset: 0x208, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x210, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x99b7a68
	int GetNumSections(int InLOD);// 0x99b7ee4
	int GetNumLODs();// 0x99b809c
	int GetMaterialIndex(FName MaterialSlotName);// 0x99b7ce0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x99b7e0c
	BoxSphereBounds GetBounds();// 0x99b8050
	Box GetBoundingBox();// 0x99b7fbc
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x99b7b38
	void AddSocket(StaticMeshSocket* Socket);// 0x99b7c10

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: OrientedBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector AxisX;//[Offset: 0xc, Size: 0xc]
	Vector AxisY;//[Offset: 0x18, Size: 0xc]
	Vector AxisZ;//[Offset: 0x24, Size: 0xc]
	float ExtentX;//[Offset: 0x30, Size: 0x4]
	float ExtentY;//[Offset: 0x34, Size: 0x4]
	float ExtentZ;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bStaticMeshUseIdeaAO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 0x4]
	float LightmapBoost;//[Offset: 0x4, Size: 0x4]
	float MaxLuminance;//[Offset: 0x8, Size: 0x4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0xc, Size: 0x4]
	float SunIntensity;//[Offset: 0x10, Size: 0x4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x120, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x140, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x168, Size: 0x10]
	Margin Padding;//[Offset: 0x178, Size: 0x10]
	bool bIsOpenSoftResLoader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x190, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1a0, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1b0, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1c0, Size: 0x8]
	int Priority;//[Offset: 0x1c8, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1cc, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1cc, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1cc, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1cc, Size: 0x1]
	bool bUseRenderTransformOnDrag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1cc, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cd, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1d8, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1e0, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1e8, Size: 0x10]
	void UnregisterInputComponent();// 0x8fd3814
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x8fd55fc
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x5609c80
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x8fd552c
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0xa28a3c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xa1d39f8
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x5ad6f08
	void StopListeningForAllInputActions();// 0x8fd38d4
	void StopAnimationsAndLatentActions();// 0x8fd59b8
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x8fd424c
	void StopAllAnimations();// 0x8fd4178
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x8fd5e10
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x8fd3bac
	void SetPadding(Margin InPadding);// 0x8fd4dc4
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x8fd59e0
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x8fd3d48
	void SetInputActionPriority(int NewPriority);// 0x8fd35f0
	void SetInputActionBlocking(bool bShouldBlock);// 0x8fd34e0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x8fd4e98
	void SetDesiredSizeInViewport(Vector2D Size);// 0x8fd5d34
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4827a00
	void SetAnchorsInViewport(Anchors Anchors);// 0x8fd5c4c
	void SetAlignmentInViewport(Vector2D Alignment);// 0x8fd5b74
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x8fd3adc
	void RemoveFromViewport();// 0xa28a614
	void RegisterInputComponent();// 0x8fd3874
	void PreConstruct(bool IsDesignTime);// 0xa1d39f8
	void PlaySound(SoundBase* SoundToPlay);// 0x8fd38e8
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x8fd4634
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x8fd435c
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x8fd44c4
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x8fd4a48
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x8fd40a0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xa1d39f8
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xa1d39f8
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xa1d39f8
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xa1d39f8
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xa1d39f8
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xa1d39f8
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xa1d39f8
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xa1d39f8
	void OnPaint(out PaintContext Context);// 0xa1d39f8
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xa1d39f8
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xa1d39f8
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xa1d39f8
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xa1d39f8
	void OnMouseCaptureLost();// 0xa1d39f8
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xa1d39f8
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xa1d39f8
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xa1d39f8
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0xa1d39f8
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xa1d39f8
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xa1d39f8
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0xa1d39f8
	void OnInitialized();// 0xa1d39f8
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xa1d39f8
	void OnFocusLost(FocusEvent InFocusEvent);// 0xa1d39f8
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xa1d39f8
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xa1d39f8
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xa1d39f8
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xa1d39f8
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xa1d39f8
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xa1d39f8
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xa28a2e8
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xa28a210
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0xa1d39f8
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xa1d39f8
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x569601c
	bool IsPlayingAnimation();// 0xa28a0c4
	bool IsListeningForInputAction(FName ActionName);// 0x8fd36d4
	bool IsInViewport();// 0xa28a5dc
	bool IsInteractable();// 0xa1d39f8
	bool IsAnyAnimationPlaying();// 0x8fd3efc
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x8fd39b8
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0xa28a0e8
	Pawn* GetOwningPlayerPawn();// 0xa28a590
	bool GetIsVisible();// 0x8fd5ab0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x8fd3f44
	Anchors GetAnchorsInViewport();// 0x8fd5b28
	Vector2D GetAlignmentInViewport();// 0x8fd5ae8
	void Destruct();// 0xa1d39f8
	void Construct();// 0xa1d39f8
	void CancelLatentActions();// 0x8fd59cc
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x8fd579c
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x8fd5308
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x8fd5058
	void AddToViewport(int ZOrder);// 0xa28a630
	bool AddToPlayerScreen(int ZOrder);// 0x5fd2438

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte UsedLayerPolicy;//[Offset: 0xc1, Size: 0x1]
	byte PreservedLayerNum;//[Offset: 0xc2, Size: 0x1]
	byte Cursor;//[Offset: 0xc3, Size: 0x1]
	enum Clipping;//[Offset: 0xc4, Size: 0x1]
	enum Visibility;//[Offset: 0xc5, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc8, Size: 0x4]
	bool DisablePixelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	bool bArabStyle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1]
	WidgetNavigation* Navigation;//[Offset: 0xd0, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd8, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x100, Size: 0x10]
	bool UseDefaultLayerPolicy();// 0xa28adb8
	void SetVisibility(enum InVisibility);// 0xa28b05c
	void SetUserFocus(PlayerController* PlayerController);// 0x8fd993c
	void SetToolTipText(out const FText InToolTipText);// 0x8fda3c0
	void SetToolTip(Widget* Widget);// 0x8fda2f0
	void SetRenderTranslation(Vector2D Translation);// 0x8fda5b8
	void SetRenderTransformPivot(Vector2D Pivot);// 0x489a480
	void SetRenderTransformAngle(float Angle);// 0x8fda6c4
	void SetRenderTransform(WidgetTransform InTransform);// 0x8fda938
	void SetRenderShear(Vector2D Shear);// 0x8fda798
	void SetRenderScale(Vector2D Scale);// 0x8fda868
	void SetRenderOpacity(float InOpacity);// 0x41f9b28
	void SetPreservedLayerNum(byte InPreservedLayerNum);// 0x57d39f4
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x8fd9470
	void SetKeyboardFocus();// 0x579c208
	void SetIsEnabled(bool bInIsEnabled);// 0xa28b134
	void SetForceHideWidgetState(bool IsForce);// 0x8fd97b8
	void SetCursor(byte InCursor);// 0x8fda220
	void SetClipping(enum InClipping);// 0x5195180
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x8fd9658
	void ResetCursor();// 0x8fda20c
	void RemoveFromParent();// 0xa28afdc
	EventReply OnReply__DelegateSignature();// 0xa1d39f8
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xa1d39f8
	bool IsVisible();// 0x8fda1d4
	bool IsHovered();// 0xa28b01c
	void InvalidatWidgetTree();// 0x4fb0998
	void InvalidateLayoutAndVolatility();// 0x8fd9928
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x8fd9a0c
	bool HasUserFocus(PlayerController* PlayerController);// 0x8fd9b58
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x8fd9c34
	bool HasMouseCapture();// 0x8fd9da0
	bool HasKeyboardFocus();// 0x8fd9dd8
	bool HasFocusedDescendants();// 0x8fd9ae8
	bool HasAnyUserFocus();// 0x8fd9b20
	Widget* GetWidget__DelegateSignature();// 0xa1d39f8
	enum GetVisibility();// 0x8fda1a0
	FText GetText__DelegateSignature();// 0xa1d39f8
	enum GetSlateVisibility__DelegateSignature();// 0xa1d39f8
	SlateColor GetSlateColor__DelegateSignature();// 0xa1d39f8
	SlateBrush GetSlateBrush__DelegateSignature();// 0xa1d39f8
	float GetRenderTransformAngle();// 0x8fda688
	float GetRenderOpacity();// 0x8fda16c
	byte GetPreservedLayerNum();// 0xa28ad9c
	PanelWidget* GetParent();// 0xa28aff8
	PlayerController* GetOwningPlayer();// 0xa28ad60
	LocalPlayer* GetOwningLocalPlayer();// 0xa28ad24
	byte GetMouseCursor__DelegateSignature();// 0xa1d39f8
	LinearColor GetLinearColor__DelegateSignature();// 0xa1d39f8
	bool GetIsEnabled();// 0x8fda580
	int GetInt32__DelegateSignature();// 0xa1d39f8
	GameInstance* GetGameInstance();// 0x8fd93f0
	float GetFloat__DelegateSignature();// 0xa1d39f8
	Vector2D GetDesiredSize();// 0x8fd98f4
	enum GetClipping();// 0x8fd9fa8
	enum GetCheckBoxState__DelegateSignature();// 0xa1d39f8
	Geometry GetCachedGeometry();// 0xa28addc
	bool GetBool__DelegateSignature();// 0xa1d39f8
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xa1d39f8
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xa1d39f8
	void ForceVolatile(bool bForce);// 0x5074090
	void ForceLayoutPrepass();// 0x4f95114
	void EnableLayerPolicy();// 0x8fd945c
	void DisableLayerPolicy();// 0x8fd9448

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* UsingMovieScene;//[Offset: 0x348, Size: 0x8]
	MovieScene* MovieScene;//[Offset: 0x350, Size: 0x8]
	MovieScene*[] LQMovieScenes;//[Offset: 0x358, Size: 0x10]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x368, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x380, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x8fdbe14
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x8fdba04
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x8fdbd44
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x8fdb800
	float GetStartTime();// 0x8fdc154
	float GetEndTime();// 0xa28b334
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x8fdbfb4
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x8fdbba4

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0xc]
	FrameRate TickResolution;//[Offset: 0x24, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x2c, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x30, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x40, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x50, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x60, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x68, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0x88, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0x98, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xa8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0xb8, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0xc0, Size: 0x8]
	enum EvaluationType;//[Offset: 0xc8, Size: 0x1]
	enum ClockSource;//[Offset: 0xc9, Size: 0x1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Geometry

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x3b8, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0xa289a70
	FName GetUserTag();// 0xa289b3c

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x118, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x8fc0ce4
	bool RemoveChild(Widget* Content);// 0x8fc0c08
	bool HasChild(Widget* Content);// 0x8fc0e60
	bool HasAnyChildren();// 0x8fc0bc0
	int GetChildrenCount();// 0xa287fe8
	int GetChildIndex(const Widget* Content);// 0xa287de8
	Widget* GetChildAt(int Index);// 0xa287ef0
	Widget*[] GetAllChildren();// 0x4837fb8
	void ClearChildren();// 0xa287dcc
	PanelSlot* AddChild(Widget* Content);// 0x48a6b38

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x38, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x88, Size: 0x1c]
	float Duration;//[Offset: 0xa4, Size: 0x4]
	float MaxDistance;//[Offset: 0xa8, Size: 0x4]
	float TotalSamples;//[Offset: 0xac, Size: 0x4]
	float Priority;//[Offset: 0xb0, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0xb8, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0xc0, Size: 0x10]
	SoundSubmix* SoundSubmixObject;//[Offset: 0xd0, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0xd8, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0xe8, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0xf0, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x28]
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float StereoBleed;//[Offset: 0x8, Size: 0x4]
	float LFEBleed;//[Offset: 0xc, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte OutputTarget;//[Offset: 0x25, Size: 0x1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x38]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 0x10]
	float InitialDelay;//[Offset: 0x78, Size: 0x4]
	float FadeInTime;//[Offset: 0x7c, Size: 0x4]
	float Duration;//[Offset: 0x80, Size: 0x4]
	float FadeOutTime;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]
	float Gain0;//[Offset: 0xc, Size: 0x4]
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]
	float Gain1;//[Offset: 0x18, Size: 0x4]
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]
	float Gain2;//[Offset: 0x24, Size: 0x4]
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]
	float Gain3;//[Offset: 0x30, Size: 0x4]
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x2e8]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	enum AbsorptionMethod;//[Offset: 0xb3, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb4, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xb5, Size: 0x1]
	float OmniRadius;//[Offset: 0xb8, Size: 0x4]
	float StereoSpread;//[Offset: 0xbc, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc4, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xc8, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1d8, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1dc, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1e8, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1ec, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1f4, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x200, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x204, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x208, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x20c, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x210, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x214, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x218, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x21c, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x220, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x224, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x228, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x22c, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x230, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x2b8, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0x10, Size: 0xc]
	float ConeOffset;//[Offset: 0x1c, Size: 0x4]
	float FalloffDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 0x8]
	enum ChannelFormat;//[Offset: 0x40, Size: 0x1]
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	AmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x99a8a2c
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x99a8934
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x99a8c74
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x99a89b0
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x99a8764
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x99a881c

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: AmbisonicsSubmixSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x110, Size: 0x4]
	int StreamingPriority;//[Offset: 0x114, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x118, Size: 0x1]
	byte SoundGroup;//[Offset: 0x11a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11b, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11c, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11c, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11c, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x120, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x130, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x140, Size: 0x10]
	FString SpokenText;//[Offset: 0x160, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x170, Size: 0x4]
	float Volume;//[Offset: 0x174, Size: 0x4]
	float Pitch;//[Offset: 0x178, Size: 0x4]
	int NumChannels;//[Offset: 0x17c, Size: 0x4]
	int SampleRate;//[Offset: 0x180, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x188, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x198, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x1a0, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x2c0, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x2c4, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x8fb14a0
	void Dragged(out const PointerEvent PointerEvent);// 0x8fb1198
	void DragCancelled(out const PointerEvent PointerEvent);// 0x8fb131c

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x58, Size: 0x10]
	World* World;//[Offset: 0x80, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x88, Size: 0x8]
	void SSSwapControllers();// 0xa338bc0
	void ShowTitleSafeArea();// 0xa338ba4
	void SetConsoleTarget(int PlayerIndex);// 0x9881ed8

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0xa1d39f8
	void ReceiveInit();// 0xa1d39f8
	void HandleTravelError(byte FailureType);// 0xa1d39f8
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xa1d39f8
	void DebugRemovePlayer(int ControllerId);// 0xa336738
	void DebugCreatePlayer(int ControllerId);// 0xa336810

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x270, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x278, Size: 0x8]
	float PlayRate;//[Offset: 0x280, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x284, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x288, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x290, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x298, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x2b0, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x2c0, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 0x1]
	float InterpPosition;//[Offset: 0x2d4, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x2dc, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2e0, Size: 0x10]
	delegate OnStop;//[Offset: 0x2f0, Size: 0x10]
	delegate OnPause;//[Offset: 0x300, Size: 0x10]
	void Stop();// 0xa369620
	void SetPosition(float NewPosition, bool bJump);// 0x992f124
	void SetLoopingState(bool bNewLooping);// 0xa3694ec
	void Reverse();// 0xa369604
	void Play();// 0xa36963c
	void Pause();// 0xa3695e8
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x992ef24
	void ChangePlaybackDirection();// 0xa3695cc

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x258, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x260, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x268, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x983df68

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ExtraRenderPassConfig
	<enum,ExtraRenderPassConfigItem> PassList;//[Offset: 0x0, Size: 0x50]
	ExtraRenderPassConfigItem[] Passes;//[Offset: 0x50, Size: 0x10]
	ExtraRenderPassConfigItem[] EnemyPasses;//[Offset: 0x60, Size: 0x10]
	ExtraRenderPassConfigItem[] BetterOutlinePasses;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: ExtraRenderPassConfigItem
	int PassFlags;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* PassMaterial;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x4]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileSize;//[Offset: 0x34, Size: 0x4]
	int TileBorderSize;//[Offset: 0x38, Size: 0x4]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xa1d39f8
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xa3642fc
	bool RemoteEvent(FName EventName);// 0xa364634
	void LevelReset();// 0xa1d39f8

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x278, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x280, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x288, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x560, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x568, Size: 0x1]
	float ScreenSize;//[Offset: 0x56c, Size: 0x4]
	float MaxScreenScaling;//[Offset: 0x570, Size: 0x4]
	float U;//[Offset: 0x574, Size: 0x4]
	float UL;//[Offset: 0x578, Size: 0x4]
	float V;//[Offset: 0x57c, Size: 0x4]
	float VL;//[Offset: 0x580, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x9816678
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x9816508
	void SetSprite(Texture2D* NewSprite);// 0x98167ac

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x278, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x27c, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27d, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27d, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27d, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27d, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27d, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27d, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27d, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27d, Size: 0x1]
	float StreamingDistanceUnloadCompensation;//[Offset: 0x280, Size: 0x4]
	FString[] VisibleTags;//[Offset: 0x288, Size: 0x10]
	bool bIsOpenDynamicPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x298, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x298, Size: 0x1]
	bool bForceNoStaticShadowDepthMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x298, Size: 0x1]
	bool bClipLQTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x298, Size: 0x1]
	bool bUseBrightestColorInSmallMips;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x298, Size: 0x1]
	bool bForceUseBC6H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x299, Size: 0x1]
	bool bLimitToPackedLightAndShadowMapTextureSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x299, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x299, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x299, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x299, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x2a0, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x2a8, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2b0, Size: 0x4]
	float KillZ;//[Offset: 0x2b4, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2b8, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2c0, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2c4, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2c8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2d0, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2d8, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2e0, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2e8, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2ec, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2f8, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2fc, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x300, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x308, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x328, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x34c, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x350, Size: 0x8]
	float TimeDilation;//[Offset: 0x358, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x35c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x360, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x364, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x368, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x36c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x370, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x374, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3b8, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3c0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3d0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3e0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3e8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3f0, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3f8, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x408, Size: 0x8]
	void OnRep_WorldGravityZ();// 0xa39518c

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x270, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x280, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x288, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x290, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x298, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x2a0, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x2a8, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2b0, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2b8, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x2c0, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x2c8, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x2d0, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x2d8, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x2e0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 0x1]
	void StartPlay();// 0xa337b88
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0xa336fd0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xa336e00
	bool ShouldReset(Actor* ActorToReset);// 0xa337a64
	void ReturnToMainMenuHost();// 0xa337a2c
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xa33713c
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0xa3372fc
	void RestartPlayer(Controller* NewPlayer);// 0xa337464
	void ResetLevel();// 0xa337a48
	bool PlayerCanRestart(PlayerController* Player);// 0xa33753c
	bool MustSpectate(PlayerController* NewPlayerController);// 0xa337870
	void K2_PostLogin(PlayerController* NewPlayer);// 0xa1d39f8
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xa1d39f8
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xa1d39f8
	void K2_OnLogout(Controller* ExitingController);// 0xa1d39f8
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xa1d39f8
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x9869980
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0xa336c98
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0xa336bc0
	bool HasMatchStarted();// 0xa337b48
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0xa337954
	int GetNumSpectators();// 0xa337ba4
	int GetNumPlayers();// 0xa337be0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0xa337c1c
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x9869b18
	Actor* ChoosePlayerStart(Controller* Player);// 0xa337620
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x9869cc4
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0xa337700

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x270, Size: 0x4]
	int MaxPlayers;//[Offset: 0x274, Size: 0x4]
	int MaxPartySize;//[Offset: 0x278, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x27c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 0x1]
	FName SessionName;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x270, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x278, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x280, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x288, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x29c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2a0, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2a4, Size: 0x4]
	void OnRep_SpectatorClass();// 0xa338784
	void OnRep_ReplicatedWorldTimeSeconds();// 0xa33874c
	void OnRep_ReplicatedHasBegunPlay();// 0xa338768
	void OnRep_GameModeClass();// 0xa3387a0
	bool HasMatchStarted();// 0xa3387bc
	bool HasBegunPlay();// 0xa3387fc
	float GetServerWorldTimeSeconds();// 0xa33883c
	float GetPlayerStartTime(Controller* Controller);// 0x987ed4c
	float GetPlayerRespawnDelay(Controller* Controller);// 0x987ecc0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	uint32 Channels;//[Offset: 0x274, Size: 0x4]
	uint32 InRate;//[Offset: 0x278, Size: 0x4]
	uint32 OutRate;//[Offset: 0x27c, Size: 0x4]
	uint32 OutSaturation;//[Offset: 0x280, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x284, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x288, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x28c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x290, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x294, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x298, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x29c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x2a0, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x2a4, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x2a8, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x2ac, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x2b0, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x2b4, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x2b8, Size: 0x4]
	uint32 InPackets;//[Offset: 0x2bc, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x2c0, Size: 0x4]
	uint32 InBunches;//[Offset: 0x2c4, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x2c8, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x2cc, Size: 0x4]
	uint32 InLoss;//[Offset: 0x2d0, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x2d4, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x2d8, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x2dc, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2e0, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2e4, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2e8, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2ec, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2f0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2f4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2f8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2fc, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x300, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x304, Size: 0x4]
	uint32 NumActors;//[Offset: 0x308, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x30c, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x310, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x314, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x318, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x31c, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x320, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x324, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x328, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x32c, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x330, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x270, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x274, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x278, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x27c, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x280, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x284, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x288, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x28c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x290, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x298, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x29c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x2a0, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x2a4, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x2a8, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2ac, Size: 0x4]
	float MoveRepSize;//[Offset: 0x2b0, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2b4, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x2b8, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x2bc, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x2c0, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x2c4, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x2c8, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x2cc, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x2d0, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x2d4, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2d8, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x2dc, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2e0, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2e4, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2e8, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2f0, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2f4, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2f8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x300, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x304, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x308, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x30c, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ObjectPoolManager
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	<class Object,ObjectPool> Pools;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ObjectPool
	Object*[] FreeElements;//[Offset: 0x0, Size: 0x10]
	<class Object,FreeElements> FreeElementMap;//[Offset: 0x10, Size: 0x50]
	class Object* PoolType;//[Offset: 0x60, Size: 0x8]
	int Size;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: FreeElements
	Object*[] Objects;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	bool bMasterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	FName[] LODPackageNames;//[Offset: 0x60, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xbc, Size: 0x4]
	int StreamingPriority;//[Offset: 0xc0, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc6, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc6, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc6, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc6, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc6, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc7, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc7, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc7, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xc8, Size: 0x10]
	int DeviceGradeLevel;//[Offset: 0xd8, Size: 0x4]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xe0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xf0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf8, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x108, Size: 0x10]
	delegate OnLevelUnloadedWithParams;//[Offset: 0x118, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x128, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x138, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x148, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x150, Size: 0x8]
	bool ShouldBeLoaded();// 0xa3647c4
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x9906a04
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0xa364824
	void SetPriority(int NewPriority);// 0x9906864
	void SetLevelLODIndex(int LODIndex);// 0x9906934
	void LevelStreamingUnLoaded__DelegateSignature(LevelStreaming* LevelStreaming);// 0xa1d39f8
	bool IsStreamingStatePending();// 0x99067c0
	bool IsLevelVisible();// 0x99067f8
	bool IsLevelLoaded();// 0xa364784
	FName GetWorldAssetPackageFName();// 0x9906830
	bool GetMasterFlag();// 0xa364804
	Level* GetLoadedLevel();// 0xa3647a8
	LevelScriptActor* GetLevelScriptActor();// 0x9906664
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x99066b0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2a8, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x2b9, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x8d8, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xcdc, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xd10, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd20, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xd28, Size: 0x10]
	GameInstance* CacheGameInstance;//[Offset: 0x1128, Size: 0x8]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x28, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: WorldRegionManager
	World* World;//[Offset: 0xa8, Size: 0x8]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_Static;//[Offset: 0xb0, Size: 0x50]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_NonStatic;//[Offset: 0x100, Size: 0x50]
	<Object*,RegionID> ObjectToRegionID_NonStatic;//[Offset: 0x150, Size: 0x50]

--------------------------------
Class: RegionID

--------------------------------
Class: RegionObjectItemList
	RegionObjectItem[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RegionObjectItem
	Object* Target;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x9815fc0
	int GetObjectCount();// 0x98160f0
	int GetNewAvoidanceUID();// 0x981608c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x9815f38

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialLodManager.Object
	SoftClassPath MaterialLodManagerClassName;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x58, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x68, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x74, Size: 0x4]
	bool bStreamingLevelsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApexWorldSettings.WorldSettings.Info.Actor.Object
	ReplicationGraphSettings ReplicationGraphSettings;//[Offset: 0x410, Size: 0x2c]
	int DefaultMeshCacheNumber;//[Offset: 0x43c, Size: 0x4]
	int DefaultLobbyMeshCacheNumber;//[Offset: 0x440, Size: 0x4]

--------------------------------
Class: ReplicationGraphSettings
	bool bEnableReplicationGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float DefaultGridCellSize;//[Offset: 0x4, Size: 0x4]
	Box DefaultGridBounds;//[Offset: 0x8, Size: 0x1c]
	float PickUpActorGridCellSizeOverride;//[Offset: 0x24, Size: 0x4]
	float CharacterGridCellSizeOverride;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: BP_RockInfo_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x278, Size: 0x8]
	LinearColor[] Params;//[Offset: 0x280, Size: 0x10]
	Texture2DArray* Color_Array;//[Offset: 0x290, Size: 0x8]
	Texture2DArray* Normal_Array;//[Offset: 0x298, Size: 0x8]
	void SetTexture(Texture2DArray* Color_Array, Texture2DArray* Normal_Array);// 0xa1d39f8
	void UpdateParams(out LinearColor[] Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, LinearColor CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0xa1d39f8
	void SetParams(out LinearColor[] Params);// 0xa1d39f8
	void UserConstructionScript();// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_RockInfo(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0xe8, Size: 0x1]
	byte AddressY;//[Offset: 0xe9, Size: 0x1]

--------------------------------
Class: BP_RockTextureToColor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x278, Size: 0x8]
	LinearColor[] Color;//[Offset: 0x280, Size: 0x10]
	void Set(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Array_Length_ReturnValue, LinearColor CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0xa1d39f8
	void UserConstructionScript();// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_RockTextureToColor(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: BR_SurfaceGridActor_C.SurfaceGridActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: SurfaceGridActor.Actor.Object
	SurfaceGridManager* SurfaceGridManager;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: SurfaceGridManager.DataAsset.Object
	<GridDataManager*> GridDatas;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: GridDataManager.Object
	Vector Origin;//[Offset: 0x28, Size: 0xc]
	float GridSize;//[Offset: 0x34, Size: 0x4]
	int StreamingSize;//[Offset: 0x38, Size: 0x4]
	int Row;//[Offset: 0x3c, Size: 0x4]
	int Col;//[Offset: 0x40, Size: 0x4]
	GridDataTable* GridDataTablePtr;//[Offset: 0x48, Size: 0x8]
	GridDataTable* GridDataTable;//[Offset: 0x50, Size: 0x28]
	GridDataTable*[] GridDataTableStreaming;//[Offset: 0x78, Size: 0x10]
	GridDataTable*[] GridDataTableStreamingPtr;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: GridDataTable.DataAsset.Object
	bool bMinimal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int Row;//[Offset: 0x34, Size: 0x4]
	int Col;//[Offset: 0x38, Size: 0x4]
	int MinimalType;//[Offset: 0x3c, Size: 0x4]
	int[] DataTable;//[Offset: 0x40, Size: 0x10]
	int MaxTypeCount;//[Offset: 0x50, Size: 0x4]
	<byte,byte> ValueMap;//[Offset: 0x58, Size: 0x50]
	int RootTreeType;//[Offset: 0xa8, Size: 0x4]
	int RootTreeValue;//[Offset: 0xac, Size: 0x4]
	int Version;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x8c0, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0xa28d8a4

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x900, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x90c, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x928, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x980, Size: 0x4]
	float CurrentAperture;//[Offset: 0x984, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x988, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x998, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x9a8, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x9b8, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x9c8, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x9d8, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x9dc, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x8fefa84
	void SetFilmbackPresetByName(FString InPresetName);// 0x8fefc00
	float GetVerticalFieldOfView();// 0x8fefd7c
	FString GetLensPresetName();// 0x8fefb30
	float GetHorizontalFieldOfView();// 0x8fefdf4
	FString GetFilmbackPresetName();// 0x8fefcac

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: BP_SetDyeColor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x278, Size: 0x8]
	LinearColor[] Colors;//[Offset: 0x280, Size: 0x10]
	void SetCollection(bool Temp_bool_Variable, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, LinearColor CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xa1d39f8
	void SetColors(out LinearColor[] Colors);// 0xa1d39f8
	void UserConstructionScript();// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_SetDyeColor(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x2b0, Size: 0x620]
	float Priority;//[Offset: 0x8d0, Size: 0x4]
	float BlendRadius;//[Offset: 0x8d4, Size: 0x4]
	float BlendWeight;//[Offset: 0x8d8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8dc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8dc, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x996fdac

--------------------------------
Class: LODManage_SM_C.LODManagerActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a8, Size: 0x8]
	float HeightChange_SM;//[Offset: 0x2b0, Size: 0x4]
	FString MaterailPath;//[Offset: 0x2b8, Size: 0x10]
	delegate OnIsWaiteDestoryChange;//[Offset: 0x2c8, Size: 0x10]
	FString GetMaterailPathBP();// 0xa1d39f8
	float GetHeightChangeSMBP();// 0xa1d39f8
	void LoadClientListFun();// 0xa1d39f8
	void OnIsWaiteDestoryChange__DelegateSignature();// 0xa1d39f8

--------------------------------
Class: LODManagerActor.Actor.Object
	FString MaterailPath;//[Offset: 0x288, Size: 0x10]
	GameStatePlaneComponent* CacheGameStatePlaneComponent;//[Offset: 0x298, Size: 0x8]
	bool IsWaiteDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	float HeightChange_SM;//[Offset: 0x2a4, Size: 0x4]
	FString GetMaterailPathBP();// 0xa1d39f8
	float GetHeightChangeSMBP();// 0xa1d39f8

--------------------------------
Class: GameStatePlaneComponent.ActorComponent.Object
	int StartJumpCountingDown;//[Offset: 0xf8, Size: 0x4]
	int PlayerNumOnPlane;//[Offset: 0xfc, Size: 0x4]
	bool StartTimeOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	Vector AirplaneStartLoc;//[Offset: 0x104, Size: 0xc]
	Vector AirplaneStopLoc;//[Offset: 0x110, Size: 0xc]
	Actor* PlanePawn;//[Offset: 0x120, Size: 0x8]
	bool bIsPlaneInFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void OnRep_StartJumpCountingDown();// 0x52b05c4
	void OnRep_PlayerNumOnPlane();// 0x52febac
	void OnRep_bIsPlaneInFlight();// 0x5786704
	void OnRep_AirplaneStopLoc();// 0x55a9e24
	void OnRep_AirplaneStartLoc();// 0x55a9f10

--------------------------------
Class: Desertlands_Main_C.LevelScriptActor.Actor.Object

--------------------------------
Class: CustomCollisionChecker.Actor.Object
	CustomCollisionSubSystem* CollisionSubSystem;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: CustomCollisionSubSystem.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	CustomCollisionChecker* CollisionChecker;//[Offset: 0x90, Size: 0x8]
	<PrimitiveComponent*,CheckTimer> CollisionList;//[Offset: 0x98, Size: 0x50]
	<FString,FString> ClassComponentMap;//[Offset: 0xe8, Size: 0x50]

--------------------------------
Class: ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	<FName> CreateFrontendStates;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: CheckTimer

--------------------------------
Class: ApexPlayerController_BP_C.APGameController_BP_C.ApexPlayerController.PlayerController.Controller.Actor.Object
	FString GetModuleName();// 0xa1d39f8

--------------------------------
Class: APGameController_BP_C.ApexPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x11f8, Size: 0x8]
	ApexPostProcessComponent* ApexPostProcessComp;//[Offset: 0x1200, Size: 0x8]
	void InpActEvt_O_K2Node_InputKeyEvent(Key Key);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void DisplayDamageCameraShake(byte DmgType, int DmgValue);// 0xa1d39f8
	void BndEvt__AutoNaviGuide_K2Node_ComponentBoundEvent_0_TickForPath__DelegateSignature(float DeltaTime);// 0xa1d39f8
	void ExecuteUbergraph_APGameController_BP(int EntryPoint, Pawn* CallFunc_K2_GetPawn_ReturnValue, Rotator CallFunc_GetControlRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Object* CallFunc_UIGetLoadObjectLibrary_ReturnValue, byte K2Node_Event_DmgType, int K2Node_Event_DmgValue, Key K2Node_InputKeyEvent_Key, ApexCharacter* CallFunc_GetOwnedApexCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetCurrentCameraMode_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, class CameraShake CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, class CameraShake CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float K2Node_ComponentBoundEvent_DeltaTime);// 0xa1d39f8

--------------------------------
Class: ApexPlayerController.PlayerController.Controller.Actor.Object
	MPBattleResult MPResult;//[Offset: 0x6e0, Size: 0x50]
	MsgAssistantCompoent* MsgAssitantComp;//[Offset: 0x730, Size: 0x8]
	bool isGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 0x1]
	bool isGameOverSend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	FName PlayerType;//[Offset: 0x754, Size: 0x8]
	FString PlayerName;//[Offset: 0x760, Size: 0x10]
	int PlayerKey;//[Offset: 0x770, Size: 0x4]
	int TeamID;//[Offset: 0x774, Size: 0x4]
	uint64 UID;//[Offset: 0x778, Size: 0x8]
	int CampID;//[Offset: 0x780, Size: 0x4]
	InputComponent* GamepadInputComponent;//[Offset: 0x788, Size: 0x8]
	bool bIsPureSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	enum GameViewType;//[Offset: 0x791, Size: 0x1]
	enum ServerPCStateType;//[Offset: 0x792, Size: 0x1]
	int CurDSFrameC;//[Offset: 0x798, Size: 0x4]
	uint64[] SendLikes;//[Offset: 0x7a0, Size: 0x10]
	int64 BanOBEndTime;//[Offset: 0x7b0, Size: 0x8]
	FString BanOBReasonText;//[Offset: 0x7b8, Size: 0x10]
	int64 BanChatEndTime;//[Offset: 0x7c8, Size: 0x8]
	int64 BanChatNoPerceptionEndTime;//[Offset: 0x7d0, Size: 0x8]
	bool bAllAutoActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	bool bIsMainController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 0x1]
	enum CurPCStateType;//[Offset: 0x7da, Size: 0x1]
	enum TargetPCStateType;//[Offset: 0x7db, Size: 0x1]
	StateMachineComponent* StateMachineComp;//[Offset: 0x7e0, Size: 0x8]
	ControllerMagmaComponent* ControllerMagmaComp;//[Offset: 0x7f0, Size: 0x8]
	ApexPostProcessComponent* ApexPostProcessComponent;//[Offset: 0x7f8, Size: 0x8]
	DrugRecommendComponent* DrugRecommendComponent;//[Offset: 0x800, Size: 0x8]
	QuickItemComponent* QuickItemComponent;//[Offset: 0x808, Size: 0x8]
	HUDManagerComponent* HUDManagerComponent;//[Offset: 0x810, Size: 0x8]
	DataReportComponent* DataReportComponent;//[Offset: 0x818, Size: 0x8]
	UIStateMgr* UIStateMgr;//[Offset: 0x820, Size: 0x8]
	ApLUTComponent* LUTComponent;//[Offset: 0x828, Size: 0x8]
	DirectionalLightComponent* DirectionalLightComponent;//[Offset: 0x830, Size: 0x8]
	ViewAssistComponent* ViewAssistComponent;//[Offset: 0x838, Size: 0x8]
	FiniteBattleBehStateMachine* FiniteBattleBehStateMachine;//[Offset: 0x840, Size: 0x8]
	PlayerNetStaticComponent* NetStaticComponent;//[Offset: 0x848, Size: 0x8]
	CharacterTeamItemUseTipComponent* CharacterTeamItemUseTipComponent;//[Offset: 0x850, Size: 0x8]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x858, Size: 0x8]
	InGameRecoverItemGuidInfo[] InGameRecoverItemGuidInfoList;//[Offset: 0x860, Size: 0x10]
	InGameRecoverPropGuid* InGameRecoverPropGuid;//[Offset: 0x870, Size: 0x8]
	CrossHairDampingComponent* CrossHairDampingComponent;//[Offset: 0x878, Size: 0x8]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x880, Size: 0x8]
	LODManagerComponent* LODMgrComponent;//[Offset: 0x888, Size: 0x8]
	MapComponent* MapComponent;//[Offset: 0x890, Size: 0x8]
	MiniMapStaticItemVisibleInfo[] MapStaticItemVisibleInfos;//[Offset: 0x898, Size: 0x10]
	float UpdateInputTimeInterval;//[Offset: 0x8a8, Size: 0x4]
	float InputDeActiveThreshold;//[Offset: 0x8ac, Size: 0x4]
	uint64 JumpIntoBRFeedbackFlag;//[Offset: 0x8c0, Size: 0x8]
	SimpleBattleResultData BattleResultData;//[Offset: 0x8c8, Size: 0x80]
	Actor*[] DeathBoxArray;//[Offset: 0x948, Size: 0x10]
	float DeathBoxFovCheckRate;//[Offset: 0x958, Size: 0x4]
	float DeathBoxFovCheckTime;//[Offset: 0x95c, Size: 0x4]
	int MaxRotationDataCacheNumber;//[Offset: 0x984, Size: 0x4]
	DamageTipComponent* WarningIndicatorComponent;//[Offset: 0x998, Size: 0x8]
	CharacterAvatar_WearInfo PlayerWearInfo;//[Offset: 0x9a0, Size: 0x20]
	bool bShowWeaponItemWidgetLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	bool bShowRecoverPropsLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c1, Size: 0x1]
	bool bIsPCHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c2, Size: 0x1]
	float JoystickSprintDis;//[Offset: 0x9d4, Size: 0x4]
	float JoystickSprintAngle;//[Offset: 0x9d8, Size: 0x4]
	float JoystickSprintDisAuto;//[Offset: 0x9dc, Size: 0x4]
	float JoystickSprintAngleAuto;//[Offset: 0x9e0, Size: 0x4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1]
	enum LeftOperateMode;//[Offset: 0x9e6, Size: 0x1]
	enum RightOperateMode;//[Offset: 0x9e7, Size: 0x1]
	<enum,ScreenOperateModeInfo> ScreenOperateModeMap;//[Offset: 0x9e8, Size: 0x50]
	float DoubleClickInterval;//[Offset: 0xa3c, Size: 0x4]
	float DoubleClickGeometryDist;//[Offset: 0xa40, Size: 0x4]
	float DoubleClickScreenDist;//[Offset: 0xa44, Size: 0x4]
	CurveFloat* DistCurve;//[Offset: 0xa48, Size: 0x8]
	delegate OnScreenTouchBegin;//[Offset: 0xa68, Size: 0x10]
	delegate OnScreenTouchEnd;//[Offset: 0xa78, Size: 0x10]
	HitEffectComponent* HitEffectComponent;//[Offset: 0xbb8, Size: 0x8]
	AkSoundBankMgr* SoundBankMgr;//[Offset: 0xbc0, Size: 0x8]
	<byte,class CameraShake> FPPDamageCameraShakeMap;//[Offset: 0xbe8, Size: 0x50]
	<byte,class CameraShake> TPPDamageCameraShakeMap;//[Offset: 0xc38, Size: 0x50]
	float RescuingDistanceMeter;//[Offset: 0xc88, Size: 0x4]
	uint32 CurRecoverBannerPlayerKey;//[Offset: 0xc8c, Size: 0x4]
	float PickBannerHorizonMeter;//[Offset: 0xc90, Size: 0x4]
	float PickBannerVerticalMeter;//[Offset: 0xc94, Size: 0x4]
	bool PickBannerInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 0x1]
	bool CapturedRespawnDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99, Size: 0x1]
	RespawnOperateComponent* RespawnOperateComponent;//[Offset: 0xca0, Size: 0x8]
	bool DebugSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 0x1]
	int DebugSpectatorIndex;//[Offset: 0xcac, Size: 0x4]
	BackpackComponent* BackpackComponent;//[Offset: 0xcb0, Size: 0x8]
	PingManagerComponent* PingManagerComponent;//[Offset: 0xcb8, Size: 0x8]
	EmojiGiveALikeMgr* EmojiGiveALikeMgr;//[Offset: 0xcc0, Size: 0x8]
	PlayerEventFlowManager* PlayerEventFlowManager;//[Offset: 0xcc8, Size: 0x8]
	PlayerLoadoutComponent* PlayerLoadoutComponent;//[Offset: 0xcd0, Size: 0x8]
	bool EnableLifeLineRobotRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 0x1]
	ControllerCheatHelper* ControllerCheatHelper;//[Offset: 0xcf8, Size: 0x8]
	bool bIsDSEnableGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 0x1]
	int PlayerIsParachuting;//[Offset: 0xd04, Size: 0x4]
	OBManagerNoReplay* OBNoReplayComponent;//[Offset: 0xd08, Size: 0x8]
	delegate PlayerControllerLostDelegate;//[Offset: 0xd10, Size: 0x10]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xd20, Size: 0x10]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xd30, Size: 0x10]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xd40, Size: 0x10]
	delegate PlayerControllerPostReconnectedDelegate;//[Offset: 0xd50, Size: 0x10]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xd60, Size: 0x10]
	delegate PlayerControllerPreGameEndDelegate;//[Offset: 0xd70, Size: 0x10]
	delegate PlayerControllerGameEndDelegate;//[Offset: 0xd80, Size: 0x10]
	delegate ExtraVisualSoundDelegate;//[Offset: 0xd90, Size: 0x10]
	<uint32,bool> PlayerTeamTipTempData;//[Offset: 0xdd0, Size: 0x50]
	delegate PlayerControllerPawnChangedDelegate;//[Offset: 0xe20, Size: 0x10]
	bool bDoNotDestroyOnNetCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 0x1]
	int PlayerReconnectedCount;//[Offset: 0xe38, Size: 0x4]
	float DefaultConnectionlessTimeout;//[Offset: 0xe48, Size: 0x4]
	LineTrace* LineTrace;//[Offset: 0xe60, Size: 0x8]
	ProxySyncComponent* ProxySyncComponent;//[Offset: 0xe68, Size: 0x8]
	FString TeamMateDownAudio;//[Offset: 0xeb8, Size: 0x10]
	FString TeamMateDeathAudio;//[Offset: 0xec8, Size: 0x10]
	InGameChatContainer* ChatContainer;//[Offset: 0xed8, Size: 0x8]
	DSPingComponent* PingComponent;//[Offset: 0xee0, Size: 0x8]
	PlayerStatisticsManager* PlayerStatisticsManager;//[Offset: 0xef8, Size: 0x8]
	TrackerManager* TrackerManager;//[Offset: 0xf00, Size: 0x8]
	ApexTreasureDoor* TreasureDoor;//[Offset: 0xf08, Size: 0x8]
	InputComponent* AIDebugInputComponent;//[Offset: 0xf18, Size: 0x8]
	ApexDebugAIComponent* ApexDebugAIComponent;//[Offset: 0xf28, Size: 0x8]
	InGameGuideComponent* InGameGuideComp;//[Offset: 0xf38, Size: 0x8]
	float FinisherHorizontalAngle;//[Offset: 0xf50, Size: 0x4]
	float FinisherVerticalAngle;//[Offset: 0xf54, Size: 0x4]
	float FinisherValidZ;//[Offset: 0xf58, Size: 0x4]
	float ValidFinisherRange;//[Offset: 0xf5c, Size: 0x4]
	float FinisherValidSpaceCheckDistance;//[Offset: 0xf60, Size: 0x4]
	AIHostComponent* AIHostComponent;//[Offset: 0xf68, Size: 0x8]
	ShadowMirageTutorialComponent* ShadowMirageCom;//[Offset: 0xf70, Size: 0x8]
	ApgamePlayerStateRollbackComponent* RollbackComponent;//[Offset: 0xf78, Size: 0x8]
	ApgameDeathRecallComponent* DeathRecallComponent;//[Offset: 0xf80, Size: 0x8]
	float ReportIntervalOfViewingDeadRecord;//[Offset: 0xf88, Size: 0x4]
	SplineComponent* GuideSpineComp;//[Offset: 0xf98, Size: 0x8]
	float StartRespawnTimeSecond;//[Offset: 0xfa0, Size: 0x4]
	float EndRespawnTimeSecond;//[Offset: 0xfa4, Size: 0x4]
	byte StopForbiddenZoneTipSign;//[Offset: 0xfa8, Size: 0x1]
	<enum,byte> Type2Priorities;//[Offset: 0xfc0, Size: 0x50]
	uint32 ViewTargetMask;//[Offset: 0x1010, Size: 0x4]
	Actor* GamePlayViewTarget;//[Offset: 0x1018, Size: 0x8]
	Actor* ClientViewTarget;//[Offset: 0x1020, Size: 0x8]
	Actor* GMViewTarget;//[Offset: 0x1028, Size: 0x28]
	<byte,enum> Priority2Types;//[Offset: 0x1050, Size: 0x50]
	ApexCharacter* ControllerWeaponViewPawn;//[Offset: 0x1168, Size: 0x8]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1179, Size: 0x1]
	ApgamePickupFloatingManager* PickupFloatingMgr;//[Offset: 0x1188, Size: 0x8]
	ApexSentence* VoiceoverSentence;//[Offset: 0x1190, Size: 0x8]
	MirageTutorialComponent* TutorialComponent;//[Offset: 0x11a0, Size: 0x8]
	float SpeedOffset;//[Offset: 0x11a8, Size: 0x4]
	Rotator Internal_InputRotation;//[Offset: 0x11ac, Size: 0xc]
	class AutoNaviGuideComponent* AutoNavGuidComp;//[Offset: 0x11c0, Size: 0x28]
	void UseViewTargetByTypeAtServer(enum InType, bool NewUse);// 0x7a11864
	void UploadDebugMsg(enum MsgType, FString Msg);// 0x7a12f28
	void UploadAkAudioDeviceOutMemory();// 0xa0e5794
	void UpdateMicroStatus(bool IsOpen);// 0xa0e98e0
	void TouchPing(Vector Location);// 0x7a16568
	void SwitchDebugAI();// 0xa0e3960
	void StopVoiceoverDispatchableSentence_NetMulticast();// 0xa0e2a68
	void StopVoiceoverDispatchableSentence();// 0x7a11288
	void StartRespawnLiftOff(Transform SpawnTransform);// 0x7a1216c
	void ShutdownServer(FString AreYouSure);// 0x7a14364
	void ShowReviveSelfOperation(bool bShow);// 0xa0e7e08
	void ShowReviveOperation(bool bShow, uint32 InPlayerKey);// 0xa0e7fcc
	void ShowPointsInternal(const Vector[] Points, const Color Color, bool bPersistentLines, float LifeTime);// 0x7a140a0
	void ShowPickRecoverBanner(bool bShow, uint32 InPlayerKey);// 0xa0e7c98
	void ShowOperateRecoverBanner(bool bShow);// 0xa0e7ac4
	void ShowMovePath(const Vector[] Path, const Color Color, bool bPersistentLines, float LifeTime);// 0x7a13df4
	void ShowLowBloodEffect(float Opacity);// 0x5e42d68
	void ShowFinisherCancelOperation(bool bShow);// 0x7a12a04
	void ShowDamageValueToClient(Actor* HitTarget, float DamageAmount, const Vector HitImpact, bool bHeadShot);// 0xa0e6cd0
	void ShowArrow(const Vector LineStart, const Vector LineEnd, float ArrowSize, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0xa0e6140
	void SetStopForbiddenZoneTipSign();// 0x7a12518
	void SetSkillProfilerStatue(bool enable, bool CastUltimate);// 0xa0e37e8
	void SetServerPCStateType(enum NewServerPCStateType);// 0xa0e9f78
	void SetScreenRightOperateMode(enum Mode);// 0x7a16638
	void SetScreenLeftOperateMode(enum Mode);// 0x7a16708
	void SetRespawnParachuteEnd();// 0x7a12158
	static void SetPrintContructStackTraceOpen();// 0x5e51290
	void SetPlayerReconnectedCount(int NewPlayerReconnectedCount);// 0xa0e57b0
	void SetPlayerNameVisible(int InPlayerKey, bool Visble);// 0xa0e65f0
	void SetPlayerName(FString NewName);// 0x7a18d14
	void SetPlayerKey(int NewPlayerKey);// 0xa0ea564
	void SetPlayerExitMidJoinState();// 0x7a130d4
	void SetOpenningTreasureDoor(ApexTreasureDoor* Door);// 0xa0e3aa8
	void SetNeedUploadRotation(bool NewEnable);// 0x7a184a4
	void SetMPResult(MPBattleResult theMPResult);// 0x7a19358
	void SetJoystickThumbVisible(bool Visible);// 0x7a168e8
	void SetJoystickSprintDisAuto(float Dis);// 0x57a60dc
	void SetJoystickSprintDis(float Dis);// 0x57a5ff8
	void SetJoyStickScale(float JSScale);// 0x56300d4
	void SetJoyStickOpacity(float JSOpacity);// 0x56c848c
	void SetJoystickCenterVisible(bool Visible);// 0x7a16810
	void SetJoyStickCenter(Vector2D Center);// 0x5647940
	void SetIsPureSpectator(bool NewIsPureSpectator);// 0xa0ea450
	static void SetHiddenJoyStickBySource(const Object* WorldContext, enum HiddenSource, bool NewHidden);// 0x7a1617c
	void SetGameViewType(enum NewGameViewType);// 0xa0ea060
	void SetGameplayViewTarget(Actor* NewGameplayViewTarget);// 0xa0e2f98
	void SetClientAIHostSetting(byte bEnableAIHost);// 0xa0e3170
	void SetCharacterHitPosition(byte HitPosition, ApexCharacterBase* Target);// 0xa0e43c4
	void SetBanOB(int64 EndUTCTime, FString BanReasonText);// 0x7a18b18
	void SetBanNoPerceptionChat(int64 EndUTCTime);// 0x7a18978
	void SetBanChat(int64 EndUTCTime);// 0x7a18a48
	void ServerUseViewTargetByType(enum InType, bool NewUse);// 0x7a11fc0
	void ServerUploadControlRotationPitchYaw(uint32 Timestamp, uint32 NewView);// 0xa0e9b20
	void ServerUploadControlRotation(uint32 Timestamp, uint32 NewView, byte NewRoll);// 0xa0e9c7c
	void ServerUploadControlRoll(uint32 Timestamp, byte NewRoll);// 0xa0e99c0
	void ServerUpdateRespawnTimer(float RespawnTime);// 0xa0e97ec
	void ServerUpdateAutoPathFind(byte bNewState);// 0xa0e26e0
	void ServerSwitchTrainState();// 0x7a1817c
	void ServerStopHttpRecordingReplay();// 0x7a113fc
	void ServerStopCompleteRecordingReplay();// 0x7a114b4
	void ServerStartHttpRecordingReplay();// 0x7a11458
	void ServerStartCompleteRecordingReplay();// 0x7a11510
	void ServerSpawnPawn(Transform T);// 0x7a13628
	void ServerSetMonitorState(MonitorActor* Monitor, bool bControl);// 0x7a17fdc
	void ServerSetMapStaticItemVisible(const byte[] InTypes);// 0x7a187e0
	void ServerSetMapStaticItemNotVisible(const byte[] InTypes);// 0x7a186b0
	void ServerSetControlRotation(const Rotator NewRotation);// 0x7a1253c
	void ServerSaveJumpFeedbackFlag(uint64 JumpFeedbackFlag);// 0xa0e9e68
	void ServerRespawnSelfPlayer();// 0xa0e98c4
	void ServerResetWeaponSkin(ApgameWeaponInstanceId InWeaponDataId);// 0x7a110b8
	void ServerReportTimesOfViewingDeadRecord(byte InDeltaTimes);// 0x7a1266c
	void ServerQuickChat();// 0xa0e5c7c
	void ServerPickRecoverBanner(uint32 InPlayerKey);// 0xa0e7ba4
	void ServerOperateRecoverBanner(enum OperateCode, ApexRespawnBeacon* CapturedBeacon);// 0xa0e7884
	void ServerOperateKnockdownShield(enum OperateCode);// 0xa0e8374
	void ServerOperateKnockdownRevive(enum OperateCode, uint32 InPlayerKey);// 0xa0e813c
	void ServerMirageCall(MiragePhoneActor* thePhone);// 0x7a17c54
	void ServerLoadNavGuidComponent(bool ForceOpenAutoNav);// 0xa0e27b8
	void ServerHandleMsg(enum Msg, enum StateSource);// 0x7a17d54
	void ServerEnableReplayReplicationGraph(bool bIsEnable);// 0x7a1156c
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x7a158f4
	void ServerDisuseAttachmentByTypeWithReason(ItemDefineID WeaponDefineID, enum AttachmentSocketType, enum Reason);// 0x7a156b8
	void ServerDeactiveAllTrainingField();// 0xa0e2a30
	void ServerCMD(FString Cmd);// 0x7a13528
	void ServerCloseFlagDynamicOutLine(int InPlayerKey);// 0xa0e3434
	void ServerCancelOpenTreasureDoor();// 0xa0e3a70
	void ServerActiveAllTrainingField();// 0xa0e2a4c
	void SelectLegendStageEnd();// 0xa0e5dc4
	void SaveEquipData(out const ItemDefineID WeaponID, out const ItemDefineID AttachID, int WeaponIndex);// 0x7a14f1c
	void RPCServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x7a15aa4
	void RPCServerSwapAttachmentByTwoAttach(ItemDefineID AttachDefineIDA, ItemDefineID AttachDefineIDB);// 0x7a15204
	void RPCServerSwapAttachment(ItemDefineID WeaponDataDefineID, ItemDefineID AttachmentDataDefineID);// 0x7a153d0
	void RPCServerStopContinuousUseRecoverItem();// 0xa0e8f50
	void RPCServerOpenHandleActionActor(InGameHandleActionActor* ActionActor);// 0xa0e8e78
	void RPCServerOpenCarePackage(CarePackage* CarePackage, Controller* Controller);// 0x7a14d88
	void RPCServerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x7a15d40
	void RPCServerDeleteCommonSign(const int Index);// 0xa0e405c
	void RPCServerCreateCommonSign(CommonSignData SignData);// 0xa0e427c
	void RPCNotifyEnterOBResult(bool CanEnter, int CanOBNum);// 0x7a13318
	void RPCClientUpdateCommonSign(const int Index, const CommonSignData SignData);// 0xa0e3ddc
	void RPCClientResetMiniMap();// 0xa0e37cc
	void RPCClientDeleteCommonSign(const int Index);// 0xa0e3f84
	void RPCClientCreateCommonSign(CommonSignData SignData);// 0xa0e4134
	void RPC_ServerStopHandleElevator(GravityElevator* GravityElevator);// 0xa0e8cc8
	void RPC_ServerHandleElevator(GravityElevator* GravityElevator);// 0xa0e8da0
	void RPC_PossessPawn(Pawn* PosPawn);// 0x7a16af0
	void RPC_OpenResultWindow(FString EndReason, int GameModeType);// 0x7a16d20
	void RPC_NotifyPawnChange();// 0x7a16a94
	void RPC_NotifyGameStart();// 0x7a17648
	void RPC_NotifyGameEnd(FString EndReason, bool bSurvivorsAreAI);// 0x7a17470
	void RPC_NotifyBattleResultData(const SimpleBattleResultData SimpleResultData, FString EndReason, bool bSurvivorsAreAI);// 0x7a16ee4
	void RPC_ExitGame(FString EndReason);// 0x7a16bf0
	void RPC_BroadcastDamageToClient(Actor* HitTarget, float DamageAmount, bool bIsHeadShot, bool bIsFatalHealthCost, uint32 ShootID, byte PelletID, float AimPercent, byte AimChargeLevel, int InDamageItemId);// 0xa0e6760
	void RespawnPlayerByPlayerKey(const Vector Position, const Rotator Rotator);// 0x7a10d00
	void RespawnParachute();// 0x7a124f0
	void RespawnLiftOff(Transform SpawnTransform);// 0x7a122bc
	void ResetWeaponSkinByUiSlot(enum InUiSlot);// 0x7a111b8
	void RequestSyncUpdatableCoreData();// 0xa0ea630
	void ReplySyncUpdatableCoreData(const SyncUpdatableCoreData InSyncUpdatableCoreData);// 0x7a18fc4
	void RemoveFromAllAITarget(ApexCharacter* Self);// 0x7a137d4
	void RefreshItemUsable(ItemDefineID DefineID);// 0x7a1559c
	void ReChooseLegend(int LegendID);// 0xa0e6068
	void ReceiveWhenClientGameReady();// 0xa1d39f8
	void ProcessGMUIInput(FString Cmd);// 0x7a1446c
	void PostPlayerGameEndEvent();// 0x7a16a80
	void PlayVoiceoverDispatchableSentence_NetMulticast(int LegendID, ApexSentence* Sentence);// 0xa0e2a84
	void PlayVoiceoverDispatchableSentence(int LegendID, ApexSentence* Sentence);// 0x7a1129c
	void PlayInstigatorSound(enum PlayerAudioType, int InWeaponSkinID);// 0xa0e8b60
	void PlayerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x7a15f7c
	void PingSomeThingOnServer(enum PingType);// 0xa0e7294
	void PingSomeThingOnClient(enum PingType);// 0x7a1456c
	void PingFromFiger(Vector2D Location);// 0x7a16438
	void PickRecoverBanner();// 0xa0e7c7c
	void OperateRecoverBanner(enum OperateCode);// 0xa0e79ec
	void OperateKnockdownShield(enum OperateCode);// 0xa0e844c
	void OperateKnockdownRevive(enum OperateCode);// 0xa0e829c
	void OnUserInputUseReplicator();// 0x7a14d60
	void OnUserInputStageSwitch();// 0x7a14d38
	void OnUserInputOutUseReplicator();// 0x7a14d4c
	void OnUserInputOpenDoor(bool IsOpen);// 0x5d5f348
	void OnUserInputOpenBin();// 0x610b828
	void OnUserInputExtract();// 0x7a14d74
	void OnUpdatableCoreDataChange(out const SyncUpdatableCoreData InSyncUpdatableCoreData);// 0x5ac223c
	void OnTouchStartCallback();// 0x4e48fec
	void OnTouchEndCallback();// 0x7a16504
	void OnSwitchCameraSide();// 0x7a182bc
	void OnStateChanged();// 0x7a18688
	void OnSettingChanged(FString[] PropertyNames);// 0x5d503f8
	void OnSelectLegendStageEnd();// 0xa1d39f8
	void OnScriptRescueTeamMateGuideEnd();// 0x7a12850
	void OnScriptPingRespawnBeacon();// 0x7a1283c
	void OnRep_StopForbiddenZoneTipSign();// 0x564e030
	void OnRep_SetPlayerName();// 0xa0e73e4
	void OnRep_ServerStateType();// 0x550e610
	void OnRep_RespawnTime();// 0x5967d40
	void OnRep_RepMapStaticItemVisibleInfos();// 0x7a1869c
	void OnRep_GamePlayViewTarget(const Actor* LastViewTarget);// 0x557b30c
	void OnRep_bIsDSEnableGM();// 0x7a134b8
	void OnPlayerInputStateChange(bool NewIsActive);// 0x7a1857c
	void OnOBTargetPlayerViewTargetChange(Controller* TargetController, Actor* LastVT, Actor* NewVT, enum NewVTType);// 0xa0e58f4
	void OnMeleePressed(int InSkillID);// 0x7a181ec
	void OnJumpReleased();// 0x5002eb4
	void OnJumpPressed();// 0x518cb20
	void OnItemRemoved(ItemDefineID DefineID);// 0x7a1463c
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int count);// 0x7a1471c
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x7a14918
	void OnHitKnockdownShield(float DamageAmount, ApexCharacter* AttackCharacter, ApexCharacter* VictimCharacter, int VictimPlayerKey);// 0xa0e8524
	void OnGameStateChange(out const GameModeStateChangedParams Params);// 0x7a10f68
	void OnCrouchReleased();// 0x7a182d0
	void OnCrouchPressed();// 0x7a182e4
	void OnConnectionlessTimeOut();// 0x7a130c0
	void OnClientFovUnNormal(float DesireFov, float CurrentFov);// 0xa0ea220
	void OnCameraModePressed();// 0x40fe4c0
	void OnBoardingVehiclePressed();// 0x7a181d8
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0xa0e7640
	void OnAPEvent_AutoUseItem(ItemDefineID ItemID);// 0x5b92910
	void ObserveBot();// 0xa0e65d4
	void NotifyOBTargetSkillStop(int SkillIndex, enum StopReason);// 0xa0e3c74
	void NotifyOBTargetSkillCoolDownStart(int SkillIndex);// 0xa0e3b9c
	void NotifyClientPlayerIsValid();// 0xa0e5cd0
	void NotifyCantDrop();// 0x7a15d2c
	void LuaSwapAttachment(int WeaponIndex);// 0x7a15134
	void LogTrainFlash(FString FlashLog);// 0x7a12c54
	void LogMovementRecord(uint32 InPlayerKey, FString InReason);// 0x7a12d5c
	void LocalUseViewTargetWithTime(Actor* NewViewTarget, float BlendTime);// 0x7a11cf4
	void LocalUseViewTarget(Actor* NewViewTarget, ViewTargetTransitionParams TransitionParams);// 0x7a11aa8
	void LocalUnUseViewTargetWithTime(float BlendTime);// 0x7a11c24
	void LocalUnUseViewTarget(ViewTargetTransitionParams TransitionParams);// 0x7a119c4
	void LeaveOBNoReplay();// 0x7a13304
	bool IsPureSpectator();// 0xa0ea524
	bool IsPlayerReconnected();// 0x7a13120
	bool IsPlayerReady();// 0xa0e5898
	bool IsPlayerMidJoin();// 0x7a130e8
	bool IsOffScreen(Actor* InActor, float DetectionDist, float InnerRadius);// 0x7a14b10
	bool IsJoyStickCanAutoSprit();// 0x7a167d8
	bool IsInPlane();// 0xa0e9090
	bool IsInInitial();// 0xa0e91b4
	bool IsInFight();// 0xa0e904c
	bool IsDemoRecSpectator();// 0x7a116ac
	bool IsDemoPlaySpectator();// 0x7a116e4
	bool IsCompleteReplayPlaying();// 0x565c010
	bool InPawnState(enum TargetState);// 0xa0e90d0
	bool HasTouchScreenSide(enum TargetSide);// 0x7a1635c
	void HandleMsg(enum Msg, enum StateSource);// 0xa0e9360
	void GuideTipRespawnBeacon();// 0xa0e36bc
	void GuideRescueTeamMate(Actor* TargetTeamMate);// 0x7a12934
	void GuidePickTeamMateRespawnBanner(Actor* TargetMapFlag);// 0x7a12864
	void GuideFindTombBox(Actor* TargetTombBox);// 0xa0e36d8
	void GuideFindRespawnBeacon(Actor* TargetRespawnBeacon);// 0xa0e35e4
	void GMSetViewTarget(Actor* NewViewTarget, bool NewUse);// 0x7a11e54
	void GiveLikeTo(uint64 TargetUID);// 0xa0ea148
	UIStateMgr* GetUIStateMgr();// 0xa0e9f5c
	enum GetTargetPCStateType();// 0xa0e8fd4
	enum GetServerPCStateType();// 0xa0ea044
	ApgamePlayerStateRollbackComponent* GetRollbackComponent();// 0xa0e3154
	RespawnOperateComponent* GetRespawnOperateComponent();// 0x52de818
	ApexCharacter* GetReplayViewCharacter();// 0x7a11678
	QuickItemComponent* GetQuickItemComponent();// 0x7a18910
	int GetPlayerReconnectedCount();// 0xa0e587c
	FString GetPlayerName();// 0x7a18ec4
	PingManagerComponent* GetPingManagerComponent();// 0xa0e736c
	ApexCharacter* GetOwnedGameCharacter();// 0x7a176a4
	ApexCharacter* GetOwnedApexCharacter();// 0x7a176d8
	MPBattleResult GetMPResult();// 0x7a19188
	Vector2D GetJoyStickVisualSize();// 0x7a169e4
	Vector2D GetJoyStickVisualCenter();// 0x7a16a4c
	Vector2D GetJoyStickLocaltion();// 0x7a16a18
	Vector2D GetJoystickCorrectedCenter();// 0xa0e8f6c
	Vector2D GetJoyStickCenter();// 0x5f47080
	InGameGuideComponent* GetInGameGuideComp();// 0xa0e37b0
	enum GetGameViewType();// 0xa0ea12c
	FiniteBattleBehStateMachine* GetFiniteBattleBehStateMachine();// 0xa0e9f40
	EmojiGiveALikeMgr* GetEmojiGiveALikeMgr();// 0xa0e7258
	DirectionalLightComponent* GetDirectionalLightComponent();// 0x7a18944
	ApgameDeathRecallComponent* GetDeathRecallComponent();// 0xa0e3138
	enum GetCurrentUseGameplayType();// 0x7a11830
	enum GetCurrentStateType();// 0xa0e9010
	void GetCurrentScreenMiddenPosition(out Vector Pint, out Vector Dir);// 0x7a12adc
	Pawn* GetCurPawn();// 0xa0e8fb8
	Rotator GetClientControlRotation(float Timestamp);// 0x7a183c8
	InGameChatContainer* GetChatContainer();// 0x7a12ef4
	CharacterNaviGuideComponent* GetCharacterNaviGuideComp();// 0x7a12638
	BackpackComponent* GetBackpackComponent();// 0xa0e73a8
	void GenerateLoadout();// 0x7a1240c
	void ForceNetCleanup(FString ErrorMessage);// 0x7a13158
	void ExitGame(FString EndReason);// 0x5d1f8c4
	void ExecutePerSecond();// 0x7a1a03c
	void EnterOBNoReplay(enum EnterObReason);// 0x59ad254
	void EnablePhoneOrientation(bool NewEnable);// 0x7a17ee0
	void EnableGreyScreenPostProcess(bool Enabled);// 0xa0e8888
	void EnableGamepadInput(bool bEnable);// 0xa0ea37c
	void EnableDebugAI(uint32 DebugPlayerKey);// 0xa0e3998
	void EnableCloseEyePostProcess(bool Enabled, byte TimeSec, float StartAtTime);// 0xa0e8968
	void EnableArcPostProcess(bool Enabled);// 0xa0e87a8
	void DrawDebugStringWithActor(const Vector TextLocation, FString Text, Actor* TestBaseActor, const Color TextColor, float Duration);// 0x7a13acc
	void DoParachuteExpression(int ID);// 0x7a1276c
	void DisplayDamageCameraShake(byte DmgType, int DmgValue);// 0xa1d39f8
	void DispatchPlayerReconnectedEvent();// 0x7a132dc
	void DispatchPlayerLostEvent();// 0x7a132f0
	void DispatchPlayerExitEvent();// 0x7a132c8
	void DisableDeathBoxSignal(Actor* DeathBox);// 0xa0e350c
	void DebugOrientation();// 0x7a17fb8
	void DebugCryptoDrone();// 0xa0e397c
	Rotator ConsumeInputRotation();// 0xa0e2a08
	void ConfirmLegend(bool IsRepick, bool ImmediatelyChange);// 0xa0e5e18
	void ClientUnEquipPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative, bool bContinueThrow);// 0xa0e5148
	void ClientTrackTrigger(const ChapterType_TrackLink[] Tracks, ChapterParams theChapterParams);// 0x7a177e4
	void ClientSwitchSpectatorUI(bool bShow);// 0xa0e73f8
	void ClientStartRespawnTimer(float RespawnTime);// 0x7a182f8
	void ClientSetWidgetVisibilityByIdEx(FName IdName, bool Visible);// 0xa0e6f78
	void ClientSetWidgetVisibilityById(FName IdName, bool Visible);// 0xa0e70e8
	void ClientSetEncryptData(int KeyA, int KeyB, int KeyIndex, int KeyC, int KeyD);// 0xa0e94c0
	void ClientSetCurrentLocation(Vector Location, Rotator Rotator);// 0xa0e74d8
	void ClientSetControlRotation(const Rotator NewRotation);// 0xa0e3064
	void ClientReceiveBroadcastMsg(ApexCharacter* InCharacter, BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0xa0e4cc0
	void ClientReceiveBroadcastAudio(enum PlayerAudioType);// 0xa0e452c
	void ClientOnInflictDamage(Pawn* Attack, float DamageAmount, const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamageTarget);// 0xa0e2bec
	void ClientNotifyReconnectedSuccessfully();// 0xa0e58d8
	void ClientLeaveRobotRescuing(ApexCharacter* Target, enum Reason);// 0xa0e4604
	void ClientLeaveRescuing(ApexCharacter* Target, ApexCharacter* Source, enum Reason);// 0xa0e476c
	void ClientLeaveRescue(ApexCharacter* Source, ApexCharacter* Target, enum Reason);// 0xa0e4964
	bool ClientInRescueSelfProgress();// 0x7a14d00
	void ClientHideAllWidget();// 0xa0e6f5c
	void ClientHandleMsg(enum Msg, enum StateSource);// 0xa0e91f8
	void ClientFadeOutPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0xa0e4ebc
	void ClientEquipPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0xa0e5508
	void ClientEnterStageFight_Notify();// 0xa1d39f8
	void ClientEnterStageFight();// 0xa0e97d0
	void ClientEnterRescue(ApexCharacter* Source, ApexCharacter* Target);// 0xa0e4b5c
	void Client_ShowTips(const int[] NewIDs);// 0x7a11728
	void ClearHiddenActor();// 0x7a190a4
	void ClearForbiddenZoneTip();// 0x7a12504
	void ChooseLegendSkin(int SkinID);// 0xa0e5cec
	void ChooseLegend(int LegendID);// 0xa0e5f90
	bool CheckRespawnBeacon(ApexRespawnBeacon* RespawnBeacon);// 0xa0e77a0
	bool CheckRescuing(uint32 InPlayerKey);// 0xa0e7ee8
	void ChangeUIStateAutonomous(enum UIState, bool IsEnter);// 0xa0e2898
	void CancelOpenTreasureDoor();// 0xa0e3a8c
	void CancelConfirmLegend();// 0xa0e5dfc
	void CallOnRep_PlayerStateFromLua();// 0x5019780
	void BRViewSkill();// 0xa0e5cb4
	void BRSlideSkin();// 0xa0e5c60
	void BRSendChat();// 0xa0e5c98
	void BRForeground();// 0xa0e5b6c
	void BreakOpenTreasureDoor();// 0xa0e3b80
	void BRBackground(byte CurrentState);// 0xa0e5b88
	void BRApplyLegend();// 0xa0e5de0
	void BPHandleGameEnd(bool IsWin);// 0xa1d39f8
	void AirParachute(Rotator Rotator);// 0x7a12420
	void AIHostFunc(int FuncIdx, int TeammatePlayerKey, int CurrentValue);// 0xa0e3248
	void AddTimesOfViewingDeadRecord(int InTimes, bool bInNow);// 0x590801c
	void AddTeammateAutoTestAI(FString AICtrlClassKey);// 0x7a10e60
	void AddOnScreenMsg(uint64 Key, FString Msg, float TimeToDis);// 0x7a138a4
	void AddHiddenActor(Actor* Actor);// 0x7a190b8

--------------------------------
Class: MPBattleResult
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	uint64 MVPPlayerKey;//[Offset: 0x8, Size: 0x8]
	FString Reason;//[Offset: 0x10, Size: 0x10]
	MPResultTeamData[] TeamList;//[Offset: 0x20, Size: 0x10]
	int TeamID;//[Offset: 0x30, Size: 0x4]
	int WinnerID;//[Offset: 0x34, Size: 0x4]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	WinModeInfo[] WinModeInfos;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MPResultTeamData
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	int TeamScore;//[Offset: 0x4, Size: 0x4]
	int TeamScoreKillCount;//[Offset: 0x8, Size: 0x4]
	int TeamID;//[Offset: 0xc, Size: 0x4]
	BattleResultTeammate[] members;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BattleResultTeammate
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
	FString Name;//[Offset: 0x10, Size: 0x10]
	int KillNum;//[Offset: 0x20, Size: 0x4]
	int DeathNum;//[Offset: 0x24, Size: 0x4]
	int AssistNum;//[Offset: 0x28, Size: 0x4]
	int RevivalNum;//[Offset: 0x2c, Size: 0x4]
	int RescueNum;//[Offset: 0x30, Size: 0x4]
	int SurviveTime;//[Offset: 0x34, Size: 0x4]
	float DamageAmount;//[Offset: 0x38, Size: 0x4]
	int Rank;//[Offset: 0x3c, Size: 0x4]
	int LegendID;//[Offset: 0x40, Size: 0x4]
	int LegendSkin;//[Offset: 0x44, Size: 0x4]
	int FrameID;//[Offset: 0x48, Size: 0x4]
	int PosID;//[Offset: 0x4c, Size: 0x4]
	int bIsEscape;//[Offset: 0x50, Size: 0x4]
	bool bAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int Score;//[Offset: 0x58, Size: 0x4]
	BRAreanDetailData ArenaDetail;//[Offset: 0x60, Size: 0x70]
	int[] Emote;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: BRAreanDetailData
	BRAreanBrilliantData Brilliant;//[Offset: 0x0, Size: 0x3c]
	int64[] Achievements;//[Offset: 0x40, Size: 0x10]
	uint64 Score;//[Offset: 0x50, Size: 0x8]
	float RankRatio;//[Offset: 0x58, Size: 0x4]
	BRAreanRadarData Radar;//[Offset: 0x5c, Size: 0x14]

--------------------------------
Class: BRAreanBrilliantData
	int ComboKill;//[Offset: 0x0, Size: 0x4]
	int ComboKillAvg;//[Offset: 0x4, Size: 0x4]
	float HeadShotRate;//[Offset: 0x8, Size: 0x4]
	float HeadShotRateAvg;//[Offset: 0xc, Size: 0x4]
	float DamageTImeRecoveryHP;//[Offset: 0x10, Size: 0x4]
	float DamageTImeRecoveryHPAvg;//[Offset: 0x14, Size: 0x4]
	float VerticalDamage;//[Offset: 0x18, Size: 0x4]
	float VerticalDamageAvg;//[Offset: 0x1c, Size: 0x4]
	float BehiindDamage;//[Offset: 0x20, Size: 0x4]
	float BehiindDamageAvg;//[Offset: 0x24, Size: 0x4]
	int SegmentLevel;//[Offset: 0x28, Size: 0x4]
	float KillAvg;//[Offset: 0x2c, Size: 0x4]
	float AssistAvg;//[Offset: 0x30, Size: 0x4]
	float DamageAvg;//[Offset: 0x34, Size: 0x4]
	int GameNum;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: BRAreanRadarData
	float Kill;//[Offset: 0x0, Size: 0x4]
	float Rank;//[Offset: 0x4, Size: 0x4]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float Revive;//[Offset: 0xc, Size: 0x4]
	float Survival;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WinModeInfo
	uint64 PlayerKey;//[Offset: 0x0, Size: 0x8]
	FString PlayerName;//[Offset: 0x8, Size: 0x10]
	int LegendID;//[Offset: 0x18, Size: 0x4]
	int LegendSkin;//[Offset: 0x1c, Size: 0x4]
	int[] Emote;//[Offset: 0x20, Size: 0x10]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MsgAssistantCompoent.ActorComponent.Object
	ApexAnimNotifySound*[] SoundsPool;//[Offset: 0xf8, Size: 0x10]
	<ApexAnimNotifySound*> SoundsPlayingHolder;//[Offset: 0x108, Size: 0x50]
	float WatingOnPlayVOOverTime;//[Offset: 0x268, Size: 0x4]
	int SoundPoolInitSize;//[Offset: 0x26c, Size: 0x4]
	class ApexAnimNotifySound* SoundClass;//[Offset: 0x318, Size: 0x8]
	<enum,MsgCenterConfig> Config;//[Offset: 0x320, Size: 0x50]
	LegendVoiceGuideConfigAsset* DALegendVoiceGuide;//[Offset: 0x370, Size: 0x8]
	LegnedVoiceGuideItem*[] GuideItemHolder;//[Offset: 0x378, Size: 0x10]
	void SetEventPlayEnable(bool bEnable);// 0x7d6224c
	void ServerPushEvent(int EventId, Actor* RelevantActors, bool bHasAutonomousPlayed);// 0x7d61ed4
	void PushEventAutonomous(int EventId, Actor* Player);// 0x7d62450
	void PushEvent(int EventId, Actor* RelevantActors);// 0x7d62588
	void PlayAudio(int EventId, Actor* Player, int Index);// 0x7d62098
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x5e152a8
	float GetLastTriggerTimeAtServer(out const int EventId, out const int PlayerKey);// 0x7d626c0
	void ClientReceivedEvent(int EventId, Actor* Player);// 0x7d62310

--------------------------------
Class: ApexAnimNotifySound.AnimNotify.Object
	FName SoundName;//[Offset: 0x58, Size: 0x8]
	PreviewAudioParam PreviewAudioParam;//[Offset: 0x60, Size: 0x4]
	bool bStopByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x68, Size: 0x28]
	int PlaySound(ApexAnimNotifySoundSetting* SoundSetting, Actor* Actor);// 0x797b388
	void OnSoundPlayVO(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x4d0a3bc
	void Notify(Actor* Actor, FName InSoundName);// 0x797b594
	ApexAnimNotifySoundSetting* GetSoundSettingByActor(Actor* Actor);// 0x797b4d0

--------------------------------
Class: PreviewAudioParam
	enum SoundPlayType;//[Offset: 0x0, Size: 0x1]
	enum LegendType;//[Offset: 0x1, Size: 0x1]
	enum WeaponType;//[Offset: 0x2, Size: 0x1]
	enum PawnState;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ApexAnimNotifySoundMap.DataAsset.Object
	<FName,ApexAnimNotifySoundGroup*> SoundMap;//[Offset: 0x30, Size: 0x50]
	<FName,int> LegendVOSoundNameMap;//[Offset: 0x80, Size: 0x50]
	ApexAnimNotifySoundDefaultSoundGroup_VO* DefaultVOSoundMap;//[Offset: 0xd0, Size: 0x8]
	<enum,ApexAnimNotifySoundLegendSoundGroup_VO*> LegendVOSoundMap;//[Offset: 0xd8, Size: 0x50]
	FName SearchSoundName;//[Offset: 0x128, Size: 0x8]
	enum DeleteLegendType;//[Offset: 0x130, Size: 0x1]
	void SearchSound();// 0x797ae54
	void OnSoundPlayVO(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x797acec
	void ImportExcel();// 0x797ae84
	void ExportExcel();// 0x797ae6c
	void DeleteSearchSound();// 0x797ae3c
	void DeleteLegendSound();// 0x797ae24

--------------------------------
Class: ApexAnimNotifySoundGroup.Object

--------------------------------
Class: ApexAnimNotifySoundDefaultSoundGroup_VO.Object
	<FName,CharacterVOAudioData> SoundMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: CharacterVOAudioData
	<enum,VOAudioData> CharacterVO;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: VOAudioData
	FString AudioEvent;//[Offset: 0x0, Size: 0x10]
	VOData[] VOData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: VOData
	FString ExternalSrc;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ApexAnimNotifySoundLegendSoundGroup_VO.DataAsset.Object
	CharacterVOAudioData[] SoundMap;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x260, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x268, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x278, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x27c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x280, Size: 0x4]
	byte OcclusionCollisionChannel;//[Offset: 0x284, Size: 0x1]
	bool EnableOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x285, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	float roomReverbAuxBusGain;//[Offset: 0x290, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x294, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x298, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x29c, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a0, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a0, Size: 0x1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a0, Size: 0x1]
	bool EnableTickOptimize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a0, Size: 0x1]
	bool DistanceDelay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a0, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x2a4, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x2a8, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2b0, Size: 0x8]
	FString EventName;//[Offset: 0x2b8, Size: 0x10]
	bool IsApplyRemoteSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x670c388
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x670bfd4
	void Stop();// 0x670d09c
	void SetUseSpatialAudio(const bool bNewValue);// 0x670e6ac
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x670c660
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x670c57c
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x670ce1c
	void SetOutputBusVolume(float BusVolume);// 0x670bf04
	void SetListeners(out const AkComponent*[] Listeners);// 0x670c46c
	void SetAttenuationScalingFactor(float Value);// 0x670be34
	void PostTrigger(FString Trigger);// 0x670c8ec
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x670e02c
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x670e30c
	void PostAkEventForTimerCallbackWithName(FString in_EventName);// 0x670d0b0
	void PostAkEventForTimerCallback(FString in_EventName, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x670d1b0
	int PostAkEventByName(FString in_EventName);// 0x670d600
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x670d710
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x670db34
	void PlayEvent();// 0x670bdb8
	void GetRTPCValue(FString RTPC, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType);// 0x670ca5c
	float GetAttenuationRadius();// 0x670bde0
	void ForceRefreshOcclusion();// 0x670bdcc

--------------------------------
Class: AkAuxBus.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAudioBank.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	void OnCompleteAkBankUnload(enum res);// 0x670a7b0
	void OnCompleteAkBankLoad(enum res);// 0x4b6d088

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AkAudioEvent.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x30, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0x38, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float MinimumDuration;//[Offset: 0x40, Size: 0x4]
	float MaximumDuration;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: ApexAnimNotifySoundSetting.Object
	ApexAnimNotifySoundAkFinder* AkFinder;//[Offset: 0x28, Size: 0x8]
	ApexAnimNotifySoundModule*[] Modules;//[Offset: 0x30, Size: 0x10]
	ApexAnimNotifyPicker*[] StopAnimNotices;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ApexAnimNotifySoundAkFinder.Object

--------------------------------
Class: ApexAnimNotifySoundModule.Object

--------------------------------
Class: ApexAnimNotifyPicker.Object
	class ApexAnimNotifySound* NotifyClass;//[Offset: 0x28, Size: 0x8]
	ApexAnimNotifySound* Notify;//[Offset: 0x30, Size: 0x8]
	FName SoundName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MsgCenterConfig
	bool bShowSubtitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LegendVoiceGuideConfigAsset.DataAsset.Object
	float TotalCoolDown;//[Offset: 0x30, Size: 0x4]
	class LegnedVoiceGuideItem[] ItemsClasses;//[Offset: 0x38, Size: 0x10]
	float CheckGuideInterval;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: LegnedVoiceGuideItem.Object
	int EventId;//[Offset: 0x28, Size: 0x4]
	bool bUseGlobalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	LegendVoiceGuideCondition* TriggerCondition;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LegendVoiceGuideCondition.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	void Tick(float DeltaTime);// 0x7ceced0
	bool CheckCondition(ApexPlayerController* PC);// 0x7cecf94

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0x118, Size: 0x10]
	enum StartStateType;//[Offset: 0x128, Size: 0x1]
	enum FinishStateType;//[Offset: 0x129, Size: 0x1]
	State* CurrentState;//[Offset: 0x130, Size: 0x8]
	enum LastMsg;//[Offset: 0x138, Size: 0x1]
	enum NextStateType;//[Offset: 0x139, Size: 0x1]
	enum CurrentStateType;//[Offset: 0x13a, Size: 0x1]
	enum LastStateType;//[Offset: 0x13b, Size: 0x1]
	enum GetCurrentStateType();// 0xa17b114

--------------------------------
Class: State.Object
	Enum* pEnum;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: ControllerMagmaComponent.ActorComponent.Object
	float MagmaRiseStateChangedLockTime;//[Offset: 0xf8, Size: 0x4]
	float SwitchBackToCharacterBlendTime;//[Offset: 0xfc, Size: 0x4]
	byte ViewTargetBlendFunc;//[Offset: 0x100, Size: 0x1]
	bool bClientCheckMagmaRiseStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bServerCheckMagmaRiseStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	bool IsMagmaRising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103, Size: 0x1]
	float UpdateTimerInterval;//[Offset: 0x114, Size: 0x4]
	float MagmaRiseDelayTime;//[Offset: 0x120, Size: 0x4]

--------------------------------
Class: ApexPostProcessComponent.ActorComponent.Object
	class UserWidget* CloseEyeWidgetClass;//[Offset: 0xf8, Size: 0x8]
	<enum,ApexPostProcessCfgItem> PostProcessConfigMap;//[Offset: 0x120, Size: 0x50]
	<enum,Object*> PostProcessUnitMap;//[Offset: 0x170, Size: 0x50]
	TimerHandle CloseEyeTh;//[Offset: 0x1c0, Size: 0x8]
	float CloseEyePauseTime;//[Offset: 0x1c8, Size: 0x4]
	void UnRegisterPostProcess(enum PPT);// 0x7a30948
	void RegisterPostProcess(enum PPT, Object* ApexPostProcessUnit);// 0x7a30a0c
	void EndPostProcess(enum PPT);// 0x7a30b4c
	void EndGreyScreen();// 0xa0ed8f4
	void EndCloseEye();// 0xa0ed92c
	void EndArc();// 0xa0ed8bc
	void BeginPostProcess(enum PPT);// 0x7a30c10
	void BeginGreyScreen();// 0xa0ed910
	void BeginCloseEye(byte TimeSec, float StartAtTime);// 0x7a30cd4
	void BeginArc();// 0xa0ed8d8

--------------------------------
Class: ApexPostProcessCfgItem
	enum PPT;//[Offset: 0x0, Size: 0x1]
	class Actor* PostProcessClass;//[Offset: 0x8, Size: 0x8]
	float Duation;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DrugRecommendComponent.ActorComponent.Object
	FName SettingKey;//[Offset: 0x10c, Size: 0x8]
	DrugRecommendDefine[] InPoisonCircleRecommendConfig;//[Offset: 0x120, Size: 0x10]
	DrugRecommendDefine[] NotInPoisonCircleRecommendConfig;//[Offset: 0x130, Size: 0x10]
	int RecommendMinAddHealthValue;//[Offset: 0x140, Size: 0x4]
	int RecommendMinAddShieldValue;//[Offset: 0x144, Size: 0x4]
	float RecommendUpdateInterval;//[Offset: 0x148, Size: 0x4]
	void UpdateDrugRecommend();// 0x7bcc228
	void OnGetHpMpChangeException(bool IsHpChange, float ChangedValue, enum ChangeReason);// 0x7bcc0e8
	void DrugRecommendOver();// 0x7bcc208

--------------------------------
Class: DrugRecommendDefine
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float HealthRateMin;//[Offset: 0x4, Size: 0x4]
	float HealthRateMax;//[Offset: 0x8, Size: 0x4]
	float ShieldRateMin;//[Offset: 0xc, Size: 0x4]
	float ShieldRateMax;//[Offset: 0x10, Size: 0x4]
	bool EquipShieldLevel4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	enum DrugRecommendType;//[Offset: 0x15, Size: 0x1]

--------------------------------
Class: QuickItemComponent.ActorComponent.Object
	<int,QuickItemArray> ProjectileModeCfg;//[Offset: 0xf8, Size: 0x50]
	<int,QuickItemArray> MedicalModeCfg;//[Offset: 0x148, Size: 0x50]
	void GetQuickItemModeCfg(FString ModeId, out <int,QuickItemArray> ModeCfgMap, out QuickItemArray QuickItemArray, FString ConfigKey);// 0x7e007c4
	QuickItemArray GetProjectileModeCfg(FString ModeId);// 0x7e005e4
	QuickItemArray GetMedicalModeCfg(FString ModeId);// 0x7e00404

--------------------------------
Class: QuickItemArray
	int[] ItemIDArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: HUDManagerComponent.ActorComponent.Object
	enum[] PreCreateArray;//[Offset: 0xf8, Size: 0x10]
	<enum,class UserWidget> HUDDefines;//[Offset: 0x108, Size: 0x50]
	<enum,UserWidget*> HUDMap;//[Offset: 0x158, Size: 0x50]
	bool bKillLeaderOnShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	BattlefieldKillKingMessage[] KillLeaderMsgArray;//[Offset: 0x1b0, Size: 0x10]
	void ShowKillLeaderTip(BattlefieldKillKingMessage Msg);// 0x7cb61b8
	void ShowKillLeaderKilledTip(FString Msg, int MsgType);// 0x7cb5f10
	void ShowKillLeaderAchievedTip(int KillCount);// 0x7cb60e8
	void PreCreateWidget();// 0x7cb64ec
	void PopKillLeaderMsg();// 0x7cb61a4
	void OnPreWidgetLoad();// 0x7cb64d8
	UserWidget* GetUserWidget(enum HUDType);// 0x7cb6414
	void EnableExplosionTimeTips(bool bEnable, float RealExplosionTime, float Percent);// 0x7cb5d4c

--------------------------------
Class: BattlefieldKillKingMessage
	enum MessageType;//[Offset: 0x0, Size: 0x1]
	enum KillKingMessageType;//[Offset: 0x1, Size: 0x1]
	BattlefieldPlayerInfo KillerInfo;//[Offset: 0x8, Size: 0x20]
	BattlefieldPlayerInfo VictimInfo;//[Offset: 0x28, Size: 0x20]
	int KillCount;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BattlefieldPlayerInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x10, Size: 0x4]
	int TeamID;//[Offset: 0x14, Size: 0x4]
	int TeamIdx;//[Offset: 0x18, Size: 0x4]
	int SegmentLevel;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: DataReportComponent.ActorComponent.Object
	CommonReportDataInfoDataAsset* CommonReportDataInfoDataAsset;//[Offset: 0x148, Size: 0x8]
	float SliceTime;//[Offset: 0x150, Size: 0x4]
	int[] StatisticOpticList;//[Offset: 0x158, Size: 0x10]
	int[] StatisticAttachList;//[Offset: 0x168, Size: 0x10]
	Controller* CurrentOBTargetPC;//[Offset: 0x280, Size: 0x8]
	OBCacheData[] OBData;//[Offset: 0x288, Size: 0x10]
	SkillSingleMatchData SkillSingleMatchData;//[Offset: 0x2e0, Size: 0x18]
	void UploadImportantState1(int Number);// 0x7bb3134
	void TickImportantState();// 0x7bb31f8
	void ServerSetPlayerCameraMaxDistance(float Dist);// 0x7bb2c5c
	void ServerReportUseMiniMap(int Data);// 0x7bb2338
	void ServerReportSomeLog(const SecBasic SomeFlow);// 0x7bb2f8c
	void ServerRecordWatchStat(enum WatchStat, int count, bool CheckInOB);// 0x7bb39c8
	void ServerOnParachuteBtnEvent(enum ReportEvent);// 0x7bb23fc
	void ServerOnMiniMapShow(bool bShow);// 0x7bb2b64
	void ServerOnMiniMapPing(Vector2D InPingLoc);// 0x7bb2994
	void ServerOnMiniMapPinch(Vector2D InPingchCenter);// 0x7bb2a7c
	void ServerOnMiniMapDeletePing();// 0x7bb2938
	void ServerDataRepUseReplicator();// 0x7bb257c
	void ServerDataRepOpenDoor(bool bOpen, enum Type);// 0x7bb26c4
	void ServerDataRepCancleOpenTreasureDoor();// 0x7bb25b8
	void ServerDataRepBreakOpenTreasureDoorBySkill();// 0x7bb25a4
	void ServerDataRepBreakOpenTreasureDoorByDying();// 0x7bb2590
	void ServerDataRepAutoOpenDoor(bool bAutoOpen);// 0x7bb25cc
	void ServerDataRepAddMaterialNum(int AddNum);// 0x7bb24c0
	void ReportCommonData(out const CommonReportDataInfo ReportDataInfo);// 0x7bb47ec
	void OnWeaponShoot(Weapon* Weapon);// 0x7bb390c
	void OnWeaponReportShoot(Weapon* Weapon, int ShootID);// 0x7bb37d4
	void OnWeaponDestroy(Weapon* Weapon);// 0x7bb359c
	void OnPlayerExit();// 0x7bb4990
	void OnLoadDataReportSettings(AsyncLoaderBase* Loader);// 0x7bb49a4
	void OnLaunchJumpPad(Controller* PlayerController, Actor* LaunchPadActor);// 0x7bb2804
	void OnGameEnd();// 0x7bb497c
	void OnBulletHit(Weapon* Weapon, out const BulletHitInfoUploadData BulletHitInfoUploadData);// 0x7bb3658
	void EndReportSecCircleFlowData(int CircleIndex);// 0x7bb2d48
	void DSReportWeaponHitFlow();// 0x7bb32c8
	void DSReportWeaponHitData(int WeaponID);// 0x7bb320c
	void DSReportWeaponFlow();// 0x7bb32dc
	void DSReportUpgradeArmorFlow(out const UpgradeArmorFlowData UpgradeArmorFlowData, ApexCharacter* OwnerCharacter);// 0x7bb45fc
	void DSReportNetInfoFlow(int64 UID, FString ClientIP, int ping, int inTotal, int inTotalLost, int inOutOrder, int outTotal, int outTotalLost, int outOutOrder);// 0x7bb3b9c
	void DSReportGravityElevatorUseFlow(out const GravityElevatorUseFlow GravityElevatorUseFlow, ApexCharacter* OwnerCharacter);// 0x7bb4478
	void DSReportClientNetInfo(float PingAverage, float MaxPing, float MinPing, int PingRecvCount, int PingDropCount, int InLossRate, int OutLossRate, int AvgJitter);// 0x7bb4064
	void DSReportAttackFlow(out const BulletHitInfoUploadData BulletHitInfo, ShootWeapon* ShootWeapon, out const SecurityLogHitTargetInfo HitTargetInfo, out const BulletHitInfoTLogData TLogData);// 0x7bb32f0
	void ClientReportSomeLog();// 0x7bb3b88
	void BeginReportSecCircleFlowData(out const SecCircleFlow SecCircleFlow);// 0x7bb2e04

--------------------------------
Class: SecBasic
	FString dtEventTime;//[Offset: 0x0, Size: 0x10]
	FString SecReportData;//[Offset: 0x10, Size: 0x10]
	FString RoleID;//[Offset: 0x20, Size: 0x10]
	FString ClientStartTime;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CommonReportDataInfo
	enum DataType;//[Offset: 0x0, Size: 0x1]
	enum ReportMode;//[Offset: 0x1, Size: 0x1]
	<FString,float> DataMap;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Weapon.Actor.Object
	WeaponMeshLogicObject* WeaponMeshComponent;//[Offset: 0x270, Size: 0x8]
	ApgameWeaponCoreComponent* WeaponCoreCompPtr;//[Offset: 0x278, Size: 0x8]
	WeaponDataAsset* WeaponConfigDataBP;//[Offset: 0x280, Size: 0x8]
	ShootWeaponDataAsset* ShootWeaponConfigDataBP;//[Offset: 0x288, Size: 0x8]
	WeaponStateManagerLogicObject* StateManagerLogic;//[Offset: 0x290, Size: 0x8]
	WeaponEffectLogicObject* WeaponEffectLogic;//[Offset: 0x298, Size: 0x8]
	void SetWeaponAttrModifierEnable(out const FName AttrModifierID, bool bEnable);// 0x7f35998
	bool IsOwnerAutonomous();// 0x7f360a8
	bool IsLikeAutonomous();// 0x7f360e0
	enum GetWeaponType();// 0x7f36040
	enum GetWeaponSlot();// 0x7f3600c
	MeshComponent* GetWeaponMeshComponent();// 0x7f35e64
	bool GetWeaponIsInit();// 0x7f35fc4
	ApgameWeaponCoreComponent* GetWeaponCoreComp();// 0xa1926b4
	enum GetWeaponAttachSocket();// 0x7f35c44
	enum GetWeaponAnimType();// 0x7f35d90
	float GetStockFactor();// 0x7f35ad8
	float GetStockBreathFactor();// 0x7f35aa4
	float GetRaiseWeaponTimeRuntime();// 0x7f35b74
	float GetPutOnWeaponTimeRuntime();// 0x7f35bdc
	float GetPutOffWeaponTimeRuntime();// 0x7f35c10
	byte GetOwnerPlayerRole();// 0x7f3614c
	FString GetOwnerPlayerName();// 0x7f36198
	int GetOwnerPlayerKey();// 0x7f36118
	PlayerController* GetOwnerPlayerController();// 0x7f3629c
	Pawn* GetOwnerPawn();// 0x7f36338
	Controller* GetOwnerController();// 0x7f362d0
	ApexCharacter* GetOwnerCharacter();// 0x7f36304
	ApexPlayerController* GetOwnerApexController();// 0x7f36268
	Actor* GetOwnerActor();// 0x7f3636c
	float GetLowerWeaponTimeRuntime();// 0x7f35b40
	int GetItemTableID();// 0x7f36074
	ItemDefineID GetItemDefineID();// 0xa1926f4
	bool GetIsCurUsingWeapon();// 0x7f35dc4
	float GetFirstPickupToIdleTimeRuntime();// 0x7f35ba8
	float GetEquipAttachmentTimeRuntime();// 0x7f35b0c
	int GetDeriveID();// 0xa1926d0
	enum GetCurFreshWeaponState();// 0x7f35f90
	float GetBreathRuntime();// 0x7f35a70
	ItemHandleBase* GetBackpackItemHandle();// 0x7f35dfc
	BackpackComponent* GetBackpackComponent();// 0x7f35e30
	bool DoesWeaponOrOwnerHasCondition(enum TargetCondition);// 0x7f35d08
	bool DoesWeaponHasCondition(enum TargetCondition);// 0x7f35c80
	void ClearWeaponAttrModifier();// 0x7f35984
	bool CheckWeaponOnBack();// 0x7f35f08
	bool CheckWeaponFiring();// 0x7f35e98
	bool CheckWeaponEquipped();// 0x7f35ed0
	bool CheckWeaponEquiping();// 0x7f35f40

--------------------------------
Class: WeaponMeshLogicObject.ApgameWeaponLogicObject.Object
	StaticMeshComponent* TppThermalComponent;//[Offset: 0x40, Size: 0x8]
	ParticleSystem*[] ParticleArray;//[Offset: 0xb8, Size: 0x10]
	HitEffectDataAsset*[] HitEffectDataAssetArray;//[Offset: 0xc8, Size: 0x10]
	SoftObjectPath[] EffectPaths;//[Offset: 0xd8, Size: 0x10]
	bool bMeshChangeDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	ApgameWeapon3DUIInstance[] Weapon3DUIEntityList;//[Offset: 0x148, Size: 0x10]
	bool bThermalUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	SkeletalMeshComponent* SniperADSComponent;//[Offset: 0x1d0, Size: 0x8]
	bool bLaserSightUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	<FString,WeaponFrameEffectParticleComp> EffectParticleCompMap;//[Offset: 0x200, Size: 0x50]
	void UpdateSniperScopeShow(bool bAim);// 0x7f620b0
	void ThermalLineTrace();// 0x7f62274
	void SetSniperMaterialValue(bool bAim);// 0x7f62174
	void PostWeaponEquipped();// 0x4b56ec0
	void OnWeaponShootEvent();// 0x49f85fc
	void OnUpdateDisruptorChargeState(enum ChargePhase);// 0x7f62550
	void OnUpdateAimEvent(bool IsAiming);// 0x7f6260c
	void OnUnEquipImmediately();// 0x4ed1f0c
	void OnTPPMeshVisibility(bool bVisibility);// 0x4e272b0
	void OnStopFire();// 0x4b2944c
	void OnStaticEffectEventTriggered(enum EffectEvent, float Value, int InStackCount);// 0x7f61efc
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x486b8f8
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x483b720
	void OnReserveBulletNumEvent();// 0x5019e18
	void OnParticleEffectEventTriggered(enum EffectEvent, float Value);// 0x499d4ec
	void OnMultiEffectEventTriggered(enum EffectEvent, float Value, int InStackCount, bool NotifyMainMesh, bool NotifyStaticMesh, bool NotifyParticle, bool NotifyAudio);// 0x7f61a6c
	void OnMainEffectEventTriggered(enum EffectEvent, float Value, int InStackCount);// 0x4d04ae8
	void OnHeatValueChangeEvent(float HeatPercent);// 0x5401ac0
	void OnFPPMeshVisibility(bool bVisibility);// 0x4f6e5cc
	void OnEventChangeShootType();// 0x54d2d14
	void OnEventChangeDisruptorChargeValue(float Value);// 0x4ee682c
	void OnEventChangeBulletNum();// 0x4c2b734
	void OnEventChangeAimChargeLevel();// 0x5289dfc
	void OnCameraChanged();// 0x52d4858
	void OnAudioEffectEventTriggered(enum EffectEvent);// 0x7f61e40
	void OnAimFinished();// 0x4a65cc8
	void OnAimEnd();// 0x7f62238
	void OnAimChange(bool IsAiming);// 0x5070a94
	void LensDecrease();// 0x7f62260
	void HandleThermalTraceOpen(bool bAim);// 0x7f62288
	void HandleThermalEffect(bool bAim);// 0x7f6234c
	void HandleLensDecrease();// 0x7f6224c
	void HandleCrossUI(enum Slot, bool bAim);// 0x7f62410

--------------------------------
Class: ApgameWeaponLogicObject.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: HitEffectDataAsset.DataAsset.Object
	ParticleSystem* DefaultFX;//[Offset: 0x30, Size: 0x8]
	ParticleSystem* ConcreteFX;//[Offset: 0x38, Size: 0x8]
	ParticleSystem* DirtFX;//[Offset: 0x40, Size: 0x8]
	ParticleSystem* WaterFX;//[Offset: 0x48, Size: 0x8]
	ParticleSystem* MetalFX;//[Offset: 0x50, Size: 0x8]
	ParticleSystem* WoodFX;//[Offset: 0x58, Size: 0x8]
	ParticleSystem* GlassFX;//[Offset: 0x60, Size: 0x8]
	ParticleSystem* GrassFX;//[Offset: 0x68, Size: 0x8]
	ParticleSystem* FleshFX;//[Offset: 0x70, Size: 0x8]
	ParticleSystem* FleshFX1V3;//[Offset: 0x78, Size: 0x8]
	ParticleSystem* FleshFX3V1;//[Offset: 0x80, Size: 0x8]
	ParticleSystem* FleshFX3V3;//[Offset: 0x88, Size: 0x8]
	ParticleSystem* AutonomousFleshFX;//[Offset: 0x90, Size: 0x8]
	ParticleSystem* SteelFX;//[Offset: 0x98, Size: 0x8]
	ParticleSystem* SandbagFX;//[Offset: 0xa0, Size: 0x8]
	ParticleSystem* SandFX;//[Offset: 0xa8, Size: 0x8]
	ParticleSystem* ClothFX;//[Offset: 0xb0, Size: 0x8]
	ParticleSystem* PlasticFX;//[Offset: 0xb8, Size: 0x8]
	ParticleSystem* LeatherFX;//[Offset: 0xc0, Size: 0x8]
	ParticleSystem* CeramicsFX;//[Offset: 0xc8, Size: 0x8]
	ParticleSystem* PaperFX;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* StoneFX;//[Offset: 0xd8, Size: 0x8]
	ParticleSystem* SnowFX;//[Offset: 0xe0, Size: 0x8]
	ParticleSystem* PopCanFX;//[Offset: 0xe8, Size: 0x8]
	ParticleSystem* PyreflyFX;//[Offset: 0xf0, Size: 0x8]
	ParticleSystem* LeafFX;//[Offset: 0xf8, Size: 0x8]
	ParticleSystem* CarFX;//[Offset: 0x100, Size: 0x8]
	ParticleSystem* AsphaltFX;//[Offset: 0x108, Size: 0x8]
	ParticleSystem* IceFX;//[Offset: 0x110, Size: 0x8]
	ParticleSystem* ShieldFX;//[Offset: 0x118, Size: 0x8]
	ParticleSystem* HitShieldFX1V3;//[Offset: 0x120, Size: 0x8]
	ParticleSystem* HitShieldFX3V1;//[Offset: 0x128, Size: 0x8]
	ParticleSystem* HitShieldFX3V3;//[Offset: 0x130, Size: 0x8]
	ParticleSystem* EnemyEnergyShieldFX;//[Offset: 0x138, Size: 0x8]
	ParticleSystem* TeammateEnergyShieldFX;//[Offset: 0x140, Size: 0x8]
	FName ShieldColorName;//[Offset: 0x148, Size: 0x8]
	ParticleSystem* BreakShieldFX;//[Offset: 0x150, Size: 0x8]
	ParticleSystem* BreakShieldFX1V3;//[Offset: 0x158, Size: 0x8]
	ParticleSystem* BreakShieldFX3V1;//[Offset: 0x160, Size: 0x8]
	ParticleSystem* BreakShieldFX3V3;//[Offset: 0x168, Size: 0x8]
	ParticleSystem* FatalHealthFX;//[Offset: 0x170, Size: 0x8]
	ParticleSystem* FatalHealthFX1V3;//[Offset: 0x178, Size: 0x8]
	ParticleSystem* FatalHealthFX3V1;//[Offset: 0x180, Size: 0x8]
	ParticleSystem* FatalHealthFX3V3;//[Offset: 0x188, Size: 0x8]
	ParticleSystem* ArmorFX;//[Offset: 0x190, Size: 0x8]
	ParticleSystem* TargetFX;//[Offset: 0x198, Size: 0x8]
	ParticleSystem* MetalNoDecalFX;//[Offset: 0x1a0, Size: 0x8]
	ParticleSystem* AndroidFX;//[Offset: 0x1a8, Size: 0x8]
	ParticleSystem* MagmaFX;//[Offset: 0x1b0, Size: 0x8]
	ParticleSystem* DefaultTeammateFleshFX;//[Offset: 0x1b8, Size: 0x8]
	ParticleSystem* DefaultTeammateShieldFX;//[Offset: 0x1c0, Size: 0x8]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0x1d0, Size: 0x50]
	AkAudioEvent* HitWorldSound;//[Offset: 0x220, Size: 0x8]
	AkAudioEvent* HitTeammateSound;//[Offset: 0x228, Size: 0x8]
	AkAudioEvent* HitBeepSound;//[Offset: 0x230, Size: 0x8]
	AkAudioEvent* DefaultSound3V1;//[Offset: 0x238, Size: 0x8]
	AkAudioEvent* HitShieldSound3V1;//[Offset: 0x240, Size: 0x8]
	AkAudioEvent* BreakShieldSound3V1;//[Offset: 0x248, Size: 0x8]
	AkAudioEvent* HeadShotSound3V1;//[Offset: 0x250, Size: 0x8]
	AkAudioEvent* HeadShotFatalSound3V1;//[Offset: 0x258, Size: 0x8]
	AkAudioEvent* KnockDownShieldSound3V1;//[Offset: 0x260, Size: 0x8]
	AkAudioEvent* FatalHealthSound3V1;//[Offset: 0x268, Size: 0x8]
	AkAudioEvent* DefaultSound1V3;//[Offset: 0x270, Size: 0x8]
	AkAudioEvent* HitShieldSound1V3;//[Offset: 0x278, Size: 0x8]
	AkAudioEvent* BreakShieldSound1V3;//[Offset: 0x280, Size: 0x8]
	AkAudioEvent* HeadShotSound1V3;//[Offset: 0x288, Size: 0x8]
	AkAudioEvent* HeadShotFatalSound1V3;//[Offset: 0x290, Size: 0x8]
	AkAudioEvent* FatalHealthSound1V3;//[Offset: 0x298, Size: 0x8]
	AkAudioEvent* KnockDownShieldSound1V3;//[Offset: 0x2a0, Size: 0x8]
	AkAudioEvent* DefaultSound3V3;//[Offset: 0x2a8, Size: 0x8]
	AkAudioEvent* HitShieldSound3V3;//[Offset: 0x2b0, Size: 0x8]
	AkAudioEvent* BreakShieldSound3V3;//[Offset: 0x2b8, Size: 0x8]
	AkAudioEvent* HeadShotSound3V3;//[Offset: 0x2c0, Size: 0x8]
	AkAudioEvent* HeadShotFatalSound3V3;//[Offset: 0x2c8, Size: 0x8]
	AkAudioEvent* FatalHealthSound3V3;//[Offset: 0x2d0, Size: 0x8]
	AkAudioEvent* KnockDownShieldSound3V3;//[Offset: 0x2d8, Size: 0x8]
	AkAudioEvent* BulletFlySound;//[Offset: 0x2e0, Size: 0x8]
	AkAudioEvent* ChargeRifleFinalHit;//[Offset: 0x2e8, Size: 0x8]
	DecalData DefaultDecal;//[Offset: 0x2f0, Size: 0x28]
	DecalData ConcreteDecal;//[Offset: 0x318, Size: 0x28]
	DecalData DirtDecal;//[Offset: 0x340, Size: 0x28]
	DecalData WaterDecal;//[Offset: 0x368, Size: 0x28]
	DecalData MetalDecal;//[Offset: 0x390, Size: 0x28]
	DecalData WoodDecal;//[Offset: 0x3b8, Size: 0x28]
	DecalData GrassDecal;//[Offset: 0x3e0, Size: 0x28]
	DecalData GlassDecal;//[Offset: 0x408, Size: 0x28]
	DecalData FleshDecal;//[Offset: 0x430, Size: 0x28]
	DecalData FleshDecalAutomonous;//[Offset: 0x458, Size: 0x28]
	DecalData TeammateDecal;//[Offset: 0x480, Size: 0x28]
	DecalData SteelDecal;//[Offset: 0x4a8, Size: 0x28]
	DecalData SandbagDecal;//[Offset: 0x4d0, Size: 0x28]
	DecalData SandDecal;//[Offset: 0x4f8, Size: 0x28]
	DecalData ClothDecal;//[Offset: 0x520, Size: 0x28]
	DecalData PlasticDecal;//[Offset: 0x548, Size: 0x28]
	DecalData LeatherDecal;//[Offset: 0x570, Size: 0x28]
	DecalData CeramicsDecal;//[Offset: 0x598, Size: 0x28]
	DecalData PaperDecal;//[Offset: 0x5c0, Size: 0x28]
	DecalData StoneDecal;//[Offset: 0x5e8, Size: 0x28]
	DecalData SnowDecal;//[Offset: 0x610, Size: 0x28]
	DecalData PopCanDecal;//[Offset: 0x638, Size: 0x28]
	DecalData PyreflyDecal;//[Offset: 0x660, Size: 0x28]
	DecalData LeafDecal;//[Offset: 0x688, Size: 0x28]
	DecalData CarDecal;//[Offset: 0x6b0, Size: 0x28]
	DecalData AsphaltDecal;//[Offset: 0x6d8, Size: 0x28]
	DecalData IceDecal;//[Offset: 0x700, Size: 0x28]
	DecalData ShieldDecal;//[Offset: 0x728, Size: 0x28]
	DecalData ArmorDecal;//[Offset: 0x750, Size: 0x28]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]
	float LifeSpan;//[Offset: 0x4, Size: 0x4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 0x8]
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 0x4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 0x4]
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 0x4]
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 0x4]
	float DecalFadeScreenSize;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ApgameWeapon3DUIInstance
	enum Type;//[Offset: 0x0, Size: 0x1]
	Weapon3DUIEntity* Entity;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Weapon3DUIEntity.Object
	float[] TimeLineList;//[Offset: 0x28, Size: 0x10]
	TimerHandle HideEnergyFullEffectHandle;//[Offset: 0x38, Size: 0x8]
	ItemDefineID OwnerItemID;//[Offset: 0x48, Size: 0x18]
	FString WidgetKey;//[Offset: 0x60, Size: 0x10]
	Weapon* OwnerWeapon;//[Offset: 0x70, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x78, Size: 0x8]
	DynamicMatConfig[] DynamicMatConfigList;//[Offset: 0x80, Size: 0x10]
	Weapon3DUIActor* DynamicMatActor;//[Offset: 0x90, Size: 0x8]
	LinearColor[] Weapon3DUIColorList;//[Offset: 0x98, Size: 0x10]
	void ShowEnergyFullEffect();// 0x7f38a68
	void OnVisibleChange(bool IsAiming, bool bHasEquipOptical);// 0x7f38de8
	void OnUpdateZoomScale(FText ZoomScale, bool BMax);// 0x7f386b0
	void OnUpdateTickEnable(bool bTick);// 0x7f39068
	void OnUpdateShootTypeEvent(int Index);// 0x7f38d2c
	void OnUpdateReserveBulletEvent(int ReserveBullet, int ReserveBulletBudget);// 0x7f38f30
	void OnUpdateHeat(float HeatValue);// 0x7f38c70
	void OnUpdateDisruptorEnergy(int CurEnergy, int MaxValue);// 0x7f38b38
	void OnUpdateDisruptorChargeState(enum ChargePhase);// 0x7f38a7c
	void OnUpdateAimBulletUI(bool bAiming);// 0x7f388cc
	void OnUpdate3DUICustom(LinearColor CColor, float CWidth, float CHola, int CSet);// 0x7f3810c
	void OnLensDecrease(float Value);// 0x7f38338
	void OnAimChargeAnim(int ChargeLevel, float ChargeRatio, float AimChargeTime, bool AnimEnd, float InChargeSumRatio);// 0x7f383f4
	void InnerShowEnergyFullEffect(bool bNewShow);// 0x7f389a4
	void InitUIActor(class Actor UIBPClass, MeshComponent* AttachMesh, enum w3t, ApexCharacter* Character, Weapon* Weapon, ItemDefineID ItemID);// 0x7f3912c
	void HideEnergyFullEffect();// 0x7f38990

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 0x4]
	int TypeSpecificID;//[Offset: 0x4, Size: 0x4]
	int64 InstanceID;//[Offset: 0x8, Size: 0x8]
	int64 SelfInstanceID;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: DynamicMatConfig
	MaterialInstanceDynamic*[] DynamicMatList;//[Offset: 0x0, Size: 0x10]
	bool bOnlyAimShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOnlyNotEquipShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bUpdateDisShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bUpdateDirShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	MeshComponent* MeshComponent;//[Offset: 0x18, Size: 0x8]
	WidgetComponent* WidgetComponent;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5b0, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x5b1, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x5b8, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x5c0, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1]
	float RedrawTime;//[Offset: 0x5cc, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x5d8, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	bool bEnableWidgetComponentRTScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5ec, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x5f6, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f7, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5f8, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x600, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x610, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x620, Size: 0x4]
	enum BlendMode;//[Offset: 0x624, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 0x1]
	bool bWS3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x627, Size: 0x1]
	float WS3DUIBaseOffset;//[Offset: 0x628, Size: 0x4]
	bool bDraw3DUIAfterPostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x630, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x658, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x660, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x668, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x670, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x678, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x680, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x688, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x690, Size: 0x8]
	TextureRenderTarget2D* WS3DUIRenderTarget;//[Offset: 0x698, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x6a0, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x6ac, Size: 0x8]
	int LayerZOrder;//[Offset: 0x6b4, Size: 0x4]
	enum GeometryMode;//[Offset: 0x6b8, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x6bc, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x8fe6354
	void SetWindowFocusable(bool bInWindowFocusable);// 0x8fe6424
	void SetWidgetSpace(enum NewSpace);// 0xa28bd48
	void SetWidget(UserWidget* Widget);// 0xa28c230
	void SetTwoSided(const bool bWantTwoSided);// 0x8fe66f4
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x8fe6514
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0xa28c108
	void SetRedrawTime(float InRedrawTime);// 0xa28be30
	void SetPivot(out const Vector2D InPivot);// 0xa28c008
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x8fe69b4
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x8fe68d0
	void SetGeometryMode(enum InGeometryMode);// 0xa28bc60
	void SetDrawSize(Vector2D Size);// 0x5caa888
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0xa28bf18
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0xa28bb78
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x8fe6624
	void RequestRedraw();// 0xa28c1f8
	enum GetWindowVisiblility();// 0xa28bb40
	bool GetWindowFocusable();// 0xa28bb5c
	enum GetWidgetSpace();// 0xa28be14
	UserWidget* GetUserWidgetObject();// 0xa28c308
	bool GetTwoSided();// 0x8fe67cc
	bool GetTickWhenOffscreen();// 0xa28c1dc
	TextureRenderTarget2D* GetRenderTarget();// 0x54bde44
	float GetRedrawTime();// 0xa28befc
	Vector2D GetPivot();// 0xa28c0e8
	LocalPlayer* GetOwnerPlayer();// 0x8fe689c
	MaterialInstanceDynamic* GetMaterialInstance();// 0x8fe6a84
	bool GetManuallyRedraw();// 0xa28c214
	enum GetGeometryMode();// 0xa28bd2c
	Vector2D GetDrawSize();// 0x8fe6854
	bool GetDrawAtDesiredSize();// 0xa28bfec
	float GetCylinderArcAngle();// 0xa28bc44
	Vector2D GetCurrentDrawSize();// 0x8fe680c

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe4, Size: 0x4]
	int SizeY;//[Offset: 0xe8, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10]
	byte AddressX;//[Offset: 0xfc, Size: 0x1]
	byte AddressY;//[Offset: 0xfd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfe, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfe, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xff, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x101, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x102, Size: 0x1]
	byte MipsAddressV;//[Offset: 0x103, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x104, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xdc, Size: 0x4]

--------------------------------
Class: Weapon3DUIActor.SignificanceManagedActor.Actor.Object
	FName AttachSocket;//[Offset: 0x290, Size: 0x8]
	<FString,FString> MaterialParamMap;//[Offset: 0x298, Size: 0x50]
	LinearColor[] BulletColorList;//[Offset: 0x2e8, Size: 0x10]
	<StaticMeshComponent*,DynamicMatConfig> TickMeshCompList;//[Offset: 0x2f8, Size: 0x50]
	ApexCharacter* OwnerCharacter;//[Offset: 0x348, Size: 0x8]
	Weapon* OwnerWeapon;//[Offset: 0x350, Size: 0x8]
	bool bTickUpdateDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	bool bTickUpdateDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	int LastDirection;//[Offset: 0x35c, Size: 0x4]
	float TickUpdateDisTime;//[Offset: 0x360, Size: 0x4]
	float TickAccumulate;//[Offset: 0x364, Size: 0x4]
	void SetThermalEffect(PrimitiveComponent* InComponent, bool bUse);// 0x575a1f0
	void SetOwnerWeapon(ApexCharacter* Character, Weapon* Weapon);// 0x7f37168
	void OnAim(bool bIsAim);// 0xa1d39f8
	void AddTickMeshComponent(StaticMeshComponent* TickComp, DynamicMatConfig MatCfg);// 0x7f36fe4

--------------------------------
Class: SignificanceManagedActor.Actor.Object
	FName SignificanceTag;//[Offset: 0x278, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x280, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x281, Size: 0x1]
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0x7e4b3f8

--------------------------------
Class: ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0xdb0, Size: 0x10]
	GameInitControllerComponent* GameInitController;//[Offset: 0xdc0, Size: 0x8]
	SoftObjectPath InitDataAsset;//[Offset: 0xdc8, Size: 0x18]
	ApexCharacter*[] MovingIgnoreCharacterArray;//[Offset: 0xde8, Size: 0x10]
	float CheckMovingBlockIgnoreTime;//[Offset: 0xdf8, Size: 0x4]
	float IgnoreTeamMateBlockCollectTime;//[Offset: 0xdfc, Size: 0x4]
	int8 IgnoreTeamMateBlockCollectCount;//[Offset: 0xe00, Size: 0x1]
	float TryRebootIgnoreTeamMateBlockCheckTime;//[Offset: 0xe04, Size: 0x4]
	CharacterComponentCreateData[] ComponentCreateDatas;//[Offset: 0xe08, Size: 0x10]
	delegate OnDamageByMissileFragGrenaedeDelegate;//[Offset: 0xe18, Size: 0x10]
	delegate EnterRescueDelegate;//[Offset: 0xe28, Size: 0x10]
	delegate LeaveRescueDelegate;//[Offset: 0xe38, Size: 0x10]
	FName EmojiAnimationID;//[Offset: 0xe60, Size: 0x8]
	bool bForbidEmojiAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe68, Size: 0x1]
	float RealtimeForbidEmojiAnimationTime;//[Offset: 0xe6c, Size: 0x4]
	AnimMontage* CurrentAutonomousActiveMontage;//[Offset: 0xe90, Size: 0x8]
	int CareerNumberTips;//[Offset: 0xe98, Size: 0x4]
	int SkillBpKey;//[Offset: 0xe9c, Size: 0x4]
	GameModeReSpawn* ServerReSpawnCompoent;//[Offset: 0xea0, Size: 0x8]
	int PawnBackpackCapacity;//[Offset: 0xea8, Size: 0x4]
	float HeadDamageReduce;//[Offset: 0xeac, Size: 0x4]
	float ShieldValue;//[Offset: 0xeb0, Size: 0x4]
	float ShieldValueMax;//[Offset: 0xeb4, Size: 0x4]
	float ShieldOverloadValue;//[Offset: 0xeb8, Size: 0x4]
	float ShieldOverloadValueMax;//[Offset: 0xebc, Size: 0x4]
	int ShieldLevel;//[Offset: 0xec0, Size: 0x4]
	int HelmetLevel;//[Offset: 0xec4, Size: 0x4]
	int KnockDownShieldLevel;//[Offset: 0xec8, Size: 0x4]
	int BackpackLevel;//[Offset: 0xecc, Size: 0x4]
	float TreatmentMul;//[Offset: 0xed0, Size: 0x4]
	float ProjectAntiCheatSpeedRatio;//[Offset: 0xed4, Size: 0x4]
	<enum,StateLerpArrayInfos> StateInLerpInfo;//[Offset: 0xed8, Size: 0x50]
	<enum,StateLerpArrayInfos> StateOutLerpInfo;//[Offset: 0xf28, Size: 0x50]
	bool bFaceRotationLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc8, Size: 0x1]
	float FaceRotationLerpSpeed;//[Offset: 0xfcc, Size: 0x4]
	bool bIsPutOnAnimTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 0x1]
	float DeathFadeOutTotalDeltaTime;//[Offset: 0xfe8, Size: 0x4]
	bool bOnDeathFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 0x1]
	MaterialInstanceDynamic* DeathMatInstDynamicWeak;//[Offset: 0xff0, Size: 0x8]
	float OffScreenDist;//[Offset: 0xff8, Size: 0x4]
	float TickOptimizeDist;//[Offset: 0xffc, Size: 0x4]
	bool bOffScreenOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 0x1]
	bool bSniperAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1001, Size: 0x1]
	bool BloodHoundDetectDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1002, Size: 0x1]
	int HuntLegendID;//[Offset: 0x1058, Size: 0x4]
	float TotemRecallInvincibleTime;//[Offset: 0x105c, Size: 0x4]
	ApexCharacterAnimationComponent* AnimationComponent;//[Offset: 0x1060, Size: 0x8]
	CameraComponent* MainCamera;//[Offset: 0x1068, Size: 0x8]
	UAECharacterAnimListComponent* AnimationListComponent;//[Offset: 0x1070, Size: 0x8]
	UAECharacterAnimListComponent* WeaponAnimationListComponent;//[Offset: 0x1078, Size: 0x8]
	byte RemoteViewYaw;//[Offset: 0x12b0, Size: 0x1]
	SkeletalMeshComponent* FPPMeshComp;//[Offset: 0x12b8, Size: 0x8]
	bool CharacterCameraModeIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1330, Size: 0x1]
	enum CharacterMeshMode;//[Offset: 0x1331, Size: 0x1]
	bool ServerCharacterCameraModeIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1332, Size: 0x1]
	PickupTipActor* PickupTipActor;//[Offset: 0x1338, Size: 0x8]
	PickupTipInfo PickupTipInfo;//[Offset: 0x1340, Size: 0xc]
	EnmityEntity* EnmityEntity;//[Offset: 0x1350, Size: 0x8]
	RecoverPropComponent* RecoverPropComponent;//[Offset: 0x1358, Size: 0x8]
	ActionFilterComponent* ActionFilterComponent;//[Offset: 0x1360, Size: 0x8]
	int InsideHeatShield;//[Offset: 0x1394, Size: 0x4]
	Actor* CurrentInsideHeatShieldWeak;//[Offset: 0x1398, Size: 0x8]
	float CheckInsideHeatShieldTime;//[Offset: 0x13a0, Size: 0x4]
	delegate BattleStateChangedEvent;//[Offset: 0x13a8, Size: 0x10]
	Vector FindAITargetLoc;//[Offset: 0x13e8, Size: 0xc]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f4, Size: 0x1]
	bool bIsDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f5, Size: 0x1]
	FName HeadBoneName;//[Offset: 0x13fc, Size: 0x8]
	float NameHightOffset;//[Offset: 0x1404, Size: 0x4]
	delegate OnCharacterByDamageCauser;//[Offset: 0x1410, Size: 0x10]
	delegate OnCharacterEnterLootZone;//[Offset: 0x1420, Size: 0x10]
	delegate OnCharacterLeaveLootZone;//[Offset: 0x1430, Size: 0x10]
	delegate OnOpenBinTest;//[Offset: 0x1440, Size: 0x10]
	delegate OnOpenCarePackage;//[Offset: 0x1450, Size: 0x10]
	delegate OnJumpTrain;//[Offset: 0x1460, Size: 0x10]
	delegate OnSkillEvent;//[Offset: 0x1470, Size: 0x10]
	delegate OnCharacterDying;//[Offset: 0x14b0, Size: 0x10]
	delegate OnCharacterRescue;//[Offset: 0x14c0, Size: 0x10]
	delegate OnCharacterBeRescue;//[Offset: 0x14d0, Size: 0x10]
	delegate OnCharacterRescueFinished;//[Offset: 0x14e0, Size: 0x10]
	delegate OnBeaconRescueStart;//[Offset: 0x14f0, Size: 0x10]
	delegate OnBeaconRescueEnd;//[Offset: 0x1500, Size: 0x10]
	byte CurrentAnimRescueType;//[Offset: 0x1510, Size: 0x1]
	byte PreviousAnimRescueType;//[Offset: 0x1511, Size: 0x1]
	delegate OnHealthShieldChangedWithoutMidRecommandDelegate;//[Offset: 0x1518, Size: 0x10]
	FSM* FSMConfig;//[Offset: 0x1550, Size: 0x8]
	float AtkOwnMemoryTime;//[Offset: 0x1558, Size: 0x4]
	UAECharacterAnimListComponent* _characterAnimationListComponent;//[Offset: 0x15b0, Size: 0x8]
	PawnStateManager* StateManagerComponent;//[Offset: 0x15b8, Size: 0x8]
	CharacterInputComponent* CharacterInputComponent;//[Offset: 0x15c0, Size: 0x8]
	FName CurrentSkinId;//[Offset: 0x15c8, Size: 0x8]
	enum FireMode;//[Offset: 0x15d0, Size: 0x1]
	AuraComponent* AuraComponent;//[Offset: 0x15d8, Size: 0x8]
	FString MyName;//[Offset: 0x15e0, Size: 0x10]
	FString OtherName;//[Offset: 0x15f0, Size: 0x10]
	LevelSequence* FatalitySequence;//[Offset: 0x1600, Size: 0x8]
	MovieSceneSequencePlaybackSettings FatalitySettings;//[Offset: 0x1608, Size: 0x24]
	LevelSequence* DeathSequence;//[Offset: 0x1630, Size: 0x8]
	MovieSceneSequencePlaybackSettings DeathSettings;//[Offset: 0x1638, Size: 0x24]
	UAESkillManagerComponent* SkillManagerComponent;//[Offset: 0x1660, Size: 0x8]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x1690, Size: 0x10]
	delegate OnDeathEvent;//[Offset: 0x16a0, Size: 0x10]
	delegate OnCharacterDeathEvent;//[Offset: 0x16b0, Size: 0x10]
	CarePackage* NearPackagePtr;//[Offset: 0x16f0, Size: 0x8]
	int SmokeEffectCount;//[Offset: 0x16f8, Size: 0x4]
	int SurveyTokenCount;//[Offset: 0x16fc, Size: 0x4]
	AudioEventAsync* CurPlayingEventForWraithTrigger;//[Offset: 0x1700, Size: 0x8]
	GamblingMachine* ClientSelectGamblingMachine;//[Offset: 0x1708, Size: 0x8]
	FString ClientSelectGamblingMachineBoxName;//[Offset: 0x1710, Size: 0x10]
	int[] ClientSelectGamblingMachineSelectItem;//[Offset: 0x1720, Size: 0x10]
	int[] ClientSelectGamblingMachineSelectItemCount;//[Offset: 0x1730, Size: 0x10]
	GamblingMachine* GamblingMachineOwner;//[Offset: 0x1740, Size: 0x8]
	bool bInVoidState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a0, Size: 0x1]
	bool bInPhantomVoidState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a1, Size: 0x1]
	bool bCryptoDroneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b4, Size: 0x1]
	int DroneConnectNum;//[Offset: 0x17b8, Size: 0x4]
	RepRevenantSilence RepRevenantSilence;//[Offset: 0x17d0, Size: 0x8]
	RepDeathTotemProtection DeathTotemProtection;//[Offset: 0x17e0, Size: 0x14]
	RepDeathTotemRangeTest DeathTotemRangeTest;//[Offset: 0x17f4, Size: 0x8]
	DeathTotem* CachedDeathTotem;//[Offset: 0x17fc, Size: 0x8]
	bool TotemRecallOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1804, Size: 0x1]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x1828, Size: 0x8]
	float ConfigBaseEyeHeight;//[Offset: 0x1898, Size: 0x4]
	float DyingEyeHeight;//[Offset: 0x189c, Size: 0x4]
	bool PadJumpPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a1, Size: 0x1]
	bool PadDoubleJumpPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a2, Size: 0x1]
	CharacterParachuteComponent* CharacterParachuteComponent;//[Offset: 0x18a8, Size: 0x8]
	APAttributeSet* AttributeSet;//[Offset: 0x18b0, Size: 0x8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x18b8, Size: 0x8]
	CharacterDeathInfo CharacterDeathInfo;//[Offset: 0x18c0, Size: 0x8]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c8, Size: 0x1]
	float Health;//[Offset: 0x18cc, Size: 0x4]
	float HealthMax;//[Offset: 0x18d0, Size: 0x4]
	float MaxSpeedScale;//[Offset: 0x18d4, Size: 0x4]
	float MaxJumpHeightScale;//[Offset: 0x18d8, Size: 0x4]
	bool bBeakBackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18dc, Size: 0x1]
	FName PlayerType;//[Offset: 0x18e0, Size: 0x8]
	int LegendID;//[Offset: 0x18e8, Size: 0x4]
	FString PlayerName;//[Offset: 0x18f0, Size: 0x10]
	int PlayerKey;//[Offset: 0x1900, Size: 0x4]
	enum LegendType;//[Offset: 0x1904, Size: 0x1]
	int LegendGeniusMask;//[Offset: 0x1908, Size: 0x4]
	float SimulatedHealth;//[Offset: 0x190c, Size: 0x4]
	float SimulatedShield;//[Offset: 0x1910, Size: 0x4]
	float HealthHealing;//[Offset: 0x1928, Size: 0x4]
	float ShieldHealing;//[Offset: 0x192c, Size: 0x4]
	byte HealthStatus;//[Offset: 0x19d0, Size: 0x1]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d1, Size: 0x1]
	float InvincibleStartTime;//[Offset: 0x19d4, Size: 0x4]
	float InvincibleEndTime;//[Offset: 0x19d8, Size: 0x4]
	bool bIgnoreBeTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19dc, Size: 0x1]
	float ShieldValueBeforeCustomRadialDamage;//[Offset: 0x19e0, Size: 0x4]
	float ShieldOverloadTime;//[Offset: 0x19e4, Size: 0x4]
	float ShieldOverloadRepairValue;//[Offset: 0x19e8, Size: 0x4]
	float ShieldOverloadRepairDelayTime;//[Offset: 0x19ec, Size: 0x4]
	bool IsNeedSpawnTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f8, Size: 0x1]
	DispatchingActionCollection ActionCollection;//[Offset: 0x1a08, Size: 0x10]
	Apex_NPC_Component* NPC_Component;//[Offset: 0x1a30, Size: 0x8]
	bool bIsKeepAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a38, Size: 0x1]
	bool bReloadNotReduceAmmo;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a38, Size: 0x1]
	ApexCharacter* LookAtTarget;//[Offset: 0x1a40, Size: 0x8]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a48, Size: 0x1]
	Vector HintCenterOffset;//[Offset: 0x1a4c, Size: 0xc]
	Vector MeshContainerOffset;//[Offset: 0x1a58, Size: 0xc]
	enum MoveIgnoreFlags;//[Offset: 0x1a64, Size: 0x1]
	ApgameWeaponCoreComponent* MainWeaponCoreComp1;//[Offset: 0x1a78, Size: 0x8]
	ApgameWeaponCoreComponent* MainWeaponCoreComp2;//[Offset: 0x1a80, Size: 0x8]
	ApgameWeaponCoreComponent* MainWeaponCoreComp3;//[Offset: 0x1a88, Size: 0x8]
	bool bBackpackOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a90, Size: 0x1]
	uint64 PropsWeaponFakeIndex;//[Offset: 0x1a98, Size: 0x8]
	int PropsWeaponIndex;//[Offset: 0x1aa0, Size: 0x4]
	Actor* CurrentPropsWeapon;//[Offset: 0x1aa8, Size: 0x8]
	bool bAimThrowableProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab0, Size: 0x1]
	bool bHoldThrowableProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab1, Size: 0x1]
	bool bHoldHeatShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab2, Size: 0x1]
	BasePropsWeaponAttrModifier* PropsWeaponAttrModifier;//[Offset: 0x1ab8, Size: 0x8]
	delegate OnCharacterEquipAttachment;//[Offset: 0x1ac0, Size: 0x10]
	TimerHandle LaterPropsWeaponTh;//[Offset: 0x1ad0, Size: 0x8]
	bool bInCancelPropsWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad8, Size: 0x1]
	<int,ActorListInfo> ShowDamageHitPropsWeaponsMap;//[Offset: 0x1ae0, Size: 0x50]
	<uint64,Actor*> FakeMissilePropsWeaponMap;//[Offset: 0x1b30, Size: 0x50]
	enum CurrentPropsWeaponType;//[Offset: 0x1b98, Size: 0x1]
	<enum,Actor*> PropsWeaponCacheMap;//[Offset: 0x1ba0, Size: 0x50]
	<enum,Actor*> MissileWeaponCacheMap;//[Offset: 0x1bf0, Size: 0x50]
	float LastSpawnMissileWeaponTime;//[Offset: 0x1c40, Size: 0x4]
	float MinMissileSpawnInterval;//[Offset: 0x1c44, Size: 0x4]
	byte PropsThrowMode;//[Offset: 0x1c48, Size: 0x1]
	bool bDeathInForbiddenZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c49, Size: 0x1]
	int InForbiddenZoneNum;//[Offset: 0x1c4c, Size: 0x4]
	int8 ForbiddenZoneLeftTime;//[Offset: 0x1c50, Size: 0x1]
	int8 SavingForbiddenZoneLeftTime;//[Offset: 0x1c51, Size: 0x1]
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c61, Size: 0x1]
	float ShoulderAimingMeshRotStrength;//[Offset: 0x1c64, Size: 0x4]
	bool bOneKeyFireScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c68, Size: 0x1]
	KnockdownShieldReplicate CurrentKnockdownShield;//[Offset: 0x1c70, Size: 0x10]
	byte BreakKnockdownShield;//[Offset: 0x1c80, Size: 0x1]
	AkAudioEvent* BreakKnockdownShieldAudio;//[Offset: 0x1c84, Size: 0x8]
	uint64 AICallKnockdownShieldTime;//[Offset: 0x1c90, Size: 0x8]
	ApexKnockdownShield* ApexKnockdownShield;//[Offset: 0x1c98, Size: 0x8]
	bool bInRescueState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca0, Size: 0x1]
	bool bInPickBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb8, Size: 0x1]
	byte AircraftRespawnVisibility;//[Offset: 0x1d60, Size: 0x1]
	bool IsAllowInterruptedSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d61, Size: 0x1]
	bool bCauseKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d80, Size: 0x1]
	bool bCauseSelfKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d81, Size: 0x1]
	float CauseKnockdownTime;//[Offset: 0x1d84, Size: 0x4]
	float KnockdownTimePoint;//[Offset: 0x1d88, Size: 0x4]
	bool KnockdownWithKnockdownShieldLevel4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8c, Size: 0x1]
	uint32 KillAudioCallCycles;//[Offset: 0x1d90, Size: 0x4]
	float BattleStateDuration;//[Offset: 0x1d94, Size: 0x4]
	float ExitEnterBattleStateTime;//[Offset: 0x1d98, Size: 0x4]
	bool bTickPoseOnDSCachedFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9c, Size: 0x1]
	bool bTickPoseOnDSCachedTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9d, Size: 0x1]
	int UpGradeableArmorCurrentExp;//[Offset: 0x1e70, Size: 0x4]
	int UpGradeableArmorMaxExp;//[Offset: 0x1e74, Size: 0x4]
	int UpGradeableArmorCurrentLevel;//[Offset: 0x1e78, Size: 0x4]
	int UpGradeableArmorUpLevel;//[Offset: 0x1e7c, Size: 0x4]
	int DisplayNormalArmorLevel;//[Offset: 0x1e80, Size: 0x4]
	bool bOnUpGradeableArmorIncreaseExp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e84, Size: 0x1]
	bool bAlwaysUpGradeableArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e85, Size: 0x1]
	bool bOnPickUpGradeableArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e86, Size: 0x1]
	MainHandComponent* MainHandComponent;//[Offset: 0x1e90, Size: 0x8]
	CharacterBuffManager* CharacterBuffMgr;//[Offset: 0x1e98, Size: 0x8]
	EffectViewManager* EffectViewMgr;//[Offset: 0x1ea0, Size: 0x8]
	ApexMirageManagerComponent* ApexMirageManagerComponent;//[Offset: 0x1ea8, Size: 0x8]
	bool bFireLightFXOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb0, Size: 0x1]
	VehicleComponent* VehicleComponent;//[Offset: 0x1eb8, Size: 0x8]
	CharacterFinisherComponent* CharacterFinisherComponent;//[Offset: 0x1ec0, Size: 0x8]
	GameActionComponent* GameActionComponent;//[Offset: 0x1ec8, Size: 0x8]
	SkeletalMeshComponent* LobbySkeletalMeshComponent;//[Offset: 0x1ed0, Size: 0x8]
	ApexCharacter* CacheFinisherTarget;//[Offset: 0x1ed8, Size: 0x8]
	bool bFinisherTimerIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee0, Size: 0x1]
	TimerHandle FinisherTimeOutTimerHandle;//[Offset: 0x1ee8, Size: 0x8]
	bool bIsLongThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f50, Size: 0x1]
	APPerkManagerComponent* PerkManagerComponent;//[Offset: 0x1f58, Size: 0x8]
	WeaponManagerComponent* WeaponManagerComp;//[Offset: 0x1f70, Size: 0x8]
	Rotator SimulateScopeControlRotation;//[Offset: 0x1f88, Size: 0xc]
	ApgameInspectWeaponLogic* InspectWeaponLogic;//[Offset: 0x1ff0, Size: 0x8]
	AkAudioEvent* FPPAudioEvent;//[Offset: 0x1ff8, Size: 0x28]
	AkAudioEvent* TPPAudioEvent;//[Offset: 0x2020, Size: 0x28]
	bool CanOpenBlueBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2068, Size: 0x1]
	ParticleSystemComponent* ZiplineTempParticleBack_L_F;//[Offset: 0x206c, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_R_F;//[Offset: 0x2074, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_L_E;//[Offset: 0x207c, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_R_E;//[Offset: 0x2084, Size: 0x8]
	ZiplineComponent* ZiplineCurrentZiplinePtr;//[Offset: 0x20b0, Size: 0x8]
	ZiplineComponent* ZiplineLastRideZiplineLine;//[Offset: 0x20b8, Size: 0x8]
	ZiplineComponent* ZiplineRidedZiplinePtr;//[Offset: 0x20c0, Size: 0x8]
	ZiplineComponent* ZiplineSwitchLastZipline;//[Offset: 0x20c8, Size: 0x8]
	Transform ZiplineBodyMeshTransform_TPP;//[Offset: 0x20d0, Size: 0x30]
	ZiplinePlayerFlowData ZiplineFlowData;//[Offset: 0x2148, Size: 0x58]
	SkillModifierInfo ZiplineSkillModifier;//[Offset: 0x21a0, Size: 0x28]
	SkillModifierInfo ZiplineOverrideStateSkillModifier;//[Offset: 0x21c8, Size: 0x28]
	HandStateData ZiplineHandData;//[Offset: 0x21f8, Size: 0x40]
	Vector ZiplineRidePos;//[Offset: 0x2240, Size: 0xc]
	bool bZiplineNeedShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224c, Size: 0x1]
	bool bZiplineIsRideButtonUseable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224d, Size: 0x1]
	bool bZiplineIsRiding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224e, Size: 0x1]
	bool bZiplineIsCurZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224f, Size: 0x1]
	bool bZiplineIsRidedZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2250, Size: 0x1]
	bool bZiplineIsVerticalZiplineUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2252, Size: 0x1]
	int ZiplineVerticalZiplineForceDir;//[Offset: 0x2254, Size: 0x4]
	bool bZiplinePlayerHasJumpToZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2258, Size: 0x1]
	int ZiplineFlow_ButtonState;//[Offset: 0x2260, Size: 0x4]
	int ZiplineFlow_LeaveZiplineJumpButtonState;//[Offset: 0x2264, Size: 0x4]
	bool RideZiplineIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2268, Size: 0x1]
	Vector DirOrPoint;//[Offset: 0x226c, Size: 0xc]
	enum PlayerAddForceType;//[Offset: 0x2278, Size: 0x1]
	float ForceValue;//[Offset: 0x227c, Size: 0x4]
	float MaxForceSpeed;//[Offset: 0x2288, Size: 0x4]
	float ForceAcceleration;//[Offset: 0x228c, Size: 0x4]
	enum UseReplicatorState;//[Offset: 0x22e0, Size: 0x1]
	Workbench* OperateWorkbench;//[Offset: 0x2300, Size: 0x8]
	AnimMontage* CurrentUseFPPAnimMontage;//[Offset: 0x2308, Size: 0x8]
	AnimMontage* CurrentUseTPPAnimMontage;//[Offset: 0x2310, Size: 0x8]
	Actor*[] IgnoreActors;//[Offset: 0x2318, Size: 0x10]
	TimerHandle OneSecTimerHandle;//[Offset: 0x2340, Size: 0x8]
	TimerHandle CurSelfEffectHandle;//[Offset: 0x2348, Size: 0x8]
	TimerHandle CurSelfDelayHandle;//[Offset: 0x2350, Size: 0x8]
	ParticleSystemAsync* RepairEffectFor1P;//[Offset: 0x2378, Size: 0x8]
	bool IsBreakShieldMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2380, Size: 0x1]
	CanHelingSelfData CanHealingSelf;//[Offset: 0x2384, Size: 0x8]
	bool IsHealingHPSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238c, Size: 0x1]
	bool IsHealingShieldSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238d, Size: 0x1]
	CureRepData CureRepData;//[Offset: 0x2390, Size: 0xc]
	bool IsNeedCuring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239c, Size: 0x1]
	bool IsCuring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239d, Size: 0x1]
	float SlidingYawOffset;//[Offset: 0x23b0, Size: 0x4]
	bool bMagmaAnimState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23ba, Size: 0x1]
	float PlantBombEndTime;//[Offset: 0x23e0, Size: 0x4]
	float DeusalBombEndTime;//[Offset: 0x23e4, Size: 0x4]
	CameraShake* CameraShakeInst;//[Offset: 0x23f0, Size: 0x8]
	AudioEffectManager* OwnerAudioEffectManager;//[Offset: 0x23f8, Size: 0x8]
	class CameraShake* CurMagmaRiseCameraShake;//[Offset: 0x2400, Size: 0x8]
	ReplicateInputInfo ReplicatedInputInfo;//[Offset: 0x240c, Size: 0xc]
	float FinisherEndTime;//[Offset: 0x2430, Size: 0x4]
	float RescueEndTime;//[Offset: 0x2434, Size: 0x4]
	float RecoverEndTime;//[Offset: 0x2438, Size: 0x4]
	Actor*[] GunShootIgnoreActors;//[Offset: 0x2440, Size: 0x10]
	ApexSoundSpeakerComponent* SoundSpeakerComp;//[Offset: 0x2450, Size: 0x8]
	ApexCharacter* PossessChar;//[Offset: 0x2458, Size: 0x8]
	bool bIsPossessedByOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2460, Size: 0x1]
	bool bIsPossessOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2461, Size: 0x1]
	bool bAccumulateJumpState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2462, Size: 0x1]
	void ZiplineSetShowUI(bool bIsShow);// 0x799ad08
	void ZiplineSetMagnetAndParticleVisible(bool bIsVisible);// 0x799a670
	void ZiplineServerRideZipline(ZiplineComponent* Zipline, float T, float t1, int ButtonState);// 0x799bfdc
	void ZiplineServerDownZipline(Vector Velocity, float BlockUpperZ, float ForceDownT, int MidwayJump, int LeaveType, bool bClientNotify);// 0x799b6ec
	void ZiplineServerAltDir(ZiplineComponent* Zipline, float T, bool bIsToUP);// 0x799bbe4
	void ZiplineRideZipline();// 0x5941670
	void ZiplineRideVerticalZipline(bool bIsUp);// 0x5f0d4c4
	void ZiplineResumeEnterOverrideStateRuntime(int SkillIndex, bool bEnterNewState, enum NewState, enum NewOverrideState);// 0x799a734
	void ZiplineRefreshAutoRideZiplineSetting();// 0x799b1ac
	void ZiplineOnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x799b1c0
	void ZiplineOnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x799b374
	float ZiplineGetRidingZiplineTime();// 0x799ab28
	ZiplineComponent* ZiplineGetRidingZipline();// 0x799abfc
	bool ZiplineGetCurrentOnZipline();// 0x799abb4
	void ZiplineDownZipline(bool bIsJump, bool bIsZeroStop, int MidwayJump, int LeaveType);// 0x799af68
	void ZiplineDoCameraShake(out const Vector Velocity);// 0x799addc
	void ZiplineChangeEnterOverrideStateRuntime(int SkillIndex, enum NewState, enum NewOverrideState);// 0x799a974
	void ZiplineBroadcastRideZipline(ZiplineComponent* Zipline, float T, float t1, float ServerTime);// 0x799bda8
	void ZiplineBroadcastDownZipline(Vector Velocity, float BlockUpperZ, float ForceDownT, bool bClientNotify);// 0x799b4b0
	void ZiplineBroadcastAltDir(ZiplineComponent* Zipline, float T, bool bIsToUP);// 0x799ba20
	void ZiplineAltRideDirection(bool bIsToUP);// 0x799aea4
	void VictoryRevive();// 0x799e6a8
	bool UseRespawnBeaconComplete(int8 Index);// 0x799e500
	void UseReplicator(Workbench* InWorkbench, int InSide);// 0x79998cc
	void UsePropsWeaponNoTarget(enum PropsWeaponType, ItemDefineID DefineID, enum Reason, bool bFastThrow, bool bContinueThrow);// 0x79a0c9c
	void UsePropsWeapon(enum PropsWeaponType, ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason, bool bFastThrow, bool bContinueThrow);// 0x79a0f7c
	void UnUseReplicator(enum Reason);// 0x7999808
	void UnRegisterHandleStackPropsWeapon();// 0x79a175c
	void UnEquipPropsWeapon(enum PropsWeaponType, enum Reason);// 0x79a1e20
	ApexAIController* TryGetAIController();// 0xa0ce688
	void TriggerPropsWeaponBCEvent(enum PropsWeaponType);// 0x799fa4c
	void TickForbiddenZone();// 0x799f58c
	void TargetLeaveRobotRescuing(enum Reason);// 0x799e84c
	void TargetEnterRobotRescuing(SkeletalMeshComponent* RobotSkeletalMesh);// 0x799e910
	void TargetBreakRobotRescuing();// 0xa0ce158
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x79a3d44
	void SwitchTeamLeader(int TeamID, uint32 NewLeaderKey);// 0x79a31ac
	void SwitchSlidingJump(Vector2D ScreenLocation, Vector2D CenterLocation);// 0x79a5a88
	void SwitchOnDeathTotemProtection(const DeathTotem* inDeathTotem);// 0x79a6168
	void SwitchOffDeathTotemProtection(const DeathTotem* inDeathTotem, bool OffByConsumption, out const ApexCharacterReviveInfo ReviveInfo);// 0x79a5f58
	void SwitchCrouch();// 0xa0ce410
	void SwitchClimbJump(Vector2D ScreenLocation, Vector2D CenterLocation);// 0x79a5958
	void SwitchCameraMode(enum NewMainCameraMode, float LerpTime, bool FromButton);// 0x79a94d4
	void SwitchBloodHoundDetectable(bool EnableDetect);// 0x79a99a0
	void SwitchAccumulateJumpStateOnClient(bool bState);// 0x799832c
	void SwitchAccumulateJumpState(bool bState);// 0x79983f0
	void Switch2MagmaRise();// 0x7998a68
	bool StuckInto(Actor* InActor);// 0x79aa374
	void StopMagmaRise();// 0x7998b08
	void StopInspectWeapon();// 0x799c24c
	void StopForbiddenZoneTimer();// 0x799f5a0
	void StopDispatchableMontage_NetMulticast();// 0x79a36e0
	void StartMagmaRise();// 0x7998b1c
	void StartInspectWeapon();// 0x799c260
	void StartForbiddenZoneTimer();// 0x799f5b4
	void SpawnMissilePropsWeapon(uint64 FakeID, enum PropsWeaponType, Vector InLoc, Vector InVel, Rotator InRot, float LeftTime);// 0x799fb08
	void SpawnFakeMissilePropsWeapon(enum PropsWeaponType, Vector InLoc, Vector InVel, Rotator InRot, float LeftTime);// 0x799fe44
	void SpawnDynamicRespawnBeacon(Transform InTransform, int ItemID);// 0x79a00fc
	void SetTickPoseOnDS(bool bActive);// 0x799d8bc
	void SetRescueSelfSoundId(int SoundId);// 0x79a5c4c
	void SetPlayerTransform(Vector NewLocation, Rotator NewControlRotation);// 0x79aa9bc
	void SetLeavePlaneUIState();// 0x79a8ce4
	void SetIsInvincible(bool NewState);// 0x79a4110
	void SetIsGrappleVictim(bool IsVictim);// 0x79a5824
	void SetIsGrappleCasterOnGround(bool IsCasterOnGround);// 0x79a5760
	void SetIsAI(bool IsAI);// 0x79a8714
	void SetInvincibleStartTime(float InTime);// 0x79a4058
	void SetInvincibleEndTime(float InTime);// 0x79a3fa0
	void SetInHeatShield(bool bInside, enum InOutHeatShieldReason);// 0x79a8fdc
	void SetGameOver(bool bFlag);// 0x799f4c0
	void SetEnterPlaneUIState();// 0x79a8cd0
	void SetEnableRootMotion(bool enable);// 0x79a361c
	void SetDyingAnimParam(bool bDying, bool ImmediatelyKnockdownPose);// 0x799edf0
	void SetDeadAnimType(enum DeadType);// 0x799ed2c
	void SetCharacterShieldOverloadMax(out const float NewValue);// 0x79a4cd4
	void SetCharacterShieldOverload(out const float NewValue);// 0x79a4da0
	void SetCharacterShieldMax(out const float NewValue);// 0x79a4e6c
	void SetCharacterShieldLevel(out const int NewValue);// 0x79a4b3c
	void SetCharacterShieldHealing(out const float NewValue);// 0x79a4c08
	void SetCharacterShield(out const float NewValue);// 0x79a4f38
	void SetCharacterInVoidState(enum ActorType, bool bState);// 0x79a6688
	void SetCharacterInPhantomVoidState(bool bState);// 0x79a65c4
	void SetCharacterHelmetLevel(out const int NewValue);// 0x79a4a70
	void SetCharacterHealthMax(out const float NewValue);// 0x79a50d0
	void SetCharacterHealthHealing(out const float NewValue);// 0x79a5004
	void SetCharacterHealth(out const float NewValue);// 0x79a519c
	void SetBackpackUIIsOpen(bool bNewValue);// 0x56bc718
	void SetBackpackOpening(bool Value);// 0x79a33e4
	void SetAttrShieldValueMax(float InShieldValueMax);// 0x79a53ec
	void SetAnimRescueType(enum AnimRescueType);// 0x79a8658
	void SetAllCollisionEnabled(bool bEnabled);// 0xa1d39f8
	void ServerUseEmoji(enum EmojiType, FName EmojiId);// 0x79abcb4
	void ServerUse3DEmojiWithLocation(FName EmojiId, bool NewUse, Vector Location, float DestroyDelay);// 0x79ab584
	void ServerUploadReportData(FString ReportData);// 0x7998700
	void ServerUpdateInputInfo(const ReplicateInputInfo InInputInfo);// 0x79987f4
	void ServerUnEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative, bool bContinueThrow);// 0x79a1f58
	void ServerTriggerJump();// 0x79a5bb8
	void ServerSetSlidingRotatorYawOffset(const float InRotatorOffset);// 0x7998b30
	void ServerSetSkinId(FName NewSkinId);// 0x79a8428
	void ServerSetPropsThrowMode(byte ThrowGrenadeMode);// 0x799f624
	void ServerSetMaxHealth(float AddHealth);// 0x79a3828
	void ServerSetFireMode(enum NewFireMode);// 0x79a832c
	void ServerSetCurrentCameraMode(enum NewCameraMode, bool FromButton);// 0x79a921c
	void ServerSetBackpackOpening(bool Value);// 0x79a3318
	void ServerPreStartTransfer(VoidDoorActor* DoorActor, bool bReversal);// 0x79a6f68
	void ServerPickupGrenade(ItemDefineID DefineID);// 0x79a08f4
	void ServerOperateFinisher(bool bEnter, ApexCharacter* FinisherTarget);// 0x799cb88
	void ServerHandleSkillCheckBoxOverlapEvent(const FName InAction, Actor* InEventActor);// 0x79a7d88
	void ServerGmUpdateNearAILocation();// 0xa0ce704
	void ServerFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x79a1974
	void ServerEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative, bool bContinueThrow);// 0x79a27ec
	void ServerBroadcastMsg(BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x79a06e0
	void SendPlayerTo(Transform Trans);// 0x79a8a4c
	void RPCServerEnableDeathTotemProtection(DeathTotem* inDeathTotem);// 0x79a6424
	void RPCQueryServerInfo(ApexCharacter* Acotr);// 0x79a87d8
	void RPCMultiThrowPickUpWrapper();// 0xa0ce034
	void RPC_ServerSetOneKeyFireScope(bool InValue);// 0x799f37c
	void RPC_ServerSetAimSingleShootPressing(bool InValue);// 0x799ce68
	void RPC_ServerSetAimAutoShootPressing(bool InValue);// 0x799cd9c
	void RPC_ClientClearFakePropsWeapon(uint64 FakeID);// 0x799f710
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x799c2a8
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x799c458
	void ResumeRescueSelf();// 0x79a8644
	void ResumeHandleStackPropsWeapon();// 0x79a1574
	void RestoreTickPoseOnDS();// 0x799d81c
	void RespawnTeammateSuccess();// 0xa0ce100
	void ResetCD(float Damage);// 0x7998c84
	class Object RescueIndiviByRobot();// 0xa0ce11c
	class Object RescueIndivi(ApexCharacter* Target);// 0x799e780
	void RequestAsyncLoadingParachuteParticle();// 0x7998a14
	void ReportThrowingFlow(enum PropsWeaponType, Actor* ThrowableActor);// 0x799f914
	void ReportDecoyFlowTLOG(int decoyType, int controlTime, int EndType);// 0x79a889c
	void ReplaceAttrShieldValueMax(float CurrentShieldValue, float ReplaceShieldValueMax);// 0x79a54a8
	void RemoveShieldHealing(FName SourceName);// 0x79a44f0
	void RemovePropsWeaponEvent();// 0x79a02d0
	void RemoveHealthHealing(FName SourceName);// 0x79a46e4
	int RemoveFromDamageHintPropsMap(int ExplosionHintId, Actor* PropsWeapon);// 0x79a2f1c
	bool RegisterSkillStateEvent2SkillManager();// 0xa0ce530
	void RegisterPlayerPickUpList();// 0x79a5d30
	void RegisterHandleStackPropsWeapon();// 0x79a1770
	void RefreshBattleState();// 0x799db3c
	void RefreshBackpackDisplay();// 0x79a357c
	void RecoverShield();// 0x7999174
	void RecoverHP();// 0x7999188
	void RecoverDelay();// 0x799919c
	QueryPlayerInfo QueryCharacterInfo();// 0x5719b68
	void PutonEquipmentTest();// 0x79a9208
	void PushGunShootIgnoreActors(Actor* GunShootIgnoreActor);// 0x7998644
	void PushDrugVoice(const int VoiceID);// 0x79aaaf4
	void PropsWeaponEndPlay(enum Reason);// 0x79a1784
	void PropsWeaponAimExplode(enum PropsWeaponType, Vector InLoc);// 0x799f7d4
	void PostLuaEvent(Actor* OwnerTarget, int LuaCppEventTypeIndex, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x79991b0
	void PopGunShootIgnoreActors(Actor* GunShootIgnoreActor);// 0x7998588
	void PlayVictimSound(enum PlayerAudioType, int InWeaponSkinID);// 0x799e360
	void PlayTotemRecallTrailSFX_NetMulticast(const Vector StartPosition, const Vector EndPosition);// 0x79a5d8c
	void PlaySingleSequence(LevelSequence* TargetSequence, MovieSceneSequencePlaybackSettings Settings);// 0x79a80f0
	void PlayRespawnOperateAudio(enum AudioType);// 0x799e0a0
	void PlayInstigatorSound(enum PlayerAudioType, int InWeaponSkinID);// 0x799e220
	void PlayFatalitySkill(ApexCharacter* TargetActor);// 0x79a8270
	void PlayerRelicateItem(int SelectIndex);// 0x7999744
	void PlayDoubleSequence(LevelSequence* TargetSequence, Actor* Other, MovieSceneSequencePlaybackSettings Settings);// 0x79a7ef4
	void PlayDispatchableMontage_NetMulticast(AnimMontage* MontageToPlay);// 0x79a373c
	void PlayBackpackSwitchGunAnim(float Alpha, float TimeSec);// 0x799df60
	void PickBannerOver();// 0x799e694
	void OverlapMirage(MirageActor* Mirage);// 0x79abe08
	void OperateFinisher(bool bEnter);// 0x799ccd8
	void OnWeaponPutOnEnd();// 0x5015468
	void OnWeaponPutOffEnd(int WeaponID);// 0x799da38
	void OnUseReplicatorTakeDamage(float Damage, int DamageType, enum DamagePos, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x7999c64
	void OnUpGradeableArmorDisplayLoad(Transform SpawnTransform, int Level);// 0x799d4cc
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x79ab008
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x79ab1c4
	void OnStateBlockCheck(enum TimeOutState, enum TimeOutOverrideState, enum BlockState, enum BlockOverrideState, out bool bNeedExitState);// 0x4e12754
	void OnStartSkillFailed(int SkillIndex, enum StopReason, int SkillHandleID);// 0x79a7700
	void OnSkinChanged(Character* TargetCharacter, bool Success, FName SkinID);// 0x4ae0c8c
	void OnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x79a78bc
	void OnSkillStartCD(int SkillIndex);// 0x79a74f4
	void OnSkillStart(int SkillIndex, int SkillHandleID);// 0x79a7c34
	void OnSkillReleased(int SkillIndex, bool bReleased);// 0x79a75b8
	void OnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Result);// 0x79a7270
	void OnSkillCDModify(int SkillIndex);// 0x79a7430
	void OnSkillCDInitFinishedEvent(int SkillIndex, UTSkillManagerComponent* Mgr);// 0x531aa8c
	void OnShieldMaxChange();// 0x7998c70
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x5d1b240
	void OnRepPropsThrowMode();// 0x799f6fc
	void OnRep_UpGradeableArmorUpLevel();// 0x54ce964
	void OnRep_UpGradeableArmorMaxExp();// 0x799d684
	void OnRep_UpGradeableArmorCurrentLevel();// 0x54152f0
	void OnRep_UpGradeableArmorCurrentExp();// 0x799d6b0
	void OnRep_SkinId(FName PreSkinId);// 0x4f3fa8c
	void OnRep_ShieldValueMax();// 0x4c11628
	void OnRep_ShieldValue();// 0x4aa617c
	void OnRep_ShieldOverloadValueMax();// 0x4f3f570
	void OnRep_ShieldOverloadValue();// 0x79a3608
	void OnRep_ShieldLevel();// 0x4f952b0
	void OnRep_ShieldHealing();// 0x4c12184
	void OnRep_ServerCharacterCameraMode();// 0x509d310
	void OnRep_RevenantSilenceEffect();// 0x5fdcac0
	void OnRep_RepUseReplicatorState();// 0x5c9f334
	void OnRep_ReplicatedInputInfo();// 0xa0cdfc8
	void OnRep_ReloadNotReduceAmmo();// 0x559c930
	void OnRep_PlantBombEndTime();// 0x7998a54
	void OnRep_PickupTipItem();// 0x79a917c
	void OnRep_OnUpGradeableArmorIncreaseExp();// 0x58ba6c0
	void OnRep_OnRepIsNeedCuring();// 0x7998c08
	void OnRep_OnRepIsCuring();// 0x4f1ac70
	void OnRep_OnRepCureRepData();// 0x4e0b53c
	void OnRep_OnRepCanHealingSelf();// 0x5577d84
	void OnRep_OnPickUpGradeableArmor();// 0x5653bbc
	void OnRep_OnMagmaAnimState();// 0x7998a00
	void OnRep_MoveIgnoreFlags();// 0xa0ce210
	void OnRep_MaxHealth();// 0x5e73e0c
	void OnRep_KnockDownShieldLevel();// 0x79a3590
	void OnRep_KnockdownShield(KnockdownShieldReplicate Outdated);// 0x43ecf90
	void OnRep_IsInvincible();// 0x4e8553c
	void OnRep_InVoidState();// 0x544f680
	void OnRep_InPhantomVoidState();// 0x535eb94
	void OnRep_HelmetLevel();// 0x4f557d8
	void OnRep_HealthStatusChanged(byte prevStatus);// 0x5146b38
	void OnRep_HealthHealing();// 0x4f3e1a8
	void OnRep_Health();// 0x4ceb9d8
	void OnRep_ForbiddenZoneLeftTime();// 0x5f2be10
	void OnRep_DisplayNormalArmorLevel();// 0x556a91c
	void OnRep_DeusalBombEndTime();// 0x7998a40
	void OnRep_DeathTotemRangeTest();// 0x79a5d78
	void OnRep_DeathTotemProtection();// 0x61bcaf0
	void OnRep_CurrentInsideHeatShield();// 0x5a3ad10
	void OnRep_CharacterDeathInfo();// 0x4ffa394
	void OnRep_BreakKnockdownShield();// 0x592d314
	void OnRep_BackpackLevel();// 0x79a35bc
	void OnRep_AnimRescueType(byte PrevAnimRescueType);// 0x5cbbdf8
	void OnRep_AircraftRespawnVisibility();// 0x5c505e0
	void OnReconnectedPropsWeapon();// 0x79a02bc
	void OnPropsWeaponReleased(bool bRightBtn);// 0x79a1328
	void OnPropsWeaponPressed(bool bRightBtn);// 0x79a13ec
	void OnPlayTotemRecallTrailSFX(out const Vector StartPosition, out const Vector EndPosition);// 0xa1d39f8
	void OnPlayerNetLost();// 0x7999c10
	void OnPlayerMoving(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x7999a0c
	void OnPlayerDyingOrDeath();// 0x7998bf4
	void OnPawnStateChanged(out const enum[] StatesMoreThanOld, out const enum[] StatesLessThanOld);// 0x4899978
	void OnOverrideStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x79aae4c
	void OnObPlayerListChangedAtServer(const Controller*[] PlayerList);// 0x799d274
	void OnObedStatusChangedAtServer(bool IsAnyOneObed);// 0x799d1ac
	void OnObedStatusChangeAtClient(bool NewIsOBed, PlayerController* PC);// 0x799d060
	void OnNormalArmorDisplayLoad(int Level);// 0x799d410
	void OnMovementLocationChanged();// 0x79aa68c
	void OnLoadRepairShieldPS(AsyncLoaderBase* Loader);// 0x54ceb68
	void OnLeavlOB(Actor* Target);// 0x5699c74
	void OnHealthStatusChanged(byte PrevHealthStatus, byte CurrentHealthStatus);// 0x79a41d4
	void OnHandSyringeClassLoad();// 0x79a5d1c
	void OnFinisherTimerOut();// 0x799ca20
	void OnEnterVoid(bool bIsEnter, bool bNeedSetCollision);// 0xa1d39f8
	void OnEnterOB(Actor* Target);// 0x54fb068
	void OnEmojiMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x79ab444
	void OnEmoji3DMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x79ab304
	void OnDetectorByAsh();// 0xa0cdfdc
	void OnDeathMatLoadComplete(SoftObjectPath MatSoftObject);// 0x79aa514
	void OnCureSelfTakeDamage(float Damage, int DamageType, enum DamagePos, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x7998d40
	void OnCharacterEnterCausticGas();// 0x799c758
	void OnCameraStartMagmaRiseDelayFinished();// 0x7998a2c
	void OnBPIsInvincibleChange();// 0xa1d39f8
	void OnBeenSilencedByRevenant(bool IsSilenced);// 0xa1d39f8
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x799d6dc
	void NotifyRecycleToServer(Actor* ActorToRecycle);// 0x799c830
	void NotifyPickupSkillItem(SkillActorBase* ActorToPickup);// 0x799c76c
	void NotifyHealthShieldChangeWithoutMidRecommand(bool IsHp, float ChangedValue, enum CausedType);// 0x79a3abc
	void NetMultiUseEmojiAnimation(FName EmojiId, bool NewUse);// 0x79abb6c
	void NetMultiUseEmoji3D(FName EmojiId, bool NewUse);// 0x79aba24
	void NetMultiUseEmoji2D(FName EmojiId, bool NewUse);// 0x79ab8dc
	void MultiCastSwitchCameraMode(enum NewMainCameraMode, float LerpTime);// 0x79a9394
	void MulticastLaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x79ac00c
	void LookAtTargetPoint(Vector TargetPoint);// 0x79aa900
	void LogTouch(bool Value);// 0x79a34b0
	void LoadPropsWeaponAttrModifier(enum PropsWeaponType);// 0x79a0838
	void LeavingForbiddenZone();// 0x799f5c8
	void LeaveValkyrieSkywardDive(ValkyrieSkywardDiveLauncherActor* LaunchActor);// 0x79a9690
	void LeaveServerState_Inner(enum State);// 0x79a8ef0
	void JoinValkyrieSkywardDive(ValkyrieSkywardDiveLauncherActor* LaunchActor);// 0x79a9754
	bool IsUnderDomeShield();// 0x79a64e8
	bool IsTotemRecallFinished();// 0x79a5ec4
	bool IsTeamMateById(int InTeamId, int InCampId);// 0x79a397c
	bool IsSilenced();// 0x79a6554
	bool IsProtectedByDeathTotem();// 0xa0ce4b0
	bool IsPossessOther();// 0xa0cdefc
	bool IsPossessing();// 0xa0cdf3c
	bool IsPossessedByOther();// 0xa0cdf1c
	bool IsMagmaRise();// 0x7998ac4
	bool IsInVoid();// 0xa0ce4d4
	bool IsInspectingWeapon();// 0x799c214
	bool IsInSkywardDiveLaunch();// 0x79a658c
	bool IsInGrappling();// 0xa0ce388
	bool IsInBattleState();// 0x799db88
	bool IsInBattle();// 0x79a9144
	bool IsInAir();// 0xa0ce3c8
	bool IsHeirloomOn();// 0x79a5c14
	bool IsGrapplingCDPending();// 0x79a58e8
	bool IsFrisking();// 0xa0ce190
	bool IsFPP();// 0xa0ce468
	bool IsDying();// 0x79a43fc
	bool IsDecoy();// 0xa0ce628
	bool IsDeathTotemProtectionFinishByConsumption();// 0x79a5f10
	bool IsCanClamb(out const HitResult Hit);// 0x799a0d4
	bool IsByAIHosting();// 0xa0ce6c4
	bool IsBloodHoundHunting();// 0x79a9b54
	bool IsAnyoneObedInDS();// 0x799d3d0
	bool IsAlive();// 0xa0ce2b4
	bool IsAIControllerd();// 0xa0ce648
	bool IsAI();// 0xa0ce5e8
	void InterruptedSkill();// 0xa0ce0e4
	void InitPlayerProperty(ApexPlayerState* InPlayerState);// 0x79a4434
	void ImmediatelyDisposePropsWeapon();// 0x79a02f8
	void HuntLegendByIDServer(int HuntLegendIDIn);// 0x79a98dc
	void HuntLegendByIDMulticast(int HuntLegendIDIn);// 0x79a9818
	void HoldRecoverBanner(uint32 RecoverBannerPlayerKey);// 0x799e5d0
	void HealActor(Actor* TargetActor);// 0x799e6bc
	bool HasPawnState(enum State);// 0x79ab7e0
	void HandleStackPropsWeapon(out const HandStateData HandStateData, bool bPush);// 0x79a1588
	void HandleOnCharAnimLoadingFinished();// 0xa0ce75c
	void HandleConsumeItemSkillBreak();// 0x79a7d74
	void HandleBothLeaveRescue(ApexCharacter* Source, ApexCharacter* Target, enum Reason);// 0x799e9d4
	void GotoDying(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x799f1a0
	float GetZiplineShowDistT();// 0xa0ce018
	bool GetZiplineLastPrtIsNotEqualCurrentPtr();// 0x799ac68
	bool GetZipLineButtonPreview();// 0xa0cdff8
	float GetZiplineAutoRideJumpBtnPreviewActionTime();// 0x799aca0
	float GetZiplineAutoClickSpaceTime();// 0x799acd4
	WeaponManagerComponent* GetWeaponManagerComponent();// 0xa0ce86c
	Actor* GetViewTargetActor();// 0xa0ce0a8
	Rotator GetViewRotationIgnoreSmallEye();// 0xa0ce82c
	int GetTeamIdx();// 0x79a3948
	int GetSimOBBulletNum(int AmmoID);// 0x799cf9c
	float GetShoulderAimingMeshAngle();// 0x799f47c
	enum GetShieldLevel();// 0xa0ce278
	float GetShieldHealing();// 0xa0ce2dc
	ReplicateInputInfo GetReplicateInputInfo();// 0x79989c0
	float GetRealRescureSelfTimeSec();// 0x799db08
	float GetRealRescuingTimeSec(ApexCharacter* TargetCharacter);// 0x5e5bc7c
	byte GetPropsThrowMode();// 0x799f5f0
	ApexCharacter* GetPossessChar();// 0xa0cde68
	FString GetPlayerNameSafety();// 0x79aac88
	FString GetPlayerLogName();// 0x79aabb0
	int GetPlayerKey();// 0xa0ce23c
	ApexPlayerController* GetPlayerControllerInReplay();// 0x799c274
	APPerkManagerComponent* GetPerkManagerComp();// 0xa0ce070
	PawnStateManager* GetPawnStateManager();// 0xa0ce720
	Actor* GetMyEmoji3DActor();// 0x79ab8a8
	Vector GetMovingVelocity();// 0x79aad58
	ShootWeapon* GetMeshOwnerShootWeapon(SkeletalMeshComponent* InMeshComponent);// 0x799c694
	MainHandComponent* GetMainHandComp();// 0xa0ce08c
	enum GetLegendType();// 0xa0ce570
	int GetLegendID();// 0xa0ce5ac
	bool GetIsInvincible();// 0xa0ce294
	bool GetIsGrappleVictim();// 0xa0ce368
	int GetInEnemyCausticGasNumFor(ApexCharacter* TargetCharacter);// 0x799c928
	int GetInEnemyCausticGasNum();// 0x799c9ec
	int GetInCausticGasNum();// 0x799c8f4
	bool GetIfZiplinePtrEqualLastZiplinePtrConditionCheck();// 0x799ac30
	int GetHeirloomID();// 0xa0ce42c
	byte GetHealthStatus();// 0x79a43c8
	float GetHealthHealing();// 0xa0ce2f8
	Vector GetGroundActorLocation();// 0x79a83f0
	bool GetEnableOpenCloseBackpack();// 0xa0ce050
	EffectViewManager* GetEffectViewManager();// 0x799cf34
	DataReportComponent* GetDataReportComponent();// 0x79a5d44
	Vector GetCurMagmaRiseVelocity();// 0x7998a7c
	int GetCurAimType();// 0x799f448
	UAECharacterAnimListComponent* GetCharacterWeaponAnimListComponent();// 0xa0ce7b4
	float GetCharacterShieldOverloadMax();// 0x79a52d8
	float GetCharacterShieldOverload();// 0x79a5314
	float GetCharacterShieldMax();// 0xa0ce330
	int GetCharacterShieldLevel();// 0x79a5268
	float GetCharacterShieldHealing();// 0x79a529c
	float GetCharacterShield();// 0xa0ce34c
	Actor* GetCharacterOrDroneActor();// 0x79a6520
	int GetCharacterHelmetLevel();// 0xa0ce314
	float GetCharacterHealthMax();// 0x79a5384
	float GetCharacterHealthHealing();// 0x79a5348
	float GetCharacterHealth();// 0x79a53b8
	CharacterBuffManager* GetCharacterBuffManager();// 0x799cf68
	UAECharacterAnimListComponent* GetCharacterAnimListComponent();// 0xa0ce7f0
	ApexCharacterAnimationComponent* GetCharacterAnimationComponent();// 0xa0ce778
	byte GetCfgRespawnTeammateTimeSec();// 0x799e4a0
	int GetCampID();// 0x79a3914
	Rotator GetCachedRotation();// 0x79a860c
	float GetBloodHuntingLeftTime();// 0x79a9b20
	bool GetBackpackOpening();// 0xa0ce1d0
	AuraComponent* GetAuraComponent();// 0x79a85d8
	void GetAPCharacterCameraViewPoint(out Vector Location, out Rotator Rotation, bool IsFPP, bool UseCameraLocationAtClient);// 0x5eca8f8
	int GenPropsWeaponIndex();// 0x79a2e4c
	uint64 GenPropsWeaponFakeId();// 0x79a2ea8
	void GamblingMachine_ServerPlayGameEnd();// 0xa0ce514
	void GamblingMachine_ServerPlayGameCheck(GamblingMachine* GamblingMachine, FString BoxName);// 0x79a6c70
	void GamblingMachine_ServerPlayGame(const int[] ListID, const int[] ListNum);// 0x79a6994
	void GamblingMachine_ClientPlayGameStart(GamblingMachine* GamblingMachine, enum MesssageType);// 0x79a6b30
	void GamblingMachine_ClientPlayGameEnd(enum MessageType);// 0x79a68d0
	void ForbidEmojiAnimationMoment();// 0x79ab7cc
	void FirePropsWeapon();// 0x79a1314
	void FadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams);// 0x79a1840
	void ExtendBloodHoundHunting(float Seconds);// 0x79a9a64
	void EquipPropsWeapon(enum PropsWeaponType, out bool bResult);// 0x79a26a4
	void EnterSimulatedState(enum State);// 0x79a8be4
	void EnterServerState_Inner(enum State);// 0x79a8e04
	void EnteredForbiddenZone();// 0x799f5dc
	void EnableKnockdownShield(bool bEnable);// 0x799ec60
	void EnableFPPZOffset(bool NewEnable);// 0x79a8514
	void EnableExplosionTimeTips(bool bEnable, float RealExplosionTime, float Percent);// 0x799dd9c
	void DyingToRevive();// 0xa0ce174
	void DyingTimeout(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, bool bFollowTeamDead);// 0x799ef40
	void DisableAnimBudget();// 0x79abdf4
	void DetectorBeFinisherTeammate(const float Duration, const ApexCharacter* BeFinisher);// 0x79a9b8c
	void DelaySetLeavePlaneUIState();// 0x79a8cf8
	void DeathFadeOut();// 0x79aa678
	void ConsumePropsWeapon(int ItemID);// 0x79a0be0
	bool ConsumeDeathTotemProtection(out float ResultHealth, bool bDataReport, bool bEnterInvincible);// 0x79a622c
	void ClientUpdateBloodHoundHuntingOutline(bool enable);// 0x79984bc
	void ClientUnEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative, bool bContinueThrow);// 0x79a2224
	void ClientSwitchThrowMode();// 0x799f6e8
	void ClientStartTransferSucceed(VoidDoorActor* DoorActor);// 0x79a6de0
	void ClientStartTransferFailed(VoidDoorActor* DoorActor);// 0x79a6ea4
	void ClientSetPlayerTransform(Vector NewLocation, Rotator NewControlRotation);// 0x79aa7c0
	void ClientSetPlayerRotation(Rotator NewControlRotation);// 0x79aa6fc
	void ClientSentWraithTipToTeammate(const AkAudioEvent* AudioEvent);// 0x79a67c8
	void ClientReceiveBroadcastMsg(BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x79a05a4
	void ClientPostMessageItem(FName InItemKey, float InDuration, FName InMessageKey, const FString[] Args);// 0x79aa084
	void ClientPostLocalizeMessageItem(FName InItemKey, float InDuration, FName InMessageKey, const FString[] Args, bool IsAutoFormatShowDuration, const LinearColor Color);// 0x79a9ccc
	void ClientOnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x79a7a78
	void ClientOnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Result);// 0x79a70b0
	void ClientFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x79a1b34
	void ClientEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0x79a2a3c
	void ClientChangePoseState(enum InState);// 0x79a55e0
	void ClientAckGoodMoveWithData(float Timestamp, byte SendData);// 0x79abecc
	void ClearPropsWeapon();// 0x79a0824
	void ClearFinisherTimerOut();// 0x799ca34
	void Clear(bool bClearSkillActor);// 0x79a3c80
	enum CheckResumePropsWeaponType(enum PropsWeaponType);// 0x79a14b0
	void CheckPlayerOnSurfaceToAddBuff();// 0x7998c5c
	void CharacterRescueBackLocalLocation();// 0x79a5d08
	void ChangePoseState(enum InState);// 0x79a56a4
	void ChangeHealthStatus(byte NextHealthStatus);// 0x79a430c
	bool CanSwitchFppTpp();// 0x79aa33c
	bool CanStuckInto(Actor* InActor);// 0x79aa444
	bool CanEnterSlide();// 0x79a5920
	void CancelPropsWeapon();// 0x79a1300
	void BroadcastTeamMateAudio(enum PlayerAudioType);// 0x799e164
	void BroadcastKilledEffect(uint32 InKillerKey, int InWeaponSkinID);// 0x799dc30
	void BPSyncPawnStateMask();// 0x79a91f4
	bool BackpackHasPropsWeapon(enum PropsWeaponType, out int ResultItemId);// 0x79a0a8c
	void AutonomousUnEquipPropsWeapon(enum PropsWeaponType, enum Reason, bool ServerInitiative);// 0x79a24e8
	bool AutonomousSetReplicateInputInfo(out const ReplicateInputInfo InInputInfo);// 0x79988bc
	void AutonomousPickupGrenade(ItemDefineID DefineID);// 0x79a09c0
	void AutonomousFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams);// 0x79a1cec
	void AutonomousEquipPropsWeapon(enum PropsWeaponType, out bool bResult, bool ServerInitiative, bool bContinueThrow);// 0x79a2bf4
	void APReceiveAnyDamage(float Damage, byte DamageType, Actor* Attacker);// 0xa1d39f8
	void APOnTakeDamage(float Damage, int DamageType, Pawn* Attacker, enum AvatarDamagePosition, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken);// 0xa1d39f8
	void AircraftRespawnExitHatchDone();// 0x799e4ec
	void AIFirePropsWeapon(enum PropsWeaponType, Vector LaunchVelocity, Vector LaunchLocation);// 0x79a030c
	void AIEquipPropsWeapon(enum PropsWeaponType);// 0x79a04e8
	bool AIEnableKnockdownShield(bool bEnable);// 0x799eb90
	void AICancelPropsWeapon();// 0x79a04d4
	void AIAimPropsWeapon();// 0x79a04c0
	int AddToDamageHintPropsMap(int ExplosionHintId, Actor* PropsWeapon);// 0x79a3064
	void AddShieldHealing(FName SourceName, float Value);// 0x79a45ac
	void AddPropsWeaponEvent();// 0x79a02e4
	void AddPlayerTrainFlow(bool bOn);// 0x79a8d0c
	void AddNoWarningState(enum State);// 0x79aad90
	void AddHealthHealing(FName SourceName, float Value);// 0x79a47a0
	void AddForceCalcVelocity(out Vector Velocity, out const Vector Acceleration, float DeltaTime);// 0x799a1dc
	void AddFinisherTimerOut(bool bIsTarget, float Time);// 0x799ca48
	void AddCharacterShield(out const float AddValue);// 0x79a48d8
	void AddCharacterHealth(out const float AddValue);// 0x79a49a4

--------------------------------
Class: ApexCharacterBase.Character.Pawn.Actor.Object
	ReplayWeaponHitRecordData[] ReplayWeaponHitData;//[Offset: 0x748, Size: 0x10]
	<enum,ActorComponent*> CharacterComponentMaps;//[Offset: 0x758, Size: 0x50]
	CharacterConfigDataAsset* ConfigData;//[Offset: 0x7b0, Size: 0x8]
	bool NativeRingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 0x1]
	bool LeftSideTPPCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ba, Size: 0x1]
	Vector DefaultTPPArmInGameLocation;//[Offset: 0x7e0, Size: 0xc]
	SceneComponent* TPPContainer;//[Offset: 0x7f0, Size: 0x8]
	SceneComponent* FPPContainer;//[Offset: 0x7f8, Size: 0x8]
	delegate OnTPPMeshVisibilityChange;//[Offset: 0x818, Size: 0x10]
	delegate OnFPPMeshVisibilityChange;//[Offset: 0x828, Size: 0x10]
	delegate OnCharacterJumpDelegate;//[Offset: 0x838, Size: 0x10]
	delegate OnCharacterJumpReleaseDelegate;//[Offset: 0x848, Size: 0x10]
	NotifyAudioComponent* NotifyAudioComponent;//[Offset: 0x908, Size: 0x8]
	bool bIsInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	<MeshComponent*,bool> MeshInvisibleData;//[Offset: 0x948, Size: 0x50]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x998, Size: 0x8]
	bool EnableLogState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 0x1]
	bool IsEnableCharacterOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 0x1]
	bool bEnableOutlineEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a2, Size: 0x1]
	byte OutlineIdOverride;//[Offset: 0x9a3, Size: 0x1]
	FName HeadParentBoneName;//[Offset: 0x9a4, Size: 0x8]
	FName BodyParentBoneName;//[Offset: 0x9ac, Size: 0x8]
	FName ThighLParentBoneName;//[Offset: 0x9b4, Size: 0x8]
	FName ThighRParentBoneName;//[Offset: 0x9bc, Size: 0x8]
	FName ArmLParentBoneName;//[Offset: 0x9c4, Size: 0x8]
	FName ArmRParentBoneName;//[Offset: 0x9cc, Size: 0x8]
	FName HeadHitBoneName;//[Offset: 0x9d4, Size: 0x8]
	FName BodyHitBoneName;//[Offset: 0x9dc, Size: 0x8]
	FName LeftArmHitBoneName;//[Offset: 0x9e4, Size: 0x8]
	FName RightArmHitBoneName;//[Offset: 0x9ec, Size: 0x8]
	FName LeftThighHitBoneName;//[Offset: 0x9f4, Size: 0x8]
	FName RightThighHitBoneName;//[Offset: 0x9fc, Size: 0x8]
	bool C_ClimbSwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04, Size: 0x1]
	bool bCanJumpFromPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa05, Size: 0x1]
	Actor* AttachedPlane;//[Offset: 0xa08, Size: 0x8]
	float PerkAimingSpeed;//[Offset: 0xa10, Size: 0x4]
	GameplayTagContainer GameplayTagContainer;//[Offset: 0xa18, Size: 0x20]
	bool BloodHoundHuntingOutlineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa50, Size: 0x1]
	ParticleSystemComponent*[] SpawnedFootprints;//[Offset: 0xa58, Size: 0x10]
	SubObjectsReplicationConfig SubObjectsReplicationConfig;//[Offset: 0xa6c, Size: 0x10]
	<enum,float> PawnState2EnterTime;//[Offset: 0xa90, Size: 0x50]
	<enum,float> PawnState2EndTime;//[Offset: 0xae0, Size: 0x50]
	class ApexAIController* AIControllerSoftClass;//[Offset: 0xb30, Size: 0x28]
	bool bNeedPlayAkEventAnimNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 0x1]
	enum HitPositionDetailed;//[Offset: 0xb59, Size: 0x1]
	byte NetHitPositionDetailed;//[Offset: 0xb5a, Size: 0x1]
	float SoundCheckInterval;//[Offset: 0xb78, Size: 0x4]
	float SoundCheckDownDistance;//[Offset: 0xb7c, Size: 0x4]
	float SoundCheckUpDistance;//[Offset: 0xb80, Size: 0x4]
	float EnvironmentCheckUpdateDistance;//[Offset: 0xb84, Size: 0x4]
	GravityElevatorUseFlow[] GravityElevatorUseFlowList;//[Offset: 0xb90, Size: 0x10]
	ZiplineMagnetic* ZiplineMagnetic;//[Offset: 0xba0, Size: 0x8]
	Vector ZiplineHandGrabLoc;//[Offset: 0xba8, Size: 0xc]
	bool bZiplineIsZiplineOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 0x1]
	ZiplineComponent* BaseRidingZipline;//[Offset: 0xbb8, Size: 0x8]
	bool bUseTPPMeshTickHighPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1]
	byte TPPMeshTickGroup;//[Offset: 0xbc1, Size: 0x1]
	Transform ZiplineGetTppMeshWorldTransform();// 0xa0d12ec
	void UseMeshMode(enum MeshUseSource, bool NewUse, enum MeshMode, float LerpTime, bool ForceInit);// 0xa0d60cc
	void UpdateBloodHoundHuntingOutline(bool enable);// 0x79bbedc
	void StopAnimMontageByGroupName(const enum InCameraMode, out const FName InGroupName, const float InBlendOut);// 0x79bcd88
	void SetUpTPPMeshComponentAttachment();// 0x79bd15c
	bool SetTPPMeshHidden(enum HiddenSource, bool NewHidden, float DelayTime);// 0xa0d5580
	bool SetTPPMeshDither(enum DitherSource, bool NewUse, float NewDitherValue);// 0xa0d4f58
	void SetTppMeshCollisionResponseToChannel(byte CollisionChannel, byte CollisionResponse, enum Source);// 0xa0d4d68
	void SetSwitchForCharacter(enum SoundType, FName SwitchGroup, FName SwitchState);// 0xa0d4904
	void SetRTPCForCharacter(enum SoundType, FName RTPC, float Value, int InterpolationTimeMs);// 0xa0d4af0
	void SetRegionForCharacter(enum SoundType);// 0xa0d482c
	void SetPadJumpPingPong(bool NewVal);// 0xa0d175c
	void SetPadDoubleJumpPingPong(bool NewVal);// 0xa0d167c
	void SetOutlineIdOverride(byte EffectID);// 0xa0d23a4
	bool SetMeshHidden(enum HiddenSource, bool SetFPP, bool SetTPP, bool FPPNewHidden, bool TPPNewHidden);// 0xa0d5998
	void SetInvisibleImpl(MeshComponent* InMeshComponent, const bool Invisible);// 0x79bc89c
	void SetInvisible(const bool Invisible);// 0x4b6e208
	bool SetFPPMeshHidden(enum HiddenSource, bool NewHidden, float DelayTime);// 0xa0d578c
	bool SetFPPMeshDither(enum DitherSource, bool NewUse, float NewDitherValue);// 0xa0d5164
	void SetEnableOutlineEffect(bool enable);// 0xa0d247c
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0xa0d2b70
	void ServerLeavePlane(Vector DesireLocation);// 0xa0d19d0
	void RPC_ServerSetEnableLogState(bool bEnable);// 0xa0d27f0
	bool RequireFootprintsDuringHunting();// 0x79bbfb4
	void ReplayRecordWeaponShootEvent(int WeaponID, int BulletNum);// 0x79bd8c0
	void ReplayRecordWeaponHitResult(int WeaponID, out const BulletHitInfoUploadData InReplayWeaponHitData);// 0x79bda14
	void RemoveOutlineEffectWithMesh(MeshComponent* SkeMesh);// 0x79bc3bc
	void RemoveOutlineEffectWithId(enum SourceType, int EffectID);// 0x79bc10c
	void RemoveOutlineEffect(enum SourceType, enum OutlineType);// 0x79bc264
	void RemoveComponentDitherBlackList(PrimitiveComponent* Component);// 0x79bcbe0
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0xa0d3150
	void ReceiveUnPossessedSubCharacterBy(ApexPlayerController* InController);// 0xa1d39f8
	void ReceivePossessedSubCharacterBy(ApexPlayerController* InController);// 0xa1d39f8
	void OnSwitchCrouch();// 0xa1d39f8
	void OnSubSkinChanged(SkeletalMeshComponent* SubMeshComponent);// 0x79bd7dc
	void OnSprintOverSpeed(bool Enter);// 0x79bcfb4
	void OnRep_ReplayWeaponHitData();// 0x79bd8ac
	void OnRep_HitPositionDetailed();// 0xa0d13e0
	void OnRep_EnableOutlineEffect();// 0x79bc020
	void OnRep_CanJump();// 0x4ec4228
	void OnRep_AttachedPlane();// 0x4e0ae58
	void OnJump();// 0xa1d39f8
	void MulticastDrawDebugPoint(Vector PointLoc, float PointSize, LinearColor Color);// 0xa0d37d0
	void MultiCastDrawDebugArrow(Vector Start, Vector End, LinearColor Color, float ArrowSize, float LineSize);// 0xa0d3bb0
	void LateUpdateAnimationInstanceData(AnimInstance* AnimInstance);// 0xa0d1568
	bool IsTPPHiddenFromSource(enum HiddenSource);// 0xa0d53b8
	bool IsTPPHidden();// 0xa0d5370
	bool IsTeammate(const Pawn* Other, bool bCheckHostile);// 0x79bca04
	bool IsSameTeam(Actor* Other, bool bCheckHostile);// 0xa0d2e58
	bool IsReplayViewTarget();// 0x79bdc80
	static bool IsPointInLocalViewFrustum(World* CurWorld, ApexCharacterBase* CurCharacter, out const Vector Location);// 0x79bd170
	bool IsObedInCurrentClient();// 0xa0d3790
	static bool IsLocalViewFrustumIntersectLine(World* CurWorld, out const Vector InStart, out const Vector InEnd);// 0x79bd368
	bool IsInvisible();// 0xa0d3774
	bool IsInGravityLift();// 0xa0d27d4
	bool IsFPPHiddenFromSource(enum HiddenSource);// 0xa0d549c
	bool IsFPPHidden();// 0xa0d5394
	bool IsAiming();// 0xa0d6534
	static void InitNewTPPMeshComponent(SkeletalMeshComponent* TargetComp, SceneComponent* InParentComponent, bool bForceTickHighPriority, byte InTickGroup);// 0x79bd56c
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0xa0d2fd4
	bool GetZiplineIsRiding_C();// 0xa0d13a0
	bool GetZiplineIsRidedZiplineVertical_C();// 0xa0d1360
	float GetViewScrollSpeedScale();// 0xa0d45d0
	float GetUltimateSkillCDThresholdScale();// 0xa0d42c0
	float GetUltimateSkillCDScale();// 0xa0d4374
	float GetUltimateSkillCDCastScale();// 0xa0d4248
	int GetTeamIndex();// 0x79bcb78
	int GetTeamId();// 0x79bcbac
	float GetTacticsSkillCDThresholdScale();// 0xa0d42fc
	float GetTacticsSkillCDScale();// 0xa0d43b0
	float GetTacticsSkillCDCastScale();// 0xa0d4284
	float GetSyringeRate();// 0xa0d41d0
	float GetStateEnterTime(out const enum TargetState);// 0x79bbd78
	float GetStateEndTime(out const enum TargetState);// 0x79bbc14
	SpringArmComponent* GetSpringArmComp(enum CameraMode);// 0xa0d5e94
	float GetSpreadScale();// 0xa0d4594
	float GetSpeedScale();// 0xa0d47f0
	float GetSmallMoveShowDistanceScale();// 0xa0d43ec
	float GetSkillDamageScale();// 0xa0d46c0
	void GetSilencedByRevenant(float Duration);// 0xa0d18bc
	enum GetServerCameraMode();// 0xa0d63dc
	float GetRescueSelfMultiplier();// 0xa0d44dc
	float GetRescuePropScale();// 0xa0d44a0
	float GetRescueMultiplier();// 0xa0d4518
	float GetReloadSpeedScale();// 0xa0d46fc
	float GetPassiveSkillCDScale();// 0xa0d4338
	bool GetPadJumpPingPong();// 0xa0d187c
	bool GetPadDoubleJumpPingPong();// 0xa0d183c
	SceneComponent* GetNodeComponent(enum Tag);// 0xa0d5cd4
	Vector GetNameDisplayLocation();// 0xa0d143c
	float GetMoveShowDistanceScale();// 0xa0d4464
	enum GetMeshMode();// 0xa0d6090
	float GetMeleeAttackDamageScale();// 0xa0d4648
	float GetMeleeAttackBeatSpeedScale();// 0xa0d460c
	float GetMaxWalkSpeedLimit();// 0xa0d47b4
	float GetKnockdownSpeedScale();// 0xa0d4738
	float GetJumpHeightScale();// 0xa0d420c
	bool GetIsIndiviRescue();// 0xa0d4554
	Vector GetHintCenterOffset();// 0xa0d13fc
	Vector GetHeadLocation(bool bUseHeadBone);// 0xa0d147c
	float GetFireShowDistanceScale();// 0xa0d4428
	bool GetDisableSprint();// 0xa0d4774
	SkeletalMeshComponent* GetCurrentMesh();// 0xa0d5f74
	enum GetCurrentCameraMode();// 0xa0d6418
	float GetControllerYawOffset();// 0x79bcf80
	SceneComponent* GetContainer(enum CameraMode);// 0xa0d5db4
	CharacterParachuteComponent* GetCharacterParachuteComponent();// 0xa0d1640
	enum GetCharacterCameraPoseType();// 0x79bd08c
	SkeletalMeshComponent* GetCameraModeMesh(enum CameraMode);// 0xa0d5fb0
	BuffInstancedItem* GetBuffInstancedItem(FName BuffName);// 0xa0d28d0
	double GetBuffExpiry(FName BuffName);// 0xa0d2a90
	ApexBuff* GetBuffByName(FName BuffName);// 0xa0d29b0
	Actor* GetAttachedPlane();// 0x79bbfec
	float GetAIDamageScale();// 0xa0d4684
	SkeletalMeshComponent* GetActiveMesh();// 0xa0d1994
	void ElevatorMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode, byte MovementMode, byte CustomMovementMode);// 0xa0d255c
	void ClientDrawDebugPoint(Vector PointLoc, float PointSize, LinearColor Color);// 0xa0d39c0
	void ClientDrawDebugArrow(Vector Start, Vector End, LinearColor Color, float ArrowSize, float LineSize);// 0xa0d3ec0
	void ChangeCharacterRimEffect(bool IsShow);// 0x79bc034
	void ChangeAiming(bool NewIsAiming);// 0xa0d6454
	void BroadcastClientsSimulateDamage(ApexCharacter* Victim, float Damage, int DamageType, Pawn* Attacker, Vector AttackerLoc, enum AvatarDamagePosition, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken, uint32 ShootID, byte PelletID, float AimPercent, byte AimChargeLevel, int InDamageItemId);// 0xa0d1aa8
	void BP_LateUpdateAnimationInstanceData(AnimInstance* AnimInstance);// 0xa1d39f8
	void BaseAIBroadcastRideZipline(ZiplineComponent* Zipline, float T, float t1);// 0xa0d10fc
	void BaseAIBroadcastDownZipline(float ForceDownT);// 0xa0d1024
	void AddOutlineEffectWithNoMesh(enum SourceType, enum EffectType);// 0x79bc48c
	void AddOutlineEffectWithIdNoMesh(enum SourceType, int EffectID);// 0x5fd8b5c
	void AddOutlineEffectWithId(MeshComponent* SkeMesh, enum SourceType, int EffectID);// 0x79bc5e4
	void AddOutlineEffectForReplay(int TeamID);// 0x79bdbb0
	void AddOutlineEffect(MeshComponent* SkeMesh, enum SourceType, enum EffectType);// 0x4f91214
	void AddOutlineComp(MeshComponent* SkeMesh);// 0x79bc7cc
	void AddComponentDitherBlackList(PrimitiveComponent* Component);// 0x79bccb4
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0xa0d2ce4
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor, float InValidityTimeScale);// 0xa0d3470

--------------------------------
Class: ReplayWeaponHitRecordData
	int[] HitBodyNum;//[Offset: 0x0, Size: 0x10]
	int FireTotalNum;//[Offset: 0x10, Size: 0x4]
	int FireHitNum;//[Offset: 0x14, Size: 0x4]
	int WeaponID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ZiplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ComponentReference AttachBegin;//[Offset: 0x568, Size: 0x28]
	FName AttachBeginSocketName;//[Offset: 0x590, Size: 0x8]
	Vector AttachBeginOffset;//[Offset: 0x598, Size: 0xc]
	ComponentReference AttachEnd;//[Offset: 0x5a8, Size: 0x28]
	FName AttachEndSocketName;//[Offset: 0x5d0, Size: 0x8]
	Vector AttachEndOffset;//[Offset: 0x5d8, Size: 0xc]
	int NumSegments;//[Offset: 0x5e4, Size: 0x4]
	float LengthScale;//[Offset: 0x5e8, Size: 0x4]
	int CurveSeparateNum;//[Offset: 0x5ec, Size: 0x4]
	float CurveAlpha;//[Offset: 0x5f0, Size: 0x4]
	bool bEnableCurveSeparate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	float AngleThreshold;//[Offset: 0x5f8, Size: 0x4]
	enum ZiplineType;//[Offset: 0x5fc, Size: 0x1]
	bool bIsFunctional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd, Size: 0x1]
	bool bNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fe, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ff, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x600, Size: 0x4]
	bool bStraightZiplineCutLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]
	bool bEnablePhysic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 0x1]
	float NoPlayerShakeTime;//[Offset: 0x608, Size: 0x4]
	float NoPlayerResetTime;//[Offset: 0x60c, Size: 0x4]
	float EachDeltaTime;//[Offset: 0x610, Size: 0x4]
	int IterateTime;//[Offset: 0x614, Size: 0x4]
	float GravityValue;//[Offset: 0x618, Size: 0x4]
	float PlayerEffect;//[Offset: 0x61c, Size: 0x4]
	float SlowRate;//[Offset: 0x620, Size: 0x4]
	float WindFrequency;//[Offset: 0x624, Size: 0x4]
	float WindForce;//[Offset: 0x628, Size: 0x4]
	float CableWidth;//[Offset: 0x630, Size: 0x4]
	int NumSides;//[Offset: 0x634, Size: 0x4]
	float PlayerRadius;//[Offset: 0x638, Size: 0x4]
	float PlayerRadiusTPP;//[Offset: 0x63c, Size: 0x4]
	float MaxPlayerDist;//[Offset: 0x640, Size: 0x4]
	float MaxPlayerDistTPP;//[Offset: 0x644, Size: 0x4]
	float MaxViewAngle;//[Offset: 0x648, Size: 0x4]
	float MaxViewAngleTPP;//[Offset: 0x64c, Size: 0x4]
	float AutoRide_ShowRadius;//[Offset: 0x650, Size: 0x4]
	float AutoRide_ExitRadius;//[Offset: 0x654, Size: 0x4]
	ZiplineDownInfo InitDownInfo;//[Offset: 0x658, Size: 0x1c]
	ZiplineTipInfo TipInfoStart;//[Offset: 0x674, Size: 0x24]
	ZiplineTipInfo TipInfoEnd;//[Offset: 0x698, Size: 0x24]
	byte LandBlockChannel;//[Offset: 0x6bc, Size: 0x1]
	float BetweenSpaceTime;//[Offset: 0x6c0, Size: 0x4]
	float BetweenSpaceDist;//[Offset: 0x6c4, Size: 0x4]
	float RideDelayTime;//[Offset: 0x6c8, Size: 0x4]
	float RideViewTimeH;//[Offset: 0x6cc, Size: 0x4]
	float MoveMaxSpeed;//[Offset: 0x6d0, Size: 0x4]
	float MoveAccelerate;//[Offset: 0x6d4, Size: 0x4]
	float RideVelLimit;//[Offset: 0x6d8, Size: 0x4]
	float RideFirstHeight;//[Offset: 0x6dc, Size: 0x4]
	Vector Launch_StartPos;//[Offset: 0x6e0, Size: 0xc]
	Vector Launch_EndPos;//[Offset: 0x6ec, Size: 0xc]
	float Launch_TotalTime;//[Offset: 0x6f8, Size: 0x4]
	float Launch_StartTime;//[Offset: 0x6fc, Size: 0x4]
	int Launch_NumSegment;//[Offset: 0x700, Size: 0x4]
	bool bIsLaunchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]
	float Launch_DistortOffsetY;//[Offset: 0x708, Size: 0x4]
	float Launch_DistortOffsetZ;//[Offset: 0x70c, Size: 0x4]
	float Launch_DistortLength;//[Offset: 0x710, Size: 0x4]
	float Launch_DistortAmount;//[Offset: 0x714, Size: 0x4]
	float Launch_DistortSpeed;//[Offset: 0x718, Size: 0x4]
	StaticMesh* Launch_Mesh;//[Offset: 0x720, Size: 0x8]
	MaterialInterface* Launch_Mat;//[Offset: 0x728, Size: 0x8]
	StaticMeshComponent* Launch_MeshComp;//[Offset: 0x730, Size: 0x8]
	MaterialInstanceDynamic* Launch_MatDynamic;//[Offset: 0x738, Size: 0x8]
	ZiplineElevatorInfo[] ElevatorList;//[Offset: 0x740, Size: 0x10]
	bool bDryRunZiplineProbe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	float NavStartPos;//[Offset: 0x754, Size: 0x4]
	float NavEndPos;//[Offset: 0x758, Size: 0x4]
	bool bHasResetOri;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 0x1]
	float LastHasPlayerTime;//[Offset: 0x760, Size: 0x4]
	float OffsetRadiusFraction;//[Offset: 0x764, Size: 0x4]
	float TileMaterial;//[Offset: 0x768, Size: 0x4]
	bool bHasCalc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1]
	Vector2D PreCalcMinMax;//[Offset: 0x770, Size: 0x8]
	ZiplinePoint[] PotList;//[Offset: 0x778, Size: 0x10]
	float[] LenList;//[Offset: 0x788, Size: 0x10]
	float[] LenRate;//[Offset: 0x798, Size: 0x10]
	Vector4[] CurvePreData;//[Offset: 0x7a8, Size: 0x10]
	Vector[] OriList;//[Offset: 0x7b8, Size: 0x10]
	float TotalLength;//[Offset: 0x7c8, Size: 0x4]
	float DevTotalLength;//[Offset: 0x7cc, Size: 0x4]
	ZiplinePlayerInfo[] PlayerList;//[Offset: 0x7d0, Size: 0x10]
	ZiplineBasePlayerInfo[] PlayerBaseList;//[Offset: 0x7e0, Size: 0x10]
	bool NeedSegmentInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 0x1]
	float LowerHeight;//[Offset: 0x7f4, Size: 0x4]
	float DevDeltaZ;//[Offset: 0x7f8, Size: 0x4]
	Vector LowerTip;//[Offset: 0x7fc, Size: 0xc]
	Vector HigherTip;//[Offset: 0x808, Size: 0xc]
	Vector SegDelta;//[Offset: 0x814, Size: 0xc]
	void SetLaunchMaterialParam();// 0x5f06674
	void SetHighlight(bool bHighlight);// 0x610187c
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x7f802ac
	void SetAttachBeginToComponent(SceneComponent* Component, FName SocketName);// 0x7f80178
	void KickOutAllPlayer();// 0x7f7ff44
	bool HasPlayerRiding();// 0x7f7fefc
	float GetTotalLength();// 0x7f7fec0
	float GetTileMaterial();// 0x7f7fe84
	float GetRidePoint(out const Vector ori, out const Vector Dir, out Vector res, out float T, float playerHeight, bool IsInAir, out float MinDist, bool bIsTpp);// 0x7f803e0
	Vector GetLaunchMiddlePos(float Time);// 0x7f7ff58
	bool GetIsHotBallonZipline();// 0x7f80140
	void ConstructZipline();// 0x7f8012c
	void ClearAllDownInfo();// 0x5a5ac54
	void ChangeVisibility(bool bNewIsVisible);// 0x5fbe830

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8]
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8]
	FString PathToComponent;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ZiplineDownInfo
	enum DownPreset;//[Offset: 0x0, Size: 0x1]
	bool bMaintainSlideVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bLimitSlideVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxSlideVel;//[Offset: 0x4, Size: 0x4]
	enum HorizonDirType;//[Offset: 0x8, Size: 0x1]
	float ConstYaw;//[Offset: 0xc, Size: 0x4]
	float HorizonVel;//[Offset: 0x10, Size: 0x4]
	bool bJumpOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float VelZ;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ZiplineTipInfo
	float AutoDownDist;//[Offset: 0x0, Size: 0x4]
	float AutoDirDist;//[Offset: 0x4, Size: 0x4]
	ZiplineDownInfo DownInfo;//[Offset: 0x8, Size: 0x1c]

--------------------------------
Class: ZiplineElevatorInfo
	float AutoDownT;//[Offset: 0x0, Size: 0x4]
	float DeltaRadius;//[Offset: 0x4, Size: 0x4]
	ZiplineDownInfo DownInfo;//[Offset: 0x8, Size: 0x1c]

--------------------------------
Class: ZiplinePoint
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	Vector Accelerate;//[Offset: 0x18, Size: 0xc]
	Vector OldPosition;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: ZiplinePlayerInfo
	ApexCharacter* Player;//[Offset: 0x0, Size: 0x8]
	float LengthT;//[Offset: 0x8, Size: 0x4]
	float RideTime;//[Offset: 0xc, Size: 0x4]
	float VelValue;//[Offset: 0x10, Size: 0x4]
	Vector StartPos;//[Offset: 0x14, Size: 0xc]
	Rotator StartRot;//[Offset: 0x20, Size: 0xc]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Rotator EndRot;//[Offset: 0x38, Size: 0xc]
	bool bToEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bIsOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bNeedFirstJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bNeedSetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	Vector CurVelocity;//[Offset: 0x48, Size: 0xc]
	Vector LastPos;//[Offset: 0x54, Size: 0xc]
	bool bHasReachZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bNeedPlayRushAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int Index;//[Offset: 0x64, Size: 0x4]
	bool bIsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bBlockDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bBlockMaintainSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]
	float BlockUpperZ;//[Offset: 0x6c, Size: 0x4]
	float ViewTurnValue;//[Offset: 0x70, Size: 0x4]
	float AIDownT;//[Offset: 0x74, Size: 0x4]
	float AIForceDownT;//[Offset: 0x78, Size: 0x4]
	float NowT;//[Offset: 0x7c, Size: 0x4]
	float BetweenSpaceOffset;//[Offset: 0x80, Size: 0x4]
	float RideTimeCopy;//[Offset: 0x84, Size: 0x4]
	float ServerTime;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: ZiplineBasePlayerInfo
	ApexCharacterBase* Player;//[Offset: 0x0, Size: 0x8]
	float LengthT;//[Offset: 0x8, Size: 0x4]
	float RideTime;//[Offset: 0xc, Size: 0x4]
	float VelValue;//[Offset: 0x10, Size: 0x4]
	Vector StartPos;//[Offset: 0x14, Size: 0xc]
	Rotator StartRot;//[Offset: 0x20, Size: 0xc]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Rotator EndRot;//[Offset: 0x38, Size: 0xc]
	bool bToEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bIsOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bNeedFirstJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bNeedSetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	Vector CurVelocity;//[Offset: 0x48, Size: 0xc]
	Vector LastPos;//[Offset: 0x54, Size: 0xc]
	bool bHasReachZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bNeedPlayRushAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int Index;//[Offset: 0x64, Size: 0x4]
	bool bIsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bBlockDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bBlockMaintainSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]
	float BlockUpperZ;//[Offset: 0x6c, Size: 0x4]
	float ViewTurnValue;//[Offset: 0x70, Size: 0x4]
	float AIDownT;//[Offset: 0x74, Size: 0x4]
	float NowT;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: GameInitControllerComponent.ActorComponent.Object
	GameInitAction*[] Actions;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: GameInitAction.Object

--------------------------------
Class: CharacterComponentCreateData
	bool bCreateOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bTickOnDS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCreateOnAutonomous;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bTickOnAutonomous;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCreateOnSimulated;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bTickOnSimulated;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	class ActorComponent* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameModeReSpawn.ActorComponent.Object
	TimerHandle TimerHandle;//[Offset: 0xf8, Size: 0x8]
	int ReSpawnNumber;//[Offset: 0x100, Size: 0x4]
	bool TeamReSpawnMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int64 TimeBox;//[Offset: 0x108, Size: 0x8]
	int RespawnAudioID;//[Offset: 0x110, Size: 0x4]
	class Actor* ViewTarget;//[Offset: 0x118, Size: 0x8]
	int64 LiftOffTime;//[Offset: 0x120, Size: 0x8]
	int64 LiftOffSpeed;//[Offset: 0x128, Size: 0x8]
	float CheckCapsuleHalfHight;//[Offset: 0x130, Size: 0x4]
	float CheckCapsuleRadius;//[Offset: 0x134, Size: 0x4]
	int FindCheckNums;//[Offset: 0x138, Size: 0x4]
	float FindCheckStartRadius;//[Offset: 0x13c, Size: 0x4]
	float FindCheckMaxRadius;//[Offset: 0x140, Size: 0x4]
	float FindCheckRadiusStep;//[Offset: 0x144, Size: 0x4]
	float FindCheckHeightStep;//[Offset: 0x148, Size: 0x4]
	float FindCheckMaxHeight;//[Offset: 0x14c, Size: 0x4]
	Vector[] SafeRespawnPoints;//[Offset: 0x150, Size: 0x10]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	void RestoreSafeRespawnParachutePoint();// 0x7c2aed4
	void ReSpawnTimeStart();// 0x7c2af04
	void ReSpawnTimer();// 0x7c2af18
	void CollectSafeRespawnParachutePoint();// 0x7c2aeec
	void ClearSafeRespawnParachutePoint();// 0x7c2aebc

--------------------------------
Class: StateLerpArrayInfos
	<enum,StateLerpInfo> Infos;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: StateLerpInfo
	byte Priority;//[Offset: 0x0, Size: 0x1]
	enum ModifyType;//[Offset: 0x1, Size: 0x1]
	float DelayTime;//[Offset: 0x4, Size: 0x4]
	bool UseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector FPPTargetValue;//[Offset: 0xc, Size: 0xc]
	Vector TPPTargetValue;//[Offset: 0x18, Size: 0xc]
	float LerpTime;//[Offset: 0x24, Size: 0x4]
	CurveVector* LerpCurve;//[Offset: 0x28, Size: 0x8]
	Vector CurveScale;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: ApexCharacterAnimationComponent.ActorComponent.Object
	int CharacterAnimationID;//[Offset: 0x148, Size: 0x4]
	int LoadAnimDataAssetDistance;//[Offset: 0x14c, Size: 0x4]
	AnimParamList CurAnimParamList;//[Offset: 0x160, Size: 0x74]
	float TurnInPlaceAngel;//[Offset: 0x1d4, Size: 0x4]
	float DesireAttackRemainDuration;//[Offset: 0x1d8, Size: 0x4]
	float DesireAttackDetectTotalAnimTime;//[Offset: 0x1dc, Size: 0x4]
	delegate AnimMontagePlayDelegate;//[Offset: 0x1f0, Size: 0x10]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x200, Size: 0x10]
	delegate OnPlayerPoseChange;//[Offset: 0x210, Size: 0x10]
	delegate PlayMontageByCameraMode;//[Offset: 0x220, Size: 0x10]
	delegate OnPlayCharacterMontage;//[Offset: 0x230, Size: 0x10]
	delegate OnPlayCharacterMontageFourParams;//[Offset: 0x240, Size: 0x10]
	delegate OnPlayCharacterMontageFiveParams;//[Offset: 0x250, Size: 0x10]
	delegate PlayAnimMontageDelegate;//[Offset: 0x260, Size: 0x10]
	delegate StopAnimMontageByAnimTypeAndLayer;//[Offset: 0x270, Size: 0x10]
	delegate EventOnPlayCharacterMontageWithSectionPos;//[Offset: 0x280, Size: 0x10]
	delegate EventPlayPawnMontageByAnimPoseType;//[Offset: 0x290, Size: 0x10]
	float SwitchPoseCDTime;//[Offset: 0x2a0, Size: 0x4]
	bool bUseBaseBSTransitionFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	bool bUseBaseBSTransitionTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]
	bool bAnimForceInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 0x1]
	bool bAnimForceInFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 0x1]
	<AnimSequenceBase*,AnimSeqList> AnimSoundSeqMap;//[Offset: 0x2b0, Size: 0x50]
	ApexCharacter* ApexCharacter;//[Offset: 0x318, Size: 0x8]
	byte TryPopMovementMode();// 0x79b9a78
	void SetRuntimeAnimPlayScaleBySkillType(enum SkillHandType, float RateScale);// 0x79b9920
	void SetRuntimeAnimPlayScaleByAnimType(byte AnimType, float RateScale);// 0x79b97c8
	byte PopMovementMode();// 0x79b9ac8
	void OnWeaponStartFire(Weapon* InWeapon);// 0x60b75d4
	void OnPoseChanged(enum PrevState, enum NewState);// 0x4e15e34
	void OnPawnStateLeave(enum LeavedState);// 0x79ba59c
	void OnPawnStateEnter(enum EnteredState);// 0x79ba66c
	void OnPawnStateChanged(out const enum[] StatesMoreThanOld, out const enum[] StatesLessThanOld);// 0x79ba3bc
	void OnMeleeAttackAnimEventHandle(bool bStartUp);// 0x535fe74
	bool NeedMeleeAttackBack();// 0x79b9fb4
	float GetRuntimeAnimPlayScaleBySkillType(enum SkillHandType);// 0x79b965c
	float GetRuntimeAnimPlayScale(byte AnimType);// 0xa0d0d98
	byte GetPlayerJumpType(bool IsMoveBack);// 0x79ba2dc
	bool GetInArmedAnimation();// 0x79b9fec
	byte GetCharacterPoseType();// 0xa0d0edc
	void EnableUseBaseBSTransition(bool bEnable);// 0x79ba1f4
	void EnableAnimForceInFalling(bool bEnable);// 0x79ba02c
	void EnableAnimForceInAir(bool bEnable);// 0x79ba110
	void ClearSoundSeqByAnim(AnimSequenceBase* Anim);// 0x79b9afc
	void AttempToSetDesireToAttack(bool HasDesireToAttack, bool bForceDetectDuration, float InSpecDetectDuration);// 0x79b9db4
	void AddAnimSoundMap(AnimSequenceBase* Anim, int SoundSeq, ApexAnimNotifySoundSetting* SoundSetting);// 0x79b9bcc

--------------------------------
Class: AnimParamList
	float ClimbOverStartRate;//[Offset: 0x0, Size: 0x4]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool ScopeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool ScopeOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool IsLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool IsLandingLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool IsSlidingToAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool IsAirToSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	float ParachuteTurnInput;//[Offset: 0xc, Size: 0x4]
	float ParachuteForwardInput;//[Offset: 0x10, Size: 0x4]
	Vector LastLocation;//[Offset: 0x14, Size: 0xc]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool ImmediatelyKnockdownPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	byte SkillAnimHandType;//[Offset: 0x23, Size: 0x1]
	bool SkillAnimHandPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	enum DeadAnimType;//[Offset: 0x25, Size: 0x1]
	enum AnimRescueType;//[Offset: 0x26, Size: 0x1]
	float RescueAnimPlayRate;//[Offset: 0x28, Size: 0x4]
	BackpackSwitchGunAnimData BackpackSwitchGunAnimData;//[Offset: 0x2c, Size: 0xc]
	enum ClimbOverAnimType;//[Offset: 0x38, Size: 0x1]
	float ClimbAnimVelocity;//[Offset: 0x3c, Size: 0x4]
	Vector HangingPosition;//[Offset: 0x40, Size: 0xc]
	bool bIsBeFinisherStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bInArmedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bSlideAlongSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bOnSwitchThrowMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bDefuseBombSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Vector GrapplingAimDirection;//[Offset: 0x54, Size: 0xc]
	float Significance;//[Offset: 0x60, Size: 0x4]
	byte JumpType;//[Offset: 0x64, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool StateEnterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]

--------------------------------
Class: BackpackSwitchGunAnimData
	float Duration;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0x4, Size: 0x4]
	bool bPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: AnimSeqList
	AnimSeqData[] AnimSoundSeqList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSeqData
	int SoundSeq;//[Offset: 0x0, Size: 0x4]
	ApexAnimNotifySoundSetting* SoundSetting;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	CharacterAnimDataAsset* AnimationDataSet;//[Offset: 0x1d0, Size: 0x28]
	CharacterAnimDataAsset* CurrentAnimDataAsset;//[Offset: 0x210, Size: 0x8]
	AnimSoftObject[] NeedLoadAnimArray;//[Offset: 0x218, Size: 0x10]
	int CustomLoadIndex;//[Offset: 0x228, Size: 0x4]
	int CustomPerLoadCount;//[Offset: 0x22c, Size: 0x4]
	uint32 CustomAnimLoadId;//[Offset: 0x230, Size: 0x4]
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType, bool IsFPP);// 0x7ebc850
	AnimationAsset* GetCharacterAnim(byte AnimType, byte PoseType, bool IsFPP);// 0x7ebca44

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x1b0, Size: 0x10]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 0x1]
	FString AnimsCatorgeryName;//[Offset: 0x8, Size: 0x10]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x18, Size: 0x60]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 0x10]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x8]
	float Rate;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CharacterAnimDataAsset.DataAsset.Object
	<FinalKey,uint16> AnimListMap;//[Offset: 0x30, Size: 0x50]
	AnimationAsset*[] AnimListMapValueArray;//[Offset: 0x80, Size: 0x10]
	RandomPlayerSequenceEntryContainer TppIdleRandomContainer;//[Offset: 0x90, Size: 0x10]
	<AnimationAsset*> RetainAnimAssets;//[Offset: 0xa0, Size: 0x50]
	<uint16> ProbeLoadAnimAssets;//[Offset: 0xf0, Size: 0x50]
	<AnimationAsset*> RetainProbeAnimAssets;//[Offset: 0x140, Size: 0x50]
	uint32 RefCount;//[Offset: 0x190, Size: 0x4]
	float CurrentMinDistanceSquaredToCamera;//[Offset: 0x194, Size: 0x4]
	bool bProbeAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	AnimSequence*[] GrabAllAnimSeqs(int inMinFrameNum);// 0x7b548d8

--------------------------------
Class: FinalKey
	int Key;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: RandomPlayerSequenceEntryContainer
	RandomPlayerSequenceEntryX[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomPlayerSequenceEntryX
	AnimSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	float ChanceToPlay;//[Offset: 0x8, Size: 0x4]
	int MinLoopCount;//[Offset: 0xc, Size: 0x4]
	int MaxLoopCount;//[Offset: 0x10, Size: 0x4]
	float MinPlayRate;//[Offset: 0x14, Size: 0x4]
	float MaxPlayRate;//[Offset: 0x18, Size: 0x4]
	AlphaBlend BlendIn;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: AnimSoftObject
	AnimationAsset* AnimSoftObjectPtr;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: Workbench.Actor.Object
	bool IsSideOpening1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool IsSideOpening2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	bool IsSideOpening3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2e8, Size: 0x8]
	ActivityDynamicMaterialComponent* DynamicMaterialComp;//[Offset: 0x2f0, Size: 0x8]
	delegate OnWorkbenchStateChange;//[Offset: 0x2f8, Size: 0x10]
	FString LinkGuid;//[Offset: 0x308, Size: 0x10]
	HarvesterActor*[] SubHarvesterActorArray;//[Offset: 0x318, Size: 0x10]
	SkeletalMeshComponent* Mesh;//[Offset: 0x328, Size: 0x8]
	ParticleSystemComponent* HeadIcon;//[Offset: 0x330, Size: 0x8]
	ParticleSystemComponent* ReplicateCompleteLight;//[Offset: 0x338, Size: 0x8]
	ParticleSystemComponent* SdieSmoke1;//[Offset: 0x340, Size: 0x8]
	ParticleSystemComponent* SdieSmoke2;//[Offset: 0x348, Size: 0x8]
	ParticleSystemComponent* SdieSmoke3;//[Offset: 0x350, Size: 0x8]
	ParticleSystemComponent* SdieWindowLight1;//[Offset: 0x358, Size: 0x8]
	ParticleSystemComponent* SdieWindowLight2;//[Offset: 0x360, Size: 0x8]
	ParticleSystemComponent* SdieWindowLight3;//[Offset: 0x368, Size: 0x8]
	SceneComponent* OperatingPoint1;//[Offset: 0x370, Size: 0x8]
	SceneComponent* OperatingPoint2;//[Offset: 0x378, Size: 0x8]
	SceneComponent* OperatingPoint3;//[Offset: 0x380, Size: 0x8]
	int MiniMapIndex;//[Offset: 0x388, Size: 0x4]
	bool CanReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	enum WorkbenchType;//[Offset: 0x394, Size: 0x1]
	float MeshAnimationTime;//[Offset: 0x398, Size: 0x4]
	float NormalMashInterval;//[Offset: 0x39c, Size: 0x4]
	<int,int> PlayerKeySideMap;//[Offset: 0x3a0, Size: 0x50]
	CarePackageItemSocketDataAsset* RelicatorItemSocketDataAsset;//[Offset: 0x3f0, Size: 0x8]
	FName ReplicateEffectColorParamName;//[Offset: 0x3f8, Size: 0x8]
	<int,Vector> ReplicateEffectColorConfig;//[Offset: 0x400, Size: 0x50]
	UseAngleConfigData[] UseAngleConfig;//[Offset: 0x450, Size: 0x10]
	int ReplicatorSideIndex1;//[Offset: 0x460, Size: 0x4]
	int ReplicatorSideIndex2;//[Offset: 0x464, Size: 0x4]
	int ReplicatorSideIndex3;//[Offset: 0x468, Size: 0x4]
	<int,Vector> ReplicateEffectUIPosConfig;//[Offset: 0x470, Size: 0x50]
	float PlayerCanInteractionDistSqr;//[Offset: 0x4c0, Size: 0x4]
	float PlayerCanInteractionHight;//[Offset: 0x4c4, Size: 0x4]
	float ReplicateTime;//[Offset: 0x4c8, Size: 0x4]
	float ReplicateLimitPlayerTime;//[Offset: 0x4cc, Size: 0x4]
	int BtnGuideID;//[Offset: 0x4d0, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x4d8, Size: 0x10]
	AkComponent* OwnedAudioEffectManager;//[Offset: 0x4e8, Size: 0x8]
	AkAudioEvent* LoopSound;//[Offset: 0x4f0, Size: 0x28]
	AkAudioEvent* DoorOpenSound;//[Offset: 0x518, Size: 0x28]
	AkAudioEvent* DoorCloseSound;//[Offset: 0x540, Size: 0x28]
	AkAudioEvent* ReplicateStartSound;//[Offset: 0x568, Size: 0x28]
	AkAudioEvent* ReplicateCompleteSound;//[Offset: 0x590, Size: 0x28]
	AkAudioEvent* ReplicateWarningToEnd;//[Offset: 0x5b8, Size: 0x28]
	float TimeToEndWaring;//[Offset: 0x5e0, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]
	bool IsOperatingSide1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e5, Size: 0x1]
	bool IsOperatingSide2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e6, Size: 0x1]
	bool IsOperatingSide3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e7, Size: 0x1]
	ReplicatingRepStateData ReplicatingStateSide1;//[Offset: 0x5e8, Size: 0x8]
	ReplicatingRepStateData ReplicatingStateSide2;//[Offset: 0x5f0, Size: 0x8]
	ReplicatingRepStateData ReplicatingStateSide3;//[Offset: 0x5f8, Size: 0x8]
	TimerHandle SideReplicateTimer1;//[Offset: 0x600, Size: 0x8]
	TimerHandle SideReplicateTimer2;//[Offset: 0x608, Size: 0x8]
	TimerHandle SideReplicateTimer3;//[Offset: 0x610, Size: 0x8]
	TimerHandle SideSoundTimer1;//[Offset: 0x618, Size: 0x8]
	TimerHandle SideSoundTimer2;//[Offset: 0x620, Size: 0x8]
	TimerHandle SideSoundTimer3;//[Offset: 0x628, Size: 0x8]
	<uint64,int> WorkbenchItemSideCacheMap;//[Offset: 0x630, Size: 0x50]
	<int,int> WorkbenchSideItemCount;//[Offset: 0x680, Size: 0x50]
	<int,int> WorkbenchSignMap;//[Offset: 0x6d0, Size: 0x50]
	AudioEventAsync* AudioEventSide1;//[Offset: 0x720, Size: 0x8]
	AudioEventAsync* AudioEventSide2;//[Offset: 0x728, Size: 0x8]
	AudioEventAsync* AudioEventSide3;//[Offset: 0x730, Size: 0x8]
	TimerHandle MeshTickIntervalToNormalHandle;//[Offset: 0x738, Size: 0x8]
	void ReplicateItems(const int InPlayerKey, const int SideIndex, const int[] Items, const bool IsShield, const int AppendExp);// 0x7f73d74
	void PlayWaringToEndSound();// 0x7f73f94
	void OnRep_RepOperatingSide3();// 0x5dcacb8
	void OnRep_RepOperatingSide2();// 0x5982b8c
	void OnRep_RepOperatingSide1();// 0x5982c00
	void OnRep_ReplicatingStateSide3();// 0x61adb20
	void OnRep_ReplicatingStateSide2();// 0x617b2ec
	void OnRep_ReplicatingStateSide1();// 0x46d02bc
	void OnPickUpBePicked(PickUpItemData InItemData, int InCount);// 0x7f739e0

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x18]
	int count;//[Offset: 0x18, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x20, Size: 0x10]
	int Index;//[Offset: 0x30, Size: 0x4]
	int InsertTime;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: BattleItemAdditionalData
	enum DataType;//[Offset: 0x0, Size: 0x1]
	float FloatData;//[Offset: 0x4, Size: 0x4]
	int IntData;//[Offset: 0x8, Size: 0x4]
	int[] IntArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: OutlineAndFillComponent.SignificanceManagedActorComponent.ActorComponent.Object
	bool bMaskable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	<PrimitiveComponent*> MarkerComps;//[Offset: 0x120, Size: 0x50]
	void SubtractEffectTallyWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x7d77420
	void SubtractEffectTally(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x7d77230
	void SetMarkerCompEnemyMask(bool bInEnemyMask);// 0x7d76f20
	void RemoveMarkerComps(out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x7d77fc0
	void RemoveMarkerComp(PrimitiveComponent* Comp, bool bIsOccluder);// 0x7d7816c
	void RemoveEffectWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x7d77be0
	void RemoveEffect(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x7d779f0
	void RemoveAllSourceTypeEffects(enum SourceType, bool bIsOccluder);// 0x7d76ff8
	void RemoveAllEffects(bool bIsOccluder);// 0x7d77158
	void PlusEffectTallyWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x7d77800
	void PlusEffectTally(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x7d77610
	bool IsOutlineSeenThroughSmoke();// 0x7d76b28
	bool HasEffect(enum SourceType, int ConfigIdx);// 0x7d76ba0
	int GetCountTally(enum SourceType, int ConfigIdx);// 0x7d76d0c
	bool AddMarkerCompsNotRefresh(out const PrimitiveComponent*[] Comps);// 0x7d785e8
	void AddMarkerComps(out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x7d782d4
	bool AddMarkerCompNotRefresh(PrimitiveComponent* Comp);// 0x7d7870c
	void AddMarkerComp(PrimitiveComponent* Comp, bool bIsOccluder);// 0x7d78480
	void AddEffectWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x5961c00
	void AddEffect(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x7d77dd0

--------------------------------
Class: SignificanceManagedActorComponent.ActorComponent.Object
	FName SignificanceTag;//[Offset: 0x100, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x108, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x109, Size: 0x1]
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0xa1708d4

--------------------------------
Class: ActivityDynamicMaterialComponent.ActorComponent.Object
	DynamicMaterialDataAsset* DynamicMaterialDataAsset;//[Offset: 0xf8, Size: 0x8]
	void SetStaticMeshMaterial(PrimitiveComponent* StaticMesh, DynamicItemConfig ActivityDynamicItem, int ChangeID);// 0x7949898
	void SetMeshDynamicMaterial(int ChangeID);// 0x7949b44
	PrimitiveComponent*[] GetDynamicMeshComponent();// 0x79497c8

--------------------------------
Class: DynamicMaterialDataAsset.DataAsset.Object
	<int,DynamicItemConfig> ActivityDynamicItemConfig;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: DynamicItemConfig
	<int,DynamicItemMeshConfig> DynamicStaticData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: DynamicItemMeshConfig
	<FName,MaterialInterface*> DynamicStaticMeshData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: HarvesterActor.SignificanceManagedActor.Actor.Object
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x300, Size: 0x8]
	int MaterialNum;//[Offset: 0x308, Size: 0x4]
	bool bIsHideMarkIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	FString LinkGuid;//[Offset: 0x328, Size: 0x10]
	SkeletalMeshComponent* Mesh;//[Offset: 0x338, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x340, Size: 0x8]
	SphereComponent* CheckSphere;//[Offset: 0x348, Size: 0x8]
	SphereComponent* AutoCheckSphere;//[Offset: 0x350, Size: 0x8]
	AkComponent* OwnedAudioEffectManager;//[Offset: 0x358, Size: 0x8]
	bool CanExtract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float ServerCheckDist;//[Offset: 0x364, Size: 0x4]
	Vector UIFollowPos;//[Offset: 0x368, Size: 0xc]
	int BtnGuideID;//[Offset: 0x374, Size: 0x4]
	int MiniMapIndex;//[Offset: 0x378, Size: 0x4]
	int[] ExtractPlayerKeys;//[Offset: 0x380, Size: 0x10]
	enum[] DisableOpenPawnStates;//[Offset: 0x390, Size: 0x10]
	AnimationAsset* ExtractAnimation;//[Offset: 0x3a0, Size: 0x8]
	bool IsAutomousExtracted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	AkAudioEvent* LoopSound;//[Offset: 0x3b0, Size: 0x28]
	AkAudioEvent* ExtractSound;//[Offset: 0x3d8, Size: 0x28]
	void Reset();// 0xa136858
	void OnRep_RepExtractPlayerKeys();// 0x5f1752c

--------------------------------
Class: CarePackageItemSocketDataAsset.DataAsset.Object
	<int,CarePackageSocketData> CarePackageSocketDataMap;//[Offset: 0x30, Size: 0x50]
	FName GetSocketName(int SlotIndex, int ItemID, int ItemIndex);// 0x7b4b660

--------------------------------
Class: CarePackageSocketData
	FName DefaultSocket;//[Offset: 0x0, Size: 0x8]
	<int,CarePackageIndexToSocketName> ItemTypeToSocketData;//[Offset: 0x8, Size: 0x50]
	<int,CarePackageIndexToSocketName> ItemSubTypeToSocketData;//[Offset: 0x58, Size: 0x50]
	<int,CarePackageIndexToSocketName> ItemIDToSocketData;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: CarePackageIndexToSocketName
	FName[] IndexToSocketName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UseAngleConfigData
	float StartAngle;//[Offset: 0x0, Size: 0x4]
	float EndAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicatingRepStateData
	enum State;//[Offset: 0x0, Size: 0x1]
	int Level;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AudioEventAsync.AsyncLoaderBase.Object
	Actor* _RoleActor;//[Offset: 0x38, Size: 0x8]
	Actor* _AttachActor;//[Offset: 0x40, Size: 0x8]
	AkComponent* _AkComponent;//[Offset: 0x48, Size: 0x8]
	Object* _WorldContextObject;//[Offset: 0x70, Size: 0x8]
	void StopEvent();// 0x520432c
	int GetPlayingID();// 0x7acaf0c

--------------------------------
Class: AsyncLoaderBase.Object
	Object* Context;//[Offset: 0x28, Size: 0x8]
	void Reset();// 0xa0fa728
	void CancelHandle();// 0x7abff18

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 0x18]
	FName TargetAssociationName;//[Offset: 0x18, Size: 0x8]
	enum TargetSlot;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: ApexAIController.AIController.Controller.Actor.Object
	bool IsAIFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	bool IsMirageTutorialAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 0x1]
	bool IsAICanCastSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x436, Size: 0x1]
	bool IsAICanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x437, Size: 0x1]
	bool IsAICanAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool CanOpenBinTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	float TotalWeight;//[Offset: 0x458, Size: 0x4]
	BTTaskStartFireMemory Memory;//[Offset: 0x45c, Size: 0x10]
	Vector TargetLocation;//[Offset: 0x46c, Size: 0xc]
	AIBehaviorRules BehaviorRules;//[Offset: 0x4a0, Size: 0x18]
	BackpackComponent* BackpackCompoent;//[Offset: 0x4b8, Size: 0x8]
	PingManagerComponent* PingManagerComponent;//[Offset: 0x4c0, Size: 0x8]
	EmojiGiveALikeMgr* EmojiGiveALikeMgr;//[Offset: 0x4c8, Size: 0x8]
	FiniteBattleBehStateMachine* FiniteBattleBehStateMachine;//[Offset: 0x4d0, Size: 0x8]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x4d8, Size: 0x8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x4e0, Size: 0x8]
	ApexAIPerceptionComponent* AIPerceptionComp;//[Offset: 0x4e8, Size: 0x8]
	ApexAIComponent* AIComp;//[Offset: 0x4f0, Size: 0x8]
	PickupManagerComponent* PickupManagerComp;//[Offset: 0x4f8, Size: 0x8]
	StateMachineComponent* StateMachineComp;//[Offset: 0x500, Size: 0x8]
	DrugRecommendComponent* DrugRecommendComp;//[Offset: 0x508, Size: 0x8]
	enum MaxShieldMode;//[Offset: 0x510, Size: 0x1]
	float SetMaxShieldValue;//[Offset: 0x514, Size: 0x4]
	bool DestroyWhenPawnGoDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	CharacterTeamItemUseTipComponent* CharacterTeamItemUseTipComponent;//[Offset: 0x528, Size: 0x8]
	enum ServerStateType;//[Offset: 0x530, Size: 0x1]
	DataReportComponent* DataReportComponent;//[Offset: 0x538, Size: 0x8]
	MsgAssistantCompoent* MsgAssitantComp;//[Offset: 0x540, Size: 0x8]
	ModifyAttributeData* RealCustomSpeed;//[Offset: 0x568, Size: 0x8]
	float MemoryTargetSeekerTime;//[Offset: 0x57c, Size: 0x4]
	float LastDelayToClearDeadBodyTime;//[Offset: 0x580, Size: 0x4]
	Vector MemoryTargetTime;//[Offset: 0x584, Size: 0xc]
	Vector DiffTargetTime;//[Offset: 0x590, Size: 0xc]
	float DiffHearTargetTime;//[Offset: 0x59c, Size: 0x4]
	Vector2D CurFireRecoilTarget;//[Offset: 0x5a0, Size: 0x8]
	Vector2D ShootWeaponAddLocation;//[Offset: 0x5a8, Size: 0x8]
	bool DebugShootWeaponAddLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool DebugShootLeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	bool ShootLeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 0x1]
	Vector2D BodyEdgeAddLocation;//[Offset: 0x5b4, Size: 0x8]
	float BodyEdgeAddFoot;//[Offset: 0x5bc, Size: 0x4]
	float BodyEdgeShootKeepTime;//[Offset: 0x5c0, Size: 0x4]
	float ParachuteJumpForwardInput;//[Offset: 0x5c4, Size: 0x4]
	bool ParachuteJumpInputStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	int FollowerIndex;//[Offset: 0x5cc, Size: 0x4]
	int AIIndex;//[Offset: 0x5d0, Size: 0x4]
	int AIType;//[Offset: 0x5d4, Size: 0x4]
	float AIFowardInput;//[Offset: 0x5dc, Size: 0x4]
	float AIRightInput;//[Offset: 0x5e0, Size: 0x4]
	bool ValkyrieJetPackLevelFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]
	Actor* CurTarget;//[Offset: 0x5f8, Size: 0x8]
	<Actor*,EnemyInfo> EnemyInfoList;//[Offset: 0x610, Size: 0x50]
	Actor*[] EnemySeenInfoList;//[Offset: 0x660, Size: 0x10]
	<Actor*> EnemyList;//[Offset: 0x670, Size: 0x50]
	<Actor*,float> MemoryList;//[Offset: 0x6c0, Size: 0x50]
	<Actor*> SeenList;//[Offset: 0x710, Size: 0x50]
	double WhoAttackMeTimestamp;//[Offset: 0x768, Size: 0x8]
	bool TargetInsight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	FString[] ListofSightBlock;//[Offset: 0x778, Size: 0x10]
	Vector AILandLocation;//[Offset: 0x788, Size: 0xc]
	int[] YouHaveBeentoPointVec;//[Offset: 0x798, Size: 0x10]
	int CurLootArea;//[Offset: 0x7a8, Size: 0x4]
	float EnterTargetPointSpendTime;//[Offset: 0x7ac, Size: 0x4]
	<PlayerTombBox*> TombBoxs;//[Offset: 0x7b0, Size: 0x50]
	ApexAITeamController* TeamManager;//[Offset: 0x800, Size: 0x8]
	float UpdateBeenSeenInterval;//[Offset: 0x868, Size: 0x4]
	<byte,float> TakeDamageReduceScale;//[Offset: 0x870, Size: 0x50]
	bool IsCheckTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	float YawChangeSpeed;//[Offset: 0x8c4, Size: 0x4]
	bool EnableLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1]
	bool EnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 0x1]
	float AILevelRatio;//[Offset: 0x8cc, Size: 0x4]
	int MaxAILevel;//[Offset: 0x8d0, Size: 0x4]
	int RelativeLevelLimit;//[Offset: 0x8d4, Size: 0x4]
	int NotKillAILevel;//[Offset: 0x8d8, Size: 0x4]
	<int> NotKillWeaponIds;//[Offset: 0x8e0, Size: 0x50]
	int AILevel;//[Offset: 0x934, Size: 0x4]
	enum CurrentPhase;//[Offset: 0x940, Size: 0x1]
	bool IsShowMoveTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	float SuperJumpHight;//[Offset: 0x944, Size: 0x4]
	bool IsDebugLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 0x1]
	DynamicDmgCurve DynamicDmgCurve;//[Offset: 0x978, Size: 0x558]
	HitPositionConfig[] HitPositionConfigVec;//[Offset: 0xed0, Size: 0x10]
	float OnlyUpperBodyDist;//[Offset: 0xee0, Size: 0x4]
	bool DrawAIDebugShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 0x1]
	float ExpIncreaseScale;//[Offset: 0xee8, Size: 0x4]
	SVONNavigationComponent* SVONComponent;//[Offset: 0x1448, Size: 0x8]
	Vector DebugAILandLocation;//[Offset: 0x1460, Size: 0xc]
	ApexTreasureDoor* TreasureDoor;//[Offset: 0x1480, Size: 0x8]
	double UnreachableValidTime;//[Offset: 0x14e8, Size: 0x8]
	bool EnableMultiClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f0, Size: 0x1]
	bool EnableRepath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f1, Size: 0x1]
	bool EnableMove2DynamicTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f2, Size: 0x1]
	bool EnableShiftPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f3, Size: 0x1]
	int8 AICfgForbiddenZoneTime;//[Offset: 0x14f4, Size: 0x1]
	float AIFocusCanSprintAngle;//[Offset: 0x14f8, Size: 0x4]
	bool EnableAIHandleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fc, Size: 0x1]
	bool DisableRaycastPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fd, Size: 0x1]
	bool EnableJumpBlockOnFirstSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fe, Size: 0x1]
	FString AIHostFuncKeyStart;//[Offset: 0x1530, Size: 0x10]
	int AIHostFuncNum;//[Offset: 0x1540, Size: 0x4]
	bool PickBannerInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1544, Size: 0x1]
	uint32 CurRecoverBannerPlayerKey;//[Offset: 0x1548, Size: 0x4]
	bool PingSelfBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1560, Size: 0x1]
	float TeammateEnemyExtent;//[Offset: 0x1564, Size: 0x4]
	float SelfEnemyExtent;//[Offset: 0x1568, Size: 0x4]
	float PingInterval;//[Offset: 0x156c, Size: 0x4]
	float IntervalFloat;//[Offset: 0x1570, Size: 0x4]
	void TriggerSkill(int SkillID);// 0x7971f9c
	void TriggerAIHostFuncBy(ApexPlayerController* Target, int FuncIdx, int CurrentValue);// 0x7971664
	void StopAILogic(bool StopTick);// 0x79715e0
	void SetWhoAttackMe(Controller* CharacterByDamageCauser, float Damage);// 0x797218c
	void SetWantToVoid(bool bWantToVoid);// 0x79712b0
	void SetOpenningTreasureDoor(ApexTreasureDoor* Door);// 0x797175c
	void SetAICanSkill(bool bCan);// 0x797122c
	void ServerHandleMsg(enum Msg, enum StateSource);// 0x7971c00
	void ResumeAILogic();// 0x79715cc
	void OperateRespawnBeacon(enum OperateCode, ApexRespawnBeacon* RespawnBeacon);// 0x797150c
	void OnSkillEvent(int SkillID, byte SkillStopReason);// 0x7971e64
	void OnOpenCarePackage(CarePackage* Actor);// 0x7972018
	void OnOpenBinTest(BinActor* Door);// 0x7972094
	void OnNavLinkReached(enum LinkType, out const Vector DestinationPoint);// 0xa1d39f8
	void OnNavLinkFinished(enum LinkType);// 0xa1d39f8
	void MovementInput(float DeltaTime);// 0x7971f20
	bool IsOnZipline();// 0x79717e0
	bool IsInTacticalMomentForbiddenVolume();// 0x7971850
	bool IsEnemy_Test(ApexCharacter* Self, ApexCharacter* Other);// 0x7971334
	bool IsClimbing();// 0x7971818
	void HandleMsg(enum Msg, enum StateSource);// 0x7971cec
	void HandleMessage(enum Phase);// 0x7971dac
	ApexAITeamController* GetTeamManager();// 0x7971a90
	PingManagerComponent* GetPingManagerComponent();// 0xa0c7db4
	enum GetPhase();// 0x7971e28
	MetaAIController* GetMetaAIManager();// 0x7971a5c
	FiniteBattleBehStateMachine* GetFiniteBattleBehStateMachine();// 0xa0c7d5c
	EmojiGiveALikeMgr* GetEmojiGiveALikeMgr();// 0xa0c7d78
	BlackboardComponent* GetBlackboardComp();// 0x7972260
	BackpackComponent* GetBackpackComponent();// 0xa0c7df0
	void GetAllEnemy(bool OnlPlayer, out Actor*[] OutActors);// 0x7971940
	void DoDeathEvent();// 0x797224c
	void DelTombBox(PlayerTombBox* Box);// 0x7972110
	void DelAIMoveState(enum Reason);// 0x7971ac4
	void ClientHandleMsg(enum Msg, enum StateSource);// 0x7971b40
	void ClientEnterStageFight_AICanJump();// 0x7971a48
	bool CheckRespawnBeacon(ApexRespawnBeacon* RespawnBeacon);// 0x7971484
	bool CheckIsLastCharacter(ApexCharacter* TargetEntity);// 0x79711a4
	void ChangeDynamicDmgCurve(enum CurveType, CurveFloat* ExternalCurve);// 0x7971888
	void BreakOpenTreasureDoor();// 0xa0c7d40
	void AIUseSkillByBlueprint(int SkillID);// 0x7971408

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x370, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x370, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x370, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x370, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x370, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x378, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x380, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x388, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x390, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x398, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x3a0, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x3a8, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x3b0, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x9c98318
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x9c98220
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x9c97d7c
	void SetMoveBlockDetection(bool bEnable);// 0x9c984d0
	bool RunBehaviorTree(BehaviorTree* BTAsset, bool bLoop);// 0x9c983f4
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xa1d39f8
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x9c97e00
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x9c98634
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x9c988a8
	void K2_SetFocus(Actor* NewFocus);// 0x9c97f18
	void K2_SetFocalPoint(Vector FP);// 0x9c97fa4
	void K2_ClearFocus();// 0x9c97ec0
	bool HasPartialPath();// 0x9c9858c
	PathFollowingComponent* GetPathFollowingComponent();// 0xa3b8918
	byte GetMoveStatus();// 0x9c985e8
	Vector GetImmediateMoveDestination();// 0x9c98554
	Actor* GetFocusActor();// 0x9c97ee4
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x9c98030
	Vector GetFocalPoint();// 0x9c980c0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0xa3b88fc
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x9c9829c

--------------------------------
Class: BTTaskStartFireMemory
	float SustainTime;//[Offset: 0x0, Size: 0x4]
	float TakeRestTime;//[Offset: 0x4, Size: 0x4]
	float StartFireTimer;//[Offset: 0x8, Size: 0x4]
	bool bFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AIBehaviorRules
	BehaviorTree* Default;//[Offset: 0x0, Size: 0x8]
	AIBehaviorLevel[] LevelRules;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 0x8]
	class AliasNameData* AliasNameAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0xc0, Size: 0x10]
	BTService*[] Services;//[Offset: 0xd0, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]
	<FName,FName> ExportMap;//[Offset: 0x58, Size: 0x50]
	XTN* XTNAsset;//[Offset: 0xa8, Size: 0x8]
	BTNode* XTNTemplateNode;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.XTNStandaloneNode.BTNode.Object
	BTService*[] Services;//[Offset: 0xf0, Size: 0x10]
	bool bCanBatchRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bForceBatchRun;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	AsyncBTTaskBlueprintProxy* BlueprintProxy;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: XTNStandaloneNode.BTNode.Object
	XTNStandaloneNode*[] NextXTNNodes;//[Offset: 0xc0, Size: 0x10]
	BTDecorator*[] XTNDecorators;//[Offset: 0xd0, Size: 0x10]
	BTService*[] XTNServices;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0xc4, Size: 0x4]
	float RandomDeviation;//[Offset: 0xc8, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: AsyncBTTaskBlueprintProxy.Object
	BTTaskNode* Parent;//[Offset: 0x28, Size: 0x8]
	BTTaskNode* Node;//[Offset: 0x30, Size: 0x8]
	delegate OnSuccess;//[Offset: 0x38, Size: 0x10]
	delegate OnFail;//[Offset: 0x48, Size: 0x10]
	delegate OnAbort;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc2, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0xc3, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: XTN.Object
	XTNStandaloneNode*[] StartNodes;//[Offset: 0x28, Size: 0x10]
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 0x10]
	BTService*[] RootServices;//[Offset: 0x48, Size: 0x10]
	BlackboardData* BlackboardAsset;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AliasNameData.Object

--------------------------------
Class: AIBehaviorLevel
	FString LevelRange;//[Offset: 0x0, Size: 0x10]
	AIBehavior[] List;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AIBehavior
	float Weight;//[Offset: 0x0, Size: 0x4]
	BehaviorTree* Tree;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xf8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x100, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x128, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x9ca347c
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x9ca361c
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x9ca33ac
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x9ca3ba0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x9ca354c
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x9ca3930
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x9ca3860
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x9ca3a00
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x9ca3ad0
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x9ca3788
	bool IsVectorValueSet(out const FName KeyName);// 0x9ca3314
	Vector GetValueAsVector(out const FName KeyName);// 0x9ca3d08
	FString GetValueAsString(out const FName KeyName);// 0x9ca3e34
	Rotator GetValueAsRotator(out const FName KeyName);// 0x9ca3c70
	Object* GetValueAsObject(out const FName KeyName);// 0x9ca423c
	FName GetValueAsName(out const FName KeyName);// 0x9ca3da0
	int GetValueAsInt(out const FName KeyName);// 0x9ca4080
	float GetValueAsFloat(out const FName KeyName);// 0x9ca3fec
	byte GetValueAsEnum(out const FName KeyName);// 0x9ca4114
	class Object GetValueAsClass(out const FName KeyName);// 0x9ca41a8
	bool GetValueAsBool(out const FName KeyName);// 0x9ca3f54
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x9ca3144
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x9ca322c
	void ClearValue(out const FName KeyName);// 0x9ca30b8

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x100, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x108, Size: 0x8]
	void StopLogic(FString Reason);// 0x9ca604c
	void RestartLogic();// 0xa3babec
	bool IsRunning();// 0xa3babac
	bool IsPaused();// 0xa3bab6c

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: BackpackComponent.ControllerComponentBase.ActorComponent.Object
	delegate ItemBeforeRemovedDelegate;//[Offset: 0x158, Size: 0x10]
	delegate ItemListUpdatedDelegate;//[Offset: 0x168, Size: 0x10]
	delegate ItemListNetUpdatedDelegate;//[Offset: 0x178, Size: 0x10]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x188, Size: 0x10]
	delegate AmmoItemUpdatedDelegate;//[Offset: 0x198, Size: 0x10]
	delegate SingleItemDeleteDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate CapacityUpdatedDelegate;//[Offset: 0x1c8, Size: 0x10]
	delegate ItemPickUpResultDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate ItemDropSuccessDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate ItemUpdatedDelegate;//[Offset: 0x228, Size: 0x10]
	BackpackAddRuleComp*[] AddtionalRuleComps;//[Offset: 0x238, Size: 0x10]
	<int,ItemRule> PerkItemRuleAddition;//[Offset: 0x248, Size: 0x50]
	ItemRule[] ItemRuleNet;//[Offset: 0x298, Size: 0x10]
	ItemRule DefaultItemRule;//[Offset: 0x2a8, Size: 0xc]
	int64 FlowID;//[Offset: 0x2d0, Size: 0x8]
	<int,ShortcutBarItem*> CurrentShortcutItemFocus;//[Offset: 0x2d8, Size: 0x50]
	IncNetArray ItemListNet;//[Offset: 0x350, Size: 0x20]
	BattleItemData[] CachItemList;//[Offset: 0x370, Size: 0x10]
	IncNetArray ItemListChangeCache;//[Offset: 0x380, Size: 0x20]
	IncNetArray ItemListNetCache;//[Offset: 0x3a0, Size: 0x20]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x3c0, Size: 0x10]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x3d0, Size: 0x50]
	int DefaultCapacity;//[Offset: 0x420, Size: 0x4]
	int CapacityThreshold;//[Offset: 0x424, Size: 0x4]
	int RequireConsumableTime;//[Offset: 0x428, Size: 0x4]
	ItemDefineID RequireConsumableID;//[Offset: 0x430, Size: 0x18]
	int RequireBackpackTime;//[Offset: 0x448, Size: 0x4]
	int RequireUpgradeArmorTime;//[Offset: 0x44c, Size: 0x4]
	int RequireUpgradeArmorQuality;//[Offset: 0x450, Size: 0x4]
	delegate ItemOperCountDelegate;//[Offset: 0x458, Size: 0x10]
	delegate ItemOperationDelegate;//[Offset: 0x468, Size: 0x10]
	ItemDefineID[] CurrentWeaponIdArray;//[Offset: 0x478, Size: 0x10]
	int Capacity;//[Offset: 0x488, Size: 0x4]
	int OccupiedCapacity;//[Offset: 0x48c, Size: 0x4]
	int OccupiedExtraCapacity;//[Offset: 0x490, Size: 0x4]
	FString BPClassPath;//[Offset: 0x4a8, Size: 0x10]
	int virtualitemid;//[Offset: 0x4b8, Size: 0x4]
	uint32 ItemUseStartTime;//[Offset: 0x4bc, Size: 0x4]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x7ae40d0
	int UpdateCapacity();// 0xa0fe4e4
	void UnequipItem(ItemDefineID DefineID);// 0x7ae1e38
	void TryMergeItemHandles(ItemDefineID DefineID, bool bLimited);// 0x7ae141c
	int TakeItem(ItemDefineID DefineID, int count, bool bCallHandleDrop);// 0x7ae1b00
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x7ae3d08
	void ShowEquipScopeShortcut(const ItemDefineID AttachID, int WeaponIndex, const ItemDefineID WeaponData);// 0x7adfc20
	void SetForbiddenDropItem(enum InReason, out const int[] ForbiddenTypes);// 0x7ae4564
	void ServerPickupByItemID(int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x7ae5ad0
	void ServerEquipAttachToSpecificSlotWeapon(out const ItemDefineID AttachID, enum WeaponSlot);// 0x7ae3714
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x7ae42dc
	bool ServerAlchemyWholeWeaponCustom(int DeriveID, out const WholeWeaponData WholeWeaponData, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x7ae5d90
	bool ServerAlchemyWholeWeapon(int DeriveID, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x7ae611c
	void RPC_ServerPickupByItemID(int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x7ae5808
	void ReplaceTracking(out const ItemDefineID DefineID);// 0x7ae21dc
	bool ReplaceItem(ItemDefineID ItemInBack, int ItemID, int ItemCount, enum SpawnReason);// 0x7ae3024
	void RemovePerkItemRuleAddition(out const int ItemID);// 0x7ae65bc
	bool RemoveItemHandle(out const ItemDefineID DefineID);// 0x7ae7008
	void ReceiveItemList();// 0x7ae02b8
	void ReceiveCapacity();// 0xa0fe520
	bool QuickReplaceWeaponAttach(ItemDefineID WeaponDefineID, BattleItemHandleBase* ItemHandleBase);// 0x7ae3278
	void PickUpTracking(out const ItemDefineID DefineID);// 0x7ae25e4
	bool PickupItemRecursive(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x7ae4aac
	bool PickupItem(ContainerData PickupInfo, bool bBackpackInclude, bool bTrack);// 0x7ae4f94
	bool PickupByItemID(out ItemDefineID ItemDefineID, int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x7ae54a4
	bool OverrideWeaponAttachment(ItemDefineID WeaponDefineID, int AttachmentID);// 0x7ae3ba8
	void OnUseSkillItemFailed(ItemDefineID DefineID, byte FailedReason);// 0x7ae05cc
	void OnUseItem(const int ItemID);// 0x7ae1fd8
	void OnSwitchBackpackOpenState(bool bOpen);// 0x7ae6378
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x7ae725c
	void OnRep_ItemRuleNet();// 0x7ae6444
	void OnRep_ItemListNet();// 0x4e10b10
	void OnRep_Capacity();// 0x7adfbd4
	void OnDropItemSuccess(const int ItemID, enum DropReason);// 0x7ae209c
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x7ae6f30
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x7ae6e58
	void NotifyItemListUpdated();// 0xa0fe574
	void NotifyFull();// 0x59311ac
	void NotifyCapacityUpdated();// 0xa0fe558
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x7ae12dc
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int count);// 0x7ae11a4
	bool IsAmmoDisable(out const ItemDefineID AmmoItemDefineID);// 0x7adfec4
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x7ae0968
	enum GetReplaceTrackingType(out const ItemDefineID DefineID);// 0x7ae22ac
	enum GetPickUpTrackingType(out const ItemDefineID DefineID);// 0x7ae26b4
	ItemRule GetPerkItemRuleAddition(int ItemID);// 0x7ae6458
	Object* GetOwningObject();// 0xa0fe590
	int GetOccupiedCapacity();// 0x7adffa8
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID, bool bIncludeBackpack);// 0x7ae0720
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x7adffe4
	ItemHandleBase*[] GetItemHandleList();// 0x7ae0138
	int GetItemCountByDefineID(ItemDefineID DefineID, bool bOnlyInstance);// 0x7ae0f20
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x567ba3c
	bool GetIsForbiddenDropItem(ItemDefineID ItemID);// 0x7ae4480
	double GetEquipGoldShieldTime(uint32 PlayerKey);// 0x7adfa4c
	double GetEquipGoldHelmetTime(uint32 PlayerKey);// 0x7adfb10
	enum GetDropTrackingType(out const ItemDefineID DefineID);// 0x7ae2504
	int GetCapacity();// 0xa0fe53c
	BattleItemData[] GetAllItemList();// 0x7ae1084
	int GetAllItemCountByDefineID(ItemDefineID DefineID);// 0x7ae0de0
	ItemHandleBase* FindItemHandleByDefineID(ItemDefineID DefineID);// 0x7adfde4
	ItemHandleBase* FindFirstItemHandleByItemId(int ItemID);// 0x7ae0bb4
	bool FindFirstItemBySubType(int SubType, out BattleItemData OutItemData);// 0x7ae0c78
	void FillThrowPropsArray(out PickUpItemData[] Result, out const ThrowProps ThrowProps);// 0x7ae2794
	void ExtracteItemDataFromItemNet(out const NetArrayUnit NetItem, out BattleItemData ItemData);// 0x7ae1570
	void EquipItem(ItemDefineID DefineID);// 0x7ae1f08
	void DropTracking(out const ItemDefineID DefineID);// 0x7ae2434
	bool DropItem(ItemDefineID DefineID, int count, enum Reason);// 0x7ae48c8
	PickUpItemData[] DropAllAndReturnPickUpList(enum Reason);// 0x7ae2c88
	void DropAll();// 0x7ae46dc
	int DropActivityItem(out const ItemDefineID DefineID, int count, enum Reason);// 0x7ae46f0
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x7ae3f68
	bool DisuseAttachmentByTypeWithReason(ItemDefineID WeaponDefineID, enum AttachmentSocketType, enum Reason);// 0x7ae33d8
	bool DisuseAttachmentByType(ItemDefineID WeaponDefineID, enum AttachmentSocketType);// 0x7ae35b4
	int ConsumeItem(ItemDefineID DefineID, int count);// 0x7ae1cdc
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x7ae04f4
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x7ae041c
	void ClientNotifyPickupResultTips(FString TipsStr);// 0x7ae01c4
	void ClientNotifyPickupResult(const PickupNotifyData PickupNotifyData, int CapacityLimitedPickupCount);// 0x7ae02cc
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x7ae6ac0
	int CheckCapacityForItem(ItemDefineID DefineID, int count);// 0x7ae19a4
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x7ae3e84
	void BroadcastSingleItemUpdateDelegate(out const ItemDefineID DefineID);// 0x7ae6920
	void BroadcastSingleItemDeleteDelegate(out const ItemDefineID DefineID);// 0x7ae6850
	void BroadCastItemUseEnd(ItemDefineID DefineID);// 0x7ae69f0
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x7ae6c90
	void BroadcastItemListUpdatedDelegate();// 0x7ae683c
	void BroadcastItemBeforeRemovedDelegate(out const ItemDefineID DefineID);// 0x7ae6758
	void BroadcastCapacityUpdatedDelegate();// 0x7ae6828
	bool BackpackItemIsExist(int ItemID);// 0x7ae0aec
	int AttachmentSocketType(int ItemID);// 0x7ae3868
	int AllowPickupNum(ItemDefineID DefineID, int RequestPickupNum);// 0x7ae1848
	void AlchemyWholeWeapon(ItemHandleBase* ItemHandleBase, bool bInForceInitial);// 0x7ae392c
	BattleItemHandleBase* AlchemyBattleItemHandle(int DeriveID, int ItemID);// 0x7ae3a6c
	void AddPerkItemRuleAddition(out const ItemRule ItemRule);// 0x7ae6688
	bool AddItemHandle(out const ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x7ae70f4

--------------------------------
Class: ControllerComponentBase.ActorComponent.Object

--------------------------------
Class: WholeWeaponData
	int ID;//[Offset: 0x0, Size: 0x4]
	int WeaponID;//[Offset: 0x4, Size: 0x4]
	int Color;//[Offset: 0x8, Size: 0x4]
	int[] AttachList;//[Offset: 0x10, Size: 0x10]
	int[] AttachCanEquip;//[Offset: 0x20, Size: 0x10]
	int[] AttachCanShow;//[Offset: 0x30, Size: 0x10]
	int SpecialBullet;//[Offset: 0x40, Size: 0x4]
	FName BulletIcon;//[Offset: 0x44, Size: 0x8]
	int QualityRule;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComponent;//[Offset: 0x168, Size: 0x8]
	BattleItemData ItemData;//[Offset: 0x178, Size: 0xe8]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x268, Size: 0x10]
	int DeriveID;//[Offset: 0x278, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	float UnitWeight;//[Offset: 0x280, Size: 0x4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 0x1]
	void SpawnThrowPropsWrapper();// 0xa13f020
	void PostPickup(ContainerData PickupInfo);// 0x7ce17e8
	bool IsUsable();// 0xa13f03c
	bool HasEquippedFullAttachments();// 0x7ce11f0
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x7ce13d0
	bool HandlePreDrop(int InCount, enum Reason);// 0x7ce169c
	bool HandlePickup(out const interface classNone ItemContainer, ContainerData PickupInfo);// 0x7ce1bd8
	bool HandleEnable(bool bEnable);// 0x7ce1228
	bool HandleDrop(int InCount, enum Reason);// 0x7ce1550
	bool HandleDisuse(enum Reason);// 0x7ce1300
	bool HandleChangeLegend();// 0xa13f07c
	World* GetWorldInternal();// 0xa13f0bc
	BattleItemData ExtractItemData();// 0x7ce206c

--------------------------------
Class: ItemHandleBase.Object
	int MaxCount;//[Offset: 0x2c, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x38, Size: 0x50]
	ItemDefineID DefineID;//[Offset: 0x88, Size: 0x18]
	void SetCount(int NewCount);// 0x7cdd5ec
	void SetAssociation(FName Name, ItemAssociation Association);// 0x7cdcf6c
	void RemoveAssociation(FName Name);// 0x7cdceb0
	void Init(ItemDefineID InDefineID);// 0x7cdd6a8
	ItemDefineID GetDefineID();// 0x7cdce28
	int GetCount();// 0xa13df48
	<FName,ItemAssociation> GetAssociationMap();// 0x7cdce78
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x7cdd20c
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x7cdd114
	ItemAssociation GetAssociation(FName Name);// 0x7cdd35c
	void AddAssociation(FName Name, ItemAssociation Association);// 0x7cdd444

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 0x8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x18]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ContainerData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x18]
	int count;//[Offset: 0x18, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x20, Size: 0x10]
	int Index;//[Offset: 0x30, Size: 0x4]
	ItemDefineID TargetID;//[Offset: 0x38, Size: 0x18]
	enum Reason;//[Offset: 0x60, Size: 0x1]
	enum SpawnReason;//[Offset: 0x61, Size: 0x1]
	bool bLongPressReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bBlackMarket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	PickUpListWrapperActor* SourceActorWeakPtr;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.DynamicMovementActor.Actor.Object
	int WeaponAnimFeedbackDistance;//[Offset: 0x848, Size: 0x4]
	SceneComponent* DefaultRoot;//[Offset: 0x850, Size: 0x8]
	bool IsSeekerPickUpListActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	PickUpItemData[] PickUpDataList;//[Offset: 0x898, Size: 0x10]
	void RPCNetMulticastModifyData(int Index, int RetCount);// 0x7db0790
	void RPCNetMulticastAddPickUpData(PickUpItemData PickUpItemData);// 0x7db03ec
	void OnWrapperEmptyDelegate__DelegateSignature();// 0xa1d39f8
	void OnRep_PickUpDataList();// 0x52bdc68
	void OnPickUpItemDelegate__DelegateSignature(int ItemDataIndex, int LeftCount);// 0xa1d39f8
	void OnInsertItemDelegate__DelegateSignature(int ItemDataIndex);// 0xa1d39f8
	PickUpItemData[] GetPickUpDataList();// 0x7db08fc

--------------------------------
Class: PickUpWrapperActor.DynamicMovementActor.Actor.Object
	bool bClientHasPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	WrapperRecordData WrapperRecordData;//[Offset: 0x3a4, Size: 0x4]
	ParticleSystemComponent* PickupEffectComp;//[Offset: 0x3b0, Size: 0x8]
	ParticleSystemComponent*[] PickupParitcleComps;//[Offset: 0x3c0, Size: 0x10]
	int PickUpOutlineID;//[Offset: 0x3d4, Size: 0x4]
	int PickUpOutlineIDPing;//[Offset: 0x3d8, Size: 0x4]
	int[] WholeWeaponOutline;//[Offset: 0x3e0, Size: 0x10]
	int[] WholeWeaponOutlinePing;//[Offset: 0x3f0, Size: 0x10]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x400, Size: 0x8]
	bool bIsAimPickUpWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool bIsPingPickUpWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	ItemDefineID DefineID;//[Offset: 0x438, Size: 0x18]
	int PickCount;//[Offset: 0x450, Size: 0x4]
	int DeriveID;//[Offset: 0x454, Size: 0x4]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	float TrainingModePickUpColdCD;//[Offset: 0x45c, Size: 0x4]
	bool bUseCustomTrainingModePickUpColdCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	enum SpawnReason;//[Offset: 0x461, Size: 0x1]
	float SpawnTimeSecond;//[Offset: 0x464, Size: 0x4]
	bool bApplyPickUpEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	uint32 DropByPlayerId;//[Offset: 0x46c, Size: 0x4]
	int DropTime;//[Offset: 0x470, Size: 0x4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x478, Size: 0x10]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bEnableTrainingModeImpactGroundLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	float TrainingModeImpactGroundLifeTime;//[Offset: 0x4e4, Size: 0x4]
	bool bEnableTrainingModeDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	ParticleSystem* TrainingModeDestroyEffect;//[Offset: 0x4f0, Size: 0x28]
	DynamicMovementComponent_Projetile* Projectile;//[Offset: 0x518, Size: 0x8]
	ThrowProps ThrowProps;//[Offset: 0x520, Size: 0x48]
	bool bImpactGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	TimerHandle ScatterTimerHandle;//[Offset: 0x570, Size: 0x8]
	bool IsBlockCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	float ImpulseValue;//[Offset: 0x57c, Size: 0x4]
	Vector ImpulseOffset;//[Offset: 0x580, Size: 0xc]
	float MassOffset;//[Offset: 0x58c, Size: 0x4]
	Vector BoxRootSize;//[Offset: 0x590, Size: 0xc]
	Vector BoxLoundSize;//[Offset: 0x59c, Size: 0xc]
	float SimulatePhysicsTime;//[Offset: 0x5a8, Size: 0x4]
	float SimulatePhysicsStartTime;//[Offset: 0x5ac, Size: 0x4]
	bool bForceSimulatePhysics_Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool bEnableSimulatePhysics_Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	BoxComponent* BoxRootComponent;//[Offset: 0x5b8, Size: 0x8]
	FName PickUpProfileName;//[Offset: 0x5c0, Size: 0x8]
	FName PingCheckProfileName;//[Offset: 0x5c8, Size: 0x8]
	FName EffectMeshProfileName;//[Offset: 0x5d0, Size: 0x8]
	StaticMesh* StaticMeshPtr;//[Offset: 0x5d8, Size: 0x28]
	MaterialInterface*[] MaterialInterfacesPtr;//[Offset: 0x600, Size: 0x10]
	Transform StaticMeshTransform;//[Offset: 0x610, Size: 0x30]
	StaticMeshComponent* DynamicStaticMeshComponent;//[Offset: 0x640, Size: 0x8]
	bool bUseMultiMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]
	<int,int> MeshLevelMap;//[Offset: 0x650, Size: 0x50]
	int[] CountMesh;//[Offset: 0x6a0, Size: 0x10]
	DataTable* PickupMeshTable;//[Offset: 0x6b0, Size: 0x28]
	DataTable* MeshTablePtr;//[Offset: 0x6d8, Size: 0x8]
	PickUpShowParticleConfig[] ShowParticleConfigs;//[Offset: 0x6e0, Size: 0x10]
	float PingCheckSphereRadius;//[Offset: 0x6f0, Size: 0x4]
	SphereComponent* PingCheck;//[Offset: 0x6f8, Size: 0x8]
	float LoadDelayTime;//[Offset: 0x700, Size: 0x4]
	StaticMeshComponent* EffectComponent;//[Offset: 0x770, Size: 0x8]
	bool bInfinitePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1]
	byte FloatingRotAxis;//[Offset: 0x791, Size: 0x1]
	PrimitiveComponent* FloatingTargetComp;//[Offset: 0x7d0, Size: 0x8]
	PickupLockData PickupLockData;//[Offset: 0x828, Size: 0xc]
	bool bTeamPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 0x1]
	enum RegionType;//[Offset: 0x836, Size: 0x1]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x837, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 0x1]
	bool bInLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 0x1]
	float RemainingBatterySync;//[Offset: 0x83c, Size: 0x4]
	void UseMeshTable();// 0x7dc6f0c
	void StopScatterTimer();// 0x7dc700c
	void StartScatterTimer();// 0x7dc7020
	void ShowPickUpWrapperActor();// 0x7dc8850
	void SetPingPickUpWrapper(bool bIsPing);// 0x7dc7f0c
	void SetPickUpWrapperLifeSpan(float LifeTime);// 0x7dc7b18
	void SetPickupDeriveID(int DID, bool IsInitData);// 0x7dc838c
	void SetIsTeamPickItem(bool InValue);// 0x7dc65bc
	void SetInLand(bool InValue);// 0x7dc63e8
	void SetHighLightEffect(bool enable);// 0x7dc80d4
	void SetbInfinitePickup(bool IsInfinite);// 0x7dc69b0
	void SetApplyPickupTrace(bool InValue);// 0x7dc64f8
	void SetAimPickUpWrapper(bool bIsAim);// 0x7dc8010
	void ServerLockPickupOwner(uint32 InOwnerKey, float LockTime, enum InReason);// 0x7dc67a8
	void ScatterAttachment(out PickUpItemData[] PropsItemArray, out const Vector Center, out const Vector Direction);// 0x7dc7034
	void RPCNetMulticastShowPickUpActor();// 0x7dc88a0
	void RPCNetMulticastModifyPickCount(int Count_New);// 0x7dc89e8
	void RPCNetMulticastHideActorForSomeTime(float Time);// 0x7dc88fc
	void ResetPickUpActorState();// 0x7dc8770
	void ResetClientHasPickup();// 0x7dc81c8
	void RenderLevelChanged(int InLevel);// 0x7dc7c90
	void RegisterToPlayerPickUpList();// 0x7dc81b4
	void RegisterInGameRegion();// 0x7dc695c
	void ParseOutDeriveIDByData();// 0x7dc82bc
	void OnWrapperPicked__DelegateSignature(PickUpItemData PickUpItemData, int LeftCount);// 0xa1d39f8
	void OnRep_TrainingModeDestroyEffect();// 0x5577ee8
	void OnRep_RemainingBatterySync();// 0x7dc81ec
	void OnRep_RegionType();// 0x4d873a8
	void OnRep_PickupLockData();// 0x5fc100c
	void OnRep_PickCount();// 0x54cdb68
	void OnRep_DropByPlayerId();// 0x5183328
	void OnRep_CanPickupByBinSync();// 0x4f6ad38
	void OnProjectileStop_Weapon();// 0xa15f7f0
	void OnProjectileStop(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x7dc774c
	void OnProjectileLand(out const HitResult Hit);// 0x7dc7664
	void OnProjectileBounce(out const HitResult Hit, out const Vector Velocity, bool bServer, int BounceNum, Actor* HitOwner);// 0x7dc7368
	void OnPlayerBackpackPicked__DelegateSignature(ApexCharacter* PickPlayer, int PickCount);// 0xa1d39f8
	void OnLoadMeshEffectFinished(FName AttachPoint, SoftObjectPath EffectPath);// 0x7dc6a88
	void NonImpactScatter();// 0x7dc6ff8
	void MulticastTrainingModeDestroyEffect();// 0xa15f80c
	void ModifyCount(int count);// 0x7dc8ad4
	void MeshTableReady();// 0x7dc6ef8
	void MarkIsDropedByPlayerOnServer(uint32 PlayerID);// 0x7dc8200
	void LoadWholeWeaponData(int DID);// 0x7dc82d0
	void LoadPickupLineEffectFinished();// 0x7dc81a0
	void LoadMeshEffect(FName RowName);// 0x7dc6c6c
	void LaunchProjectile(out const Vector Direction, out const Vector BaseVelocity, float AdditionalSpeed);// 0x7dc793c
	bool IsPingPickUpWrapper();// 0x7dc7ecc
	bool IsLocked(uint32 PlayerKey);// 0x7dc667c
	bool IsAimPickUpWrapper();// 0x7dc7fd0
	void InitPickUpOutLine(PrimitiveComponent* Comp);// 0x7dc7d4c
	void InitPickupMesh();// 0x7dc6d28
	void HidePickUpWrapperActor(float Time);// 0x7dc8794
	void HandleOutLineShow(int InLevel);// 0x7dc7bd4
	void HandleMultiMeshes(int Level);// 0x7dc6d3c
	int GetPickupOutlineID(enum POT);// 0x7dc7e08
	enum GetPickupLockedReason();// 0xa15f7d4
	PickUpItemData GetPickupData();// 0x7dc84cc
	float GetLockTime();// 0x7dc6760
	bool GetIsTeamPickItem();// 0xa15f7b8
	bool GetInLand();// 0x7dc64b8
	bool GetbInfinitePickup();// 0x7dc6970
	void DelayInit();// 0x7dc63d4
	void CreateEffectComponent();// 0x7dc6a74
	void ClearPickupLocker();// 0x7dc6794
	int8 CheckImpactGround(out const Vector ImpactPoint);// 0x7dc6f20
	int CalcMeshLevel(int count);// 0x7dc6df8

--------------------------------
Class: DynamicMovementActor.Actor.Object
	SceneComponent* SmoothContainer;//[Offset: 0x270, Size: 0x8]
	ApexCharacter* OwnerApexCharacter;//[Offset: 0x278, Size: 0x8]
	DynamicMovementComponent* CurrentMovementComponent;//[Offset: 0x280, Size: 0x8]
	void OnRep_OwnerApexCharacter();// 0xa1161c8

--------------------------------
Class: WrapperRecordData
	int ItemQuality;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DynamicMovementComponent_Projetile.DynamicMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnDynamicBounce;//[Offset: 0x398, Size: 0x10]
	delegate OnDynamicStop;//[Offset: 0x3a8, Size: 0x10]
	delegate OnDynamicOnLand;//[Offset: 0x3b8, Size: 0x10]
	delegate OnDynamicPreBounce;//[Offset: 0x3e0, Size: 0x10]
	float InitialSpeed;//[Offset: 0x400, Size: 0x4]
	float MaxSpeed;//[Offset: 0x404, Size: 0x4]
	float ProjectileGravityScale;//[Offset: 0x408, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40c, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40c, Size: 0x1]
	bool bIsNeedResolvePenetrationInNoSimulate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40c, Size: 0x1]
	bool bShouldAlignToSurfaceWhenBounceHit;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40c, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40c, Size: 0x1]
	bool bShouldModifyVelocityAfterBounce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40c, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40c, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40d, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x410, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x414, Size: 0xc]
	float Bounciness;//[Offset: 0x420, Size: 0x4]
	float Friction;//[Offset: 0x424, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x428, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x42c, Size: 0x4]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x430, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1]
	float MaxSimulationTimeStep;//[Offset: 0x434, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x438, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x43c, Size: 0x4]
	bool bHasClientSendStopEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	ProjectilePendingData ProjectilePendingData;//[Offset: 0x448, Size: 0x38]
	bool bSyncServerBounceEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	bool bSyncServerStopEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	bool bSyncSimulationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1]
	bool bDirectUseAutonomousHitResultOnImpactOrStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 0x1]
	float ImpactSlideMinVelocity;//[Offset: 0x484, Size: 0x4]
	bool bImpactStopCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	float ImpactCheckDist;//[Offset: 0x48c, Size: 0x4]
	bool bStartFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 0x1]
	DynamicMovementComponent_Projetile* NetMovementComponent;//[Offset: 0x4a8, Size: 0x8]
	ImpactResult[] CacheBounceEvenet;//[Offset: 0x4b0, Size: 0x10]
	ImpactResult[] CacheStopEvenet;//[Offset: 0x4c0, Size: 0x10]
	void StopSimulating(out const HitResult HitResult);// 0xa1174b8
	void StartFly(float InInitialSpeed, out const Vector InVelocity);// 0x56ccba8
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xa1175b4
	void ServerStopSyncMovement(const Vector OwnerOffset, const Rotator Rotator);// 0xa117914
	void ServerSetStopResult(const ImpactResult ImpactResult);// 0xa117a74
	void ServerSetImpactResult(const ImpactResult ImpactResult);// 0xa117b94
	void ServerProjectileSyncPosition(const MovementSyncDataWithRotation MovementSyncDataWithRotation);// 0xa117db8
	void OnRep_SimulationEnabled(bool OldSimulationEnabled);// 0xa1173d8
	void OnDynamicStopDelegate__DelegateSignature(out const HitResult ImpactResult, bool bServer, Actor* Owner);// 0xa1d39f8
	void OnDynamicPreBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out bool bNeedBounce, out bool bNeedIgnoreActorCollision);// 0xa1d39f8
	void OnDynamicOnLandDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xa1d39f8
	void OnDynamicBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* Owner);// 0xa1d39f8
	void NetBroadcastStopEvent(HitResult Hit);// 0xa1176d4
	void NetBroadcastBounceEvent(HitResult Hit);// 0xa1177f4
	bool IsVelocityUnderSimulationThreshold();// 0xa11768c
	void BroadcastProjectileSyncPosition(const MovementSyncDataWithRotation MovementSyncDataWithRotation);// 0xa117cb4
	void BroadcastLaunch(const ProjectileLaunchData ProjectileLaunchData);// 0xa117ebc

--------------------------------
Class: DynamicMovementComponent.MovementComponent.ActorComponent.Object
	SceneComponent* SimulationSmoothContainer;//[Offset: 0x138, Size: 0x8]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bExistAutonomous;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1]
	bool bNeedSimulationPerformMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1]
	bool bNeedAutonomousPerformMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1]
	bool bSkipReceiveLocationAndRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 0x1]
	bool bAutonomousSkipReceiveLocationAndRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1]
	bool bDeactivateWhenStop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x140, Size: 0x1]
	bool bActiveUseOwnerBase;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x140, Size: 0x1]
	float ValidClientToOwnerDistanceDiff;//[Offset: 0x144, Size: 0x4]
	float ValidClientDistanceDiff;//[Offset: 0x148, Size: 0x4]
	float DRBlendingSpeed;//[Offset: 0x14c, Size: 0x4]
	float MaxSmoothNetUpdateDist;//[Offset: 0x150, Size: 0x4]
	float NoSmoothNetUpdateDist;//[Offset: 0x154, Size: 0x4]
	bool bEnableDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	float DRLerpTime;//[Offset: 0x15c, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x160, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x164, Size: 0x4]
	DynamicBasedMovementInfo BasedMovement;//[Offset: 0x178, Size: 0x30]
	DynamicBasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x1a8, Size: 0x30]
	float SimulateServerTimeStamp;//[Offset: 0x1d8, Size: 0x4]
	bool bApplyGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 0x1]
	PrimitiveComponent* DRBase;//[Offset: 0x340, Size: 0x8]
	void SaveBaseLocation();// 0x7bd436c
	void OnRep_ReplicatedBasedMovement();// 0xa116210
	void OnCallUpdateBaseMovement();// 0x7bd4318
	Vector LimitVelocity(Vector NewVelocity);// 0x7bd417c
	PrimitiveComponent* GetBase();// 0x7bd4380

--------------------------------
Class: ImpactResult
	Vector Velocity;//[Offset: 0x0, Size: 0xc]
	MovementSyncDataWithRotation MovementSyncDataWithRotation;//[Offset: 0x10, Size: 0x20]
	HitResult Hit;//[Offset: 0x30, Size: 0x88]

--------------------------------
Class: MovementSyncDataWithRotation
	PrimitiveComponent* Base;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ProjectilePendingData
	bool bDiscardBounceWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bOneStopSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float PendingBounceDeltaTime;//[Offset: 0x2c, Size: 0x4]
	float PendingStopDeltaTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DynamicBasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: ProjectileLaunchData
	float InitialSpeed;//[Offset: 0x0, Size: 0x4]
	Vector Velocity;//[Offset: 0x4, Size: 0xc]
	MovementSyncDataWithRotation MovementSyncDataWithRotation;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: ThrowProps
	PickUpItemData MainItem;//[Offset: 0x0, Size: 0x38]
	PickUpItemData[] AttachItem;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x578, Size: 0xc]
	float LineThickness;//[Offset: 0x584, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x9828d5c
	Vector GetUnscaledBoxExtent();// 0xa322b2c
	Vector GetScaledBoxExtent();// 0xa322b50

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: PickUpShowParticleConfig
	ParticleSystem* ParticleSystemPrt;//[Offset: 0x0, Size: 0x28]
	StaticMesh* EffectMeshPrt;//[Offset: 0x28, Size: 0x28]
	Transform Transform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: PickupLockData
	enum Reason;//[Offset: 0x0, Size: 0x1]
	float LockTime;//[Offset: 0x4, Size: 0x4]
	uint32 LockPlayerKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BattleItemData.ItemData
	int count;//[Offset: 0x90, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x98, Size: 0x10]
	bool BackpackSlotIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	BattleItemFeatureData FeatureData;//[Offset: 0xac, Size: 0x20]
	bool bCanUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	ItemAssociation[] Associations;//[Offset: 0xd0, Size: 0x10]
	int DeriveID;//[Offset: 0xe0, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 0x18]
	FText Name;//[Offset: 0x20, Size: 0x18]
	FText Desc;//[Offset: 0x38, Size: 0x18]
	FString SmallIcon;//[Offset: 0x50, Size: 0x10]
	FString BigIcon;//[Offset: 0x60, Size: 0x10]
	int SubType;//[Offset: 0x70, Size: 0x4]
	int MaxCount;//[Offset: 0x74, Size: 0x4]
	ItemHandleBase* ItemHandle;//[Offset: 0x78, Size: 0x8]
	int ProgressBarCount;//[Offset: 0x80, Size: 0x4]
	int StackCount;//[Offset: 0x84, Size: 0x4]
	int ItemQuality;//[Offset: 0x88, Size: 0x4]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int SortingPriority;//[Offset: 0x10, Size: 0x4]
	int ItemType;//[Offset: 0x14, Size: 0x4]
	int ItemQuality;//[Offset: 0x18, Size: 0x4]
	int ToolbarWeight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 0x8]
	int count;//[Offset: 0x8, Size: 0x4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x10, Size: 0x10]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: ItemRule
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	int ProgressBarCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BackpackAddRuleComp.ActorComponent.Object
	<int,int> MaxCountRules;//[Offset: 0xf8, Size: 0x50]
	<int,ItemRule> AdditionalRules;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: ShortcutBarItem.ApexDraggableWidgetBase.APUserWidget.UserWidget.Widget.Visual.Object
	<int,PaperSprite*> ItemQualitySprites;//[Offset: 0x5d0, Size: 0x50]
	Image* BG;//[Offset: 0x620, Size: 0x8]
	Image* ItemIcon;//[Offset: 0x628, Size: 0x8]
	CanvasPanel* NormalPanel;//[Offset: 0x630, Size: 0x8]
	CanvasPanel* ActivePanel;//[Offset: 0x638, Size: 0x8]
	TextBlock* Text_ItemNum;//[Offset: 0x640, Size: 0x8]
	CanvasPanel* FocusPanel;//[Offset: 0x648, Size: 0x8]
	Image* Image_Unlimitedness;//[Offset: 0x650, Size: 0x8]
	Image* ImgTip;//[Offset: 0x658, Size: 0x8]
	Image* Image_Dis;//[Offset: 0x660, Size: 0x8]
	bool bSelectCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	int ItemID;//[Offset: 0x66c, Size: 0x4]
	int ItemTypeForUI;//[Offset: 0x670, Size: 0x4]
	int ItemType;//[Offset: 0x674, Size: 0x4]
	BattleItemData CurrentItemData;//[Offset: 0x678, Size: 0xe8]
	ShortcutBarRoot* WidgetParent;//[Offset: 0x760, Size: 0x8]
	FString ItemTexture;//[Offset: 0x768, Size: 0x10]
	FString Name;//[Offset: 0x778, Size: 0x10]
	bool UsePropsWeapon(ItemDefineID ItemDefineID);// 0x7e46938
	void SkillInterruptThrowPostInterrupt();// 0xa1703f4
	bool SkillInterruptThrowInThrowLead();// 0xa170410
	void SetWidgetParent(ShortcutBarRoot* FatherUI, int InItemID, int InItemTypeForUI, int InItemType);// 0x7e46c30
	void SetItemQuality(int InQuality);// 0x7e4715c
	void SetItemMatIcon(FString ItemSmallIcon);// 0x7e47070
	void SetItemData(out const BattleItemData BattleItemData);// 0x7e46ec0
	void SetImageDis();// 0x7e46fa0
	void SetIconDeSaturation(float DeSaturation);// 0x7e46fb4
	void SetDeSaturation(bool inDesValue);// 0x7e46a24
	void SetDefaultData(int InItemID, int InItemType);// 0x7e46af0
	void SetCanBeDisuse(bool bCanDisuse);// 0x7e46210
	void ResetItemData();// 0x7e46eac
	void ResetItem();// 0xa1704c0
	void RegistWidgetEvents();// 0xa170450
	void OnSelectCurrentItem();// 0xa1703d8
	void OnRefreshItem();// 0xa17046c
	void OnDropBackpackItem();// 0x7e461fc
	void OnClickBtnUse(out const Geometry Geometry, out const PointerEvent PointerEvent);// 0x5f7ae84
	void NativeRefreshItem();// 0xa1704a4
	void NativeOnSelect();// 0xa170488
	void InGameChatMgrSendInGameMsgSimpleForGetItem(FString Message, int InItemID, FString ItemAudioKey);// 0x7e46720
	FString GetItemTexturePath();// 0x7e4612c
	void EndDrag(Vector2D MousePosiitonOffset, bool bCanceled, out const PointerEvent PointerEvent);// 0x7e462d8
	bool CurrentItemDataIsValid();// 0x7e46e64
	void ChangeToNormal();// 0xa1703bc
	void BeginDrag(out const PointerEvent PointerEvent);// 0x7e46554

--------------------------------
Class: ApexDraggableWidgetBase.APUserWidget.UserWidget.Widget.Visual.Object
	delegate OnBeginDrag;//[Offset: 0x510, Size: 0x10]
	delegate OnDragging;//[Offset: 0x520, Size: 0x10]
	delegate OnEndDrag;//[Offset: 0x530, Size: 0x10]
	delegate OnClick;//[Offset: 0x540, Size: 0x10]
	delegate OnPressed;//[Offset: 0x550, Size: 0x10]
	delegate OnRelease;//[Offset: 0x560, Size: 0x10]
	delegate OnTouchGestrue;//[Offset: 0x570, Size: 0x10]
	bool bIsPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	class ApexDraggableWidgetBase* DragWidgetClass;//[Offset: 0x588, Size: 0x8]
	class ApexDragDropOperation* DragDropOperationClass;//[Offset: 0x590, Size: 0x8]
	bool BShowDraggedEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	bool bMoveSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 0x1]
	Vector2D DragBeginLocation;//[Offset: 0x59c, Size: 0x8]
	DragDropOperation* CacheOperation;//[Offset: 0x5a8, Size: 0x8]
	bool GetCanBeginDrag(out const Geometry InGeometry, out const PointerEvent InMouseEvent);// 0xa0dc6d8
	static bool DraggDropSupport(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x6036210
	void CopyDataFromThisToNewWidget(ApexDraggableWidgetBase* NewWidget);// 0xa1d39f8

--------------------------------
Class: APUserWidget.UserWidget.Widget.Visual.Object
	bool bBlockTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	int BlueprintNumber;//[Offset: 0x254, Size: 0x4]
	<FName,FName> RegisterNodeNameMap;//[Offset: 0x258, Size: 0x50]
	enum ForbiddenFunctionType;//[Offset: 0x2a8, Size: 0x1]
	<FName,enum> GamepadNodeNameToActionTypeMap;//[Offset: 0x2b0, Size: 0x50]
	<FName,GamepadNodeInfos> GamepadChildNodeNameToActionTypeMap;//[Offset: 0x300, Size: 0x50]
	bool bEnableGamepadProcessor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	FName GamepadWidgetName;//[Offset: 0x354, Size: 0x8]
	FString SelfWidgetName;//[Offset: 0x360, Size: 0x10]
	<FName,FName> CustomWidgetMap;//[Offset: 0x370, Size: 0x50]
	int CurrentHUDType;//[Offset: 0x3c0, Size: 0x4]
	<FName,Widget*> CacheNodeWidgetMap;//[Offset: 0x3c8, Size: 0x50]
	bool bIsEnableController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	<FName,ControlLabels> ControllerStateMap;//[Offset: 0x420, Size: 0x50]
	<FName,ControlDatas> ControllerConfigMap;//[Offset: 0x470, Size: 0x50]
	void SetCurrentHUDType(const int HUDType);// 0x7ab1d4c
	void SetControllerState(out const FName State, out const FName Label);// 0x7ab1c6c
	void RegisterChildWidgetGamepadIcons(const FName ChildTag, APUserWidget* ChildWidget);// 0x7ab1dc4
	void OpenGamepadProcessor();// 0xa0f951c
	int GetCurrentHUDType();// 0xa0f94e4
	void CloseGamepadProcessor();// 0xa0f9500

--------------------------------
Class: GamepadNodeInfos
	<FName,enum> NodeMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ShortcutBarRoot.APUserWidget.UserWidget.Widget.Visual.Object
	int[] ProjectileIDs;//[Offset: 0x510, Size: 0x10]
	int[] ConsumableIDs;//[Offset: 0x520, Size: 0x10]
	int GuidePickedProjectiles;//[Offset: 0x530, Size: 0x4]
	int GuidePickedMedicals;//[Offset: 0x534, Size: 0x4]
	CanvasPanel* DrugRecommendPanel;//[Offset: 0x538, Size: 0x8]
	ProgressBar* Bar_RecommendDuration;//[Offset: 0x540, Size: 0x8]
	Image* DrugRecommendIcon;//[Offset: 0x548, Size: 0x8]
	Button* DrugRecommendUse;//[Offset: 0x550, Size: 0x8]
	CanvasPanel* EmptyPanel;//[Offset: 0x558, Size: 0x8]
	CanvasPanel* NormalPanel;//[Offset: 0x560, Size: 0x8]
	CanvasPanel* EmptyProjectilePanel;//[Offset: 0x568, Size: 0x8]
	CanvasPanel* ProjectileNormalPanel;//[Offset: 0x570, Size: 0x8]
	CanvasPanel* ProjectilePanel;//[Offset: 0x578, Size: 0x8]
	CanvasPanel* Revert;//[Offset: 0x580, Size: 0x8]
	Image* ImgIcon;//[Offset: 0x588, Size: 0x8]
	Image* CurrentProjectileIcon;//[Offset: 0x590, Size: 0x8]
	TextBlock* TextNum;//[Offset: 0x598, Size: 0x8]
	Image* Image_Unlimitedness;//[Offset: 0x5a0, Size: 0x8]
	TextBlock* CurrentProjectileNum;//[Offset: 0x5a8, Size: 0x8]
	CommonButtonPassWidget* RevertPanelBtn;//[Offset: 0x5b0, Size: 0x8]
	Button* RevertBtn;//[Offset: 0x5b8, Size: 0x8]
	Button* BtnThrow;//[Offset: 0x5c0, Size: 0x8]
	CommonButtonPassWidget* ProjectileSwitchBtn;//[Offset: 0x5c8, Size: 0x8]
	WidgetSwitcher* Switcher_RevertBtn;//[Offset: 0x5d0, Size: 0x8]
	Image* ContentBoxOutline;//[Offset: 0x5d8, Size: 0x8]
	UniformGridPanel* ContentBox;//[Offset: 0x5e0, Size: 0x8]
	WidgetSwitcher* Panel_OpenOrShow;//[Offset: 0x5e8, Size: 0x8]
	Image* ProjectileItemsBoxOutline;//[Offset: 0x5f0, Size: 0x8]
	Widget* ProjectileItemsBox;//[Offset: 0x5f8, Size: 0x8]
	TurnTableDragWidget* ProjectileTurnTableDrag;//[Offset: 0x600, Size: 0x8]
	WidgetAnimation* Anim_Recommend_Dis;//[Offset: 0x608, Size: 0x8]
	bool bShowRevertPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool bShowProjectilePanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	bool InQuickProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x612, Size: 0x1]
	float QuickProjectileDt;//[Offset: 0x614, Size: 0x4]
	bool EnableDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]
	ShortcutBarItem* DragingItem;//[Offset: 0x628, Size: 0x8]
	int RecommendItemId;//[Offset: 0x630, Size: 0x4]
	float DrugRecommendFadeOutTime;//[Offset: 0x634, Size: 0x4]
	float CfgDrugRecommendTime;//[Offset: 0x638, Size: 0x4]
	float RealDrugRecommendTime;//[Offset: 0x63c, Size: 0x4]
	int[] ProjectileWeight;//[Offset: 0x640, Size: 0x10]
	float AutoHideTimeDefine;//[Offset: 0x650, Size: 0x4]
	ShortcutBarItem*[] MedicalUIList;//[Offset: 0x658, Size: 0x10]
	ShortcutBarItem*[] ProjectileUIList;//[Offset: 0x668, Size: 0x10]
	<int,ShortcutBarItem*> MedicalItemUiMap;//[Offset: 0x678, Size: 0x50]
	<int,ShortcutBarItem*> ProjectileItemUiMap;//[Offset: 0x6c8, Size: 0x50]
	<int,BattleItemData> MedicalDataMap;//[Offset: 0x718, Size: 0x50]
	<int,BattleItemData> ProjectileDataMap;//[Offset: 0x768, Size: 0x50]
	bool bRecommendDrugUIStayPermanent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	bool bHideQuickItemButtonWhenHaveNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 0x1]
	PickupAutoItemWidget* Pickup_PickAniItem_Left;//[Offset: 0x838, Size: 0x8]
	PickupAutoItemWidget* Pickup_PickAniItem_Right;//[Offset: 0x840, Size: 0x8]
	WidgetAnimation* Anim_DropL;//[Offset: 0x848, Size: 0x8]
	WidgetAnimation* Anim_DropR;//[Offset: 0x850, Size: 0x8]
	int[] PickedMedicals;//[Offset: 0x858, Size: 0x10]
	int[] PickedProjectiles;//[Offset: 0x868, Size: 0x10]
	void UseThrowItem(bool bContinueThrow);// 0x7e484a8
	bool UsePropsWeapon(ItemDefineID ItemDefineID, bool bFastThrow, bool bContinueThrow);// 0x7e482b4
	void UseProjectile(BattleItemData BattleItemData);// 0x7e48b20
	void UseCurrentPropsWeapon(bool bContinueThrow);// 0x7e48a54
	void UpdateRevertCanvasPanelVisibility();// 0x7e49088
	void UpdateDrugRecommendPercent(float Percent);// 0x7e49818
	void UpdataIsRecommendDrugUIStayPermanent();// 0x7e49934
	void UnregisterCppEvents();// 0x7e48c0c
	void SwitchRevertPanel(int ItemType);// 0x7e486fc
	void StopQuickProjectileTimer();// 0xa170578
	void StopFadeOutTimer();// 0x7e49904
	void StopDrugRecommendTimer();// 0x7e498d4
	void StopDrugRecommendAnim();// 0x7e497d8
	void StopAutoHideTimer(int ItemType);// 0x7e48574
	void StartQuickProjectileTimer();// 0xa170594
	void StartFadeOutTimer();// 0x7e49948
	void StartDrugRecommendTimer();// 0x7e498f0
	void StartAutoHideTimer(int ItemType);// 0x7e48638
	void ShowRevertPanel();// 0xa170674
	void ShowProjectilePanel();// 0xa170604
	void ShowDrugRecommend();// 0x7e49990
	void SelectCurrentItem(ShortcutBarItem* ShortcutItem, int ItemType);// 0x7e48d10
	void ResetItem(int ItemType);// 0x7e48e50
	void RemoveTurnTableReleaseEvent(Guide_HighLightWidgetById* GuideState);// 0x7e47f48
	void RegisterCppEvents();// 0x7e48c20
	void RefreshProjectileList(out const <int,BattleItemData> DataMap);// 0x7e490b0
	void RefreshMedicalList(out const <int,BattleItemData> DataMap);// 0x7e49238
	bool PostProjectile();// 0xa170690
	bool PlayerUseItem(ItemDefineID ItemID);// 0x7e48890
	void OnUserSettingChangedEvent(FString[] ChangedDatas);// 0x5dccc08
	void OnTurnTableDragWidgetReleased(enum TurnTableType);// 0x562990c
	void OnRevertPanelBtnPressed();// 0x552729c
	void OnReleaseProjectile();// 0xa1706ec
	void OnReleaseMedical(ItemDefineID ItemID);// 0x7e4897c
	void OnRefreshBackpackItemList(out ItemDefineID[] ChangedIdArray);// 0x7e481b8
	void OnRecommendDrugUIStayPermanentChanged();// 0x7e49920
	void OnPressMedicalCallback();// 0xa1706d0
	void OnPressedProjectile();// 0xa1705b0
	void OnLuaInitialize();// 0xa170794
	void OnLuaDestroy();// 0xa170778
	void OnHUDSwitchCallback(int NewHUDType);// 0x6100a14
	void OnDrugRecommendUse();// 0x5d96d3c
	void OnDrugRecommend(int VisibilityFlag, int ItemID);// 0x7e499a4
	void OnClickProjectileSwitchBtn();// 0xa170708
	void OnBackpackPickUp(out const PickupNotifyData PickupNotifyData);// 0x7e47e64
	void OnAPEvent_OnSkillStop(int MatchedSkillIndex, enum StopReason, int SkillHandleID);// 0x7e48004
	bool NativeNotCurrentFocus(int ItemType);// 0x7e487c0
	bool LaunchQuickProjectile();// 0xa170538
	bool IsUnlimitedMedical(int ItemID);// 0x7e48c34
	void InsertTurnTablePressEvent(Guide_HighLightWidgetById* GuideState);// 0x612c9b4
	void InitView();// 0xa17075c
	void InitProjectileContentBox();// 0xa170724
	void InitMedicalContentBox();// 0xa170740
	void HideRevertPanelInner();// 0xa170620
	void HideRevertPanel();// 0xa170658
	void HideProjectilePanelInner();// 0xa1705cc
	void HideProjectilePanel();// 0xa1705e8
	void HideDrugRecommendImmediately();// 0x7e49968
	void HideDrugRecommend();// 0x7e4997c
	bool HasProjectileItem();// 0x7e48f14
	bool HasMedicalItem();// 0x7e48fc4
	void GuideWhenShowRevertPanel();// 0xa17063c
	void FreshSettingAndUpdateRevertCanvasPanelVisibility();// 0x7e49074
	void ForceRefreshList();// 0x7e4909c
	void DrugRecommendLoopAnim();// 0x7e49800
	void DrugRecommendFadeOutAnim();// 0x7e497ec
	void ClearProjectileItemUiMap();// 0x7e49630
	void ClearMedicalItemUiMap();// 0x7e49704
	void AddProjectileItemUi(int ItemID, ShortcutBarItem* ItemUi);// 0x7e493c0
	void AddMedicalItemUi(int ItemID, ShortcutBarItem* ItemUi);// 0x7e494f8

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x8facac0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x479aafc
	void SetSize(Vector2D InSize);// 0x8fad500
	void SetPosition(Vector2D InPosition);// 0x8fad5cc
	void SetOffsets(Margin InOffset);// 0x8fad42c
	void SetMinimum(Vector2D InMinimumAnchors);// 0x8fad108
	void SetMaximum(Vector2D InMaximumAnchors);// 0x8facfc8
	void SetLayout(out const AnchorData InLayoutData);// 0x5299848
	void SetAutoSize(bool InbAutoSize);// 0x8fad280
	void SetAnchors(Anchors InAnchors);// 0x8fad358
	void SetAlignment(Vector2D InAlignment);// 0x49a1f9c
	int GetZOrder();// 0xa2866a0
	Vector2D GetSize();// 0xa286930
	Vector2D GetPosition();// 0xa2869c0
	Margin GetOffsets();// 0xa28687c
	AnchorData GetLayout();// 0xa286a58
	bool GetAutoSize();// 0x8fad248
	Anchors GetAnchors();// 0xa2867c8
	Vector2D GetAlignment();// 0xa286728

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x118, Size: 0x1a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2b8, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2c0, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x2c8, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2d0, Size: 0x8]
	float Percent;//[Offset: 0x2d8, Size: 0x4]
	byte BarFillType;//[Offset: 0x2dc, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x2e0, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x2e8, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x2f8, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x308, Size: 0x10]
	void SetPercent(float InPercent);// 0x8fc1380
	void SetIsMarquee(bool InbIsMarquee);// 0x8fc12a8
	void SetFillColorAndOpacity(LinearColor InColor);// 0x4d329bc

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x118, Size: 0x88]
	delegate BrushDelegate;//[Offset: 0x1a0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1b0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1c0, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1d4, Size: 0x10]
	Object* SoftResourceObject;//[Offset: 0x230, Size: 0x28]
	Object* LODSoftResourceObject;//[Offset: 0x258, Size: 0x8]
	bool bIsOpenSoftResLoader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	void SetOpacity(float InOpacity);// 0x8fb70d8
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x8fb71bc
	void SetBrushTintColor(SlateColor TintColor);// 0x8fb6e40
	void SetBrushSize(Vector2D DesiredSize);// 0x8fb700c
	void SetBrushResourceObject(Object* ResourceObject);// 0x8fb6d70
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0xa2872dc
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0xa2875e0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x8fb68b8
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x8fb66d0
	void SetBrushFromPathAsync(FString ResourcePath);// 0x8fb65d0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xa287204
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0xa28744c
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xa287750
	void SetBrush(out const SlateBrush InBrush);// 0x8fb6b38
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x8fb659c

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x130, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x138, Size: 0x278]
	LinearColor ColorAndOpacity;//[Offset: 0x3b0, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x3c0, Size: 0x10]
	byte ClickMethod;//[Offset: 0x3d0, Size: 0x1]
	byte TouchMethod;//[Offset: 0x3d1, Size: 0x1]
	byte PressMethod;//[Offset: 0x3d2, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d3, Size: 0x1]
	bool IsPassMouseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	int nClickCd;//[Offset: 0x3d8, Size: 0x4]
	delegate OnClicked;//[Offset: 0x3e0, Size: 0x10]
	delegate OnPressed;//[Offset: 0x3f0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x400, Size: 0x10]
	delegate OnHovered;//[Offset: 0x410, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x420, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0xa2864b4
	void SetStyle(out const ButtonStyle InStyle);// 0x5f6dca4
	void SetPressMethod(byte InPressMethod);// 0x8fabf14
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5d3c620
	void SetClickMethod(byte InClickMethod);// 0xa28658c
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x8fac030
	bool IsPressed();// 0x8fabff8

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x8fb0c80
	PanelSlot* GetContentSlot();// 0x8fb0d44
	Widget* GetContent();// 0x8fb0c4c

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88]
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88]
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Guide_HighLightWidgetById.Guide_BackgroundCanvasBase.GuideStateBase.BlueprintAsyncActionBase.Object
	delegate OnInteracted;//[Offset: 0x80, Size: 0x10]
	FString WidgetId;//[Offset: 0x90, Size: 0x10]
	class HighLightWidgetTooltipBase* TooltipType;//[Offset: 0xa0, Size: 0x8]
	FText ToolTipText;//[Offset: 0xa8, Size: 0x18]
	Vector2D Alignment;//[Offset: 0xc0, Size: 0x8]
	Vector2D Anchors;//[Offset: 0xc8, Size: 0x8]
	Vector2D Offset;//[Offset: 0xd0, Size: 0x8]
	int ScrollViewIndex;//[Offset: 0xd8, Size: 0x4]
	int GuideID;//[Offset: 0xdc, Size: 0x4]
	FName OwningLayer;//[Offset: 0xe0, Size: 0x8]
	HighLightWidgetTooltipBase* SetWidgetHighLightParame(Widget* HighLightTarget, bool IsTooltipVisible, bool MaskMode, bool is3D);// 0x7c98fd4
	void SetWidgetHighLight(Widget* HighLightTarget);// 0x5e743d0
	void OnInteracted__DelegateSignature();// 0xa1d39f8
	void InteractedDraggable(out const PointerEvent InMouseEvent);// 0x6154df0
	void Interacted();// 0x60a05ec
	static Guide_HighLightWidgetById* HighLightWidgetById(GuideDefineBase* GuideDefine, FString IdName, class HighLightWidgetBackgroundBase BackgroundType, FString LogStepName, class HighLightWidgetTooltipBase InTooltipType, FText InToolTipText, Vector2D InAlignment, Vector2D InAnchors, Vector2D InOffset, int ScrollViewIndex, int GuideID, FName OwningLayer);// 0x5de6518

--------------------------------
Class: Guide_BackgroundCanvasBase.GuideStateBase.BlueprintAsyncActionBase.Object
	HighLightWidgetBackgroundBase* Background;//[Offset: 0x58, Size: 0x8]
	Widget*[] HintWidgetInstances;//[Offset: 0x70, Size: 0x10]
	void AddShadowWidget(Widget* HighLightTarget, bool MaskMode);// 0x7c950fc
	void AddHintWidget(Widget* BaseTarget, UserWidget* HintWidget, out const Vector2D Alignment, out const Vector2D Anchors, out const Vector2D Offset, bool is3D);// 0x7c94f18

--------------------------------
Class: GuideStateBase.BlueprintAsyncActionBase.Object
	GuideDefineBase* OwningGuideDefine;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0xa3205c4

--------------------------------
Class: HighLightWidgetTooltipBase.UserWidget.Widget.Visual.Object
	void ShowGuideTooltip(out const FText GuideTooltip);// 0xa1d39f8

--------------------------------
Class: HighLightWidgetBackgroundBase.UserWidget.Widget.Visual.Object
	CanvasPanel* HighLightCanvas;//[Offset: 0x248, Size: 0x8]
	bool bMaskMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	GuideDefineBase* OwningGuide;//[Offset: 0x258, Size: 0x8]
	delegate OnBackgroundClicked;//[Offset: 0x260, Size: 0x10]
	void OnBackgroundClicked__DelegateSignature();// 0xa1d39f8
	bool IsShowCloseGuide();// 0x7c94b14
	void CloseGuide();// 0x7c94b54

--------------------------------
Class: GuideDefineBase.Object
	delegate OnGuideFinished;//[Offset: 0x30, Size: 0x10]
	delegate OnGuideCompleted;//[Offset: 0x40, Size: 0x10]
	int GuideID;//[Offset: 0x50, Size: 0x4]
	GuideStateBase*[] ActivedGuides;//[Offset: 0x58, Size: 0x10]
	<class HighLightWidgetBackgroundBase,HighLightWidgetBackgroundData> SharedBackgrounds;//[Offset: 0x68, Size: 0x50]
	void WhenActiveGuide();// 0xa1d39f8
	void OpenUIByDefineName(FName UIDefineName);// 0x7c930c4
	void OnGuideFinished__DelegateSignature(GuideDefineBase* GuideDefine);// 0xa1d39f8
	void OnGuideCompleted__DelegateSignature(GuideDefineBase* GuideDefine);// 0xa1d39f8
	void Finished();// 0x5f12b78
	void DeactiveGuide();// 0x7c93154
	void Completed();// 0x7c93140

--------------------------------
Class: HighLightWidgetBackgroundData

--------------------------------
Class: PickupNotifyData
	bool bPickupResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int OccupiedCapacity;//[Offset: 0x4, Size: 0x4]
	int Capacity;//[Offset: 0x8, Size: 0x4]
	ItemDefineID DefineID;//[Offset: 0x10, Size: 0x18]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bIsAutoPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	enum PickupReason;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x138, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x150, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x160, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x188, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x198, Size: 0x50]
	SlateBrush StrikeBrush;//[Offset: 0x1e8, Size: 0x88]
	Vector2D ShadowOffset;//[Offset: 0x270, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x278, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x288, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x298, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e, Size: 0x1]
	void SetText(FText InText);// 0x8fcf7b8
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x53d2728
	void SetShadowOffset(Vector2D InShadowOffset);// 0x50f1454
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x5141338
	void SetOpacity(float InOpacity);// 0x8fcfcac
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x8fcfb0c
	void SetJustification(byte InJustification);// 0x8fcfbdc
	void SetFont(SlateFontInfo InFontInfo);// 0x4a73bd0
	void SetDisplayText(FString DisplayString);// 0x8fcf6d4
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x46ac4b8
	void SetAutoWrapText(bool InAutoTextWrap);// 0x51c46cc
	FText GetText();// 0x8fcf9f8
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x8fcfaa4
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x8fcfad8

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x112, Size: 0x3]
	byte Justification;//[Offset: 0x115, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x116, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x117, Size: 0x1]
	float WrapTextAt;//[Offset: 0x118, Size: 0x4]
	Margin Margin;//[Offset: 0x11c, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x12c, Size: 0x4]
	bool SkipSlateLayoutCachingDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CommonButtonPassWidget.CommonButtonWidget.UserWidget.Widget.Visual.Object
	TouchTakeOverConfig TakeOverTypeConfig;//[Offset: 0x568, Size: 0x3]
	delegate OnButtonSelfReleasedEvent;//[Offset: 0x570, Size: 0x10]
	FName GenreateName;//[Offset: 0x580, Size: 0x8]
	void OnButtonSelfOnUnhovered();// 0xa10f7a8
	void OnButtonSelfOnHovered();// 0xa10f7c4

--------------------------------
Class: CommonButtonWidget.UserWidget.Widget.Visual.Object
	Button* Button_Self;//[Offset: 0x248, Size: 0x8]
	Image* Image_Normal;//[Offset: 0x250, Size: 0x8]
	Image* Image_Highlight;//[Offset: 0x258, Size: 0x8]
	CanvasPanel* WidgetSwitcher_Icon;//[Offset: 0x260, Size: 0x8]
	Image* Img_BG;//[Offset: 0x268, Size: 0x8]
	Image* Img_Outline;//[Offset: 0x270, Size: 0x8]
	TextBlock* Text_Button;//[Offset: 0x278, Size: 0x8]
	WidgetAnimation* Anim_KeyDown;//[Offset: 0x280, Size: 0x8]
	WidgetAnimation* Anim_KeyUp;//[Offset: 0x288, Size: 0x8]
	CanvasPanel* CanvasPanelZoneA;//[Offset: 0x290, Size: 0x8]
	CanvasPanel* CanvasPanelZoneB;//[Offset: 0x298, Size: 0x8]
	CanvasPanel* CanvasPanelZoneC;//[Offset: 0x2a0, Size: 0x8]
	InvalidationBox* InvalidationBox;//[Offset: 0x2a8, Size: 0x8]
	int nClickCd;//[Offset: 0x2b0, Size: 0x4]
	Object* ReplaceIcon;//[Offset: 0x2b8, Size: 0x8]
	Object* ReplaceHighlightIcon;//[Offset: 0x2c0, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x2c8, Size: 0x8]
	Vector2D IconPosition;//[Offset: 0x2d0, Size: 0x8]
	LinearColor IconColor;//[Offset: 0x2d8, Size: 0x10]
	LinearColor HighlightIconColor;//[Offset: 0x2e8, Size: 0x10]
	float IconAngle;//[Offset: 0x2f8, Size: 0x4]
	Vector2D ShearVector;//[Offset: 0x2fc, Size: 0x8]
	SlateBrush ReplaceBG;//[Offset: 0x308, Size: 0x88]
	Vector2D ReplaceBGSize;//[Offset: 0x390, Size: 0x8]
	Vector2D BGPosition;//[Offset: 0x398, Size: 0x8]
	SlateBrush ReplaceOutline;//[Offset: 0x3a0, Size: 0x88]
	Vector2D ReplaceOutlineSize;//[Offset: 0x428, Size: 0x8]
	Vector2D OutlinePosition;//[Offset: 0x430, Size: 0x8]
	enum DefaultOutlineVisible;//[Offset: 0x438, Size: 0x1]
	SlateFontInfo ReplaceFont;//[Offset: 0x440, Size: 0x50]
	Vector2D TextPosition;//[Offset: 0x490, Size: 0x8]
	FText DefaultText;//[Offset: 0x498, Size: 0x18]
	SlateColor TextColor;//[Offset: 0x4b0, Size: 0x28]
	SlateColor HighlightTextColor;//[Offset: 0x4d8, Size: 0x28]
	Vector2D ReplaceAlignment;//[Offset: 0x500, Size: 0x8]
	Vector2D TextShearVector;//[Offset: 0x508, Size: 0x8]
	float ReplaceWrapTextAt;//[Offset: 0x510, Size: 0x4]
	byte ReplaceJustification;//[Offset: 0x514, Size: 0x1]
	float ReplaceLineHeightPercentage;//[Offset: 0x518, Size: 0x4]
	LinearColor PressColor;//[Offset: 0x51c, Size: 0x10]
	LinearColor ReleaseColor;//[Offset: 0x52c, Size: 0x10]
	int AZOrder;//[Offset: 0x53c, Size: 0x4]
	int BZOrder;//[Offset: 0x540, Size: 0x4]
	int CZOrder;//[Offset: 0x544, Size: 0x4]
	Vector2D ClickSize;//[Offset: 0x548, Size: 0x8]
	bool bOpenInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool IsApdateScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	Margin SlotMarginB;//[Offset: 0x554, Size: 0x10]
	byte CustomClickMethod;//[Offset: 0x564, Size: 0x1]
	byte CustomTouchMethod;//[Offset: 0x565, Size: 0x1]
	byte CustomPressMethod;//[Offset: 0x566, Size: 0x1]
	void SetTextPosition(Vector2D Position);// 0x7b7a1b4
	void SetTextAttribution();// 0xa10f914
	void SetRedPos();// 0xa10f8c0
	void SetOutlineVisible(enum VisibilityType);// 0x7b7a024
	void SetOutlinePosition(Vector2D Position);// 0x7b79eb4
	void SetIconPosition(Vector2D Position);// 0x7b7a274
	void SetIconIsHighlight(bool isHighlight);// 0x7b79b54
	void SetIconColor();// 0xa10f94c
	void SetIconAngle(float IconAngleIn);// 0x7b7a334
	void SetIcon();// 0xa10f968
	void SetCustomFont();// 0xa10f8dc
	void SetContent(out const FText Content);// 0x7b79c44
	void SetClickSize(Vector2D ClickSizeArea);// 0x7b79dfc
	void SetButtonStyle(Object* NormalIcon, Object* HighLightIcon);// 0x588f240
	void SetButtonState(bool IsOpen);// 0x7b7a0e8
	void SetButtonIcon(FString NormalIconPath, FString HighLightIconPath);// 0x58f7180
	void SetButtonEnabled(const bool bEnable);// 0x7b79a84
	void SetBGPosition(Vector2D Position);// 0x7b79f6c
	void SetBG();// 0xa10f930
	void OnButtonSelfOnRelease();// 0xa10f86c
	void OnButtonSelfOnPress();// 0xa10f888
	void OnButtonSelfOnClick();// 0xa10f8a4
	bool GetButtonState();// 0xa10f8f8

--------------------------------
Class: TouchTakeOverConfig
	enum TakeOverType;//[Offset: 0x0, Size: 0x1]
	enum PassType;//[Offset: 0x1, Size: 0x1]
	enum OriTakeOverType;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1]
	void SetCanCache(bool CanCache);// 0x5522294
	void InvalidateCache();// 0x8fb8a1c
	bool GetCanCache();// 0x8fb89c8

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x12c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0xa28d3e8
	void SetActiveWidget(Widget* Widget);// 0xa28d310
	Widget* GetWidgetAtIndex(int Index);// 0x8fea3c4
	int GetNumWidgets();// 0x8fea4c4
	int GetActiveWidgetIndex();// 0x54724d8
	Widget* GetActiveWidget();// 0xa28d234

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x12c, Size: 0x10]
	float MinDesiredSlotWidth;//[Offset: 0x13c, Size: 0x4]
	float MinDesiredSlotHeight;//[Offset: 0x140, Size: 0x4]
	void SetSlotPadding(Margin InSlotPadding);// 0x8fd258c
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x8fd24bc
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x8fd23ec
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0x8fd2200

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1]
	int Row;//[Offset: 0x3c, Size: 0x4]
	int Column;//[Offset: 0x40, Size: 0x4]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x8fd29b4
	void SetRow(int InRow);// 0x8fd2c4c
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x8fd2a98
	void SetColumn(int InColumn);// 0x8fd2b7c

--------------------------------
Class: TurnTableDragWidget.ApexDraggableWidgetBase.APUserWidget.UserWidget.Widget.Visual.Object
	enum CurTurnTableType;//[Offset: 0x5cc, Size: 0x1]
	float CursorMaxDistance;//[Offset: 0x5d0, Size: 0x4]
	float DistanceScale;//[Offset: 0x5d4, Size: 0x4]
	float AutoActiveTimeAfterPress;//[Offset: 0x5d8, Size: 0x4]
	float DragOffsetScale;//[Offset: 0x5dc, Size: 0x4]
	float EmojiSpriteInterval;//[Offset: 0x5e0, Size: 0x4]
	TurnTableBaseWidget* TurnTableBaseWidget;//[Offset: 0x5e8, Size: 0x8]
	ShortcutBarRoot* ShortcutBarWidget;//[Offset: 0x5f0, Size: 0x8]
	CanvasPanel* BackgroundPanel;//[Offset: 0x5f8, Size: 0x8]
	Image* Img_Eye;//[Offset: 0x600, Size: 0x8]
	Image* weapon_view;//[Offset: 0x608, Size: 0x8]
	CommonEmojiSprite* EmojiSprite;//[Offset: 0x610, Size: 0x8]
	Vector2D DragStartPosition;//[Offset: 0x618, Size: 0x8]
	Vector2D TotalDragVector;//[Offset: 0x620, Size: 0x8]
	void UpdateDragItemPosition(Vector2D RealCursorOffset, bool Reset, bool ShouldHide, bool AutoTrigger);// 0xa180b6c
	void StopEmojiSprite();// 0x7eb69bc
	void SetupTurnTableUI(enum Type, out const TurnTableCallback[] Callbacks);// 0x523cdac
	void SetTurnTableBaseWidget(TurnTableBaseWidget* TurnTableBaseWidgetIn);// 0xa181930
	void SetShortcutBarWidget(ShortcutBarRoot* ShortcutBarWidgetIn);// 0xa181864
	void PlayEmojiSprite(FName EmojiId);// 0x5a9a468
	void OnWeaponView(bool bWeaponView);// 0xa180a20
	void OnLongTimePressed();// 0x7eb69a8
	void OnJoystickTurnTableMoveActionCallback(Vector2D CursorDelta);// 0x5917604
	void OnJoystickTurnTableClickActionCallback(bool bPress, enum TurnTableTypeIn);// 0x58993f0
	void OnEndDragEvent(Vector2D MousePositionOffset, bool bCanceled, out const PointerEvent PointerEvent);// 0xa181140
	void OnDraggingEvent(out const PointerEvent PointerEvent, bool bScroll, Vector2D OffsetPosition);// 0xa181404
	void OnBeginDragEvent(out const PointerEvent InMouseEvent);// 0xa1816cc
	void HandleWidgetRelease(out const PointerEvent InMouseEvent);// 0xa180e10
	void HandleWidgetPressed(out const PointerEvent InMouseEvent);// 0xa180fa8

--------------------------------
Class: TurnTableCallback
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	FName EmojiId;//[Offset: 0x18, Size: 0x8]
	FName IconPath;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TurnTableBaseWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* ItemContainer;//[Offset: 0x248, Size: 0x8]
	Image* TurnTableDragImage;//[Offset: 0x250, Size: 0x8]
	Image* Bg_Cancel;//[Offset: 0x258, Size: 0x8]
	Image* DX_Cancel;//[Offset: 0x260, Size: 0x8]
	TextBlock* Text_Cancel;//[Offset: 0x268, Size: 0x8]
	TextBlock* Text_Explain;//[Offset: 0x270, Size: 0x8]
	Image* Bg_tips;//[Offset: 0x278, Size: 0x8]
	WidgetAnimation* Anim_in;//[Offset: 0x280, Size: 0x8]
	WidgetAnimation* Anim_out;//[Offset: 0x288, Size: 0x8]
	WidgetAnimation* Anim_cancel;//[Offset: 0x290, Size: 0x8]
	WidgetAnimation* Anim_cancelout;//[Offset: 0x298, Size: 0x8]
	float ZoneActiveDistance;//[Offset: 0x2a0, Size: 0x4]
	float ZoneDeActiveDistance;//[Offset: 0x2a4, Size: 0x4]
	float RotateAngleOffset;//[Offset: 0x2a8, Size: 0x4]
	bool bVisibleWhenInActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	int FixedTurnTableNumber;//[Offset: 0x2b0, Size: 0x4]
	bool CancelTextAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	TurnTableDragWidget* ParentDragWidget;//[Offset: 0x2b8, Size: 0x8]
	int TurnTableNumber;//[Offset: 0x2c0, Size: 0x4]
	TurnTableItemWidget*[] TurnTableItems;//[Offset: 0x2c8, Size: 0x10]
	void UpdateDragItemPosition(Vector2D RealCursorOffset, bool Reset, bool IsDragEnd, bool AutoTrigger, TurnTableDragWidget* ParentDragWidgetIn);// 0xa17ff28
	void UpdateActiveZone(out const Vector2D CurRealVector2D, const bool InActiveRange);// 0xa17fda4
	void OnZoneActive(int Zone, bool NewActive);// 0xa180244

--------------------------------
Class: TurnTableItemWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_Select_in;//[Offset: 0x248, Size: 0x8]
	WidgetAnimation* Anim_Select_out;//[Offset: 0x250, Size: 0x8]
	WidgetAnimation* Anim_Inst_in;//[Offset: 0x258, Size: 0x8]
	WidgetAnimation* Anim_Inst_out;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Anim_cancel;//[Offset: 0x268, Size: 0x8]
	CanvasPanel* CanvasNotRotate;//[Offset: 0x270, Size: 0x8]
	Image* ItemIcon;//[Offset: 0x278, Size: 0x8]
	Image* Img_Mask;//[Offset: 0x280, Size: 0x8]
	Image* ItemTip;//[Offset: 0x288, Size: 0x8]
	Image* Image_Unlimited;//[Offset: 0x290, Size: 0x8]
	Image* Image_Dis;//[Offset: 0x298, Size: 0x8]
	TextBlock* ItemNum;//[Offset: 0x2a0, Size: 0x8]
	Image* Image_Inst;//[Offset: 0x2a8, Size: 0x8]
	Image* Img_Vague;//[Offset: 0x2b0, Size: 0x8]
	Image* Image_Ring;//[Offset: 0x2b8, Size: 0x8]
	Image* Image_Select;//[Offset: 0x2c0, Size: 0x8]
	ShortcutBarRoot* ShortcutBarWidget;//[Offset: 0x2c8, Size: 0x8]
	TurnTableBaseWidget* ParentBaseWidget;//[Offset: 0x2d0, Size: 0x8]
	float AllOpacity;//[Offset: 0x2d8, Size: 0x4]
	void SetItemIcon();// 0xa181e44
	void RefreshItemsText(TurnTableBaseWidget* ParentBaseWidgetIn);// 0xa181c04
	void OnTurnTableTrigger();// 0xa181b08
	void OnItemActive(bool NewIsActive);// 0xa181b24
	void LayoutTurnTableItem(float RotateAngle, int ActivateTurnTableNum);// 0xa181cdc
	void InitTurnTableItem(out const TurnTableCallback TurnTableCallback);// 0x7eb71c4
	FText GetDisplayName();// 0xa181a58

--------------------------------
Class: CommonEmojiSprite.UserWidget.Widget.Visual.Object
	CanvasPanel* BgPanel;//[Offset: 0x248, Size: 0x8]
	void SetBgPanelVisible(bool bVisible, bool bFlip);// 0x7b7ad34
	void NativePlayEmoji(FName EmojiId);// 0x7b7ae7c

--------------------------------
Class: PickupAutoItemWidget.UserWidget.Widget.Visual.Object
	float DropAnimTime;//[Offset: 0x248, Size: 0x4]
	WidgetSwitcher* WidgetSwitcher_Bg;//[Offset: 0x250, Size: 0x8]
	Image* ImgIcon;//[Offset: 0x258, Size: 0x8]
	WidgetAnimation* Anim_out;//[Offset: 0x260, Size: 0x8]
	void SetItemIcon(int ItemID);// 0xa158580
	void PlayAnimOut(float AnimTime);// 0xa1584a8

--------------------------------
Class: ApexDragDropOperation.DragDropOperation.Object
	Vector2D ScrollRangeA_From;//[Offset: 0x8c, Size: 0x8]
	Vector2D ScrollRangeA_To;//[Offset: 0x94, Size: 0x8]
	Vector2D ScrollRangeB_From;//[Offset: 0x9c, Size: 0x8]
	Vector2D ScrollRangeB_To;//[Offset: 0xa4, Size: 0x8]
	bool bOpenScrollDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	ApexDraggableWidgetBase* SourceWidget;//[Offset: 0xb0, Size: 0x8]
	Vector2D DragBeginLocation;//[Offset: 0xb8, Size: 0x8]
	Vector2D CurrentLocation;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x38, Size: 0x8]
	Vector2D SourceDimension;//[Offset: 0x40, Size: 0x8]
	Texture2D* SourceTexture;//[Offset: 0x48, Size: 0x8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x50, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x60, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x68, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x70, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x78, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x80, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x88, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x98, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x9c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0xa8, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ControlLabels
	FName[] Labels;//[Offset: 0x0, Size: 0x10]
	FName SelectedLabel;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ControlDatas
	ControlData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ControlData
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName State;//[Offset: 0x4, Size: 0x8]
	<FName,FString> LabelMap;//[Offset: 0x10, Size: 0x50]
	<FName,FText> TextMap;//[Offset: 0x60, Size: 0x50]
	<FName,SoftObjectPath> ImageMap;//[Offset: 0xb0, Size: 0x50]
	TweenConfig TweenConfig;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: TweenConfig
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Delay;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	int Ease;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 0x10]
	int[] unusePool;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 0x50]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	int count;//[Offset: 0x18, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 0x10]
	ItemAssociation[] Associations;//[Offset: 0x30, Size: 0x10]
	bool bCanUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	int DeriveID;//[Offset: 0x44, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PingManagerComponent.ActorComponent.Object
	delegate ItemCreateCallback;//[Offset: 0x100, Size: 0x10]
	delegate ItemDeleteCallback;//[Offset: 0x110, Size: 0x10]
	delegate ItemCreateCallbackWithSimpleInfo;//[Offset: 0x120, Size: 0x10]
	delegate ItemResponseCallback;//[Offset: 0x130, Size: 0x10]
	delegate ItemCreateTempCallback;//[Offset: 0x140, Size: 0x10]
	delegate ItemClearByPlayerIDCallback;//[Offset: 0x150, Size: 0x10]
	delegate ItemHideCallback;//[Offset: 0x160, Size: 0x10]
	delegate ItemMarkReverseCallback;//[Offset: 0x170, Size: 0x10]
	delegate ItemResetCallback;//[Offset: 0x180, Size: 0x10]
	delegate ItemClearAllCallback;//[Offset: 0x190, Size: 0x10]
	delegate PickUpWrapCallback;//[Offset: 0x1a0, Size: 0x10]
	delegate ItemSkillResetCallback;//[Offset: 0x1b0, Size: 0x10]
	delegate ItemSkillCoollingResetCallback;//[Offset: 0x1c0, Size: 0x10]
	delegate EnterADSEnemyCallback;//[Offset: 0x1d0, Size: 0x10]
	delegate OnPingItemThroughBlock;//[Offset: 0x1e0, Size: 0x10]
	class PingAttributeDelare* AttributeDelareTemp;//[Offset: 0x1f0, Size: 0x8]
	PingAttributeDelare* AtrributeDelare;//[Offset: 0x1f8, Size: 0x8]
	uint64[] WaitToDeleteItemPingList_Server;//[Offset: 0x2e8, Size: 0x10]
	HitResult[] AllHitResults;//[Offset: 0x2f8, Size: 0x10]
	SiglePingInfo RecentlyLocalPingInfo;//[Offset: 0x310, Size: 0xa8]
	bool IsAutoPingEnemyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	ApexDoor* TmpDoor;//[Offset: 0x3c0, Size: 0x8]
	PrimitiveComponent* TmpDoorComp;//[Offset: 0x3c8, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x3d0, Size: 0x8]
	PingDataReporter* DataReporter;//[Offset: 0x3d8, Size: 0x8]
	SiglePingInfo[] ServerPingList;//[Offset: 0x3e0, Size: 0x10]
	<int,SimpleServerPingInfo> ServerSimpleList;//[Offset: 0x3f0, Size: 0x50]
	<int,SimpleClientPingInfo> ClientPingMap;//[Offset: 0x440, Size: 0x50]
	<uint32,AutoMarkInfo> AutoMarkPlayerList;//[Offset: 0x490, Size: 0x50]
	<uint64,float> ItemHasMarkTimerMap;//[Offset: 0x4f8, Size: 0x50]
	InGamePingGuide* PingGuide;//[Offset: 0x650, Size: 0x8]
	AsynServerPingPositionInfo[] AyncServerPingPositionList;//[Offset: 0x658, Size: 0x10]
	PingAimedInfo PingAimedInfo;//[Offset: 0x674, Size: 0xc]
	enum CurrentButtonState;//[Offset: 0x680, Size: 0x1]
	ApexCharacterMapFlags* MapFlags;//[Offset: 0x684, Size: 0x8]
	<uint32,AutoMarkInfo> ADSEnemyPlayerList;//[Offset: 0x690, Size: 0x50]
	bool bIsInADSMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	bool bIsOpenADSFromSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 0x1]
	bool StartTraceBlock(int PingType, int FromType, bool UseQueue);// 0x7dd6198
	int StartPingItemToTargetPoint(const Vector EndPos);// 0x7dd5d2c
	int StartPingItemFromActorByDS(Actor* WeakActor, int PingType, float TotalTime, bool bIgnorePlayAudio);// 0x7dd5aac
	bool StartPingItemByTombBox(PlayerTombBox* TombBox);// 0x7dd59d0
	void StartPingItemByEnemy(ApexCharacter* Target);// 0x7dd5e0c
	int StartPingItemByDS(Vector WorldPosition, int PingType);// 0x7dd6030
	void ShowDyingOrRespawnInfomation(ApexCharacterMapFlags* TmpMapFlag, const enum StatusMapFlags);// 0x7dd21e0
	void SetPickUpNearListOpenState(const bool bIsOpen);// 0x7dd2c84
	void SetPickUpListOpenState(const bool bIsOpen);// 0x7dd2d5c
	void SetPickUpDeathBoxListOpenState(const bool bIsOpen);// 0x7dd2bac
	void SetCustomHitResult(out const HitResult HitResult);// 0xa1618d0
	void RPCServerSetAutoMark(bool IsAutoMark);// 0xa161cd8
	void RPCServerResetCooling(float RemainTime, int PingIndex);// 0xa161a10
	void RPCServerActionType(SiglePingInfo SingleInfo);// 0x7dd46ac
	void RPCClientSetPingVisible(int PingIndex, bool IsShow);// 0xa1616e4
	void RPCClientResponsePing(int PingIndex, const int PingType, int DingType, uint32 SourcePlayerKey);// 0xa161db8
	void RPCClientResetCooling(float RemainTime, int PingIndex);// 0xa161b70
	void RPCClientMakePing(SiglePingInfo Info);// 0x7dd43b0
	void RPCClientDeletePing(int PingIndex);// 0xa162428
	void RPCClientDelayPing(int PingIndex, uint32 PlayerKey);// 0xa1622c0
	void RPCClientCancelReservePing(int PingIndex, int PingType, int DingType, uint32 SourcePlayerKey);// 0xa16203c
	void ResetSkillCoolingDown(float RemainTime, int PingIndex);// 0x602d3b0
	void PlaySurviveAudio();// 0x7dd2ab4
	void PlayPingUISound(const enum UIActionType);// 0x7dd2ac8
	void PlayMapFlagsOKAnim();// 0x7dd207c
	void PlayClaimItemAudio(const FString ItemAudioKey);// 0x6120e3c
	void OnUIStateEnterChangeCallback(enum UIState, bool bIsEnter);// 0x51d6bb0
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x5e20988
	void OnSendClickPingDing(const int PingType, const int PingIndex, const int DingType, bool bLeftBubble);// 0x7dd2340
	void OnRep_PingListUpdate();// 0x518ee7c
	void OnRep_AsynServerPingPosition();// 0xa16164c
	void OnGameDataLoaded(SoftClassPath SoftPath);// 0x7dd6390
	void OnClickPingDing(const enum PingButtonState);// 0x5c707dc
	void OnClickPingCallback(const int PingType, bool UseQueue);// 0x5b23324
	bool LocalResponsePing(int PingType, int PingIndex, int DingType, const bool bLeftBubble);// 0x7dd3b24
	bool LocalMakePing(SiglePingInfo SingleInfo);// 0x7dd407c
	bool LocalDeletePing(int PingIndex);// 0x60c113c
	bool LocalDelayPing(int PingType, int PingIndex);// 0x7dd3f10
	bool LocalClearPingByPlayerID(int FromType, int PingType);// 0x7dd39bc
	bool LocalCancelReservePing(int PingType, int PingIndex);// 0x7dd3da4
	bool IsTeammate(const int PlayerKey);// 0x7dd28fc
	bool IsSkill(int PingType);// 0x7dd29d8
	bool IsRealEnemy(int Index);// 0x7dd2e34
	bool IsMarkByMySelf(const int PingIndex);// 0x7dd3738
	bool IsItemExist(const int PingIndex);// 0x7dd365c
	bool IsEnemySkill(const int PingIndex);// 0x7dd2820
	bool IsCurrentAimedState(int64 ItemUUID);// 0x7dd3480
	void HideMapFlagsInfo();// 0x7dd1fe8
	void HideDyingOrRespawnInfomation(ApexCharacterMapFlags* TmpMapFlag);// 0x7dd2110
	Vector GetVectorByIndex(int Index);// 0x7dd2f10
	Vector GetTempItemActorVector(int64 ItemUUID);// 0x7dd2fec
	void GetPingInfoByIndex(int PingIndex, out SiglePingInfo Info);// 0x7dd25c4
	bool GetHitResult(out HitResult TraceHitInfo, const Vector StartPos, const Vector EndPos);// 0x7dd30c8
	HitResult GetCustomHitResult();// 0xa161854
	void GetCurrentTraceLinePosition(out Vector WorldPostion);// 0x7dd3580
	bool GetCurrentHitReuslt(out HitResult TraceHitInfo, float LineDist);// 0x7dd32e8
	void DeletePingItemByDS(int PingType, int PingIndex);// 0x7dd5edc
	void DeletePing_Server(const int PingIndex);// 0x7dd4e88
	int CreateNormalPingWithActor_Server(Actor* WeakActor, const Vector WorldPosition, const int PingType, int FromType, bool bNeedPlayAudio);// 0x7dd544c
	void CreateNormalPingWithActor_Client(Actor* WeakActor, const Vector WorldPosition, const int PingType, int FromType, bool bNeedPlayAudio);// 0x7dd49a0
	void CreateNormalPingSimple_Client(const Vector WorldPosition, const int PingType, bool bNeedPlayAudio);// 0x7dd4c9c
	void CreateNormalPing_Client(const Vector WorldPosition, const int PingType, int FromType, bool bNeedPlayAudio);// 0x58af988
	int CreateItemPingWithActor_Server(Actor* WeakActor, const int ItemID, const int64 ItemUUID, bool bNeedPlayAudio);// 0x7dd5750
	void CreateItemPingWithActor_Client(Actor* WeakActor, int ItemID, const int64 ItemUUID, bool bIsAuto, bool bNeedPlayAudio);// 0x7dd4f58
	void CreateItemPing_Client(const int ItemID, const int64 ItemUUID, bool bNeedPlayAudio);// 0x7dd5260
	void ClearAutoMarkItemInDeathBox();// 0x7dd2b98
	void CheckPickUpWrapHadDestroy(int64 ItemUUID);// 0x7dd3814
	bool CheckIsInEllipse(Vector2D ScreenPosition);// 0x7dd38e4
	void AfterTickCheck_Client(float DeltaTime, out const Vector ViewLocation, out const Rotator ViewRotation);// 0x480a760

--------------------------------
Class: PingAttributeDelare.Object
	float DelayTimeT1;//[Offset: 0x28, Size: 0x4]
	float DelayTimeT2;//[Offset: 0x2c, Size: 0x4]
	float DelayTimeT3;//[Offset: 0x30, Size: 0x4]
	float AvailbleItemRange;//[Offset: 0x34, Size: 0x4]
	float LobaAvailbleItemRange;//[Offset: 0x38, Size: 0x4]
	float DoubleClickAvailbleItemRange;//[Offset: 0x3c, Size: 0x4]
	float PlayerAudioInterval;//[Offset: 0x40, Size: 0x4]
	float EllipticalConstValueX;//[Offset: 0x44, Size: 0x4]
	float EllipticalConstValueY;//[Offset: 0x48, Size: 0x4]
	CurveFloat* MakeEnemyCurve;//[Offset: 0x50, Size: 0x8]
	float OpenEnemyCurve;//[Offset: 0x58, Size: 0x4]
	FString OpenEnemyCompName;//[Offset: 0x60, Size: 0x10]
	float EnemyPingCheckRange;//[Offset: 0x70, Size: 0x4]
	float NormalItemRange;//[Offset: 0x74, Size: 0x4]
	float WeaponItemRange;//[Offset: 0x78, Size: 0x4]
	float LookBelowItemRange;//[Offset: 0x7c, Size: 0x4]
	float NormalItemRangeForAim;//[Offset: 0x80, Size: 0x4]
	float WeaponItemRangeForAim;//[Offset: 0x84, Size: 0x4]
	float LookBelowItemRangeForAim;//[Offset: 0x88, Size: 0x4]
	float ZiplineRadius;//[Offset: 0x8c, Size: 0x4]
	FString OpenPingUIAudioStr;//[Offset: 0x90, Size: 0x10]
	FString CancelPingUIAudioStr;//[Offset: 0xa0, Size: 0x10]
	FString HoverPingUIAudioStr;//[Offset: 0xb0, Size: 0x10]
	FString ConformPingUIAudioStr;//[Offset: 0xc0, Size: 0x10]
	int DingWeaponEventID;//[Offset: 0xd0, Size: 0x4]
	int DingNormalItemEventID;//[Offset: 0xd4, Size: 0x4]
	int SurviveEventID;//[Offset: 0xd8, Size: 0x4]
	int FirstAidEventID;//[Offset: 0xdc, Size: 0x4]
	int RespawnEventID;//[Offset: 0xe0, Size: 0x4]
	float AutoPingEnemyCD;//[Offset: 0xe4, Size: 0x4]
	float PingDoorDistLimit;//[Offset: 0xe8, Size: 0x4]
	float BoundsScreenRadius;//[Offset: 0xec, Size: 0x4]
	float BoundsScreenPerc;//[Offset: 0xf0, Size: 0x4]
	float BoundsScreenStayTimer;//[Offset: 0xf4, Size: 0x4]
	float ADSBoundsScreenStayTimer;//[Offset: 0xf8, Size: 0x4]
	float ADSEnterEnemyDist;//[Offset: 0xfc, Size: 0x4]
	float WaitIntervalTimer;//[Offset: 0x100, Size: 0x4]
	float IntervalTimer;//[Offset: 0x104, Size: 0x4]
	float CheckRadius;//[Offset: 0x108, Size: 0x4]
	float CheckDegreen;//[Offset: 0x10c, Size: 0x4]
	float SameItemAutoMarkInterval;//[Offset: 0x110, Size: 0x4]
	int QuickAutoMarkNum;//[Offset: 0x114, Size: 0x4]
	float QuickAutoMarkInterval;//[Offset: 0x118, Size: 0x4]
	float QuickAutoMarkCooling;//[Offset: 0x11c, Size: 0x4]
	float LeaveAutoMarkItemDist;//[Offset: 0x120, Size: 0x4]
	float LeaveAutoMarkItemDegreen;//[Offset: 0x124, Size: 0x4]
	float LeaveAutoMarkItemStayDuration;//[Offset: 0x128, Size: 0x4]
	float MarkItemGuideDuration;//[Offset: 0x12c, Size: 0x4]
	float FriendMarkItemGuideDuration;//[Offset: 0x130, Size: 0x4]
	int MozambiqueItemID;//[Offset: 0x134, Size: 0x4]
	float GlassToDist;//[Offset: 0x138, Size: 0x4]
	int NotOpenShowPropLevel;//[Offset: 0x13c, Size: 0x4]
	int AutoMarkItemExpireWave;//[Offset: 0x140, Size: 0x4]
	float BigMapPingVanishTime;//[Offset: 0x144, Size: 0x4]
	int AutoMarkItemGradeLevel;//[Offset: 0x148, Size: 0x4]
	float TickTimerInterval;//[Offset: 0x14c, Size: 0x4]
	float AutoMarkTickTimerInterval;//[Offset: 0x150, Size: 0x4]
	int MaxReserveItemNum;//[Offset: 0x154, Size: 0x4]

--------------------------------
Class: SiglePingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int PingType;//[Offset: 0x4, Size: 0x4]
	int DingType;//[Offset: 0x8, Size: 0x4]
	int FromType;//[Offset: 0xc, Size: 0x4]
	uint64 CreateTime;//[Offset: 0x10, Size: 0x8]
	uint32 SourcePlayerID;//[Offset: 0x18, Size: 0x4]
	uint32 ReservePlayerID;//[Offset: 0x1c, Size: 0x4]
	Vector SourcePosition;//[Offset: 0x20, Size: 0xc]
	FString PlayerName;//[Offset: 0x30, Size: 0x10]
	int TeamColor;//[Offset: 0x40, Size: 0x4]
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	int ItemID;//[Offset: 0x48, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x50, Size: 0x8]
	int ItemDeriveID;//[Offset: 0x58, Size: 0x4]
	Actor* ReferenceActor;//[Offset: 0x5c, Size: 0x8]
	PrimitiveComponent* PriComp;//[Offset: 0x64, Size: 0x8]
	Vector PositionOffset;//[Offset: 0x6c, Size: 0xc]
	bool IsEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	uint32 SkillOwnerPlayerKey;//[Offset: 0x7c, Size: 0x4]
	FString SkillOwnerPlayerName;//[Offset: 0x80, Size: 0x10]
	enum ReportType;//[Offset: 0x90, Size: 0x1]
	bool IsItemAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool IsAutoMarkEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bSkillAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	float SkillCooling;//[Offset: 0x94, Size: 0x4]
	uint32 MapFlagsPlayerKey;//[Offset: 0x98, Size: 0x4]
	bool bIsRecommendItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	bool bIsPingThroughBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]
	bool bNeedPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 0x1]
	enum ActionType;//[Offset: 0x9f, Size: 0x1]

--------------------------------
Class: ApexDoor.SignificanceManagedActor.Actor.Object
	bool bHisPenetratingAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	enum DoorType;//[Offset: 0x329, Size: 0x1]
	enum DoorDataRepTyp;//[Offset: 0x32a, Size: 0x1]
	bool CanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b, Size: 0x1]
	enum[] DisableOpenPawnStates;//[Offset: 0x330, Size: 0x10]
	float InteractingCD;//[Offset: 0x340, Size: 0x4]
	enum AutoOpenBlockType;//[Offset: 0x344, Size: 0x1]
	float AutoBlockInteractingCD;//[Offset: 0x348, Size: 0x4]
	bool HasCloseOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	float MinAutoOpenSpeedSquared;//[Offset: 0x350, Size: 0x4]
	float NeedTraceDist;//[Offset: 0x354, Size: 0x4]
	float NoBtnNeedTraceTime;//[Offset: 0x358, Size: 0x4]
	float DoorHalfThickness;//[Offset: 0x35c, Size: 0x4]
	float CanInteractDistance;//[Offset: 0x360, Size: 0x4]
	float AutoOpenAngle;//[Offset: 0x364, Size: 0x4]
	bool UseCameraToFindObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float DistanceToIgnoreObstable;//[Offset: 0x36c, Size: 0x4]
	float MaxOverlapRadius;//[Offset: 0x370, Size: 0x4]
	bool CanBeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	float MaxHP;//[Offset: 0x378, Size: 0x4]
	float HP;//[Offset: 0x37c, Size: 0x4]
	float HPEx;//[Offset: 0x380, Size: 0x4]
	float CommonDamageValue;//[Offset: 0x384, Size: 0x4]
	float KickDamageValue;//[Offset: 0x388, Size: 0x4]
	class Actor* BrokenEffect;//[Offset: 0x390, Size: 0x8]
	AnimationAsset* BrokenAnimationToPlay;//[Offset: 0x398, Size: 0x8]
	float BrokenFindFloorDist;//[Offset: 0x3a0, Size: 0x4]
	DoorDamageType[] CanDamageTypeList;//[Offset: 0x3a8, Size: 0x10]
	float DestroyBrokenTime;//[Offset: 0x3b8, Size: 0x4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	int DoorBrokenState;//[Offset: 0x3c0, Size: 0x4]
	int DoorBrokenStateEx;//[Offset: 0x3c4, Size: 0x4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	ApexCharacter* InteractingCharacter;//[Offset: 0x3e8, Size: 0x8]
	uint32 InteractingTeamId;//[Offset: 0x3f0, Size: 0x4]
	<uint32,float> InteractingTeamActiveTimes;//[Offset: 0x3f8, Size: 0x50]
	ApexCharacter* Autonomous_NearDoorCharacter;//[Offset: 0x448, Size: 0x8]
	StaticMeshComponent* DoorModel;//[Offset: 0x450, Size: 0x8]
	StaticMeshComponent* DoorModelEx;//[Offset: 0x458, Size: 0x8]
	BoxComponent* DoorCollisionBox;//[Offset: 0x460, Size: 0x8]
	BoxComponent* DoorCollisionBoxEx;//[Offset: 0x468, Size: 0x8]
	MaterialInterface*[] SavedDoorModelMaterials;//[Offset: 0x470, Size: 0x10]
	MaterialInterface*[] SavedDoorModelMaterialsEx;//[Offset: 0x480, Size: 0x10]
	SceneComponent* DoorModelWrapper;//[Offset: 0x490, Size: 0x8]
	SceneComponent* DoorModelWrapperEx;//[Offset: 0x498, Size: 0x8]
	PrimitiveComponent*[] Accessories;//[Offset: 0x4a0, Size: 0x10]
	PrimitiveComponent*[] AccessoriesEx;//[Offset: 0x4b0, Size: 0x10]
	BoxComponent* InteractionBox;//[Offset: 0x4c0, Size: 0x8]
	BoxComponent* AutoOpenInteractionBox;//[Offset: 0x4c8, Size: 0x8]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x4d0, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x4d8, Size: 0x8]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	DoorOverlapingActor[] NearDoorActors;//[Offset: 0x508, Size: 0x10]
	int DoorState;//[Offset: 0x518, Size: 0x4]
	int DoorStateEx;//[Offset: 0x51c, Size: 0x4]
	void TriggerOpenDoor();// 0xa0dbe60
	void TriggerDoor(Vector Point, bool bIsOpen);// 0xa0dbe7c
	void TriggerCloseDoor();// 0xa0dbe44
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xa0db950
	bool StuckInto(Actor* InActor);// 0xa0dae6c
	void SetDoorBroken(bool bExtraDoor, Actor* brokenCauser);// 0x618de70
	void SetCanOpenDoor(bool bInCanOpen);// 0x79d696c
	void SetCanDamageDoor(bool bCanDamage);// 0x79d67a4
	void SetCanCloseDoor(bool bInCanClose);// 0x79d6888
	void RPC_MulticastReset();// 0x79d6748
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0xa0db32c
	void OnRep_RepInteractCharacter();// 0x501a824
	void OnRep_RepDoorStateEx();// 0x54a8de0
	void OnRep_RepDoorState();// 0x54269d4
	void OnRep_RepDoorHPEx();// 0x56dbadc
	void OnRep_RepDoorHP();// 0x57634a4
	void OnRep_RepDoorBrokenEx();// 0x614aed0
	void OnRep_RepDoorBroken();// 0x607e198
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x573f0c8
	void OnDoorRPC(Actor* InteractionActor, bool bIsOpen);// 0xa0dbbec
	void OnDoorAniFinsihDelegate__DelegateSignature(ApexDoor* Door);// 0xa1d39f8
	void OnCharacterDead();// 0x79d6734
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5d5397c
	bool IsSameTeam(Actor* Other, bool bCheckHostile);// 0xa0db034
	void InitAccessories(PrimitiveComponent*[] InAccessories, PrimitiveComponent*[] InAccessoriesEx);// 0x4abc064
	void Init(BoxComponent* InInteractionBox, BoxComponent* InAutoOpenInteractionBox, SceneComponent* InDoorModelWrapper, SceneComponent* InDoorModelWrapperEx);// 0x4c6d064
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0xa0db1b0
	int GetPointOnDoorDirection(Vector Point);// 0xa0dbd5c
	bool CanStuckInto(Actor* InActor);// 0xa0daf50
	void BP_DoorBroken_Callback(bool bExtraDoor);// 0xa1d39f8
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0xa1d39f8
	void BP_DoorBlockedOpening_Callback();// 0xa1d39f8
	void BP_DoorBlockedClosing_Callback();// 0xa1d39f8
	void BP_DoorBinOpenDone_Callback();// 0xa1d39f8
	void BP_DoorBinOpen_Callback();// 0xa1d39f8
	void BP_DoorBinCloseDone_Callback();// 0xa1d39f8
	void BP_DoorBinClose_Callback();// 0xa1d39f8
	void BP_DoorBeAttacked_Callback(StaticMeshComponent* HitDoorMesh);// 0xa1d39f8
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor, float InValidityTimeScale);// 0xa0db64c

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DoorDamageType
	byte DamageType;//[Offset: 0x0, Size: 0x1]
	int SkillDamageTypeID;//[Offset: 0x4, Size: 0x4]
	float DamageRate;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexBuffSystemComponent.ActorComponent.Object
	BuffInstancedItem*[] AllBuffs;//[Offset: 0x100, Size: 0x10]
	Actor* PawnOwner;//[Offset: 0x110, Size: 0x8]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	float RepDelayIgnoreTime;//[Offset: 0x154, Size: 0x4]
	<FName,double> ClientCheckRepTimeMap;//[Offset: 0x158, Size: 0x50]
	FName[] MainBuffNameList;//[Offset: 0x1a8, Size: 0x10]
	BuffStructure MainBuffStructure;//[Offset: 0x1c0, Size: 0x10]
	BuffStructure LocalBuffStructure;//[Offset: 0x1d0, Size: 0x10]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x79943c8
	void ResetBuff();// 0x7994abc
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0x7994cec
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0x7995350
	void OnRep_MainBuffStructure();// 0x4b9be10
	void OnCharacterDying();// 0x7994180
	bool IsBufferMutexed(FName NewBuffName);// 0x7995bcc
	void InitModifier(Actor* TempPawn);// 0x799648c
	bool HasMoreThanOneBuff(FName BuffName);// 0x7994ad0
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x7994b98
	FName GetBuffName(int BuffID);// 0x7996304
	BuffInstancedItem* GetBuffInstancedItem(FName BuffName);// 0x79947ac
	int GetBuffID(FName BuffName);// 0x79963c8
	double GetBuffExpiry(FName BuffName);// 0x7994304
	ApexBuff* GetBuffByName(FName BuffName);// 0x7994870
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* CauserActor);// 0x7995184
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x7995994
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* CauserActor);// 0x7994fb8
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x799575c
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x799561c
	void ClearDeBuff(bool ForceCleanUp);// 0x7994934
	void ClearBuff(bool ForceCleanUp);// 0x79949f8
	bool CheckBuffStatus(class ApexBuffStatusType Status);// 0x799423c
	void CameraModeSwitchCallback();// 0xa0cdaa0
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x7994660
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x7994514
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* CauserActor, float InValidityTimeScale, PredictionKey InPredictionKey);// 0x7995c94
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor, float InValidityTimeScale, PredictionKey InPredictionKey);// 0x7995fc8

--------------------------------
Class: BuffInstancedItem.Object
	int BuffID;//[Offset: 0x28, Size: 0x4]
	ApexBuff* Buff;//[Offset: 0x2c, Size: 0x8]
	int LayerCount;//[Offset: 0x34, Size: 0x4]
	Controller* CauserPawnController;//[Offset: 0x38, Size: 0x8]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float ValidityTimeScale;//[Offset: 0x44, Size: 0x4]
	Actor* Target;//[Offset: 0x50, Size: 0x8]
	int BuffIndex;//[Offset: 0x58, Size: 0x4]
	Actor* CauserPawnActor;//[Offset: 0x60, Size: 0x8]
	Actor*[] AttackerStack;//[Offset: 0x68, Size: 0x10]
	bool bPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x80, Size: 0x10]
	bool[] BuffActionHadDoList;//[Offset: 0x90, Size: 0x10]
	bool[] EventBuffActionHadDoList;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: ApexBuff.Object
	FName BuffName;//[Offset: 0x30, Size: 0x8]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bAddAttackerStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	int LayerMax;//[Offset: 0x40, Size: 0x4]
	int InitialLayerCount;//[Offset: 0x44, Size: 0x4]
	float ValidityTime;//[Offset: 0x48, Size: 0x4]
	ApexBuffCondition*[] BuffConditions;//[Offset: 0x50, Size: 0x10]
	StatusChange[] StatusChanges;//[Offset: 0x60, Size: 0x10]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bCheckConsistency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool HasAttributeLocalPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	byte SimulateAddBuffRole;//[Offset: 0x74, Size: 0x1]
	enum ViewTargetAddBuffRole;//[Offset: 0x75, Size: 0x1]
	bool RemoveOnDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	FName[] MutexBuffers;//[Offset: 0x78, Size: 0x10]
	BuffActionItem[] BuffActions;//[Offset: 0x88, Size: 0x10]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0x98, Size: 0x10]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xb0, Size: 0x50]
	int InstancedNodesTotalSize;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: ApexBuffCondition.ApexBuffAction.ActorComponent.Object
	bool IsOK(ActorComponent* BuffManagerComponent);// 0x798fb54

--------------------------------
Class: ApexBuffAction.ActorComponent.Object
	BuffInstancedItem* OwnerBuffInstancePtr;//[Offset: 0x100, Size: 0x8]
	Actor* BuffTargetActor;//[Offset: 0x108, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x110, Size: 0x8]
	bool OnlyPlayOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool StopActionWhenBuffAllRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool OnlyActiveForPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	byte ActionActiveType;//[Offset: 0x11b, Size: 0x1]
	enum[] LegendTypeList;//[Offset: 0x120, Size: 0x10]
	bool IsBlueprintAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	void UpdateActionBP(float DeltaSeconds);// 0x798462c
	void UpdateAction_Internal(float DeltaSeconds);// 0x7984878
	void UndoActionBP();// 0xa0cbaa8
	void UndoAction_Internal();// 0xa0cbb20
	bool RealDoActionBP();// 0xa0cbac4
	bool RealDoAction_Internal();// 0xa0cbb3c
	void OnLayerDeattached(int Layer);// 0x79846f0
	void OnLayerAttached(int Layer);// 0x79847b4
	ApexBuffSystemComponent* GetOwnerBuffSystem();// 0x798493c
	BuffInstancedItem* GetOwnerBuffInstance();// 0x79849a4
	ApexBuff* GetOwnerBuff();// 0x7984970
	void CameraModeChangedEventBP();// 0xa0cba8c
	void CameraModeChangedEvent_Internal();// 0xa0cbb04

--------------------------------
Class: StatusChange
	class ApexBuffStatusType* StatusName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApexBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	ApexBuffAction* BuffAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BuffEventActionItem
	ApexBuffEventType* EventType;//[Offset: 0x0, Size: 0x8]
	ApexBuffAction* BuffEventAction;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ApexBuffEventType.Object

--------------------------------
Class: PredictionKey
	PackageMap* PredictiveConnection;//[Offset: 0x0, Size: 0x8]
	int16 BaseKey;//[Offset: 0x8, Size: 0x2]
	int16 RelyKey;//[Offset: 0xa, Size: 0x2]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: BuffStructure
	BuffLayer[] InfoList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BuffLayer
	double ModifyTime;//[Offset: 0x0, Size: 0x8]
	FName BuffName;//[Offset: 0x8, Size: 0x8]
	BuffInnerInfo[] InfoList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BuffInnerInfo
	Controller* BuffCauser;//[Offset: 0x0, Size: 0x8]
	Actor* CauserActor;//[Offset: 0x8, Size: 0x8]
	int TeamID;//[Offset: 0x10, Size: 0x4]
	int CampID;//[Offset: 0x14, Size: 0x4]
	float ValidityTimeScale;//[Offset: 0x18, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: DoorOverlapingActor
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8]
	Vector CollisionCenterOffset;//[Offset: 0x8, Size: 0xc]
	float CollisionRadius;//[Offset: 0x14, Size: 0x4]
	float CollisionHalfHeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PingDataReporter.Object

--------------------------------
Class: SimpleServerPingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	float LiveEndTime;//[Offset: 0x4, Size: 0x4]
	float VisibleEndTime;//[Offset: 0x8, Size: 0x4]
	bool IsPingVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	uint64 ItemUUID;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SimpleClientPingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x8, Size: 0x8]
	Actor* ReferenceActor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: AutoMarkInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float DistanceSquared;//[Offset: 0x8, Size: 0x4]
	ApexCharacterBase* Char;//[Offset: 0xc, Size: 0x8]
	bool bIsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: InGamePingGuide.Object
	void OnItemCreateTempCallback(int ItemID, int64 ItemUUID, int DeriveID);// 0x7cd0cc8
	void OnItemCreateCallback(int PingIndex);// 0x51d010c

--------------------------------
Class: AsynServerPingPositionInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	Vector ActorPosition;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: PingAimedInfo
	int PingType;//[Offset: 0x0, Size: 0x4]
	int PingIndex;//[Offset: 0x4, Size: 0x4]
	bool bIsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum ButtonState;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: ApexCharacterMapFlags.Actor.Object
	uint32 FlagId;//[Offset: 0x2d8, Size: 0x4]
	StatusHeadFlagsWidgetComponent* StatusHeadFlagsComponent;//[Offset: 0x2e0, Size: 0x8]
	uint16 TimeoutSec;//[Offset: 0x2e8, Size: 0x2]
	uint16 LeftSec;//[Offset: 0x2ea, Size: 0x2]
	uint16 ShownLeftSec;//[Offset: 0x2ec, Size: 0x2]
	float TickDeltaSec;//[Offset: 0x2f0, Size: 0x4]
	int DistanceMeter;//[Offset: 0x2f4, Size: 0x4]
	enum CurrentFlagType;//[Offset: 0x2f8, Size: 0x1]
	Vector AuthLocation;//[Offset: 0x2fc, Size: 0xc]
	float InterpSpeed;//[Offset: 0x308, Size: 0x4]
	bool bNeedInterpSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	Vector2D CurScreenSize;//[Offset: 0x310, Size: 0x8]
	uint32 OwnerPlayerKey;//[Offset: 0x318, Size: 0x4]
	float RescuingDistanceMeter;//[Offset: 0x31c, Size: 0x4]
	float PickBannerHorizonMeter;//[Offset: 0x320, Size: 0x4]
	float PickBannerVerticalMeter;//[Offset: 0x324, Size: 0x4]
	bool bInScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	int OwnerLegendId;//[Offset: 0x32c, Size: 0x4]
	void ShowStatusHeadFlags(enum FlagType, uint16 InitTimeoutSec, uint16 InitShownTimeoutSec, int InLegendId, int InPlayerKey);// 0x79c3070
	void ShowReviveUI(bool bShow);// 0x79c2d2c
	void ShowGetBeaconUI(bool bShow);// 0x79c2c60
	void SetRealTimeLocation(out const Vector Location);// 0x79c2df8
	void SetInvisible(bool bInvisible);// 0x79c2b94
	void SetFlagsLocation(float Alpha);// 0x79c2fac
	void SetAuthLocation(out const Vector Location);// 0x79c2edc
	void PlayInformationOut();// 0xa0d729c
	void PlayInformationIn();// 0xa0d72b8
	void PlayAnimationOK();// 0xa0d7280
	bool PawnStateCheck();// 0xa0d72d4
	bool LineVisableTraceCheck();// 0xa0d7314
	void HideStatusHeadFlags();// 0xa0d7370
	void HideMapFlagsInfo();// 0xa0d7264
	void GuideLocalPing();// 0x79c2b6c
	uint32 GetFlagId();// 0x79c3320
	int DistanceToAutonomous();// 0xa0d738c
	void CloseFlagDynamicOutLine();// 0x79c2b80
	void CheckOperate();// 0xa0d7354

--------------------------------
Class: StatusHeadFlagsWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector2D CurrentScreenPos;//[Offset: 0x6e4, Size: 0x8]
	int CurrentPlayerKey;//[Offset: 0x6ec, Size: 0x4]
	float CheckHeadFlagsRange;//[Offset: 0x6f0, Size: 0x4]
	enum CurrentFlagType;//[Offset: 0x6f4, Size: 0x1]
	void UpdateTipInfo(enum FlagType, uint16 LeftSec, int Meter, float Progress);// 0xa17b3c4
	void UnRegisterScreenTouchEndEvent();// 0x7e8059c
	void SetScreenPos(Vector2D ScreenPos);// 0x7e805b0
	void SetPlayerKey(int PlayerKey);// 0x7e804b8
	void SetHeadTex(int LegendID);// 0xa17b714
	void SetFlagsType(enum FlagType);// 0xa17b63c
	void OnScreenTouchEnd(float LocationX, float LocationY);// 0x52043a0
	void IsInCrossRange(const Vector2D ScreenPos);// 0x7e803ec
	void CloseDynamicOutLine();// 0x7e80588

--------------------------------
Class: PlayerTombBox.DynamicMovementActor.Actor.Object
	BoxComponent* RootBox;//[Offset: 0x300, Size: 0x8]
	WidgetComponent* BannerWidget;//[Offset: 0x308, Size: 0x8]
	UIWidgetRes UIWidgetRes;//[Offset: 0x310, Size: 0x50]
	AkAudioEvent* TombBoxAkEvent;//[Offset: 0x360, Size: 0x8]
	TombBoxWidgetComponent* TombBoxWidgetComponent;//[Offset: 0x368, Size: 0x8]
	Vector HostVelocity;//[Offset: 0x370, Size: 0xc]
	HitResult UnrealHit;//[Offset: 0x37c, Size: 0x88]
	ApexPlayerState* WeakApexPlayerState;//[Offset: 0x404, Size: 0x8]
	uint32[] DisableSignalPkArray;//[Offset: 0x410, Size: 0x10]
	bool bNeedSignalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	enum RegionType;//[Offset: 0x421, Size: 0x1]
	bool bHaveAuthRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	bool bRespawnBannerExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1]
	bool bInitIsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x426, Size: 0x1]
	FName TombName;//[Offset: 0x428, Size: 0x8]
	uint32 TargetPlayerKey;//[Offset: 0x430, Size: 0x4]
	uint32 CauserPlayerKey;//[Offset: 0x434, Size: 0x4]
	uint32 TeamIdx;//[Offset: 0x438, Size: 0x4]
	ApexCharacter* DamageCauser;//[Offset: 0x440, Size: 0x8]
	int DeadTime;//[Offset: 0x448, Size: 0x4]
	int Quality;//[Offset: 0x44c, Size: 0x4]
	uint32 FlagId;//[Offset: 0x450, Size: 0x4]
	bool bNeedDestroyCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 0x1]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x458, Size: 0x8]
	int TombBoxInstanceID;//[Offset: 0x460, Size: 0x4]
	ParticleSystem* DestroyEffectTemplate;//[Offset: 0x468, Size: 0x8]
	float DestroyDelay;//[Offset: 0x470, Size: 0x4]
	float ForceMoveEndTime;//[Offset: 0x474, Size: 0x4]
	Vector FindNearestNavMeshPointExtent;//[Offset: 0x478, Size: 0xc]
	TimerHandle ForceMoveEndTimerHandle;//[Offset: 0x488, Size: 0x8]
	MaterialInstanceDynamic*[] TombBoxQualityEffectMaterials;//[Offset: 0x490, Size: 0x10]
	FString QualityEffectMaterialName;//[Offset: 0x4a0, Size: 0x10]
	Color[] QualityEffectColor;//[Offset: 0x4b0, Size: 0x10]
	float OutlineFillDist;//[Offset: 0x4c0, Size: 0x4]
	float RespanwEffectShowDist;//[Offset: 0x4c4, Size: 0x4]
	bool bOutlineFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	int[] OutlineIdArray;//[Offset: 0x4d0, Size: 0x10]
	int[] OutlineFillIdArray;//[Offset: 0x4e0, Size: 0x10]
	class TargetPoint* LeviathanTargetPointClass;//[Offset: 0x4f0, Size: 0x8]
	float LeviathanRadius;//[Offset: 0x4f8, Size: 0x4]
	float StopPhysicsLinearVelocitySquared;//[Offset: 0x4fc, Size: 0x4]
	float StopPhysicsAngularVelocitySquared;//[Offset: 0x500, Size: 0x4]
	float StopVerticalDot;//[Offset: 0x504, Size: 0x4]
	int ShowRespawnEffectState;//[Offset: 0x508, Size: 0x4]
	ParticleSystem* DestroyRespawnEffectTemplate;//[Offset: 0x510, Size: 0x8]
	float TotalDeltaTime;//[Offset: 0x518, Size: 0x4]
	float OverlapTime;//[Offset: 0x51c, Size: 0x4]
	uint32[] OverlapIndexArray;//[Offset: 0x520, Size: 0x10]
	float HitLinearVelocityMax;//[Offset: 0x530, Size: 0x4]
	bool bPawnBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	DynamicMovementComponent_Projetile* Projetile;//[Offset: 0x538, Size: 0x8]
	enum SpawnReason;//[Offset: 0x540, Size: 0x1]
	float FallMaxSpeed;//[Offset: 0x544, Size: 0x4]
	float RandomMaxYaw;//[Offset: 0x548, Size: 0x4]
	float RandomMaxPitch;//[Offset: 0x54c, Size: 0x4]
	float GroundFreezeDelay;//[Offset: 0x550, Size: 0x4]
	PickUpListWrapperActor* SeekerPickupListWrapper;//[Offset: 0x558, Size: 0x8]
	int SeekerLegendId;//[Offset: 0x560, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x568, Size: 0x8]
	float PhysicsMaxAngVel;//[Offset: 0x578, Size: 0x4]
	float PhysicsLinearDamping;//[Offset: 0x57c, Size: 0x4]
	float SideDistance;//[Offset: 0x580, Size: 0x4]
	float ProbeDistance;//[Offset: 0x584, Size: 0x4]
	float DetectSimulatePhysicsRate;//[Offset: 0x588, Size: 0x4]
	float DetectSimulatePhysicsCount;//[Offset: 0x58c, Size: 0x4]
	float ImpulseForce;//[Offset: 0x590, Size: 0x4]
	ParticleSystemComponent* RespawnEffect;//[Offset: 0x598, Size: 0x8]
	void UpdateResapwnEffect();// 0x7df1794
	void UpdateOutline();// 0x7df17a8
	void UpdateBeaconLocation();// 0x7df28b4
	void UnRegisterToAIController(ApexAIController* AIC);// 0x7df2340
	void ThrowOutTombBox(ApexCharacter* TargetCharacter);// 0x7df1fb0
	void ThrowOut(ApexCharacter* TargetCharacter);// 0x7df28dc
	void SetUIWidgetVisibility(bool IsShow);// 0x7df27f0
	void ServerLaunchTombBox(Vector LaunchVelocity);// 0x7df13d8
	void RPCMulticastShowTombBoxDestroy();// 0xa165e44
	void OnTombBoxMoveEnd(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x7df1af0
	void OnRepShowRespawnEffect();// 0x7df28c8
	void OnRepQuality();// 0x520d310
	void OnRepPlayerState();// 0x4f1af08
	void OnRep_RegionType();// 0x5143e08
	void OnRep_InitIsEmpty();// 0x50d14e8
	void OnPickupListWrapper(int ItemDataIndex, int LeftCount);// 0x7df1d94
	void OnInsertPickupData(int ItemDataIndex);// 0x7df1cd8
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x7df10f4
	void OnGotRecoverBannerEvent(uint32 InPlayerKey, uint32 RecoverBannerPlayerKey);// 0x7df17bc
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x558874c
	void OnComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4a07520
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5766c94
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x7df18f4
	void InitUIWidget();// 0x7df27dc
	PickUpListWrapperActor* InitTombBoxPickUpList(out const PickUpItemData[] ItemDataList, bool bIsSeekerPickUpList);// 0x7df206c
	void InitTombBox(ApexCharacter* TargetPlayer, out const PickUpItemData[] ItemDataList, enum Reason);// 0x7df23fc
	void ImpactGround(int8 SurfaceType);// 0x7df1a2c
	void HandleMoveCompStop(out const HitResult HitInfo);// 0x7df1ecc
	int GetTargetPlayerKey();// 0xa165e28
	Vector GetNearestMapEdgePoint(Vector BasePoint);// 0x7df1494
	Vector GetGroundPosition(Vector StartOrigin, Vector EndOrigin);// 0x7df1634
	Vector GetClosetAirdropPoint(Vector BaseOrigin);// 0x7df1564
	int GetCauserPlayerKey();// 0xa165e0c
	void ForceMoveEnd();// 0x7df1780
	void EnablePhysicsAfterHit();// 0x7df13c0
	void DisableSignal();// 0x7df232c
	void CheckDisableSignal();// 0x7df2318
	bool CanShowUIWidget(int TargetTeamIdx);// 0x7df2714

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 0x8]
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Vector2D DrawSize;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: TombBoxWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ApexPlayerState.PlayerState.Info.Actor.Object
	uint32[] ForceAllowDamagePlayerKeys;//[Offset: 0x330, Size: 0x10]
	float Perc2Opacity;//[Offset: 0x340, Size: 0x4]
	enum CacheCameraMode;//[Offset: 0x344, Size: 0x1]
	FName PlayerType;//[Offset: 0x348, Size: 0x8]
	int PlayerKey;//[Offset: 0x350, Size: 0x4]
	uint64 UID;//[Offset: 0x358, Size: 0x8]
	BackpackItemInfo[] PlayerItemInfos;//[Offset: 0x360, Size: 0x10]
	uint64[] DoLikeUIDs;//[Offset: 0x370, Size: 0x10]
	bool IsMicroOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	int TeamID;//[Offset: 0x384, Size: 0x4]
	int TeamIdx;//[Offset: 0x388, Size: 0x4]
	FString CorpsName;//[Offset: 0x390, Size: 0x10]
	FString CorpsNickName;//[Offset: 0x3a0, Size: 0x10]
	int LegendID;//[Offset: 0x3b0, Size: 0x4]
	FString ZoneID;//[Offset: 0x3b8, Size: 0x10]
	BannerData CurrentBannerData;//[Offset: 0x3c8, Size: 0x48]
	BannerData[] LegendBannerDataArray;//[Offset: 0x410, Size: 0x10]
	delegate OnLegendIdChange;//[Offset: 0x420, Size: 0x10]
	int LegendSkin;//[Offset: 0x430, Size: 0x4]
	<int,int> DefaultLegendSkinMap;//[Offset: 0x438, Size: 0x50]
	<int,LegendEmotePaintingInfo> EmotePaintData;//[Offset: 0x488, Size: 0x50]
	int[] CurrentEmotePaintingData;//[Offset: 0x4d8, Size: 0x10]
	bool bAlreadyWinTheGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	bool bSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 0x1]
	bool bIsUseSecIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 0x1]
	MpWeaponInfo MpWeaponInfo;//[Offset: 0x4f0, Size: 0x30]
	LegendSkinData[] ValidSkinArray;//[Offset: 0x528, Size: 0x10]
	int LegendLevel;//[Offset: 0x538, Size: 0x4]
	int CampID;//[Offset: 0x53c, Size: 0x4]
	int CampIdx;//[Offset: 0x540, Size: 0x4]
	bool bIsRobot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 0x1]
	bool bWantSingleParachutePlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 0x1]
	bool bWantSingleParachuteValkyrie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 0x1]
	bool bEnableParachuteTransOrLeaveOrFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x547, Size: 0x1]
	int[] ValidLegendArray;//[Offset: 0x548, Size: 0x10]
	int[] LimitValidLegendArray;//[Offset: 0x558, Size: 0x10]
	int[] ActivityTaskIDArray;//[Offset: 0x568, Size: 0x10]
	int[] MinGuaranteeLegends;//[Offset: 0x578, Size: 0x10]
	PlayerEquipSkinInfo[] EquipSkinArray;//[Offset: 0x588, Size: 0x10]
	int ChooseLegendID;//[Offset: 0x598, Size: 0x4]
	int ConfirmLegendID;//[Offset: 0x59c, Size: 0x4]
	Vector ServerLocation;//[Offset: 0x5a0, Size: 0xc]
	GameModePlayerBattleInfoGroup BattleInfoGroup;//[Offset: 0x5ac, Size: 0x14]
	int SegmentLevel;//[Offset: 0x5c0, Size: 0x4]
	int Rating;//[Offset: 0x5c4, Size: 0x4]
	int WarmScore;//[Offset: 0x5c8, Size: 0x4]
	int MatchScore;//[Offset: 0x5cc, Size: 0x4]
	int KDERAverage;//[Offset: 0x5d0, Size: 0x4]
	int KDERNum;//[Offset: 0x5d4, Size: 0x4]
	int AILevel;//[Offset: 0x5d8, Size: 0x4]
	BrilliantInfo BrilliantInfo;//[Offset: 0x5dc, Size: 0x24]
	bool bSubJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	FString IPCountry;//[Offset: 0x608, Size: 0x10]
	<FString,FString> MLTags;//[Offset: 0x618, Size: 0x50]
	FString VoiceID;//[Offset: 0x668, Size: 0x10]
	bool bSubJoined;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	int ReplaceUID;//[Offset: 0x67c, Size: 0x4]
	int DailyWinTime;//[Offset: 0x680, Size: 0x4]
	int FinisherID;//[Offset: 0x684, Size: 0x4]
	<int,int> LegendToFinisherID;//[Offset: 0x688, Size: 0x50]
	int DefaultEquipIndex;//[Offset: 0x6d8, Size: 0x4]
	int LoadoutID;//[Offset: 0x6dc, Size: 0x4]
	int GameNum;//[Offset: 0x6e0, Size: 0x4]
	int BRGameNum;//[Offset: 0x6e4, Size: 0x4]
	int sub_mode_group_game_num;//[Offset: 0x6e8, Size: 0x4]
	uint32 RoomPlayerCount;//[Offset: 0x6ec, Size: 0x4]
	int64 BanOBEndTime;//[Offset: 0x6f0, Size: 0x8]
	FString BanOBReasonText;//[Offset: 0x6f8, Size: 0x10]
	int64 BanChatEndTime;//[Offset: 0x708, Size: 0x8]
	int64 BanChatNoPerceptionEndTime;//[Offset: 0x710, Size: 0x8]
	bool bIsCommander;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	BattleItemData[] AmmoItemList;//[Offset: 0x730, Size: 0x10]
	int ArmorUpGradeCount;//[Offset: 0x740, Size: 0x4]
	SimpleTrackerData[] TrackerDetailArray;//[Offset: 0x748, Size: 0x10]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1]
	ApexPlayerState*[] TeamMatePlayerStates;//[Offset: 0x760, Size: 0x10]
	ApexTeamState* TeamState;//[Offset: 0x770, Size: 0x8]
	ApexPlayerState*[] CampMatePlayerStates;//[Offset: 0x778, Size: 0x10]
	JumpTailID JumpTailID;//[Offset: 0x7e0, Size: 0x20]
	JumpActionData JumpActionData;//[Offset: 0x800, Size: 0x20]
	enum CurrentBattleBehState;//[Offset: 0x820, Size: 0x1]
	enum PreviousBattleBehState;//[Offset: 0x821, Size: 0x1]
	delegate BattleBehStateChangedEvent;//[Offset: 0x828, Size: 0x10]
	delegate GotRecoverBannerEvent;//[Offset: 0x838, Size: 0x10]
	enum CurrentBannerState;//[Offset: 0x848, Size: 0x1]
	enum CurrentNextLifeRespawnState;//[Offset: 0x849, Size: 0x1]
	PlayerStatePartInfo PlayerStatePartInfo;//[Offset: 0x84c, Size: 0x28]
	bool bOnRespawnTeammateEndSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 0x1]
	bool bOnRescuingEndSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x875, Size: 0x1]
	uint16 DyingCount;//[Offset: 0x876, Size: 0x2]
	uint16 DyingTimeoutSec;//[Offset: 0x878, Size: 0x2]
	uint16 DyingRealtimeSec;//[Offset: 0x87a, Size: 0x2]
	delegate OnTeammateEnterDying;//[Offset: 0x880, Size: 0x10]
	delegate OnTeamDeadDelegate;//[Offset: 0x890, Size: 0x10]
	DamageEvent DyingDamageEvent;//[Offset: 0x8a0, Size: 0x10]
	Controller* DyingEventInstigator;//[Offset: 0x8b0, Size: 0x8]
	Actor* DyingDamageCauser;//[Offset: 0x8b8, Size: 0x8]
	TimerHandle DyingInvincibleTH;//[Offset: 0x8c0, Size: 0x8]
	ApexCharacterMapFlags* ApexCharacterMapFlags;//[Offset: 0x8c8, Size: 0x8]
	byte CloseFlagDynamicOutLineSignal;//[Offset: 0x8d0, Size: 0x1]
	uint16 RespawningTimeoutSec;//[Offset: 0x8d2, Size: 0x2]
	uint16 ShownRespawningTimeoutSec;//[Offset: 0x8d4, Size: 0x2]
	bool IsAfterEnterOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d6, Size: 0x1]
	uint16 RespawningRealtimeSec;//[Offset: 0x8d8, Size: 0x2]
	uint16 ShownRespawningRealtimeSec;//[Offset: 0x8da, Size: 0x2]
	bool bTeamHoldRecoverBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 0x1]
	bool bSwitchHoldBannerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 0x1]
	byte RespawnTeammateRealTimeSec;//[Offset: 0x8de, Size: 0x1]
	ApexRespawnBeacon* CapturedRespawnBeacon;//[Offset: 0x8e0, Size: 0x8]
	bool bRescueOtherSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	float BeingRescueTimeSec;//[Offset: 0x8fc, Size: 0x4]
	float BeingRescueRealTimeSec;//[Offset: 0x900, Size: 0x4]
	int RescuingSourcePlayerKey;//[Offset: 0x908, Size: 0x4]
	int CachedRescuingTargetPlayerKey;//[Offset: 0x90c, Size: 0x4]
	Actor* RescueJoinObject;//[Offset: 0x910, Size: 0x8]
	bool bRescuingFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x919, Size: 0x1]
	bool bAutonomousGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91a, Size: 0x1]
	int[] KillMePlayerKeySet;//[Offset: 0x920, Size: 0x10]
	ApexCharacter* CharacterOwner;//[Offset: 0x988, Size: 0x8]
	bool bCanShowTreasureDoorOnMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	int CachedFinisherTargetPlayerKey;//[Offset: 0x9e4, Size: 0x4]
	bool bIsCharacterInCirclePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1]
	bool bIsNetLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1]
	float PingStatusRefreshInterval;//[Offset: 0xa08, Size: 0x4]
	float BadPingThreshold;//[Offset: 0xa0c, Size: 0x4]
	float NetLostPingValue;//[Offset: 0xa10, Size: 0x4]
	bool bIsNetBadPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14, Size: 0x1]
	uint32 AIHostPlayerKey;//[Offset: 0xa20, Size: 0x4]
	bool bAIHosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	int AIHostFunc1;//[Offset: 0xa28, Size: 0x4]
	int AIHostFunc2;//[Offset: 0xa2c, Size: 0x4]
	int AIHostFunc3;//[Offset: 0xa30, Size: 0x4]
	int AIHostFunc4;//[Offset: 0xa34, Size: 0x4]
	int AIHostFunc5;//[Offset: 0xa38, Size: 0x4]
	int RepLootAreaID;//[Offset: 0xa40, Size: 0x4]
	Vector DeadLocation;//[Offset: 0xa70, Size: 0xc]
	int[] UseHarvesterMapIndex;//[Offset: 0xa80, Size: 0x10]
	FString OpenId;//[Offset: 0xa90, Size: 0x10]
	int64 OriginalGameID;//[Offset: 0xaa0, Size: 0x8]
	bool bIsHaveVIPCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 0x1]
	ApexPlayerStateActivityComponent* ActivityComponent;//[Offset: 0xab0, Size: 0x8]
	int RespawnTag;//[Offset: 0xab8, Size: 0x4]
	int ReSpawnNumber;//[Offset: 0xabc, Size: 0x4]
	bool IsReSpawningByNextLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 0x1]
	int SkillAssistShowType;//[Offset: 0xb18, Size: 0x4]
	bool bAllSkillAssistEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1c, Size: 0x1]
	SkillAssistData[] SkillAssistArray;//[Offset: 0xb20, Size: 0x10]
	LegendAssistData[] LegendAssistArray;//[Offset: 0xb30, Size: 0x10]
	int SkillPredictionGlobalKey;//[Offset: 0xb40, Size: 0x4]
	bool bIsPerkOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb45, Size: 0x1]
	LegendCustomPerksInfo[] PerksPlan;//[Offset: 0xb48, Size: 0x10]
	int SelectPerksPlanIndex;//[Offset: 0xb58, Size: 0x4]
	<int,LegendCustomPerksPlan> LegendCustomPerksMap;//[Offset: 0xb60, Size: 0x50]
	<int,int> PutOnPerksIndexMap;//[Offset: 0xbb0, Size: 0x50]
	DSPlayerGunAmuletInfo[] GunAmuletArray;//[Offset: 0xc00, Size: 0x10]
	int[] InGameChatBlockPlayerKeyList;//[Offset: 0xc68, Size: 0x10]
	PlayerABTag[] PlayerABTags;//[Offset: 0xc78, Size: 0x10]
	void WaitAutonomousPlayerState();// 0x7a25298
	void UpdateSkillCastTimes(const ApexCharacter* ApexChar, int SkillConfigId, int NewTimes);// 0xa0eaec4
	void TryRecoverDeathTipBar();// 0x7a257a8
	void TickRespawnTeammate();// 0xa0ebbc8
	void TickRespawning();// 0xa0ebe58
	void TickRescuing();// 0xa0eb4b4
	void TickDying();// 0xa0ec4c4
	void SyncTeamInfoFromLua();// 0x7a272e0
	void SynchronizePlayerStatePartInfo();// 0x7a252c0
	Actor* SpawnRespawnAircraft();// 0xa0eb998
	void ShowRetrieveStatusHeadFlags(out const Vector CurLocation, uint16 CurTimeoutSec, uint16 CurShownTimeoutSec);// 0xa0ebe74
	void ShowAidStatusHeadFlags(uint16 CurDyingCount, uint16 CurTimeoutSec, out const Vector CurLocation, enum InFlag);// 0xa0ec240
	void SetWantSingleParachuteValkyrie(bool NewIsSingleParachute);// 0x7a26c6c
	void SetWantSingleParachutePlane(bool NewIsSingleParachute);// 0x7a26d7c
	void SetSubJoin(bool Value);// 0x7a25198
	void SetSkillAssistEnable(int SkillConfigId, bool bEnable);// 0x7a2391c
	void SetSelectingState(bool bNewSelecting);// 0x7a26e94
	void SetRespawnTag(const int InRespawnTag);// 0x7a23ea4
	void SetLegendAssistEnable(int LegendConfigId, bool bEnable);// 0x7a237c0
	void SetKillMePlayerKeySet(int KillerKey);// 0x7a2452c
	void SetJumpTailID(JumpTailID NewJumpTailID);// 0x7a265c0
	void SetJumpActionData(JumpActionData NewJumpActionData);// 0x7a25d20
	void SetFinisherID(int InFinisherID);// 0x7a26b94
	void SetDyingDamageInfo(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xa0ec980
	void SetCloseFlagDynamicOutLine();// 0x7a25270
	void SetCharacterShieldMax(out const float NewValue);// 0x7a27e70
	void SetCharacterShieldLevel(out const int NewValue);// 0x7a27d90
	void SetCharacterShieldHealing(out const float NewValue);// 0x7a27bd0
	void SetCharacterShield(out const float NewValue);// 0x7a27f50
	void SetCharacterHelmetLevel(out const int NewValue);// 0x7a27cb0
	void SetCharacterHealthMax(out const float NewValue);// 0x7a28110
	void SetCharacterHealthHealing(out const float NewValue);// 0x7a28030
	void SetCharacterHealth(out const float NewValue);// 0x7a281f0
	void SetAutonomousGameOver(bool bFlag);// 0x5919644
	void ServerSwitchCurrentLobaMarketInfo(LobaBlackMarket* SwitchToLobaMarket);// 0xa0eac84
	void ServerSecRespawnFlow(RespawnFlowData RespawnFlowData);// 0x7a24fb0
	void SaveAllSkillCDData(const ApexCharacter* ApexChar, enum SaveReason);// 0x7a2438c
	void RPC_PlayerExitReason(byte thePlayerExitReason);// 0xa0ecfc4
	void RPC_ClientNotifyZoneID(FString InZoneID, int InTeamId, int InCampId, FString InVoiceID);// 0x7a257fc
	void RespawnTeammateSuccess();// 0xa0eb9f0
	bool RespawnTeammateImmediately(ApexRespawnBeacon* RespawnBeacon);// 0xa0eba0c
	void RespawnTeammateFailure();// 0xa0eb9d4
	void RespawnTeammateEnd(enum Reason);// 0xa0ebaf0
	void ResetRespawnTag();// 0x7a23e84
	void RescuingSelfEnd(enum Reason, bool bReviveFlow);// 0x7a24ad0
	void RescuingEnd(enum Reason, bool bReviveFlow);// 0xa0eb34c
	bool RescueOtherEnd(enum Reason, Actor* TargetActor, bool bUseRobotRescue);// 0x7a248d4
	void RemoveRecoverBanner(int InPlayerKey);// 0x7a24734
	void RemoveOutlineOverrideId(enum SourceType, int ID);// 0x7a23b54
	void RemoveInGameChatBlockPlayerByUID(int InUID);// 0x7a22684
	void RemoveInGameChatBlockPlayerByPlayerKey(int InPlayerKey);// 0x7a224cc
	int RecoverBannerNum();// 0x7a24610
	void ReceiveTeamMateDyingLocation(uint32 MatePlayerKey, Vector MateLocation);// 0xa0ec5dc
	void ReceiveCompletelyDie();// 0xa0eb7c0
	void ReceiveAuthRespawnTimeout();// 0xa0eb7dc
	void ReceiveAuthRespawnTeammateEnd();// 0xa0eb960
	void ReceiveAuthRespawnTeammate();// 0xa0ebbe4
	void ReceiveAuthRespawning();// 0xa0ec070
	void ReceiveAuthRescuingInfo();// 0xa0eb4d0
	void ReceiveAuthRescuingEnd();// 0xa0eb258
	void ReceiveAuthExit(ApexPlayerState* ExitPlayerState);// 0xa0ed0b8
	void ReceiveAuthDyingInfo();// 0xa0ec760
	void ProcessBattleBehState();// 0x7a252ac
	bool PlayerSetSkillAssist(int SkillConfigId);// 0x7a236b0
	bool PlayerSetLegendAssist(int LegendConfigId);// 0x7a2347c
	void PingSelfBanner();// 0x7a25150
	void PickBannerFlow(uint32 InPlayerKey);// 0x7a24ee0
	void PassiveBreakRescuing();// 0xa0eb23c
	void OnRep_ValidSkinArray();// 0x7a25bf4
	void OnRep_ValidLegendArray();// 0x4d3afec
	void OnRep_TeamMatePlayerStates();// 0xa0ecc50
	void OnRep_TeamIdx();// 0xa0ecc6c
	void OnRep_TeamId();// 0x4db3af8
	void OnRep_TeamHoldRecoverBanner();// 0xa0ebe3c
	void OnRep_SubJoin();// 0x7a25ae0
	void OnRep_SkillPredictionGlobalKey();// 0x5e647cc
	void OnRep_SingleParachute();// 0x4fd8aa0
	void OnRep_ServerLocation();// 0x4a2af84
	void OnRep_SelectPerksPlanIndex();// 0xa1d39f8
	void OnRep_SegmentLevel();// 0x7a25b0c
	void OnRep_RespwningRealtimeSec();// 0x49d5030
	void OnRep_ReSpawnNumber();// 0x7a23e04
	void OnRep_RepUseHarvester(int[] PreArray);// 0x5ffed54
	void OnRep_RepLootAreaID();// 0x54dbfb8
	void OnRep_Rating();// 0xa1d39f8
	void OnRep_PlayerStatePartInfo(PlayerStatePartInfo PrevPartInfo);// 0x50f1b7c
	void OnRep_PlayerItemInfos();// 0x4c42a14
	void OnRep_PlayerBannerState(enum Previous);// 0x4f6de00
	void OnRep_PerksPlan();// 0xa1d39f8
	void OnRep_MpWeaponInfo();// 0x5be54a4
	void OnRep_MinGuaranteeLegends();// 0xa1d39f8
	void OnRep_LoadoutID();// 0x7a25b58
	void OnRep_LimitValidLegendArray();// 0xa1d39f8
	void OnRep_LegendSkin();// 0xa0ecc88
	void OnRep_LegendLevel();// 0x7a25b44
	void OnRep_LegendId();// 0x4ec3ef4
	void OnRep_IsUseSecIcon();// 0x611f84c
	void OnRep_IsPerkOpen();// 0xa1d39f8
	void OnRep_IsCommander();// 0x4edbc28
	void OnRep_HasSendBattleResult();// 0x4f967d0
	void OnRep_ForceAllowDamagePlayerKeys();// 0x5d94cdc
	void OnRep_FinisherID();// 0xa1d39f8
	void OnRep_EquipSkinArray();// 0xa1d39f8
	void OnRep_EnableParachuteTransOrLeaveOrFollow();// 0x7a25b6c
	void OnRep_DyingRealtimeSec();// 0x499b3e8
	void OnRep_DoLikeUIDs();// 0x7a26fb4
	void OnRep_DefaultEquipIndex();// 0x7a25af4
	void OnRep_DailyWinTime();// 0xa1d39f8
	void OnRep_CurrentNextLifeRespawnState(enum Previous);// 0x7a25440
	void OnRep_CurrentEmotePaintingData();// 0x7a26f94
	void OnRep_CurrentBannerData();// 0xa1d39f8
	void OnRep_ConfirmLegendID();// 0xa0ecc18
	void OnRep_CloseFlagDynamicOutLineSignal();// 0x5e12ad0
	void OnRep_ChooseLegendID();// 0xa0ecc34
	void OnRep_CanShowTreasureDoorOnMiniMap();// 0x5e5c398
	void OnRep_CampMatePlayerStates();// 0x5783954
	void OnRep_CampId();// 0x7a25b80
	void OnRep_bSelecting();// 0x7a26f6c
	void OnRep_bIsNetLost();// 0x55e4210
	void OnRep_bIsNetBadPing();// 0x7a23fb8
	void OnRep_BattleInfoGroup();// 0xa1d39f8
	void OnRep_bAIHosting();// 0x7a23f90
	void OnRep_AlreadyWinTheGame();// 0x7a26f80
	void OnRep_AIHostPlayerKey();// 0x7a23fa4
	void OnRep_AIHostFunc();// 0x7a23f7c
	void OnReceivedValidSkinArray();// 0xa1d39f8
	void OnPopupDeathTipBar();// 0x7a25794
	void OnPlayerControllerRespawn();// 0x7a24514
	void OnPlayerControllerExit();// 0x7a24500
	void NotifyGuidePickBanner();// 0x7a2542c
	bool IsUsingRescueRobots();// 0x7a24c84
	bool IsTeammateHaveSameItem(int ItemID);// 0x7a241cc
	bool IsTeammate(PlayerState* PlayerState, bool bCheckHostile);// 0x7a27658
	bool IsSoloing();// 0x7a24cbc
	bool IsSkillAssistEnableByConfigId(int idSkillConfig);// 0x7a23a78
	bool IsSkillAssistEnable(int SkillConfigId);// 0x7a2358c
	bool IsPlayerNormalOrDyingAlive();// 0x7a278d0
	bool IsPlayerNormalAlive();// 0x7a27968
	bool IsPlayerDyingAlive();// 0x7a27908
	bool IsPlayerAliveOrDying();// 0x7a279a0
	bool IsPlayerAlive();// 0x7a279d8
	bool IsParachuteValkyrieCommander();// 0x7a26af0
	bool IsParachutePlaneCommander();// 0x7a26b28
	bool IsLegendAssistEnable(int LegendConfigId);// 0x7a23358
	bool IsInGameChatBlockPlayerKeyListContainPlayerKey(int InPlayerKey);// 0x7a223f0
	bool IsInFinisher();// 0xa0ead8c
	bool IsCommand(int InLegendId);// 0xa0ecefc
	void InvisibleStatusHeadFlags(bool bInvisible);// 0xa0ec144
	void HideStatusHeadFlags();// 0xa0ec224
	bool HasRecoverBanner(int InPlayerKey);// 0x7a24644
	void HandleMsg(enum Msg);// 0x7a242a8
	void HandleBattleBehState();// 0x7a256b0
	void GuidePickBanner(enum TeamMateBannerState, int TeammatePlayerKey);// 0x7a252d4
	bool GetWillSingleParachuteValkyrie();// 0x7a26d44
	bool GetWillSingleParachutePlane();// 0xa0eceac
	bool GetWantSingleParachuteValkyrie();// 0xa0ece90
	bool GetWantSingleParachutePlane();// 0xa0ecee0
	ApexPlayerState* GetValkyrieParachuteCommanderState();// 0x7a26abc
	void GetTeamMatePlayerStates(out ApexPlayerState*[] OutList, bool ExcludeMyself);// 0x7a274ac
	byte GetTeamMateNum();// 0xa0ece34
	bool GetSelectingState();// 0x7a26e54
	int GetRespawnTag();// 0x7a23e50
	JumpTailID GetRawJumpTailID();// 0x7a267cc
	int GetPlayerKey();// 0xa0ed09c
	LegendCustomPerksInfo[] GetPerksPlan();// 0x7a231d4
	ApexPlayerState* GetParachutePlaneCommanderState();// 0x7a26b60
	bool GetMicroOpenByUID(uint64 UserID);// 0x7a271bc
	FText GetLocalizedLegendName();// 0x7a27114
	FText GetLegendName(int LegendID);// 0x7a26fc8
	int GetJumpTailID();// 0xa0ecca4
	JumpActionData GetJumpActionRawData();// 0x7a261ec
	int GetJumpActionDataIndex(int Index);// 0xa0ecd0c
	int[] GetJumpActionData();// 0x7a25c50
	enum GetCurBattleBehState();// 0xa0ecbfc
	float GetCharacterShieldMax();// 0x7a2836c
	int GetCharacterShieldLevel();// 0x7a28338
	float GetCharacterShieldHealing();// 0x7a282d0
	float GetCharacterShield();// 0x7a283a0
	int GetCharacterHelmetLevel();// 0x7a28304
	float GetCharacterHealthMax();// 0x7a28408
	float GetCharacterHealthHealing();// 0x7a283d4
	float GetCharacterHealth(float DefaultValue);// 0x7a2843c
	ApexCharacter* GetCharacter();// 0x7a2789c
	void GetCampMatePlayerStates(out ApexPlayerState*[] OutList, bool ExcludeMyself);// 0x7a27300
	float GetApexExactPing();// 0xa0ead5c
	int GetAmmoNum(int AmmoID);// 0x7a269a8
	byte GetAliveTeamMateNum();// 0x7a26974
	byte GetAliveOrDyingTeamMateNum();// 0x5e31d70
	void GenAuthRespawnTeammate(ApexRespawnBeacon* CapturedBeacon);// 0xa0ebc00
	void GenAuthRespawningInfo();// 0xa0ec08c
	void GenAuthRescuingInfoAsTarget(ApexPlayerState* RescueSource, bool UsingRobot);// 0xa0eb4ec
	void GenAuthRescuingInfo(int OtherPlayerKey, bool UsingRobot);// 0xa0eb65c
	void GenAuthGotTreasureKey();// 0xa0eaea8
	void GenAuthGotRecoverBanner(uint32 InPlayerKey, bool bDefaultPlayAnim);// 0xa0ebcd8
	void GenAuthFinisherInfo(int OtherPlayerKey);// 0x7a240fc
	void GenAuthDyingInfo(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xa0ec77c
	void GenAuthDropTreasureKey();// 0xa0eae8c
	void GenAuthCancelRespawnTeammate();// 0xa0eb97c
	void GenAuthCancelRescuing(int OtherPlayerKey);// 0xa0eb274
	void GenAuthCancelFinisher(int OtherPlayerKey);// 0x7a2402c
	void FinisherEnd(enum Reason);// 0xa0eadb4
	int FindGunAmuletID(int InGunItemID);// 0x7a230b8
	void ExitRescuingFrame();// 0x7a24c30
	void EnableCloseEyeEffect();// 0xa0ec128
	void DyingTimeout(bool bFollowTeamDead);// 0xa0ec4fc
	void DyingNotifyLocation();// 0xa0ec744
	void DyingInvincibleTimeout();// 0xa0ecbc4
	void DyingInvincible();// 0xa0ecbe0
	void DyingFatal();// 0xa0ec4e0
	void DuplicateByAnotherPlayerState(const ApexPlayerState* PlayerState);// 0x7a277cc
	void DisplaySavedSkillCDEnergyDataDebug();// 0x7a24378
	void CompletelyDie(bool HandleDying);// 0x7a24e08
	void ClientSecRespawnFlow(uint32 Rescuer, byte ReviveFrom);// 0xa0eb7f8
	void ClientRefreshLobaMarketInfo(LobaBlackMarket* SwitchToLobaMarket, const SearchedPickUpWrapperResult[] PickUpItemDatas);// 0x7a22ddc
	void ClientAddInteractionLobaMarketInfo(LobaBlackMarket* InLobaMarket, SearchedPickUpWrapperResult PickUpItemData);// 0x7a228f4
	void ClearRecoverBanner();// 0x7a24720
	void ClearLastTimeCharData();// 0x7a244ec
	void ClearAllBehState();// 0xa0eb220
	void CheckTeamRecoverBanner();// 0x7a245fc
	bool CheckTeamHasRespawn();// 0x7a24cf4
	bool CheckTeamAlive(ApexPlayerState* Except);// 0x7a24d2c
	void ChangePlayerBannerState(enum Next);// 0x7a255e0
	void ChangeCurrentNextLifeRespawnState(enum Next);// 0x7a25510
	void ChangeBattleBehState(enum Next);// 0x7a256c4
	bool CanUseRescueRobot();// 0x7a24c4c
	bool CanRespawnByNextLife();// 0x7a23e18
	bool CanRescueSelf();// 0xa0ec0e8
	bool CanGotoRespawn();// 0xa0ec0a8
	bool CanGotoDying();// 0xa0ecb84
	bool CanBeParachutePlaneCommander();// 0xa0ece54
	void CallOnRep_TeamMatePlayerStates();// 0x7a257bc
	void CallOnRep_TeamIdxFromLua();// 0x7a257dc
	void BreakRescueOther();// 0x7a25284
	Actor* AuthPingRespawnBeacon();// 0x7a25164
	void AuthExit();// 0x7a28514
	void ApplyLegendRes_Notify(int TeamIndex, int ApplyLegendID);// 0xa1d39f8
	void ApplyLegendRes(int TeamIndex, int ApplyLegendID);// 0xa0eb0b8
	void AddRecoverBanner(int InPlayerKey);// 0x7a24804
	void AddOutlineOverrideId(enum SourceType, int ID);// 0x7a23cac
	void AddInGameChatBlockPlayerByUID(int InUID);// 0x7a22824
	void AddInGameChatBlockPlayerByPlayerKey(int InPlayerKey);// 0x7a22754
	void AddCharacterShield(out const float AddValue);// 0x7a27a10
	void AddCharacterHealth(out const float AddValue);// 0x7a27af0

--------------------------------
Class: BackpackItemInfo
	int AmmoID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BannerData
	int LegendID;//[Offset: 0x0, Size: 0x4]
	int SkinID;//[Offset: 0x4, Size: 0x4]
	int FrameID;//[Offset: 0x8, Size: 0x4]
	int PosID;//[Offset: 0xc, Size: 0x4]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	int KillNum;//[Offset: 0x20, Size: 0x4]
	int PlayerKey;//[Offset: 0x24, Size: 0x4]
	ServerBadgeData[] BadgeDataArray;//[Offset: 0x28, Size: 0x10]
	ServerTrackerData[] TrackerDataArray;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ServerBadgeData
	int BadgeID;//[Offset: 0x0, Size: 0x4]
	int Process;//[Offset: 0x4, Size: 0x4]
	int Status;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ServerTrackerData
	int TrackerID;//[Offset: 0x0, Size: 0x4]
	int Process;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LegendEmotePaintingInfo
	int[] EmotePaintingID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MpWeaponInfo
	MpWeaponUseTimeData[] WeaponUseTimeMap;//[Offset: 0x0, Size: 0x10]
	MpWeaponFittingData[] FittingDataArray;//[Offset: 0x10, Size: 0x10]
	int[] LastWeaponArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MpWeaponUseTimeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int UseTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MpWeaponFittingData
	int ID;//[Offset: 0x0, Size: 0x4]
	int WeaponFittingItemID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LegendSkinData
	int LegendSkinID;//[Offset: 0x0, Size: 0x4]
	bool IsFavor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PlayerEquipSkinInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int SkinID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameModePlayerBattleInfoGroup
	GameModePlayerLastBattleInfo LastBattleInfo;//[Offset: 0x0, Size: 0x14]

--------------------------------
Class: GameModePlayerLastBattleInfo
	int Rank;//[Offset: 0x0, Size: 0x4]
	int TeamRank;//[Offset: 0x4, Size: 0x4]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DamageAmount;//[Offset: 0xc, Size: 0x4]
	int SurviveTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BrilliantInfo
	float ComboKillAvg;//[Offset: 0x0, Size: 0x4]
	float HeadShotRateAvg;//[Offset: 0x4, Size: 0x4]
	float DamageTImeRecoveryHPAvg;//[Offset: 0x8, Size: 0x4]
	float VerticalDamageAvg;//[Offset: 0xc, Size: 0x4]
	float BehiindDamageAvg;//[Offset: 0x10, Size: 0x4]
	float KillAvg;//[Offset: 0x14, Size: 0x4]
	float AssistAvg;//[Offset: 0x18, Size: 0x4]
	float DamageAvg;//[Offset: 0x1c, Size: 0x4]
	int GameNum;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SimpleTrackerData
	float Value;//[Offset: 0x0, Size: 0x4]
	int TrackerID;//[Offset: 0x4, Size: 0x4]
	int LegendID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexTeamState.Info.Actor.Object
	ApexPlayerState*[] TeamMembers;//[Offset: 0x270, Size: 0x10]
	int TeamID;//[Offset: 0x280, Size: 0x4]
	TeamEventFlowManager* TeamEventFlowManager;//[Offset: 0x288, Size: 0x8]
	MapComponent* TeamStateMap;//[Offset: 0x290, Size: 0x8]
	void OnServerPSPossessedByChange();// 0x7a4c418
	void OnCharacterGotoDie(ApexCharacter* HandleCharacter, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7a4c42c
	bool IsInTeam(Controller* Controller);// 0x7a4c678

--------------------------------
Class: TeamEventFlowManager.EventFlowManager.ActorComponent.Object
	UserWidget* EventFlowDebugPanel;//[Offset: 0x1e0, Size: 0x8]

--------------------------------
Class: EventFlowManager.ActorComponent.Object
	<EventFlowBase*> PreUnderwayEventFlowList;//[Offset: 0xf8, Size: 0x50]
	EventFlowBase*[] UnderwayEventFlowList;//[Offset: 0x148, Size: 0x10]
	EventFlowBase*[] PreFinishedEventFlowList;//[Offset: 0x158, Size: 0x10]
	EventFlowBase*[] FinishedEventFlowList;//[Offset: 0x168, Size: 0x10]
	delegate OnEventFlowActived;//[Offset: 0x178, Size: 0x10]
	delegate OnEventFlowFinished;//[Offset: 0x188, Size: 0x10]
	delegate OnUnderwayEventFlowRemoved;//[Offset: 0x198, Size: 0x10]
	delegate OnFinishedEventFlowRemoved;//[Offset: 0x1a8, Size: 0x10]
	EventFlowElementBase*[] TickableElements;//[Offset: 0x1b8, Size: 0x10]
	class EventFlowBase* SupportEventFlowType;//[Offset: 0x1c8, Size: 0x8]
	void RemoveEventFlowInstance(EventFlowBase* EventFlowInstance);// 0x63aee28
	void RemoveEventFlow(class EventFlowBase EventFlow);// 0x63aedac
	void OnUnderwayEventFlowRemoved__DelegateSignature(EventFlowBase* EventFlow);// 0xa1d39f8
	void OnRep_UnderwayEventFlowList();// 0x5dddf10
	void OnRep_FinishedEventFlowList();// 0x61c42e0
	void OnFinishedEventFlowRemoved__DelegateSignature(EventFlowBase* EventFlow);// 0xa1d39f8
	void OnEventFlowFinished__DelegateSignature(EventFlowBase* EventFlow);// 0xa1d39f8
	void OnEventFlowActived__DelegateSignature(EventFlowBase* EventFlow);// 0xa1d39f8
	bool IsEventFlowExistInUnderwayList(class EventFlowBase EventFlow);// 0x63aed24
	bool IsEventFlowExistInFinishList(class EventFlowBase EventFlow);// 0x63aec9c
	bool IsEventFlowExist(class EventFlowBase EventFlow);// 0x63aec14
	void ActiveEventFlowInstance(EventFlowBase* EventFlowInstance);// 0x63aeea4

--------------------------------
Class: EventFlowBase.Object
	EventFlowManager* Owner;//[Offset: 0x28, Size: 0x8]
	enum EventFlowState;//[Offset: 0x30, Size: 0x1]
	EventFlowSequenceBase*[] StartSequences;//[Offset: 0x38, Size: 0x10]
	<EventFlowSequenceBase*> PreActivedSequences;//[Offset: 0x48, Size: 0x50]
	EventFlowSequenceBase*[] ActivedSequences;//[Offset: 0x98, Size: 0x10]
	delegate OnSequenceActived;//[Offset: 0xa8, Size: 0x10]
	delegate OnSequenceDeactived;//[Offset: 0xd0, Size: 0x10]
	void OnSequenceDeactived__DelegateSignature(EventFlowSequenceBase* DeactivedSequence);// 0xa1d39f8
	void OnSequenceActived__DelegateSignature(EventFlowSequenceBase* ActivedSequence);// 0xa1d39f8
	void OnRep_StartSequences();// 0x5d9d8e0
	void OnRep_Owner();// 0x5ab2b14
	void OnRep_ActivedSequences();// 0x5830730
	bool IsLocalController();// 0x63ac5b8
	bool InvokeInterruptFlowByNodeName(FName StopNodeName, bool MarkInterruptAlways);// 0x63ac64c
	bool HasAuthority();// 0x63ac5f0
	void EventFlowStart();// 0xa1d39f8

--------------------------------
Class: EventFlowSequenceBase.EventFlowNode.Object
	EventFlowSequenceBase* PrevSequence;//[Offset: 0x50, Size: 0x8]
	EventFlowBase* OwningEventFlow;//[Offset: 0x58, Size: 0x8]
	FText Describe;//[Offset: 0x60, Size: 0x18]
	EvaluateEventFlowParameter EvaluateDescribe;//[Offset: 0x78, Size: 0x10]
	int NodeID;//[Offset: 0x88, Size: 0x4]
	bool bReportTLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	enum[] ElementLogics;//[Offset: 0x90, Size: 0x10]
	byte InstancedCount;//[Offset: 0xa0, Size: 0x1]
	bool bIsInterruptAlways;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	bool IsSequenceFinished();// 0x9f22034
	bool HasShownElement();// 0x63b0134
	enum[] GetElementLogics();// 0x63b00ac
	FText GetDescribe();// 0x63b01b4
	void ConstructAndActiveSequence(EventFlowBase* InOwner);// 0x63aff74
	static bool CanReinstanceSequence(EventFlowSequenceBase* Sequence, byte MaxInstanceCount);// 0x63afff0

--------------------------------
Class: EventFlowNode.Object
	EventFlowNode*[] PrevNodes;//[Offset: 0x28, Size: 0x10]
	EventFlowNode*[] NextNodes;//[Offset: 0x38, Size: 0x10]
	EventFlowNode* GeneratedByTemplate;//[Offset: 0x48, Size: 0x8]
	bool IsEvaluateBound(out const EvaluateEventFlowParameter Evaluator);// 0x63af778
	bool ExecuteEvaluate(out const EvaluateEventFlowParameter Evaluator);// 0x63af624

--------------------------------
Class: EvaluateEventFlowParameter

--------------------------------
Class: EventFlowElementBase.EventFlowNode.Object
	EventFlowSequenceBase* OwningSequence;//[Offset: 0x50, Size: 0x8]
	bool bIsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIsOptional;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bTickable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bLocalJudgment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bIsShow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	FText Describe;//[Offset: 0x60, Size: 0x18]
	EvaluateEventFlowParameter EvaluateDescribe;//[Offset: 0x78, Size: 0x10]
	void SetElementUnfinishedToServer();// 0x9f21d9c
	void SetElementUnfinish();// 0x63ad720
	void SetElementFinishedToServer(const FName EventName);// 0x63ad69c
	void SetElementFinished(out const EventFlowFinishEvent OnElementFinishedEvent, FName EventName);// 0x5c9eafc
	void ReceiveWhenTick(float DeltaSeconds);// 0xa1d39f8
	void ReceiveWhenDeactive();// 0xa1d39f8
	void ReceiveWhenConstruct();// 0xa1d39f8
	void ReceiveWhenActive();// 0xa1d39f8
	FText ReceiveGetDescribe();// 0xa1d39f8
	void OnRep_IsFinished();// 0x9f21ee4
	Actor* GetManagerOwner();// 0x9f21eb0
	EventFlowManager* GetManager();// 0x63ad980
	bool GetIsShow();// 0x9f21e68
	bool GetIsOptional();// 0x9f21e8c
	EventFlowBase* GetEventFlow();// 0x63ad9d4
	EventFlowElementBase* GetElementTemplate();// 0x63ad874
	FText GetDescribeEx();// 0x63ad734
	FText GetDescribe();// 0x9f21db8
	void ForceFinishElementToServer(const FName EventName);// 0x63ad618

--------------------------------
Class: EventFlowFinishEvent
	delegate OnEventFlowNodeFinished;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MapComponent.ActorComponent.Object
	float MiniMapUpdateInterval;//[Offset: 0x100, Size: 0x4]
	<int,MiniMapDynimicUpdateInfo> NeedUpdateDynamicActors;//[Offset: 0x108, Size: 0x50]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemInfos;//[Offset: 0x158, Size: 0x10]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemAddInfos;//[Offset: 0x168, Size: 0x10]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemChangeInfos;//[Offset: 0x178, Size: 0x10]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemRemoveInfos;//[Offset: 0x188, Size: 0x10]
	MiniMapSkillItemInfo[] ClientSideApexMiniMapDynamicItemInfos;//[Offset: 0x198, Size: 0x10]
	RepMiniMapPlayerInfo[] ApexMiniMapPlayerInfos;//[Offset: 0x1a8, Size: 0x10]
	<int,MiniMapSkillItemInfo> ClientSideFMiniMapPlayerInfo;//[Offset: 0x1b8, Size: 0x50]
	<ApexPlayerState*,int> MiniMapPlayers;//[Offset: 0x208, Size: 0x50]
	ApexTeamState* OwnerTeamState;//[Offset: 0x258, Size: 0x8]
	void UpdateMapItemDynamicLocAndRotInfo(int Index, Vector Location, float Yaw);// 0x7d29ae0
	void SetMapItemDynamicNeedUpdateLoc(int Index, Actor* InCheckActor, bool bNeedUpdateYaw);// 0x7d29730
	void RemoveMapPlayerInfo(ApexPlayerState* Character, enum InfoMask);// 0x7d28ca0
	void RemoveMapItemDynamicInfo(int Index);// 0x7d298ec
	void OnRep_ApexMiniMapPlayerInfos();// 0x466887c
	void OnRep_ApexMiniMapDynamicItemInfos();// 0x50e25d4
	MiniMapSkillItemInfo[] GetMiniMapDynamicItemRemoveInfos();// 0x7d28f10
	MiniMapSkillItemInfo[] GetMiniMapDynamicItemInfos();// 0x7d2921c
	MiniMapSkillItemInfo[] GetMiniMapDynamicItemChangeInfos();// 0x7d29014
	MiniMapSkillItemInfo[] GetMiniMapDynamicItemAddInfos();// 0x7d29118
	RepMiniMapPlayerInfo[] GetApexMiniMapPlayerInfos();// 0x7d28b9c
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemRemoveInfos();// 0x7d29320
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemInfos();// 0x7d2962c
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemChangeInfos();// 0x7d29424
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemAddInfos();// 0x7d29528
	void ChangeMapItemDynamicStateInfo(int Index, byte State);// 0x7d299a8
	void AddMapPlayerInfo(ApexPlayerState* Character, enum InfoMask);// 0x7d28dd8
	int AddMapItemDynamicInfo(enum Type, Vector Location, float Yaw, int ScaleType, float Length, bool Immediately, float Radius, byte State);// 0x7d29c94

--------------------------------
Class: MiniMapDynimicUpdateInfo
	Actor* CheckActor;//[Offset: 0x0, Size: 0x8]
	bool bNeedUpdateYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: MiniMapSkillItemInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	byte Type;//[Offset: 0x4, Size: 0x1]
	byte State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]
	float Radius;//[Offset: 0x18, Size: 0x4]
	byte ScaleType;//[Offset: 0x1c, Size: 0x1]
	float Length;//[Offset: 0x20, Size: 0x4]
	float Timespan;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: RepMiniMapPlayerInfo
	int PlayerKey;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	enum State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: JumpTailID
	int[] Key;//[Offset: 0x0, Size: 0x10]
	int[] List;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: JumpActionData
	int[] Key;//[Offset: 0x0, Size: 0x10]
	JumpActionDataList[] List;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: JumpActionDataList
	int[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PlayerStatePartInfo
	uint16 DyingCount;//[Offset: 0x0, Size: 0x2]
	uint16 DyingTimeoutSec;//[Offset: 0x2, Size: 0x2]
	uint16 DyingRealtimeSec;//[Offset: 0x4, Size: 0x2]
	uint16 RespawningTimeoutSec;//[Offset: 0x6, Size: 0x2]
	uint16 RespawningRealtimeSec;//[Offset: 0x8, Size: 0x2]
	uint16 ShownRespawningTimeoutSec;//[Offset: 0xa, Size: 0x2]
	uint16 ShownRespawningRealtimeSec;//[Offset: 0xc, Size: 0x2]
	uint16 RespawnTeammateEndSign;//[Offset: 0xe, Size: 0x2]
	uint16 RescuingEndSign;//[Offset: 0x10, Size: 0x2]
	enum CurrentBattleBehState;//[Offset: 0x12, Size: 0x1]
	enum PreviousBattleBehState;//[Offset: 0x13, Size: 0x1]
	enum CurrentBannerState;//[Offset: 0x14, Size: 0x1]
	enum CurrentNextLifeRespawnState;//[Offset: 0x15, Size: 0x1]
	Vector ServerLocation;//[Offset: 0x18, Size: 0xc]
	float RescueTimeSec;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ApexRespawnBeacon.Actor.Object
	byte RespawnCount;//[Offset: 0x2e0, Size: 0x1]
	bool bHasBeenUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	int Index;//[Offset: 0x2f0, Size: 0x4]
	Transform AircraftOffset;//[Offset: 0x300, Size: 0x30]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	byte CanRespawnNum;//[Offset: 0x335, Size: 0x1]
	float Radius;//[Offset: 0x338, Size: 0x4]
	byte ClearEffectCount;//[Offset: 0x33c, Size: 0x1]
	ParticleSystemComponent* UseableEffect;//[Offset: 0x340, Size: 0x8]
	ParticleSystemComponent* EffectTrigger;//[Offset: 0x348, Size: 0x8]
	ParticleSystem* TriggerActivate;//[Offset: 0x350, Size: 0x8]
	ParticleSystem* TriggerDeactivate;//[Offset: 0x358, Size: 0x8]
	bool bAllowInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x368, Size: 0x8]
	WidgetComponent* WidgetComponent;//[Offset: 0x370, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x378, Size: 0x8]
	ActivityDynamicMaterialComponent* DynamicMaterialComp;//[Offset: 0x380, Size: 0x8]
	int OutLineId;//[Offset: 0x388, Size: 0x4]
	bool UseComplete();// 0x7a34ec8
	bool Useable();// 0xa0edd68
	void SetOffset(Transform Offset);// 0x7a34c6c
	void SetIndex(int InIndex);// 0x7a34db0
	void OnRep_RespawnCount();// 0xa0edd4c
	void OnRep_ClearEffectCount();// 0x7a34e74
	void OnRep_Activate();// 0x7a34e98
	void OnInteractiveEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x7a345fc
	void OnInteractiveBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7a34844
	void OnHUDEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x7a34064
	void OnHUDBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7a342ac
	void OnDelayHasBeenUsed();// 0x7a34b94
	void OnBlueprintInteractiveEndOverlap(Actor* OtherActor);// 0xa1d39f8
	void OnBlueprintInteractiveBeginOverlap(Actor* OtherActor);// 0xa1d39f8
	void OnBlueprintHUDEndOverlap(Actor* OtherActor);// 0xa1d39f8
	void OnBlueprintHUDBeginOverlap(Actor* OtherActor);// 0xa1d39f8
	void NotifyUseComplete();// 0xa1d39f8
	void NotifyDeactivate();// 0xa0edcf8
	void NotifyActivate();// 0xa0edd14
	Transform GetOffset();// 0xa0edc48
	int GetIndex();// 0xa0edcbc
	void EnableInteractive(bool bEnable);// 0x7a34ba8
	void CheckUseable();// 0xa0edd30

--------------------------------
Class: ApexPlayerStateActivityComponent.ActorComponent.Object
	<int> DropItemIDArray;//[Offset: 0xf8, Size: 0x50]
	InGameActivityPlayerData[] InGameActivityPlayerDataArray;//[Offset: 0x148, Size: 0x10]
	InGameActivityPickupData[] ActivityPickupDataArray;//[Offset: 0x158, Size: 0x10]
	InGameActivityPickupData[] ClientActivityPickupDatas;//[Offset: 0x168, Size: 0x10]
	void OnRep_ActivityItemList();// 0x7a303ec
	void ClientNotifyPickupActivityItem(const PickupNotifyData PickupNotifyData);// 0x7a30400

--------------------------------
Class: InGameActivityPlayerData
	int[] ItemIDList;//[Offset: 0x0, Size: 0x10]
	int MaxCount;//[Offset: 0x10, Size: 0x4]
	int CurCount;//[Offset: 0x14, Size: 0x4]
	int64 LastPickTime;//[Offset: 0x18, Size: 0x8]
	enum PickupResult;//[Offset: 0x20, Size: 0x1]
	int64 NextPickupTime;//[Offset: 0x28, Size: 0x8]
	int TipsID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InGameActivityPickupData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 0x18]
	int count;//[Offset: 0x18, Size: 0x4]
	int64 PickTime;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SkillAssistData
	int SkillID;//[Offset: 0x0, Size: 0x4]
	bool EnableAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LegendAssistData
	int LegendID;//[Offset: 0x0, Size: 0x4]
	bool EnableAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LegendCustomPerksInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	int[] PerksID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LegendCustomPerksPlan
	LegendCustomPerksInfo[] Plan;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DSPlayerGunAmuletInfo
	int GunItemID;//[Offset: 0x0, Size: 0x4]
	int AmuletID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerABTag
	int TagType;//[Offset: 0x0, Size: 0x4]
	int TagValue;//[Offset: 0x4, Size: 0x4]
	ABTagParam[] Params;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ABTagParam
	FString ParamName;//[Offset: 0x0, Size: 0x10]
	int[] ParamValue;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LobaBlackMarket.SkillActorBase.DynamicMovementActor.Actor.Object
	FName[] BuffNames;//[Offset: 0x588, Size: 0x10]
	byte[] QueryObjectTypes;//[Offset: 0x598, Size: 0x10]
	float MinShowSquaredDist;//[Offset: 0x5a8, Size: 0x4]
	float CullDistance;//[Offset: 0x5ac, Size: 0x4]
	float AddCollectPointCharcterEnter_SphereRadius;//[Offset: 0x5b0, Size: 0x4]
	float AddCollectPointCharcterLeave_SphereRadius;//[Offset: 0x5b4, Size: 0x4]
	float TimeCanSeeButton;//[Offset: 0x5b8, Size: 0x4]
	float CheckBeStrikeVehicleStartZOffset;//[Offset: 0x5bc, Size: 0x4]
	float CheckBeStrikeVehicleHeight;//[Offset: 0x5c0, Size: 0x4]
	float CheckBeStrikeVehicleTime;//[Offset: 0x5c4, Size: 0x4]
	int SkillConfigId;//[Offset: 0x5c8, Size: 0x4]
	bool bDisbleRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1]
	float OverlapTime;//[Offset: 0x5d0, Size: 0x4]
	class Actor[] CheckBeStrikeVehicleExcludeActorType;//[Offset: 0x5d8, Size: 0x10]
	UAESkillManagerComponent* UAESkillManager;//[Offset: 0x5e8, Size: 0x8]
	SphereComponent* OverlapComp;//[Offset: 0x5f0, Size: 0x8]
	SkeletalMeshComponent* MeshComp;//[Offset: 0x5f8, Size: 0x8]
	SkillActorHealthComponent* HealthComp;//[Offset: 0x600, Size: 0x8]
	SphereComponent* OverlapComp_CollectPointCharcterEntered;//[Offset: 0x608, Size: 0x8]
	SphereComponent* OverlapComp_CollectPointCharcterLeaved;//[Offset: 0x610, Size: 0x8]
	int MaxPickItemNum;//[Offset: 0x618, Size: 0x4]
	BoxComponent* RootBox;//[Offset: 0x620, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x628, Size: 0x8]
	DynamicMovementComponent_Projetile* MovementComponent;//[Offset: 0x630, Size: 0x8]
	int CurPickItemNum;//[Offset: 0x638, Size: 0x4]
	float CollectionDeltaTime;//[Offset: 0x63c, Size: 0x4]
	bool bIsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]
	NetPickUpWrapperResult[] PickUpDataMap;//[Offset: 0x648, Size: 0x10]
	bool bCanShowCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	float DestroyWaitTime;//[Offset: 0x6fc, Size: 0x4]
	NetRecoverBannerPlayerInfo[] RecoverBannerPlayerKeys;//[Offset: 0x708, Size: 0x10]
	bool bEnableCollectRecoverBannerPlayerKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1]
	Vector BoxCollisionHalfSize;//[Offset: 0x7bc, Size: 0xc]
	class Actor[] ExcludeActorType;//[Offset: 0x7c8, Size: 0x10]
	bool bNeedResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	bool bIsShowRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 0x1]
	bool bIsShowOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7da, Size: 0x1]
	PickupManagerComponent* CachePickupManagerComponent;//[Offset: 0x7dc, Size: 0x8]
	LobaBlackMarket* CurRecycleMarket;//[Offset: 0x7e4, Size: 0x8]
	ApexCharacter* CurWorkingCharacter;//[Offset: 0x7ec, Size: 0x8]
	bool bShowAsGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 0x1]
	SearchedPickUpWrapperResult[] ClientSearchedPickUpWrapperResultList;//[Offset: 0x7f8, Size: 0x10]
	SearchedPickUpWrapperResult[] PickingItemList;//[Offset: 0x808, Size: 0x10]
	SearchedPickUpWrapperResult[] PickedItemList;//[Offset: 0x818, Size: 0x10]
	Actor*[] ShoppingActorList;//[Offset: 0x848, Size: 0x10]
	ApexCharacter*[] AddCollectPointCharcterList;//[Offset: 0x868, Size: 0x10]
	bool bPickGrenadeFromBlackMarktDoNotConsume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1]
	SoftObjectPath[] LobaMainUIs;//[Offset: 0x8e0, Size: 0x10]
	Object*[] CacheResArray;//[Offset: 0x8f8, Size: 0x10]
	bool bPawnBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	float TotalDeltaTime;//[Offset: 0x92c, Size: 0x4]
	uint32[] OverlapIndexArray;//[Offset: 0x930, Size: 0x10]
	void TakeDamageMulti(float DamageAmount, const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xa141430
	void Show();// 0x7cf99a0
	void SetEnableRefreshPickUpList(bool InbEnableRefreshBlackMarketList);// 0xa140d64
	void ServerStealfromTreasureDoor();// 0xa140d2c
	void ServerRecycleNode();// 0xa141318
	void ServerPickRecoverBanner(uint32 InPlayerKey, int LegendID);// 0xa140fc4
	void ResponseRecycleNode(bool isRecycleOK);// 0xa141238
	void ReplacePickUpWrapperActor(out const BlackMarketPickUpWrapperResult TargetPickUpWrapperResult, out const BattleItemData ReplaceBattleItemData);// 0x7cf80bc
	void RemovePickedItem(out const PickUpItemData InItem);// 0x7cf9280
	void PreDestroy(bool bIsPickUp);// 0x7cf8f54
	bool OpenMarket();// 0x5f576c4
	void OnSwitchCollisionToPawn(bool bEnable);// 0xa1d39f8
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x7cf9b14
	void OnSkillInit(int SkillIndex, UTSkill* Skill);// 0x7cf99b4
	void OnSkillAssistSwitch(bool bEnable, UTSkill* Skill);// 0x7cf7688
	void OnRep_IsShow();// 0x55a1484
	void OnPickUpTargetSucced_Server(Vector OriginLocation, ApexCharacter* OutCharacter);// 0xa1d39f8
	void OnPickedMaxItemNumber();// 0xa1d39f8
	void OnPickedItem(int QualityLevel, SearchedPickUpWrapperResult InItem);// 0xa1d39f8
	void OnOpenMarket();// 0xa1d39f8
	void OnNotifyRecycle();// 0xa1d39f8
	void OnLocalPlayerAddPawnState(enum State, enum OverrideState);// 0x5b95b74
	void OnLeaveScopeForAddCPC(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x571e094
	void OnLeaveScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5b92200
	void OnEnterScopeForAddCPC(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5ef7784
	void OnEnterScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5c6cf14
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x60bbb20
	void OnCloseMarket();// 0xa1d39f8
	void OnBlackMarketPickUpItem(SearchedPickUpWrapperResult PickUpWrapper, ApexCharacter* OutCharacter);// 0xa1d39f8
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6143ad0
	void OnAPEvent_BlackMarketPickUpItem(SearchedPickUpWrapperResult PickUpWrapper, bool bAddPickedItemNum);// 0x7cf9494
	void OnAddPlayerPickItemNumFromeBlackMarketOnServer(ApexCharacter* ApexCharacter, enum PickupGroup);// 0xa1d39f8
	void OnActorDeadEvent();// 0x7cf9480
	bool NotifyRecycle();// 0x6011210
	bool IsTeammateBlackMarket();// 0x530b2c8
	bool IsOwnerBlackMarket();// 0x7cf9ca4
	void InnerOpenMarket(bool bOwner);// 0xa141350
	void InnerCloseMarket();// 0xa141334
	void InnerClearloadedLobaMainUIActionRes();// 0xa140e44
	bool HandlePickItem_Server(ApexCharacter* Character, SearchedPickUpWrapperResult PickUpWrapper);// 0x7cf8528
	PickupManagerComponent* GetPickupManagerComponent();// 0xa1416bc
	NetPickUpWrapperResult[] GetPickUpDataMapNotDelete();// 0x7cf8b94
	NetPickUpWrapperResult[] GetPickUpDataMap();// 0x7cf8ef0
	SearchedPickUpWrapperResult GetPickedItem(int Index);// 0x5a7c668
	FString GetModuleName();// 0x7cf9cdc
	int GetMaxPickItemNum();// 0xa14113c
	int GetItemQuality(PickUpItemData PickUpItemData);// 0x5940fa0
	bool GetIsShowingMarketUI();// 0xa141120
	bool GetIsPickItemMax();// 0x7cf84f0
	bool GetEnableRefreshPickUpList();// 0x5265774
	int GetCurPickItemNum(ApexCharacter* InCharacter);// 0x7cf8a04
	void GenerateNetPickUpWrapperToPickUpWrapperResult(ApexCharacter* Character, NetPickUpWrapperResult InNetPickUpWrapperResult, out SearchedPickUpWrapperResult OutSearchedPickUpWrapperResult);// 0x7cf77f0
	void Finished();// 0x7cf9978
	void DealPickUpDataList();// 0x7cf998c
	void CollectAndWrapPickUpActors();// 0x7cf8f40
	void ClosePickupReplaceBag();// 0xa140d48
	void CloseMarket();// 0x7cf902c
	void ClientPickRecoverBannerResult(uint32 InPlayerKey, bool bResult);// 0xa140e60
	void ClientBeginDestroy(bool bIsPickUp);// 0xa141158
	void BP_OnShow();// 0xa1d39f8
	void BP_OnDestroyed();// 0xa1d39f8
	void BP_OnActorHit(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xa1d39f8
	void BP_BeginDestroy();// 0xa1d39f8
	void AddPickedItem(out const SearchedPickUpWrapperResult InItem);// 0x7cf9040

--------------------------------
Class: SkillActorBase.DynamicMovementActor.Actor.Object
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x318, Size: 0x8]
	FName[] RailTags;//[Offset: 0x320, Size: 0x10]
	bool bIsCheckCoach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	float CheckCoachTickRate;//[Offset: 0x334, Size: 0x4]
	FName CheckCoachCompTag;//[Offset: 0x338, Size: 0x8]
	float ShapeInflation;//[Offset: 0x340, Size: 0x4]
	byte CheckCoachChannel;//[Offset: 0x344, Size: 0x1]
	PrimitiveComponent* CheckCoachCompennt;//[Offset: 0x348, Size: 0x8]
	delegate OnClear;//[Offset: 0x384, Size: 0x1]
	int OwnerSkillUniqueTableID;//[Offset: 0x388, Size: 0x4]
	bool bDoCoolDownWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	bool bHadDownCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	bool IsNotifyDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 0x1]
	bool bIsSpawnUseAttachPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	class CameraShake* ShakeClass;//[Offset: 0x398, Size: 0x8]
	float ShakeOuterRadius;//[Offset: 0x3a0, Size: 0x4]
	float ShakeInnerRadius;//[Offset: 0x3a4, Size: 0x4]
	float ShakeFalloff;//[Offset: 0x3a8, Size: 0x4]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x3b0, Size: 0x8]
	bool bEnableDrugVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	int DrugVoiceID;//[Offset: 0x3bc, Size: 0x4]
	float DrugDelayTime;//[Offset: 0x3c0, Size: 0x4]
	bool bDebugSkillActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 0x1]
	enum SkillActorType;//[Offset: 0x3d3, Size: 0x1]
	bool bAddViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	bool bIgnoreCameraForCollisionResponseOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 0x1]
	Controller* OwnerControllerBase;//[Offset: 0x3d8, Size: 0x8]
	ApexTeamState* OwnerTeamState;//[Offset: 0x3e0, Size: 0x8]
	enum OwnerLegendType;//[Offset: 0x3e8, Size: 0x1]
	uint32 OwnerApexPlayerKey;//[Offset: 0x3ec, Size: 0x4]
	delegate OnTakeDamage;//[Offset: 0x3f0, Size: 0x1]
	delegate OnTakeDamageCrypto;//[Offset: 0x3f1, Size: 0x1]
	bool bListenToOBTargetSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 0x1]
	bool bListenToPlayerRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x408, Size: 0x8]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	bool bAutoAddRenderMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1]
	delegate OnApexSkillEvent;//[Offset: 0x428, Size: 0x10]
	<ShapeComponent*,byte> CollisionResponseToChannelWithCamera;//[Offset: 0x450, Size: 0x50]
	bool bSignificanceManagedOnBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	FName SignificanceTag;//[Offset: 0x4a4, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x4ac, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x4ad, Size: 0x1]
	int OwnerSkillIndex;//[Offset: 0x4b8, Size: 0x4]
	SkillActorAttachData AttachData;//[Offset: 0x4c0, Size: 0x48]
	Actor* AttachedTargetActor;//[Offset: 0x508, Size: 0x8]
	bool IsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	ApexPlayerController* OwnerApexController;//[Offset: 0x514, Size: 0x8]
	int OwnerCharacterTeamId;//[Offset: 0x51c, Size: 0x4]
	int OwnerCharacterCampId;//[Offset: 0x520, Size: 0x4]
	SkillActorDelayShowTime DelayShowTime;//[Offset: 0x524, Size: 0x8]
	float SpawnedTime;//[Offset: 0x52c, Size: 0x4]
	bool bUseReplicationPolicy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	FName ReplicationCullDistanceTag;//[Offset: 0x534, Size: 0x8]
	float RefreshReplicationCullDistanceInterval;//[Offset: 0x53c, Size: 0x4]
	bool bSkipAttachmentReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bIsNeedLogInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	void UpdateForMiniMap(byte State);// 0x7e5271c
	void UnregisterFromSignificance();// 0xa171974
	void TryInitMiniMap();// 0xa1721fc
	void TriggerSkillEvent(const enum SkillEvent, SkillEventParam* SkillEventParam);// 0xa171e98
	void StartCheckCoach();// 0xa173478
	bool ShouldBeDoCoolDownForStatus();// 0xa1733a8
	void SetVisible(bool Visible);// 0x7e532e0
	void SetSkillIndex(SkillActorBase* OwnerSkillActor);// 0x7e534fc
	void SetSkillActorType(enum InSkillActorType);// 0xa172988
	void RemoveOutLineEffectWithAttachActor();// 0x7e52e28
	void RemoveFromMiniMap();// 0x7e527ec
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0xa172d4c
	void RegisterToSignificance(FName NewSignificanceTag, enum NewType, enum NewPostType);// 0xa171990
	void RefreshReplicationCullDistancePolicy(FName InReplicationFrequencyTag);// 0xa1711ac
	void RefreshOwnerSkillTableID();// 0x7e534e8
	void RefreshMeshCastShadowState(bool bAttached);// 0x7e52d50
	void ReceiveOnRepOwner();// 0xa1d39f8
	void ReceiveClear();// 0xa1d39f8
	Vector RebaseZeroOriginOntoLocal(Vector WorldLocation);// 0x7e52424
	Vector RebaseLocalOriginOntoZero(Vector WorldLocation);// 0x7e525a0
	void PostLuaUIEvent(enum UIEventType, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x7e536b8
	void PostLuaEvent(Actor* OwnerTarget, int LuaCppEventTypeIndex, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x5f989d0
	void PhaseJumpError(enum JumpError);// 0x7e533b8
	void OnSkillItemPickUp_BP();// 0xa1d39f8
	void OnSkillItemPickUp();// 0xa172258
	void OnSkillAsyncLoadFinished();// 0xa171e7c
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0xa171284
	void OnRep_SkillActorAttachData();// 0xa17338c
	void OnRep_SetComponentVisible();// 0x5313e60
	void OnRep_PlayerState(PlayerState* LocalCharacterPlayerState);// 0xa1d39f8
	void OnRep_OwnerSkillIndex();// 0xa173494
	void OnRep_DelayShowTime();// 0x7e52410
	void OnRep_AttachedTargetActor();// 0xa173370
	void OnPlayerRespawn(int RescuerKey, int VictimKey, enum RespawnType);// 0xa17279c
	void OnOneSkillAsyncLoadFinished(int SkillIndex);// 0xa171da4
	void OnOBTargetSwitched_BP(bool bChangeToFriendly);// 0xa1d39f8
	void OnOBTargetSwitched(Actor* LastTarget, Actor* NewTarget);// 0x7e52bf0
	void OnDynamicStop(out const HitResult Hit, bool bServer, Actor* MovementActor);// 0xa171b80
	void OnDetach();// 0xa172470
	void OnDelayShow();// 0x7e523ec
	void OnCharacterCameraModeSwitched_BP(enum NewMode);// 0xa1d39f8
	void OnCharacterCameraModeSwitched();// 0x4e25ec4
	void OnAttach();// 0xa17248c
	bool NotifyLanding();// 0xa172218
	bool IsTypeValid();// 0x7e52e50
	bool IsTeammate(Actor* OtherActor, bool bCheckHostile, bool bNeedPrintLog);// 0xa172588
	bool IsSkillCasting();// 0x7e53488
	bool IsSameTeam(Actor* Other, bool bCheckHostile);// 0xa172a54
	bool IsInViewport();// 0xa171574
	bool IsAddViewAssist_Implementation();// 0xa172430
	void InitSkillManagerComponent();// 0xa17201c
	void InitBuffSystemComponent(ApexBuffSystemComponent* Comp);// 0x7e535cc
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0xa172bd0
	Vector GetSkillActorInfo_MoveVelocity();// 0xa1710f0
	Vector GetSkillActorInfo_Location();// 0xa171130
	float GetSkillActorInfo_HP();// 0xa1710b4
	int GetPingType();// 0xa1721c0
	ApexTeamState* GetOwnerTeamState();// 0x7e52b88
	int GetOwnerSkillUniqueTableID();// 0xa173420
	ApexPlayerState* GetOwnerPlayerState();// 0x7e52bbc
	OutlineAndFillComponent* GetOutlineComponent();// 0xa172274
	float GetMeshBoundsSize();// 0xa171170
	int GetMaxNumLimit(int DefaultValue);// 0xa1724a8
	ShapeComponent* GetDamagedComponent();// 0xa171040
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0xa172038
	float GetActorScreenSize(out const Transform ViewPoint);// 0xa1715b4
	void GetActorMeshBounds(out Vector Origin, out Vector BoxExtent);// 0xa1713ec
	float GetActorDistance2D(out const Transform ViewPoint);// 0xa1716f4
	float GetActorDistance(out const Transform ViewPoint);// 0xa171834
	void DoSkillCoolDown();// 0x5858634
	void DoResetReleased();// 0x5a21b1c
	void DoResetCoolDown();// 0x7e534d4
	void DoReleasedSkill();// 0x7e534c0
	void DoCameraShake();// 0x550fd50
	void DetachSkillManagerFromParent();// 0xa172000
	void DeattachFromOwner();// 0x7e532cc
	void ClientOnDamaged(Pawn* Attacker, float Damage, int DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xa1d39f8
	void ClientDoSkillCoolDown();// 0xa173404
	void ClientDoReleasedSkill();// 0xa1733e8
	void Clear();// 0xa17345c
	bool CheckIfAttachToVehicle(Vector Start, float rayLength);// 0x7e53000
	void CheckCoach();// 0xa1734b0
	bool CanAdsorb_Implementation(ApexCharacter* OtherCharacter, out const ViewAssistParamInfo Info);// 0xa1722b0
	void BP_FellOutOfWorld();// 0xa1d39f8
	void AutoPingEnd();// 0xa17107c
	void AutoPingBegin();// 0xa171098
	void AttachToCharacter(ApexCharacter* ParentPlayer, FName SocketName);// 0x7e5316c
	void AsPoisonTarget(bool bIsPoisonTarget);// 0x7e52314
	void AddToMiniMap(enum ItemType, Vector Location, float Yaw, int ScaleType, float Length, bool bNeedUpdateYaw);// 0x7e52800
	void AddSelfToController(bool bStorageEvenNotCharacterOwner, int NumLimit);// 0x7e52e98
	void AddOutLineEffectWithAttachActor();// 0x7e52e3c
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor, float InValidityTimeScale);// 0xa17306c

--------------------------------
Class: SkillEventParam.Object
	int TargetPhaseIndex;//[Offset: 0x28, Size: 0x4]
	Object* ContextObject;//[Offset: 0x50, Size: 0x8]
	Character* ContextCharacter;//[Offset: 0x58, Size: 0x8]
	void InitFromTriggerParam(SkillEventParam* TriggerParam);// 0x7a41edc

--------------------------------
Class: SkillActorAttachData
	bool bIsAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* AttachedActor;//[Offset: 0x8, Size: 0x8]
	SceneComponent* AttachedComponent;//[Offset: 0x10, Size: 0x8]
	bool bAttachScreenNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x1c, Size: 0x8]
	enum AttachmentRule;//[Offset: 0x24, Size: 0x1]
	enum ScaleAttachmentRule;//[Offset: 0x25, Size: 0x1]
	Vector OffsetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator OffsetRotation;//[Offset: 0x34, Size: 0xc]
	bool bIgnoreParentRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: UAESkillManagerComponent.ApexSkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	Actor* HitTarget;//[Offset: 0xbc8, Size: 0x8]
	HitResult DoorHitInfo;//[Offset: 0xbd0, Size: 0x88]
	Vector DoorPos;//[Offset: 0xc58, Size: 0xc]
	Vector DoorDir;//[Offset: 0xc64, Size: 0xc]
	float DoorTime;//[Offset: 0xc70, Size: 0x4]
	byte MeleeAttackPose;//[Offset: 0xc74, Size: 0x1]
	byte MeleeAnimIndex;//[Offset: 0xc75, Size: 0x1]
	bool CanServerStartMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc76, Size: 0x1]
	bool ShouldTraceDoorPostCloseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc77, Size: 0x1]
	bool EnterDoorRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 0x1]
	Vector AutonomousTargetPos;//[Offset: 0xc7c, Size: 0xc]
	UTSkillPickedTarget[] RemoteClientPickedResultTargets;//[Offset: 0xc88, Size: 0x10]
	delegate AttackTargetEvent;//[Offset: 0xca0, Size: 0x10]
	delegate OnMeleeAttackAnimEvent;//[Offset: 0xcb0, Size: 0x10]
	bool bListenTeammatesEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 0x1]
	UAECharacterAnimListComponent* OwnedSkillAnimComp;//[Offset: 0xcc8, Size: 0x8]
	UAESkillAction_ReplaceCharAnim*[] SkillReplaceAnimLayer;//[Offset: 0xcd0, Size: 0x10]
	delegate OnSkillAnimListAttached;//[Offset: 0xce0, Size: 0x10]
	delegate OnSkillAnimListDettached;//[Offset: 0xcf0, Size: 0x10]
	Actor* LastRobotRescueTarget;//[Offset: 0xd00, Size: 0x8]
	float DetectInterval;//[Offset: 0xd08, Size: 0x4]
	float InnerPreloadSquaredRange;//[Offset: 0xd0c, Size: 0x4]
	float OuterUnloadSquaredRange;//[Offset: 0xd10, Size: 0x4]
	SkillPreloadData[] LowPreloadDatas;//[Offset: 0xd20, Size: 0x10]
	SkillPreloadData[] MiddlePreloadDatas;//[Offset: 0xd30, Size: 0x10]
	SkillPreloadData[] HighPreloadDatas;//[Offset: 0xd40, Size: 0x10]
	delegate SkillPauseEvent;//[Offset: 0xd58, Size: 0x10]
	delegate SkillResumeEvent;//[Offset: 0xd68, Size: 0x10]
	delegate SkillJumpPhaseEvent;//[Offset: 0xd78, Size: 0x10]
	delegate SkillTriggerStringEventDelegate;//[Offset: 0xd88, Size: 0x10]
	delegate SkillItemClientLoadFinishEvent;//[Offset: 0xd98, Size: 0x10]
	delegate SkillReloadWeaponEvent;//[Offset: 0xda8, Size: 0x10]
	bool bNoSkillCDStateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 0x1]
	byte CurrentThrowGrenadeMode;//[Offset: 0xdb9, Size: 0x1]
	SkillConfigIDData[] SkillDataList;//[Offset: 0xdc0, Size: 0x10]
	bool bIsInCryptoDroneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd0, Size: 0x1]
	Actor* CryptoDroneActor;//[Offset: 0xdd8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0xf00, Size: 0x8]
	int LifelineRescueRobotNum;//[Offset: 0xf08, Size: 0x4]
	Actor*[] RescueRobotsList;//[Offset: 0xf10, Size: 0x10]
	<class Actor,Actor*> InfoLogActors;//[Offset: 0xf20, Size: 0x50]
	bool bShouldLogActorInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 0x1]
	float InfoLogInterval;//[Offset: 0xf74, Size: 0x4]
	Color InfoLogColor;//[Offset: 0xf78, Size: 0x4]
	<int,SkillLocPickInfo> SkillConfigIDToPreLocInfo;//[Offset: 0xf80, Size: 0x50]
	bool TryPreAimLocationReleased(int SkillIndex);// 0x5bd4d60
	void TriggerCurSkillStringEvent(FString EventString, int SkillIndex, UAEBaseSkill* CurSkill, bool bSentToServer);// 0x7ef8568
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex, bool bSentToServer, bool ServerTrigger);// 0xa18a734
	void SwitchThrowMode();// 0x7ef6934
	void SwitchSkillCDStateOnServer();// 0xa189dc8
	void SwitchSkillCDState();// 0x7ef74c4
	void StopSkillAllByKillDamage(enum StopReason, bool bCheckEnableBackSwing);// 0x7ef6558
	void StartSkillCDByIndex(int SkillIndex);// 0x7ef72d8
	void SetCurrentThrowMode(byte ThrowGrenadeMode);// 0x7ef695c
	void SetAvailableTimes(int SkillConfigId, int Times, bool bRecoverCD);// 0x7ef6a70
	void ServerTriggerCurSkillString(FString EventString, int SkillIndex);// 0x7ef83d0
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0xa18a5d4
	void ServerSwitchThrowMode();// 0xa189d90
	void ServerSwitchSkillUIOperation(byte SkillType, byte OpMode, bool bNeedWrite);// 0xa18a9bc
	void ServerSetPreLocInfo(int ConfigId, SkillLocPickInfo PickInfo);// 0x7ef5ebc
	void ServerPopOperationBySkillIndex(int SkillID);// 0xa18ad74
	void ServerCancelAllRescueRobots();// 0xa189c14
	void RPC_SetServerHitTarget(Actor* HitTar);// 0xa18a274
	void RPC_SetServerHitDoorInfo(HitResult HitInfo);// 0xa18a154
	void RPC_ServerSetMeleeAttackPose(byte AttackPose, byte InMeleeAnimIndex);// 0xa189e00
	void RPC_ServerCheckTarget(Vector TargetPos, const UTSkillPickedTarget[] PickedResultTargets);// 0x7ef7e14
	void RPC_NotifyBackpackUseItem(int SkillHandle);// 0xa18a4fc
	void RPC_ClientReloadWeaponDone(int WeaponID);// 0xa18a34c
	void RPC_ClientCheckHasSkillHandle(int SkillHandle);// 0xa18a424
	void RPC_ChangeMeleeAttackConfigData(byte ConfigIndex, float ModifyData);// 0xa189c30
	void ResetSkillReleasedByIndex(int SkillIndex);// 0x7ef71f4
	void ResetSkillCDByIndex(int SkillIndex);// 0x7ef73a8
	void ResetAllSkillReleased();// 0x7ef72c4
	void ResetAllSkillCDOnServer();// 0xa189dac
	void ResetAllSkillCD();// 0x7ef7478
	void RemoveInfoLogActor(Actor* TmpActor);// 0x7ef63b8
	void PopOperationBySkillIndex(int SkillID);// 0xa18ae4c
	void OnStackChangedEvent(HandStateData Data, bool bPush, bool bPromote);// 0x7ef7670
	void OnSkillAnimListAttachLoadingFinished();// 0x7ef7c7c
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x7ef8828
	void OnPawnStateChanged(out const enum[] StatesMoreThanOld, out const enum[] StatesLessThanOld);// 0x4b469bc
	void OnOverridePawnStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x520726c
	void OnOBTargetSwitched(Actor* LastTarget, Actor* NewTarget);// 0x7ef79d0
	void OnGameModeExitFighting();// 0x7ef8814
	void OnEventPlayerAction(out const FName InAction, Actor* InEventActor);// 0x7ef7ca4
	void OnAsyncLoadFinishByInitSkillUI(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, bool bInitAll, int SkillIndex);// 0x7ef8a78
	void MainHandInterruptSkill(enum eAttachmentType);// 0x5882520
	void JumpToPhase(int ToIndex, bool bIgnoreCheckPawnState, bool Greater);// 0x7ef6728
	bool IsZeroCD();// 0x7ef748c
	bool IsUsingRescueRobot();// 0x7ef66b8
	bool IsSkillInCD(int SkillIndex);// 0x7ef6f64
	bool IsSkillCDActive(int SkillIndex);// 0x7ef7040
	bool IsCastingSkillOfType(enum SkillType);// 0x7ef7b68
	bool IsCastingSkillIndex(int SkillIndex);// 0x7ef806c
	bool IsCastingOctaneSkill();// 0x7ef7c44
	void InfoLogFunc();// 0x7ef629c
	FString GetUIDefineNameBySkillType(enum SkillType);// 0x5d4af58
	int GetSkillConfigIDBySkillType(enum SkillType);// 0x7ef8220
	int GetSkillConfigIDBySkillIndex(int SkillIndex);// 0x7ef82f8
	float GetSkillCDRemainTimePerCast(int SkillIndex);// 0x7ef6e8c
	UTSkill* GetSkillByConfigID(int ConfigId);// 0x7ef8148
	int GetRemainTimes(int SkillConfigId);// 0x5b08f6c
	byte GetCurrentThrowMode();// 0x7ef6a34
	enum GetCurOpModeBySkillType(enum SkillType);// 0xa18ac94
	enum GetCurOpModeBySkillIndex(int SkillID);// 0xa18abb4
	float GetAbilityPercent(enum SkillType);// 0x7ef6db4
	void DettachSkillAnimList();// 0x7ef7c90
	void ClientSwitchThrowMode();// 0x7ef6920
	void ClientInfoLog(FString Msg);// 0x7ef62b0
	void ChangeIsInfoLog();// 0xa189bf8
	bool CanUseRescueRobot();// 0x7ef66f0
	bool CanInitSkillUI(int SkillIndex);// 0x7ef8e74
	bool CanCastingSkillSilencedByRevenant();// 0x7ef7b30
	void CameraModeSwitchCallback();// 0xa189de4
	void CallClientLaunchCharacter(Vector Dir, float Speed, float Time);// 0xa189f60
	void BroadcastSkillStringEvent(FString EventString, UTSkillManagerComponent* EventOrigin);// 0x7ef74d8
	void AddInfoLogActor(Actor* TmpActor);// 0x7ef6488
	void AddAbilityPercent(float AddPercentage, enum SkillType);// 0x7ef6c5c

--------------------------------
Class: ApexSkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	TriggerEventBuffPoolItem[] TriggerEventBuffPool;//[Offset: 0xa88, Size: 0x10]
	ApexSkillManagerComponent*[] ChildSkillManagerComponentList;//[Offset: 0xa98, Size: 0x10]
	SkillActorBase*[] SkillActorBaseArray;//[Offset: 0xaa8, Size: 0x10]
	ApexSkillManagerComponent* ParentSkillManagerComponent;//[Offset: 0xab8, Size: 0x8]
	ApexCharacter* OwnerApexCharacter;//[Offset: 0xac0, Size: 0x8]
	SkillPickerModule* SkillPickerModule;//[Offset: 0xac8, Size: 0x8]
	delegate OnApexSkillEvent;//[Offset: 0xad0, Size: 0x10]
	ParticleSystemAsync*[] CreatedParticleArray;//[Offset: 0xae0, Size: 0x10]
	float StopSkillOnDisconnectTimeOut;//[Offset: 0xaf0, Size: 0x4]
	class UTSkill[] SkillArchetypesUsed;//[Offset: 0xaf8, Size: 0x10]
	delegate SwitchSkillAssistEvent;//[Offset: 0xb08, Size: 0x10]
	void UnBindEventForBangalorePassiveSkill();// 0x7a3c698
	void TriggerSkillEventWithPhaseId(int SkillID, enum SkillEvent, int TargetPhaseIndex);// 0x7a3d69c
	void TriggerSkillEventToServerChildren(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3d424
	void TriggerSkillEventToServer(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3d560
	void TriggerSkillEventToParent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3d070
	void TriggerSkillEventToChildren(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3cf2c
	void TriggerSkillEventFromParent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3d2e8
	void TriggerSkillEventFromChild(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3d1ac
	void TriggerSkillEvent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3d7d8
	void ServerSwitchSkillAssistState(int SkillIdx, bool bEnable);// 0x7a3c7ac
	void ServerSwitchAllSkillAssistState();// 0xa0ee874
	void OnRecoverConnect();// 0x7a3d914
	void OnDisconnected();// 0x7a3d934
	void OnCharacterWeaponShootBullet(ApexCharacter* ShootCharacter, out const Vector StartPos, out const Vector EndPos);// 0x7a3c54c
	void Inner_CheckBangalorePassiveSkill(ApexCharacter* ShootCharacter, out const Vector StartPos, out const Vector EndPos);// 0x7a3c400
	int GetSkillConfigOnGameModeInt(enum Key, int DefaultValue);// 0x7a3cad4
	float GetSkillConfigOnGameModeFloat(enum Key, float DefaultValue);// 0x7a3cbc4
	bool GetSkillConfigOnGameModeBool(enum Key, bool DefaultValue);// 0x7a3c9d8
	UTSkill* GetSkillByType(enum SkillType);// 0x7a3cd48
	void ClientSwitchSkillAssistState(int SkillIdx, bool bEnable);// 0x7a3c6c0
	void ClientSwitchSkillAssistShowType(int ShowTypeIn);// 0x7a3c93c
	void ClientSwitchAllSkillAssistState(bool bEnable);// 0x7a3c898
	void ClearTriggerEventBuffPoolBySkillID(int SkillID);// 0x7a3ccb4
	void BindEventForBangalorePassiveSkill();// 0x7a3c6ac
	void AddSkillCmdToServer(const SkillSequenceCmd Cmd);// 0x7a3c2ac

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	DataTable* SkillsTable;//[Offset: 0x100, Size: 0x8]
	DataTable* CommonSkillsTable;//[Offset: 0x108, Size: 0x8]
	bool bHasInitSkillArchetypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	class UTSkill[] SkillArchetypesFromSkillsTable;//[Offset: 0x118, Size: 0x10]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	UTSkill*[] Skills;//[Offset: 0x130, Size: 0x10]
	UAEUserWidget*[] SkillAsyncLoaded;//[Offset: 0x140, Size: 0x10]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x150, Size: 0x8]
	<UTSkill*,int> SkillToIndexMap;//[Offset: 0x158, Size: 0x50]
	<enum,int> SkillTypeToIndexMap;//[Offset: 0x1a8, Size: 0x50]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x1f8, Size: 0x50]
	<int,int> SkillHandleToIndexMap;//[Offset: 0x250, Size: 0x50]
	<int,int> SkillIndexToHandleMap;//[Offset: 0x2a0, Size: 0x50]
	<int,UTSkillCDBase*> SkillIndexToSkillCD;//[Offset: 0x2f0, Size: 0x50]
	<int> CastingSkillIndexes;//[Offset: 0x340, Size: 0x50]
	Actor* Target;//[Offset: 0x390, Size: 0x8]
	Actor*[] SkillActorList;//[Offset: 0x398, Size: 0x10]
	Actor*[] PausedSkillActorList;//[Offset: 0x3a8, Size: 0x10]
	UTSkillSynData[] SkillSynData;//[Offset: 0x3b8, Size: 0x10]
	UTSkillPhaseJumpResult SkillPhaseJumpResult;//[Offset: 0x3c8, Size: 0x8]
	float PredictSkillDiscordCorrectionTime;//[Offset: 0x3d0, Size: 0x4]
	delegate OnSkillHit;//[Offset: 0x428, Size: 0x10]
	bool bDisableTriggerSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x458, Size: 0x30]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x488, Size: 0x10]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x498, Size: 0x30]
	FString LastESkillTargetDesc;//[Offset: 0x4d0, Size: 0x10]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x4e0, Size: 0x50]
	bool bDebugSkillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	<int,SkillTriggerBase*> SkillTriggerMap;//[Offset: 0x588, Size: 0x50]
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x5d8, Size: 0x10]
	int[] PendingRemoveSkillHandles;//[Offset: 0x5e8, Size: 0x10]
	UTAddedSkillSturct[] RepAddedSkillStructList;//[Offset: 0x5f8, Size: 0x10]
	FString RepSkillDebugInfo;//[Offset: 0x608, Size: 0x10]
	FString RepSkillSynInfo;//[Offset: 0x618, Size: 0x10]
	delegate OnSkillCast;//[Offset: 0x628, Size: 0x10]
	delegate OnKeyDownDelegate;//[Offset: 0x638, Size: 0x10]
	delegate SkillStopEvent;//[Offset: 0x648, Size: 0x10]
	delegate StartSkillFailedEvent;//[Offset: 0x658, Size: 0x10]
	delegate SkillStartEvent;//[Offset: 0x668, Size: 0x10]
	delegate SkillReleasedEvent;//[Offset: 0x678, Size: 0x10]
	delegate SkillInitEvent;//[Offset: 0x6b8, Size: 0x10]
	delegate SkillUnInitEvent;//[Offset: 0x6c8, Size: 0x10]
	delegate DisableTriggerSkillEvent;//[Offset: 0x6d8, Size: 0x10]
	delegate EnableTriggerSkillEvent;//[Offset: 0x6e8, Size: 0x10]
	<FName,int> TriggerConditionMap;//[Offset: 0x700, Size: 0x50]
	<FName,UTSkill*> TriggerSkillMap;//[Offset: 0x750, Size: 0x50]
	<FName,UTSkill*> TriggerCancelSkillMap;//[Offset: 0x7a0, Size: 0x50]
	UTSkill*[] PendingPassiveSkills;//[Offset: 0x7f0, Size: 0x10]
	<Object*,SkillModifierList> SkillModifierLookupTable;//[Offset: 0x800, Size: 0x50]
	<SkillModifierDesc,SkillModifierCalculator> SkillAttributeModifiers;//[Offset: 0x850, Size: 0x50]
	bool bHasInitInFightStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]
	delegate SkillCDInitFinishedEvent;//[Offset: 0x910, Size: 0x10]
	delegate SkillStartCDEvent;//[Offset: 0x920, Size: 0x10]
	delegate SkillModifyCDEvent;//[Offset: 0x930, Size: 0x10]
	SkillCDSyncData[] SkillsCDSyncData;//[Offset: 0x940, Size: 0x10]
	<int,PredcitionData> SkillsPredictionData;//[Offset: 0x958, Size: 0x50]
	void UpdateSkillCDState(bool bCanUpdate);// 0x6279160
	bool TriggerEventByType(enum SkillType, byte EventType, int TriggerIndex);// 0x9f10378
	bool TriggerEvent(int SkillID, byte EventType, int TriggerIndex);// 0x9f10764
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x9f0eebc
	void SwitchSkill(int SkillID, byte EventType);// 0x9f10094
	bool StopSkillWithID(int SkillID, enum StopReason, bool bCheckEnableBackSwing);// 0x9f0fe90
	void StopSkillSpecific(UTSkill* Skill, enum Reason, bool bCheckEnableBackSwing);// 0x627b364
	void StopSkillOnDisconnected();// 0x9f0fb88
	void StopSkillAll(enum StopReason, bool bCheckEnableBackSwing);// 0x9f0fd28
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x9f0eb90
	void SetTarget(Actor* InTarget);// 0x9f10ec4
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x9f1098c
	void SetSkillCastingState(int SkillIndex, bool bCasting);// 0x9f0ed3c
	void SetPredictionDataBaseKey(int SkillID);// 0x6278d14
	void SetHasInitSkillSystem(bool hasInit);// 0x6279fe0
	void ServerOnWillEnterBackground();// 0x9f0fb6c
	void ServerMarkCDSyncStateDirty();// 0x9f0ea80
	void ServerInitOneSkill(const class UTSkill SkillClass, int SkillIndex, int SkillHandle);// 0x627af7c
	void ServerDeleteSkill(int SkillID);// 0x9f0f7b0
	void RepSkillSynData(UTSkillSynData[] originList);// 0x4be23c4
	void RepSkillPhaseJumpResult();// 0x9f0eea0
	void RepSkillHitInfo();// 0x627a0c4
	void RefreshSkillCDSyncData();// 0x627914c
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x627aba4
	void OnWillEnterBackground();// 0x627b554
	static bool OnSameTeam(Actor* A, Actor* B);// 0x627aa38
	void OnRep_SkillHitInfo();// 0x9f0ed04
	void OnRep_HasInitInFightStage();// 0x9f0ea9c
	void OnRep_CDSyncData();// 0x4d2e510
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0x62797e8
	void OnAsyncLoadFinishedByItem(int SkillHandle);// 0x6279d24
	void OnAsyncLoadFinishByOnRepSkill(const UTSkillSynData CurSynData, const UTSkillSynData LastSynData, bool bFirstRep);// 0x6279af4
	void OnAsyncLoadFinishByInitSkill(int SkillIndex);// 0x9f0eab8
	void K2_AddNewPhasePredictionKey(int SkillID, int RepPhaseID);// 0x6278e14
	bool IsReadyToCastSkill(int SkillID);// 0x9f0f6cc
	bool IsHasInitSkillSystem();// 0x9f0ed20
	bool IsDisableTriggerSkill();// 0x9f1035c
	bool IsCastingSkillOfSkillType(enum SkillType);// 0x9f0f5a8
	bool IsCastingSkillID(int SkillID);// 0x627b288
	bool IsCastingSkillHandle(int SkillHandle);// 0x627b1ac
	bool IsCastingSkill();// 0x9f0f68c
	void InternalCallClientPredictFailed(int SkillID);// 0x9f0e6ec
	void InitSkillUIs();// 0x9f10dd0
	void InitSkillUI(int SkillIndex);// 0x9f10dec
	void InitSkillSystem(bool isDedicateServer, bool IsBroadcastFromParent, bool IsBroadcastToParent);// 0x9f0f398
	void InitSkillComponent();// 0x9f10970
	Actor* GetTarget();// 0x9f10f90
	enum GetSkillTypeBySkillID(int SkillID);// 0x627b568
	float GetSkillPhaseDuration(int SkillIndex, int PhaseIndex);// 0x627ba6c
	int GetSkillPhase(int SkillIndex);// 0x627a7e0
	int GetSkillNextPhase(UTSkill* Skill);// 0x627b640
	FString GetSkillName(int SkillIndex);// 0x627bc00
	int GetSkillIDByHandle(int SkillHandle);// 0x6279f08
	int GetSkillHandleBySkillIndex(int SkillIndex);// 0x627beec
	int GetSkillCurPhase(UTSkill* Skill);// 0x9f10af4
	UTSkillCDBase* GetSkillCDBySkillIndex(int SkillIndex);// 0x627bd64
	UTSkill* GetSkillByName(FString SkillName);// 0x627a8b8
	UTSkill* GetSkillByHandle(int SkillHandle);// 0x9f0f1d8
	void GetSkillActors(class Actor MatchClass, out Actor*[] OutActors);// 0x6279238
	Actor*[] GetSkillActorList_Mutable();// 0x627b854
	Actor*[] GetSkillActorList();// 0x627b8d8
	Actor* GetSkillActorByTag(FName TagName);// 0x59bc6b0
	Actor* GetSkillActor(class Actor MatchClass);// 0x627952c
	UTSkill* GetSkill(int SkillID);// 0x9f0f2b8
	Actor*[] GetPausedSkillActorList_Mutable();// 0x627b74c
	Actor*[] GetPausedSkillActorList();// 0x627b7d0
	int GetCurSkillIndex(UTSkill* Skill);// 0x627c09c
	int GetCurSkillHandle(UTSkill* Skill);// 0x627bfc4
	float GetCharacterAbilityCDThresholdScale(enum SpeedUpType);// 0x9f0e8c0
	float GetCharacterAbilityCDSpeedScale(enum SpeedUpType);// 0x9f0e9a0
	float GetCharacterAbilityCDCastScale(enum SpeedUpType);// 0x9f0e7e0
	UTSkill* GetCastingSkillAndSkillIndex(out int SkillIndex);// 0x627a6c4
	UTSkill* GetCastingSkill();// 0x627a7ac
	void ForceSyncCDState(const SkillCDSyncData[] CDSyncData);// 0x6278f68
	void EnableTriggerSkillAll();// 0x9f0fba4
	void DisableTriggerSkillAll(enum StopReason, bool bCheckEnableBackSwing);// 0x9f0fbc0
	void DeleteSkillUIs();// 0x9f10cdc
	void DeleteSkillUI(int SkillIndex);// 0x9f10cf8
	void DeleteSkill(int SkillID);// 0x9f0f960
	void ClientPlayHurtMontage(const SoftObjectPath MontagePath);// 0x627b95c
	void ClientMulticastDeleteSkill(int SkillID);// 0x9f0f888
	void ClientInitOneSkill(const class UTSkill SkillClass, int SkillIndex, int SkillHandle);// 0x627ad4c
	void ClientCallTriggerEvent(int SkillID, byte EventType, int TriggerIndex);// 0x9f10574
	void ClearSkillActor();// 0x9f0fa38
	void ClearSkill();// 0x9f0fa54
	void Clear(bool bClearSkillActor);// 0x9f0fa70
	bool CheckSkillCDFinish(int SkillCD);// 0x6279070
	void CheckServerCDState();// 0x9f0e7c4
	void CameraModeChangedEvent();// 0x9f0fb50
	void CalculateRepUndoPhaseIdx(out const int[] LastDonePhaseIds, out const int[] CurDonePhaseIds, out int[] UndoPhaseIds);// 0x627a0d8
	void CalculateLocallyControlledUndoPhaseIdx(out const int[] LastDonePhaseIds, out const int[] CurDonePhaseIds, out int[] UndoPhaseIds, int SkillIndex);// 0x627a388
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0x6279df4
	bool BackpackLoadSkillItemForAutoUse(int SkillIndex);// 0x627970c
	void AddSkillEventCache(byte InSkillEventType, UTSkillManagerComponent* EventOrigin);// 0x9f101f4

--------------------------------
Class: TriggerEventBuffPoolItem
	SkillEventParam* SkillEventParam;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UAEBaseSkill.ApexSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x420, Size: 0x10]
	delegate OnSkillStringEvent;//[Offset: 0x448, Size: 0x10]
	bool OnStringEvent(UTSkillManagerComponent* SkillManagerComponent, FString EventString, UTSkillManagerComponent* EventOrigin);// 0x7ebc1d0
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte SkillEvent);// 0xa18307c

--------------------------------
Class: ApexSkill.UTSkill.Actor.Object
	delegate OnApexSkillEvent;//[Offset: 0x410, Size: 0x10]
	bool TriggerSkillEvent(UTSkillManagerComponent* SkillManagerComponent, int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x7a3a42c
	void ConsumeSkillEventPool(ApexSkillManagerComponent* SkillManagerComponent);// 0x7a3a390

--------------------------------
Class: UTSkill.Actor.Object
	FString SkillName;//[Offset: 0x278, Size: 0x10]
	FString SkillDescription;//[Offset: 0x288, Size: 0x10]
	enum SkillCastType;//[Offset: 0x298, Size: 0x1]
	FString TriggerEventParam;//[Offset: 0x2a0, Size: 0x10]
	int TriggerCondition;//[Offset: 0x2b0, Size: 0x4]
	bool bIgnoreDisableTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	enum SkillType;//[Offset: 0x2b5, Size: 0x1]
	bool bOnlyTriggerInAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 0x1]
	bool bOnlyRunInAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b7, Size: 0x1]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool bNoEnergyStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb, Size: 0x1]
	bool NotInterruptOtherTriggerSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool EnableFPPTPPSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	bool EnableBackSwingAfterInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 0x1]
	UTSkillCreateData BaseData;//[Offset: 0x2c0, Size: 0x60]
	class SkillTriggerBase* SkillTriggerClass;//[Offset: 0x320, Size: 0x8]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	int SkillCategory;//[Offset: 0x32c, Size: 0x4]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	bool SilencedByRevenant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	bool bAllDeserializeComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 0x1]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x368, Size: 0x50]
	int SkillNodeTotalSize;//[Offset: 0x3b8, Size: 0x4]
	<int,int> PhaseNodesTotalSize;//[Offset: 0x3c0, Size: 0x50]
	void SetAvailableTimes(UTSkillManagerComponent* SkillManagerComponent, int Times);// 0x6271a64
	bool PlusRemainTimes(UTSkillManagerComponent* SkillManagerComponent, bool bTimesForRound, int Times);// 0x6271878
	void OnPhaseFinished(UTSkillManagerComponent* SkillManagerComponent, float RemainDeltaSeconds);// 0x627172c
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0x6271ea4
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x6271588
	int GetRemainTimes(UTSkillManagerComponent* SkillManagerComponent);// 0x62717ec
	Actor* GetFromActorStorage(UTSkillManagerComponent* SkillManagerComponent, int Index);// 0x62714c0
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x6271fb4
	void DoSkillReleased(UTSkillManagerComponent* SkillManagerComponent);// 0x6271ba8
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x6271cb0
	void DoResetReleased(UTSkillManagerComponent* SkillManagerComponent);// 0x6271b24
	void DoResetCD(UTSkillManagerComponent* SkillManagerComponent);// 0x6271c2c
	bool DeductRemainTimes(UTSkillManagerComponent* SkillManagerComponent, int Times);// 0x6271990
	bool CheckPhaseCondition(UTSkillManagerComponent* SkillManagerComponent, int PhaseID, bool ResetConditions);// 0x6271614
	bool CanDisableTrigger();// 0x6271d34
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowFailureMsg);// 0x6271dc8

--------------------------------
Class: UTSkillCreateData
	UTSkillCDBase* SkillCD;//[Offset: 0x0, Size: 0x8]
	<int,UTSkillPhase*> PhaseMap;//[Offset: 0x8, Size: 0x50]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bStopOnDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bStopOnWillEnterBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]

--------------------------------
Class: UTSkillCDBase.Object
	float FinishCountdown;//[Offset: 0x28, Size: 0x4]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x30, Size: 0x8]
	GameStateBase* CurGameState;//[Offset: 0x38, Size: 0x8]
	void SetAvailableTimesRound(int Value);// 0x6273624
	void SetAvailableTimes(int Value);// 0x62736a0
	bool PlusRemainTimes(bool bTimesForRound, int Times);// 0x62734c8
	bool HasRemainTimes();// 0x6273410
	float GetThreshold(bool bGetConfigValue);// 0x627371c
	int GetRemainTimes();// 0x6273474
	float GetMaxEnergy();// 0x9f0c040
	int GetMaxAccumulateCount();// 0x9f0bfc8
	float GetCurrentPercent();// 0x9f0c07c
	float GetCurrentEnergy();// 0x9f0c0b8
	float GetCDDuration();// 0x9f0c004
	int GetAvailableTimesRound();// 0x9f0bf90
	int GetAvailableTimes();// 0x9f0bfac
	bool DeductRemainTimes(int Times);// 0x627359c

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	int PhaseIndex;//[Offset: 0x100, Size: 0x4]
	FString PhaseName;//[Offset: 0x108, Size: 0x10]
	FString PhaseDescription;//[Offset: 0x118, Size: 0x10]
	FName PhaseTag;//[Offset: 0x128, Size: 0x8]
	bool bDeserializeComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0x134, Size: 0x8]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x140, Size: 0xc8]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x208, Size: 0x8]
	bool StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x6280130
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x6280244
	void RecoverPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x62800ac
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x627ff54
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x627fe80
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x62801c0
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0x62803d8
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0x62802c8
	float GetPhaseSpeed(UTSkillManagerComponent* SkillManagerComponent);// 0x627fd78
	float GetPhaseDuration(UTSkillManagerComponent* SkillManagerComponent);// 0x627fdfc
	void ForceExecutePhase(UTSkillManagerComponent* SkillManagerComponent);// 0x6280028

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 0x4]
	float PhaseSpeed;//[Offset: 0x4, Size: 0x4]
	float AutonomousPhaseDelay;//[Offset: 0x8, Size: 0x4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bCoolDownStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bReleasedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	int NextPhaseID;//[Offset: 0x10, Size: 0x4]
	<int> NextPhaseIDs;//[Offset: 0x18, Size: 0x50]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x68, Size: 0x10]
	enum PhaseType;//[Offset: 0x78, Size: 0x1]
	FString EnterPhaseTipString;//[Offset: 0x80, Size: 0x10]
	UTSkillPicker* Picker;//[Offset: 0x90, Size: 0x8]
	UTSkillEffect*[] Actions;//[Offset: 0x98, Size: 0x10]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0xa8, Size: 0x10]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	enum[] ErrorCode;//[Offset: 0x48, Size: 0x10]
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x9f0d33c
	bool IsOK_Internal(out int SearchDepth);// 0x9f0d248
	bool IsOK(ActorComponent* SkillManagerComponent, out int SearchDepth);// 0x9f0d4ac

--------------------------------
Class: UTSkillBaseWidget.Object
	UTSkill* OwnerSkill;//[Offset: 0x30, Size: 0x8]
	UTSkillPhase* OwnerPhase;//[Offset: 0x38, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x40, Size: 0x8]
	bool GetTargetActor(UTSkillManagerComponent* SkillManagerComponent, out Actor*[] OutTargets);// 0x6276624
	Actor* GetOwnerPawn();// 0x9f0d6a0
	Actor* GetOwnerCharacter();// 0x9f0d664

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x48, Size: 0xc]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x60, Size: 0x10]
	Actor*[] IgnoreTargets;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 0x1]
	enum PickerTargetType;//[Offset: 0x1, Size: 0x1]
	int PickerMaxCount;//[Offset: 0x4, Size: 0x4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool WallCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	Vector ImpactPoint;//[Offset: 0x8, Size: 0xc]
	PrimitiveComponent*[] TargetComponents;//[Offset: 0x18, Size: 0x10]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	byte HitPos;//[Offset: 0x29, Size: 0x1]
	FName BoneName;//[Offset: 0x2c, Size: 0x8]
	Vector HitEnvLocation;//[Offset: 0x34, Size: 0xc]
	byte hitPhysMatType;//[Offset: 0x40, Size: 0x1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x48, Size: 0x4]
	float fAPScale;//[Offset: 0x4c, Size: 0x4]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x9f0dae8
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x9f0dd28
	void SetActionStart(UTSkillManagerComponent* SkillManagerComponent, bool bStart);// 0x9f0d7c8
	void RecoverAction(UTSkillManagerComponent* SkillManagerComponent);// 0x9f0d6f0
	void PhaseExit(UTSkillManagerComponent* SkillManagerComponent);// 0x9f0d938
	void MainHandInterruptSkill(UTSkillManagerComponent* SkillManagerComponent);// 0x9f0dc50
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x9f0dee4
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x9f0de00
	void CameraModeChangedEvent(UTSkillManagerComponent* SkillManagerComponent);// 0x9f0da10

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x48, Size: 0x1]
	FName[] InterestedOwnerTags;//[Offset: 0x50, Size: 0x10]
	UTSkillEffect* SkillEffect;//[Offset: 0x60, Size: 0x8]
	bool bSkipFollowingActions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	SkillConditionWarpper[] Conditions;//[Offset: 0x70, Size: 0x10]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkillTriggerBase.Object
	UTSkillManagerComponent* SkillManagerComponent;//[Offset: 0x28, Size: 0x8]
	int SkillID;//[Offset: 0x30, Size: 0x4]
	void OnUnInitSkill();// 0xa1d39f8
	void OnInitSkill();// 0xa1d39f8
	UTSkillManagerComponent* GetSkillManagerComponent();// 0x9f0bc5c

--------------------------------
Class: SkillLocPickInfo
	bool bIsLocOK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector[] PosList;//[Offset: 0x8, Size: 0x10]
	Vector[] RelativePosList;//[Offset: 0x18, Size: 0x10]
	Rotator[] RotList;//[Offset: 0x28, Size: 0x10]
	FString[] StrList;//[Offset: 0x38, Size: 0x10]
	PrimitiveComponent*[] BaseList;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SkillPickerModule.SkillObject.Object
	ApexSkillManagerComponent* ParentSkillManagerComponent;//[Offset: 0x28, Size: 0x8]
	SkillPickerConfigData*[] PickerTaskArray;//[Offset: 0x30, Size: 0x10]
	<int,ApexSkillTargetResult*> PickerResultPool;//[Offset: 0x40, Size: 0x50]
	<int,delegate> PickerSignalLisenters;//[Offset: 0x90, Size: 0x50]
	void UnRegisterSignalListener(const int SkillPickerKey);// 0xa17769c
	int TriggerPicker(SkillPickerConfigData* PickerConfigData, delegate SkillPickerSignalLisenter, bool bNoDelay);// 0x7e6a44c
	void TickPicker(float DeltaTime);// 0xa177774
	void RegisterSignalListener(const int SkillPickerKey, delegate SkillPickerSignalLisenter);// 0x7e6a2a4
	ApexSkillTargetResult* PopPickerResult(const int SkillPickerKey);// 0xa1775bc

--------------------------------
Class: SkillObject.Object

--------------------------------
Class: SkillPickerConfigData.Object
	PickerDescription* PickerDescription;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: PickerDescription.Object
	enum DescriptionType;//[Offset: 0x28, Size: 0x1]
	class Object[] KeepActorClassArray;//[Offset: 0x30, Size: 0x10]
	enum[] KeepActorTypeArray;//[Offset: 0x40, Size: 0x10]
	Object* Context;//[Offset: 0x50, Size: 0x8]
	int SkillPickerKey;//[Offset: 0x58, Size: 0x4]
	Vector Location;//[Offset: 0x5c, Size: 0xc]
	Quat Rotation;//[Offset: 0x70, Size: 0x10]
	Vector[] PickerLocationOffsetArray;//[Offset: 0x80, Size: 0x10]
	void PerformPicker(out Actor*[] PickerActorArray);// 0x7a4230c
	bool IsKeepActorClass(Actor* TargetActor);// 0x7a421a8
	ApexSkillTargetResult* GetSkillPickerResult(out const Actor*[] PickerActorArray);// 0x7a42238

--------------------------------
Class: ApexSkillTargetResult.SkillEventParam.Object
	ApexSkillTargetActorArray[] PickerTargetArray;//[Offset: 0x60, Size: 0x10]
	SkillPickerConfigData* SkillPickerConfigData;//[Offset: 0x70, Size: 0x8]
	Actor* SkillActor;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: ApexSkillTargetActorArray
	enum PickerTargetType;//[Offset: 0x0, Size: 0x1]
	Actor*[] ActorList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ParticleSystemAsync.AsyncLoaderBase.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x38, Size: 0x8]
	ParticleSystemComponent* ParticleSystemComp;//[Offset: 0x40, Size: 0x8]
	CreatePSParams Params;//[Offset: 0x58, Size: 0x58]
	CreatePSAttachedParams AttachedParams;//[Offset: 0xb0, Size: 0x70]
	CreatePSAtLocationParams AtLocationParams;//[Offset: 0x120, Size: 0x60]
	void SetTemplate(ParticleSystemComponent* Target, ParticleSystem* EmitterTemplate, out const delegate LoadFinishedCallback);// 0x7d86e74
	void SetHiddenInGame(bool NewHidden);// 0x7d86da8
	void ReleaseToPool();// 0x7d86e60
	void OnLoadPSFinished_Attached(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x7d864c4
	void OnLoadPSFinished_AtLocation(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x7d86108
	void OnLoadPSFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x7d86880
	ParticleSystem* GetSOPParticleTemplate();// 0x7d86c70
	ParticleSystem* GetParticleTemplate();// 0x7d86d6c
	ParticleSystemComponent* GetParticleComponent();// 0xa1535d4
	SceneComponent* GetAttachedComponent();// 0x7d86c3c
	void DestroyComponent();// 0xa1535f0

--------------------------------
Class: CreatePSParams
	ParticleSystem* EmitterTemplate;//[Offset: 0x0, Size: 0x28]
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	Vector Scale;//[Offset: 0x40, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x4d, Size: 0x1]
	enum RenderPass;//[Offset: 0x4e, Size: 0x1]
	bool bNotCreateForLowGrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bReleased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]

--------------------------------
Class: CreatePSAttachedParams.CreatePSParams
	SceneComponent* AttachToComponent;//[Offset: 0x58, Size: 0x8]
	FName AttachPointName;//[Offset: 0x60, Size: 0x8]
	int LocationType;//[Offset: 0x68, Size: 0x4]
	bool bApplyParentFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bApplyParentDither;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool bApplyUIFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]

--------------------------------
Class: CreatePSAtLocationParams.CreatePSParams
	Object* WorldContextObject;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SkillSequenceCmd
	SkillSequenceCmdParams Params;//[Offset: 0x0, Size: 0x60]
	uint32 Value;//[Offset: 0x60, Size: 0x4]
	enum CmdType;//[Offset: 0x64, Size: 0x1]
	int SkillIndex;//[Offset: 0x68, Size: 0x4]
	int FrameSpace;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: SkillSequenceCmdParams
	byte EventType;//[Offset: 0x0, Size: 0x1]
	int TriggerIndex;//[Offset: 0x4, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x10]
	enum StopReason;//[Offset: 0x28, Size: 0x1]
	bool bCheckEnableBackSwing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FString UAESkillEventString;//[Offset: 0x30, Size: 0x10]
	byte UAESkillEventEnum;//[Offset: 0x40, Size: 0x1]
	Vector ActorLocation;//[Offset: 0x44, Size: 0xc]
	Rotator ControllerRotation;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x248, Size: 0x8]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x250, Size: 0x8]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x258, Size: 0x8]
	UAEUserWidget* ParentWidget;//[Offset: 0x260, Size: 0x8]
	Params(FieldPathProperty)[] Params;//[Offset: 0x2b8, Size: 0x10]
	delegate widgetSizeNofity;//[Offset: 0x2d8, Size: 0x10]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x2e8, Size: 0x28]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x310, Size: 0x28]
	float TickRate;//[Offset: 0x338, Size: 0x4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e, Size: 0x1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f, Size: 0x1]
	Vector2D ScreenPos;//[Offset: 0x340, Size: 0x8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x348, Size: 0x8]
	delegate OnMouseButtonDownHandler;//[Offset: 0x350, Size: 0x10]
	delegate OnMouseButtonUpHandler;//[Offset: 0x360, Size: 0x10]
	enum FadingStatus;//[Offset: 0x379, Size: 0x1]
	float CurrentOpacity;//[Offset: 0x37c, Size: 0x4]
	float FadingInTime;//[Offset: 0x380, Size: 0x4]
	float FadingOutTime;//[Offset: 0x384, Size: 0x4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 0x1]
	bool Visible();// 0x7f9f574
	void UnRegistFromGameFrontendHUD();// 0x7f9f390
	void SynchronizeBlueprintProperties();// 0xa1d39f8
	void Show();// 0x7f9f5c0
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x7f9f7a4
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x7f9f820
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x7f9f444
	void RegistToGameFrontendHUD();// 0x7f9f3a8
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x7f9f8a4
	void ReceiveShow();// 0xa1d39f8
	void ReceiveHide();// 0xa1d39f8
	void ReceivedInitWidget();// 0xa1d39f8
	void OnRightClicked(Vector2D TempScreenPos);// 0xa1d39f8
	void OnFadeOutFinished();// 0xa1a31a8
	void OnFadeInFinished();// 0xa1a31c4
	void OnDoubleClicked(Vector2D TempScreenPos);// 0xa1d39f8
	void OnClicked(Vector2D TempScreenPos);// 0xa1d39f8
	void Hide();// 0x7f9f5ac
	void HandleUIMessageBattle(FString UIMessage);// 0x7f9f5d4
	void HandleUIMessage(FString UIMessage);// 0x7f9f65c
	UAEUserWidget* GetParentWidget();// 0x7f9f6e4
	LogicManagerBase* GetOwningLogicManager();// 0x7f9f720
	FrontendHUD* GetOwningFrontendHUD();// 0x7f9f770
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x7f9f3c0

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x38, Size: 0x8]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	int iUIControlState;//[Offset: 0x44, Size: 0x4]
	int DefaultSceneCameraIndex;//[Offset: 0x48, Size: 0x4]
	float DefaultCameraBlendTime;//[Offset: 0x4c, Size: 0x4]
	FName[] GameStatusList;//[Offset: 0x60, Size: 0x10]
	FString[] PushedWidgets;//[Offset: 0x70, Size: 0x10]
	FString[] DefaultChildList;//[Offset: 0x80, Size: 0x10]
	class Object[] WidgetUClassList;//[Offset: 0x90, Size: 0x10]
	UAEUserWidget*[] WidgetList;//[Offset: 0xa0, Size: 0x10]
	<FString,UAEUserWidget*> WidgetMap;//[Offset: 0xb0, Size: 0x50]
	FString[] DelayMessage;//[Offset: 0x108, Size: 0x10]
	Object*[] DelayMessage_Obj;//[Offset: 0x118, Size: 0x10]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x7f9bea0
	bool IsEnableRemoveDynamicWidgets();// 0x7f9bf34
	FrontendHUD* GetOwningFrontendHUD();// 0x7f9c104
	int GetDefaultSceneCamera();// 0x7f9c0c8
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x7f9bf78

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x40, Size: 0x8]
	FString FrontendUtilsClassName;//[Offset: 0x50, Size: 0x10]
	FrontendUtils* Utils;//[Offset: 0x60, Size: 0x8]
	FString LatestGameStatusURL;//[Offset: 0x68, Size: 0x10]
	<FName,class FrontendState> StateClassMap;//[Offset: 0x78, Size: 0x50]
	FrontendState* CurrentState;//[Offset: 0xc8, Size: 0x8]
	FName LastGameStatus;//[Offset: 0xd0, Size: 0x8]
	FString LastStatusOptions;//[Offset: 0xd8, Size: 0x10]
	AssetsPreloaderBase* AssetsPreloader;//[Offset: 0xe8, Size: 0x8]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x7f99f90
	void ShutdownUnrealNetwork();// 0x7f99f7c
	void ReturnToLastStatus();// 0xa1a2ba8
	void ResetGameStauts();// 0xa1a2bc4
	World* GetWorld();// 0xa1a2cac
	FrontendUtils* GetUtils();// 0x7f9a130
	PlayerController* GetPlayerController();// 0xa1a2be0
	FName GetLastGameStatus();// 0xa1a2b58
	GameViewportClient* GetGameViewportClient();// 0x7f9a16c
	FName GetGameStatus();// 0xa1a2b74
	FrontendState* GetCurrentState();// 0xa1a2b3c

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 0x8]
	FName CurrentSceneCameraName;//[Offset: 0x48, Size: 0x8]
	CameraActor*[] SceneCameraList;//[Offset: 0x50, Size: 0x10]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x60, Size: 0x50]
	<FString,LevelStreamingDynamic*> DynamicLevelMap;//[Offset: 0x108, Size: 0x50]
	void UnRegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x7f9a6e4
	void SwitchSceneCamera(FName SceneCameraName, float BlendTime, bool bForce);// 0x7f9a94c
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x7f9a818
	void OnUnLoadedDynamicLevel();// 0x5483b70
	void OnLoadedDynamicLevel();// 0x5306440
	void OnHandleSteamingLevelComplete(int LinkID);// 0x4de52b0
	void OnDynamicLevelVisible();// 0x583ca98
	FrontendHUD* GetOwningFrontendHUD();// 0x7f9ab08
	CameraActor* GetCurrentSceneCamera();// 0x7f9a6b0

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x99071a8
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x99075c8

--------------------------------
Class: FrontendState.Object
	FName StateName;//[Offset: 0x28, Size: 0x8]
	FString Options;//[Offset: 0x30, Size: 0x10]
	FString MapPath;//[Offset: 0x40, Size: 0x10]
	FString StateURL;//[Offset: 0x50, Size: 0x10]
	World* MapWorld;//[Offset: 0x60, Size: 0x8]
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x68, Size: 0x8]
	enum RunningStatus;//[Offset: 0x70, Size: 0x1]
	<enum,int> StateTimeoutConfig;//[Offset: 0x78, Size: 0x50]
	void OnStatusChanged();// 0xa1a2d1c
	World* GetStateWorld();// 0xa1a2d54
	FString GetStateURL();// 0x7f9b5b4
	enum GetStateStatus();// 0xa1a2d70
	FString GetStateOptions();// 0x7f9b530
	FName GetStateName();// 0xa1a2d38
	FString GetMapPath();// 0x7f9b638

--------------------------------
Class: AssetsPreloaderBase.Object

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UAEUserWidget*[] WidgetList;//[Offset: 0x390, Size: 0x10]
	UAEUserWidget*[] WidgetBufferList;//[Offset: 0x3a0, Size: 0x10]
	void RemoveWidgetInternal(UAEUserWidget* Widget);// 0x7fa02c8
	void RemoveWidget(UAEUserWidget* Widget);// 0x7fa03d0
	void AddWidgetInternal(UAEUserWidget* Widget);// 0x7fa034c
	void AddWidget(UAEUserWidget* Widget);// 0x7fa044c

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 0x10]
	FName ContainerName;//[Offset: 0x10, Size: 0x8]
	int ZOrder;//[Offset: 0x18, Size: 0x4]
	UAEUserWidget* Widget;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: UAESkillAction_ReplaceCharAnim.UAESkillAction.ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x80, Size: 0x10]
	SkillReplaceJumpAnimData[] JumpAnimDataList;//[Offset: 0x90, Size: 0x10]
	bool bResetWhenPhaseFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bResetWhenNewReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	bool DoReplaceEnableUseBaseBSTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]
	bool IsRecoverOnReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1]

--------------------------------
Class: UAESkillAction.ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object

--------------------------------
Class: ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	bool bEnableObChangeDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bDisableObDelegateWhenReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	SkillEventParam* SkillEventParamRecieved;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x50, Size: 0xc]
	bool m_Inheritable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool m_OverrideActionColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	LinearColor m_ActionColor;//[Offset: 0x60, Size: 0x10]
	bool m_Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	void UpdateActionBP(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x627294c
	void UpdateAction_Internal(float DeltaSeconds);// 0x62727c0
	void UndoActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x6272a0c
	void UndoAction_Internal();// 0x9f0be98
	void ResetBP(UTSkillManagerComponent* SkillManagerComponent);// 0x62728c8
	void Reset_Internal();// 0x9f0be7c
	void Reset(ActorComponent* SkillManagerComponent);// 0x6272b20
	bool RealDoActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x6272a90
	bool RealDoAction_Internal();// 0x9f0beb4
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x6272b9c
	void PhaseExit_Internal();// 0x9f0be60
	bool JudgeNeedPhaseWait();// 0x9f0bef4
	void CameraModeChangedEventBP(UTSkillManagerComponent* SkillManagerComponent);// 0x6272844
	void CameraModeChangedEvent_Internal();// 0x9f0be44

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	bool IsBlueprintImplement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bForceExecute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bImportant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0x10]
	ConditionalReplaceAnimData ConditionalAnimData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ConditionalReplaceAnimData
	ConditionalSkillReplaceCharAnimData[] ConditionalAnimDataList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ConditionalSkillReplaceCharAnimData
	CompositionCondition[] Conditions;//[Offset: 0x0, Size: 0x10]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x10, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CompositionCondition
	enum ConditionPose;//[Offset: 0x0, Size: 0x1]
	enum Op;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SkillReplaceJumpAnimData
	byte CharacterJumpType;//[Offset: 0x0, Size: 0x1]
	ChararacterJumpAnimData[] TPPPoseData;//[Offset: 0x8, Size: 0x10]
	ChararacterJumpAnimData[] FPPPoseAnim;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ChararacterJumpAnimData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: SkillPreloadData
	Object* ObjectPtr;//[Offset: 0x0, Size: 0x28]
	enum MatchPlatform;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SkillConfigIDData
	int SkillConfigId;//[Offset: 0x0, Size: 0x4]
	SkillFlowData[] DataList;//[Offset: 0x8, Size: 0x10]
	bool bHasInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int UseCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SkillFlowData
	FString DataName;//[Offset: 0x0, Size: 0x10]
	bool bIsString;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString DataString;//[Offset: 0x18, Size: 0x10]
	float DataFloat;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: HandStateData
	enum OperationType;//[Offset: 0x0, Size: 0x1]
	FString OperationGroup;//[Offset: 0x8, Size: 0x10]
	HandStateCustomData CustomData;//[Offset: 0x18, Size: 0xc]
	bool OverrideCustomData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	enum eOperationSrcType;//[Offset: 0x25, Size: 0x1]
	float Timestamp;//[Offset: 0x28, Size: 0x4]
	int UniqueID;//[Offset: 0x2c, Size: 0x4]
	FString DetailDesc;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: HandStateCustomData
	int CustomIntData1;//[Offset: 0x0, Size: 0x4]
	int CustomIntData2;//[Offset: 0x4, Size: 0x4]
	enum WeaponSlot;//[Offset: 0x8, Size: 0x1]
	bool bNeedWeaponProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: UTSkillSynData
	uint64 DoneSkillPhaseMask;//[Offset: 0x0, Size: 0x8]
	int CurSkillIndex;//[Offset: 0x8, Size: 0x4]
	int CurSkillPhase;//[Offset: 0xc, Size: 0x4]
	enum StopReason;//[Offset: 0x10, Size: 0x1]
	bool bCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	int PhaseFlag;//[Offset: 0x14, Size: 0x4]
	int ClientBaseKey;//[Offset: 0x18, Size: 0x4]
	int CastCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: UTSkillPhaseJumpResult
	int SkillIndex;//[Offset: 0x0, Size: 0x4]
	byte DirtyTrigger;//[Offset: 0x4, Size: 0x1]
	enum ResultCode;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]
	int SkillID;//[Offset: 0x18, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x20, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]
	int SkillID;//[Offset: 0x18, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	byte HitSurfaceType;//[Offset: 0x22, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: UTAddedSkillSturct
	FString SkillTemplatePath;//[Offset: 0x0, Size: 0x10]
	int SkillIndex;//[Offset: 0x10, Size: 0x4]
	int SkillHandle;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SkillCDSyncData
	int SkillIndex;//[Offset: 0x0, Size: 0x4]
	bool bEnableCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int AvailableTimes;//[Offset: 0x8, Size: 0x4]
	int AvailableTimesRound;//[Offset: 0xc, Size: 0x4]
	float Energy;//[Offset: 0x10, Size: 0x4]
	float LastActiveTime;//[Offset: 0x14, Size: 0x4]
	bool bMarkModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: SkillModifierList
	SkillModifierInfo[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkillModifierInfo
	SkillModifierDesc Desc;//[Offset: 0x0, Size: 0x10]
	SkillModifierOperator Operator;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: SkillModifierDesc
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	FName Tag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SkillModifierOperator
	FString Value;//[Offset: 0x0, Size: 0x10]
	bool bIsNumericAttribute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	enum OperationType;//[Offset: 0x11, Size: 0x1]
	enum CombineType;//[Offset: 0x12, Size: 0x1]

--------------------------------
Class: SkillModifierCalculator
	FString CalculatedValue;//[Offset: 0x8, Size: 0x10]
	enum CalculatorType;//[Offset: 0x18, Size: 0x1]
	enum CombineType;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: PredcitionData
	PredictionKey BasePredictionKey;//[Offset: 0x0, Size: 0x10]
	SkillPredictionInfo[] PredictionList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkillPredictionInfo
	PredictionKey PredictionKey;//[Offset: 0x0, Size: 0x10]
	int BindPhaseId;//[Offset: 0x10, Size: 0x4]
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: SkillActorHealthComponent.ActorComponent.Object
	float Health;//[Offset: 0xf8, Size: 0x4]
	float MaxHealth;//[Offset: 0xfc, Size: 0x4]
	bool bOnlyHitByEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bCheckHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	int[] IgnoreDamageTypeArray;//[Offset: 0x108, Size: 0x10]
	bool bShowDamageNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bShowDamageNumberOnlyForCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	Vector DamageNumberDisplayOffset;//[Offset: 0x11c, Size: 0xc]
	bool bDamageNumberDisplayOffsetBaseDamageCauserDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	float AccumulateDamageInterval;//[Offset: 0x12c, Size: 0x4]
	delegate OnActorDeadEvent;//[Offset: 0x138, Size: 0x10]
	SkillActorBase* _OwnerSkillActor;//[Offset: 0x148, Size: 0x8]
	float TakeDestructiveDamage(Controller* EventInstigator, Actor* DamageCauser);// 0x7e57224
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7e57388
	bool ShouldIgnoreDamageSource(out const DamageEvent DamageEvent);// 0x7e56e60
	void Reset();// 0x7e56e4c
	void ProcessDamageNumberDisplay(float DamageNumber, Controller* EventInstigator, Actor* DamageCauser);// 0xa17497c
	float ProcessDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7e56f5c
	void OnActorDead();// 0xa174b70
	SkillActorBase* GetOwnerSKillActor();// 0x7e571f0
	float GetHealth();// 0xa174b8c
	void BP_OnActorDead();// 0xa1d39f8

--------------------------------
Class: NetPickUpWrapperResult
	int NetGuidValue;//[Offset: 0x0, Size: 0x4]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	enum SpawnReason;//[Offset: 0x6, Size: 0x1]
	PickUpItemData PickupInfo;//[Offset: 0x8, Size: 0x38]
	Vector Location;//[Offset: 0x40, Size: 0xc]
	PickUpItemData[] PickUpDataList;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NetRecoverBannerPlayerInfo
	uint32 RecoverBannerPlayerKey;//[Offset: 0x0, Size: 0x4]
	int LegendID;//[Offset: 0x4, Size: 0x4]
	FString PlayerName;//[Offset: 0x8, Size: 0x10]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float OptimizeTickInterval;//[Offset: 0xf8, Size: 0x4]
	float DefaultTickInterval;//[Offset: 0xfc, Size: 0x4]
	bool bUseOptimizeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	PickupItemSubsystem* CachedPickupItemSubsystem;//[Offset: 0x108, Size: 0x8]
	SearchedPickUpWrapperResult[] DisplayList;//[Offset: 0x110, Size: 0x10]
	bool bOpenPhoneGrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float PickupAnimTime;//[Offset: 0x130, Size: 0x4]
	float InPickupTime;//[Offset: 0x134, Size: 0x4]
	bool bOpenPickupListAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	byte[] PickupListAnimQueue;//[Offset: 0x140, Size: 0x10]
	bool[] PickupListAnimAutoPickQueue;//[Offset: 0x150, Size: 0x10]
	bool bCanAutoFillBulletWhenPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	bool bCanUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	class PickCustomSortRuleDataBase[] PickupCustomSortRuleMapDataList;//[Offset: 0x168, Size: 0x10]
	PickCustomSortRuleDataBase*[] PickupCustomSortRuleList;//[Offset: 0x178, Size: 0x10]
	uint64[] PickupDropIDPool;//[Offset: 0x188, Size: 0x10]
	uint64[] PickupListDropIDPool;//[Offset: 0x198, Size: 0x10]
	uint64[] PickupAroundInstanceIDPool;//[Offset: 0x1a8, Size: 0x10]
	int[] AutoPickItemList;//[Offset: 0x1c0, Size: 0x10]
	float HidePickupPanelTime;//[Offset: 0x1d8, Size: 0x4]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x1e0, Size: 0x10]
	Actor*[] PickupAroundActorPool;//[Offset: 0x1f0, Size: 0x10]
	Actor*[] PickupAroundActorBoxPool;//[Offset: 0x200, Size: 0x10]
	Actor*[] PickupEffectsActorPool;//[Offset: 0x210, Size: 0x10]
	Actor*[] PickupAroundActorsByField;//[Offset: 0x220, Size: 0x10]
	SearchedPickUpWrapperResult[] ConfirmedPickupWrapperPool;//[Offset: 0x230, Size: 0x10]
	SearchedPickUpTombBoxResult[] ConfirmedPickupTombBoxPool;//[Offset: 0x240, Size: 0x10]
	SearchedPickUpWrapperResult[] AllBoxListPoolTemp;//[Offset: 0x250, Size: 0x10]
	SearchedPickUpWrapperResult[] AllBoxListPoolTempFinal;//[Offset: 0x260, Size: 0x10]
	<enum,int> PickupWrapperGroupColumn;//[Offset: 0x270, Size: 0x50]
	int EachFrameMaxPickUpCount;//[Offset: 0x2e8, Size: 0x4]
	float LongClickPickUpTime;//[Offset: 0x2ec, Size: 0x4]
	int PickUpItemSize;//[Offset: 0x2f0, Size: 0x4]
	int PickUpTypeSize;//[Offset: 0x2f4, Size: 0x4]
	delegate OnPlayerPickUp;//[Offset: 0x2f8, Size: 0x10]
	bool bIsOpenPickUpPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float InfinitePickupInterval;//[Offset: 0x318, Size: 0x4]
	float PickUpRadius;//[Offset: 0x31c, Size: 0x4]
	float PickUpRadius_MainTown;//[Offset: 0x320, Size: 0x4]
	<enum,float> SpawnReasonToPickUpRadius;//[Offset: 0x328, Size: 0x50]
	float PickUpZOffset;//[Offset: 0x378, Size: 0x4]
	float CheckPickUpInterval;//[Offset: 0x37c, Size: 0x4]
	float PickUpReLocationInterval;//[Offset: 0x380, Size: 0x4]
	float PickUpZLimit;//[Offset: 0x384, Size: 0x4]
	float PickUpZLimit_MainTown;//[Offset: 0x388, Size: 0x4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	bool bEnableMultiObjPickUpVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	float ForwardPickUpAngle;//[Offset: 0x390, Size: 0x4]
	float ForwardPickUpAngle_MainTown;//[Offset: 0x394, Size: 0x4]
	float CacheForwardPickUpAngleCos;//[Offset: 0x398, Size: 0x4]
	bool bAsyncLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	float PickEffectRadius;//[Offset: 0x3f0, Size: 0x4]
	int PickupCheckCount;//[Offset: 0x3f4, Size: 0x4]
	int PickEffectCount;//[Offset: 0x3f8, Size: 0x4]
	ParticleSystem* PickupWrapperEffectParticle;//[Offset: 0x400, Size: 0x28]
	Color[] PickupWrapperEffectColor;//[Offset: 0x428, Size: 0x10]
	Color PickupWrapperEffectPingColor;//[Offset: 0x438, Size: 0x4]
	Vector PickupWrapperEffectNormal;//[Offset: 0x43c, Size: 0xc]
	Vector PickupWrapperEffectAim;//[Offset: 0x448, Size: 0xc]
	Transform PickupWrapperEffectTrans;//[Offset: 0x460, Size: 0x30]
	PickUpWrapperActor*[] ReadyToLoadPickupEffectArray;//[Offset: 0x490, Size: 0x10]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x4a0, Size: 0x10]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x4b0, Size: 0x4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x4b4, Size: 0x4]
	float FindPutDownPointZThreshold;//[Offset: 0x4b8, Size: 0x4]
	Vector2D RegionXRange;//[Offset: 0x4bc, Size: 0x8]
	Vector2D RegionYRange;//[Offset: 0x4c4, Size: 0x8]
	class PlayerTombBox* TombBoxTemplate;//[Offset: 0x4d0, Size: 0x28]
	bool bShowDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x4fc, Size: 0xc]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x508, Size: 0x4]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x50c, Size: 0x4]
	float DebugDrawTime;//[Offset: 0x510, Size: 0x4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	bool bEnableAutoPickNearOnHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]
	bool bAutoPickUpOptic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x516, Size: 0x1]
	bool bHidePickUpListOnShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x517, Size: 0x1]
	bool bAutoPickUpWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	bool bAutoPickUpSecondWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1]
	bool bLongClickReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 0x1]
	bool bHidePickupListWithinEnmity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51b, Size: 0x1]
	bool bPickUpLostSortingType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]
	float AutoPickUpInterval;//[Offset: 0x574, Size: 0x4]
	float SearchedPickUpInterval;//[Offset: 0x578, Size: 0x4]
	float PlayerDropItemInterval;//[Offset: 0x57c, Size: 0x4]
	int TickRecommendNearItemCount;//[Offset: 0x580, Size: 0x4]
	int TickRecommendTombBoxItemCount;//[Offset: 0x584, Size: 0x4]
	int AutoPickItemCacheNum;//[Offset: 0x588, Size: 0x4]
	bool bAutoPickUpHeatShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	bool bAutoPickUpRespawnBeacon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 0x1]
	<int,PickupItemConfigData> CacheConfigDataMap;//[Offset: 0x5e8, Size: 0x50]
	DataTable* MeshTablePtr;//[Offset: 0x638, Size: 0x8]
	DataTable* PickupMeshTable;//[Offset: 0x640, Size: 0x28]
	float ReportTimeInterval;//[Offset: 0x678, Size: 0x4]
	float SpecificTimeInteval;//[Offset: 0x67c, Size: 0x4]
	int SpecificTimesConfig;//[Offset: 0x680, Size: 0x4]
	int[] SpecificTypes;//[Offset: 0x6b0, Size: 0x10]
	double[] SpecificTriggerTimeArray;//[Offset: 0x6c0, Size: 0x10]
	float TolerencePickupRadius;//[Offset: 0x6d4, Size: 0x4]
	bool bOpenSecrity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	int OpenTombBoxGuideID;//[Offset: 0x6e8, Size: 0x4]
	int SwitchTomBoxGuideID;//[Offset: 0x6ec, Size: 0x4]
	<int,int> ActivityGuide;//[Offset: 0x6f0, Size: 0x50]
	float CheckDistance;//[Offset: 0x740, Size: 0x4]
	float CheckAnglePercent;//[Offset: 0x744, Size: 0x4]
	int ScriptModeLootGuideID;//[Offset: 0x770, Size: 0x4]
	Vector CircleEffectScale;//[Offset: 0x780, Size: 0xc]
	void UpdatePickupAvailableActors();// 0x7db8978
	void UpdatePickupAroundActorsInner();// 0x7db8900
	void UpdatePickupAroundActors();// 0x7db8914
	void TriggerIllegalOperation(ItemDefineID ItemID, ApexCharacter* OwnerPlayer, uint32 PlayerKey, enum CreditType, enum CreditTactics, FString InText);// 0x7db4a48
	void SubPickupEffectsActor(Actor* Target);// 0x7db9d70
	void SubPickupAvailableActor(Actor* Target);// 0x7dba088
	void SubPickupAroundActorBox(Actor* Target);// 0x7db9be4
	void SubPickupAroundActor(Actor* Target);// 0x7db9efc
	void StartTombSwitchGuide();// 0x7db3f8c
	void StartGuide(int GuideID);// 0x7db405c
	PickUpWrapperActor* SpawnWrapperOnGround(class Object WrapperClass, bool bUseRandomLoc, int ItemID, int DID, int ItemCount);// 0x7db8364
	void SpawnPickUpTomBoxOnGround(class Object BoxClass, bool bUseRandomLoc);// 0x7db80dc
	void SpawnPickUpItemOnGroundByID(int ItemID, int DID);// 0x7db8224
	void SpawnCircleEffect(InGameGuideStepInfo StepInfo, bool bStart, int HUDLayer, int StepIndex);// 0x7db3c4c
	void ShowPickupPanel();// 0x7db6aa8
	void SetTombBoxUIWidgetVisibility(int Index);// 0x7db72ac
	void SetPickUpFuncEnable(const bool bIsOpen);// 0x7db3a80
	void SetNearListShowState(bool bIsShow);// 0x7db6c54
	void SetManuallyNearListShowState(bool InValue);// 0x7db6b94
	void SetForbiddenPickup(enum InReason);// 0x7db8844
	void SetCanUpdateAround(bool InValue);// 0x7dba2f4
	void SetBoxListShowState(bool bIsShow);// 0x7db6d18
	void SetBattleStatePinch(int State);// 0x7db6ddc
	void SetAutoPickUp(bool bInAutoPick, bool bToClient);// 0x7dbae60
	void ServerPickUpWrapperActorFromMarketWithWeaponId(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, enum PickupGroup, ItemDefineID WeaponID);// 0x7db5010
	void ServerPickUpWrapperActorFromMarketWithReplaceData(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, BattleItemData ReplaceBattleItemData, enum PickupGroup);// 0x7db55c4
	void ServerPickUpWrapperActorFromMarket(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, enum PickupGroup, bool bAddPickedItemNum);// 0x7db5b84
	void SendPingDingItem(out const SearchedPickUpWrapperResult PickUpWrapperResult, enum DingType);// 0x7db79d8
	void RPCServerSetAutoPickUp(bool bInAutoPick);// 0x7dbad94
	void RPCServerPickUpTarget(PickUpReqData PickUpReqData, double PickupTimeStamp);// 0x7dbb928
	void RPCClientSetAutoPickUp(bool bInAutoPick);// 0x7dbacc8
	void RPCClientPickUpTarget();// 0xa15ede0
	void RPC_ServerUploadOpenTombBoxData(uint32 OtherPlayerKey, uint16 TotalTimes);// 0x7db4450
	void RPC_ServerUpdateOpticalPriorityMap(enum WeaponType, const OpticalPriorityInfo[] ChangedPriorityArray);// 0x7db6630
	void RPC_ServerSetAutoMaticPickupMirror(byte _AutoMaticPickupMirror);// 0x7db67a0
	void RPC_ServerGetPickFailedNotify(ItemDefineID ItemID);// 0x7db4234
	void RPC_MulticastPlayerPickUpActor(ItemDefineID ItemDefineID, float TargetZLoc);// 0x7dbb7d4
	void RPC_ClientUpdateTempOpticalMap(enum WeaponSlot, const OpticalPriorityInfo[] ChangedPriorityArray);// 0x7db6924
	void RPC_ClientNotifyPickFailResult(enum InResult, const ItemDefineID InItemID);// 0x7db430c
	void ResetDates();// 0x7db4f14
	void ReportIllegalOperation(ItemDefineID ItemID, ApexCharacter* OwnerPlayer, uint32 PlayerKey, enum CreditType, enum CreditTactics, FString InText);// 0x7db464c
	void ReplacePickUpWrapperActor(out const SearchedPickUpWrapperResult TargetPickUpWrapperResult, out const BattleItemData ReplaceBattleItemData);// 0x61ae848
	void RecordDates(ItemDefineID ItemID);// 0x7db4e44
	void PlayPickupSound(ItemDefineID ItemDefineID);// 0x7dbc444
	void PlayPickupListAnimQueue();// 0x7dbcaf4
	void PickUpWrapperTarget(PickUpWrapperActor* Target, PickUpItemData PickUpData, bool isAutoPickUp);// 0x7dbc64c
	void PickUpWrapperActorLua(out const SearchedPickUpWrapperResult Result, bool bCheckClient);// 0x7dbd1c8
	bool PickUpWrapperActor(PickUpWrapperActor* Target, PickUpItemData PickUpData, bool checkClient, bool isAutoPickUp, bool bLongPressReplaced);// 0x7dbd47c
	bool PickUpWeaponAttach(out const SearchedPickUpWrapperResult Result, ItemDefineID WeaponID);// 0x7dbcf00
	void OperatePickupAvailableActorPool();// 0x7dba074
	void OnTargetItemDestroyed(out const ItemDefineID InItemID);// 0x7db3b44
	void OnSettingChanged(FString[] ChangedDataArray);// 0x5d37ecc
	void OnPlayerStopFire(Weapon* Weapon);// 0x7db6864
	void OnPlayerStartFire(Weapon* Weapon);// 0x4ef415c
	void OnPlayerBattleStateChange(bool IsEnterBattle);// 0x50506cc
	void OnPingItemUpdate(int64 ItemUUID, uint32 PlayerKey, bool bIsShow, bool IsReserve);// 0x5b7568c
	void NotifyGamePadPickupListState();// 0x7db6b80
	void NotifyClientPickupSuccess(const PickUpReqData PickupItem);// 0x7dbb4c0
	bool NeedTeamupWhenPick(PickUpWrapperActor* InActor);// 0x7db4150
	void LogicPlayPickupAnimEnd();// 0x7dbcbc4
	void LoadMeshTableFinished();// 0x7db612c
	void LoadMeshTable();// 0x7db6140
	void JudgeInPickOverTime(float DeltaTime);// 0x7dbcb08
	bool IsPlayerInMainTown();// 0x7dba2bc
	bool IsPickUpItemDataBelongNear(out const PickUpItemData ItemData);// 0x7db8c44
	bool IsInRoomTeam();// 0x7db4118
	void InitPickUpItemConfigData();// 0x7db645c
	void InitMultiActivityItemConfig(out PickupItemConfigData InCachedData, int ItemID);// 0x7db6154
	void HidePickupPanel();// 0x7db6a94
	void HandlePlayPickupListAnim(out const PickUpReqData PickupItem);// 0x7dbcbe4
	void HandlePlayerPickUpActor(PickUpWrapperActor* WrapperActor, float TargetZLoc);// 0x7dbc514
	void HandlePickupPanelVisble(bool bInBattleState);// 0x7db6abc
	WeaponManagerComponent* GetWeaponManagerComponent();// 0x7dbda44
	double GetServerTime();// 0x7dbb48c
	int GetRecommendTombBoxItemCount();// 0x7db7220
	int GetRecommendNearItemCount();// 0x7db725c
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x7db873c
	float GetPickUpZLimit();// 0x7dba3b4
	PickUpWrapperActor* GetPickUpWrapperActorWithInstanceID(uint64 InstanceID);// 0x7db898c
	float GetPickUpRadius(enum SpawnReason);// 0x7dba3e8
	bool GetPickUpListPanelShow();// 0x7db8804
	int GetPickUpItemDataBelongTombBoxIndex(out const PickUpItemData ItemData);// 0x7db8a50
	PickupItemConfigData GetPickUpItemConfigData(int ItemID);// 0x7db6470
	bool GetNearListShowState();// 0xa15ed70
	bool GetManuallyNearListShowState();// 0xa15ed54
	bool GetLongClickReplaceSetting();// 0xa15edc4
	float GetLongClickPickUpInterval();// 0x7db71a8
	SiglePingInfo GetItemPingInfo(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x7db765c
	bool GetIsReservedBySelf(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x7db7424
	SearchedPickUpWrapperResult[] GetConfirmedPickupWrapperPool();// 0x7db98b0
	int GetConfirmedPickupWrapperCount();// 0x7db8e78
	SearchedPickUpTombBoxResult[] GetConfirmedPickupTombBoxPool();// 0x7db91d4
	int GetConfirmedPickupTombBoxCount();// 0x7db8e3c
	bool GetBoxListShowState();// 0xa15ed8c
	int GetBattleStatePinch();// 0xa15eda8
	BackpackComponent* GetBackpackComponent();// 0x7dbda78
	float GetAutoPickUpInterval();// 0x7db71e4
	bool GetAutoPickUp();// 0x7dbac90
	int[] GetAutoPickItemList();// 0x7db7124
	SearchedPickUpWrapperResult[] GetAllBoxItemListPool();// 0x7db8eb4
	void EndGuide(int GuideID);// 0x7db3fa0
	void DeletePickUpItemPing(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x7db7c84
	void ClientUploadOpenTombBoxData(int InIndex);// 0x7db4590
	void ClearPickupEffectsActorPool();// 0x7db9d5c
	void ClearPickupAroundActorPool();// 0x7db9ee8
	void ClearPickupAroundActorBoxPool();// 0x7db9bd0
	void ClampWorldLocation(out Vector OutVector);// 0x7db862c
	void CheckPickupUIShow();// 0x7db8928
	void CheckPickupActorEffect();// 0x7db893c
	void CheckPickupActorBoxAvailable();// 0x7db8950
	void CheckPickupActorAvailable();// 0x7db8964
	bool CheckAutoPickItemsConflict(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x7db6e98
	bool CanReport(ItemDefineID ItemID);// 0x7db4f2c
	bool CanLongClickPickUpItem(PickUpItemData PickupInfo);// 0x7dba4ac
	bool CanExeGuide(int GuideID);// 0x7db3ec4
	bool CanClickPickUpItem(PickUpItemData PickupInfo, bool IgnoreLongClick);// 0x7dba85c
	void BroadcastSelectTombBox(int TombBoxResultIndex);// 0x7db7368
	void AutoPickUpActor();// 0x7db7298
	void AutoFillBulletWhenPickup(out PickUpReqData PickupItem, out ContainerData InContainerData);// 0x7dbafa8
	void AddToPickupActorPool(Actor* Target);// 0x7dba200
	void AddPickUpItemPing(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x7db7eb0
	void AddPickupEffectsActor(Actor* Target);// 0x7db9e2c
	void AddPickupAvailableActor(Actor* Target);// 0x7dba144
	void AddPickupAroundActorBox(Actor* Target);// 0x7db9ca0
	void AddPickupAroundActor(Actor* Target);// 0x7db9fb8

--------------------------------
Class: PickupItemSubsystem.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] PickupAvailableActorPool;//[Offset: 0x88, Size: 0x10]
	Actor*[] PickupNearActorPool;//[Offset: 0x98, Size: 0x10]
	Actor*[] PickupAroundActorBoxPool;//[Offset: 0xa8, Size: 0x10]
	Actor*[] HeatShieldActorPool;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: SearchedPickUpWrapperResult
	int SearchedPickUpTime;//[Offset: 0x8, Size: 0x4]
	bool IsDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool IsSick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool IsLowQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	int RecommendCount;//[Offset: 0x10, Size: 0x4]
	int RecommendPriority;//[Offset: 0x14, Size: 0x4]
	PickUpItemData PickupInfo;//[Offset: 0x18, Size: 0x38]
	int ItemSubType;//[Offset: 0x50, Size: 0x4]
	ItemDefineID BulletDefineID;//[Offset: 0x58, Size: 0x18]
	enum PickupGroup;//[Offset: 0x70, Size: 0x1]
	bool IsGroupColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	int Size;//[Offset: 0x74, Size: 0x4]
	bool bReserved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	int NetGuid;//[Offset: 0x7c, Size: 0x4]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool IsLobaOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	enum SpawnReason;//[Offset: 0x83, Size: 0x1]
	Vector Location;//[Offset: 0x84, Size: 0xc]
	uint32 RecoverBannerPlayerKey;//[Offset: 0x90, Size: 0x4]
	int RecoverBannerLegendId;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: PickCustomSortRuleDataBase.Object

--------------------------------
Class: SearchedPickUpTombBoxResult
	PlayerTombBox* TombBox;//[Offset: 0x0, Size: 0x8]
	int SearchedPickUpTime;//[Offset: 0x8, Size: 0x4]
	SearchedPickUpWrapperResult[] WrapperList;//[Offset: 0x10, Size: 0x10]
	SearchedPickUpWrapperResult[] SeekerWrapperList;//[Offset: 0x20, Size: 0x10]
	int Quality;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PickupItemConfigData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FText ItemName;//[Offset: 0x8, Size: 0x18]
	FText ShotItemDesc;//[Offset: 0x20, Size: 0x18]
	FName ItemSmallIcon;//[Offset: 0x38, Size: 0x8]
	FName ItemBigIcon;//[Offset: 0x40, Size: 0x8]
	int ItemQuality;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: InGameGuideStepInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	bool IsComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FName BlueprintName;//[Offset: 0x8, Size: 0x8]
	FName NodeName;//[Offset: 0x10, Size: 0x8]
	FName HighLightBlueprintName;//[Offset: 0x18, Size: 0x8]
	FName HighLightNodeName;//[Offset: 0x20, Size: 0x8]
	FName JumpBlueprintName;//[Offset: 0x28, Size: 0x8]
	FName JumpNodeName;//[Offset: 0x30, Size: 0x8]
	int JumpGuideID;//[Offset: 0x38, Size: 0x4]
	bool IsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool IsAllScreenButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool IsForceGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	float Duration;//[Offset: 0x40, Size: 0x4]
	enum GuideType;//[Offset: 0x44, Size: 0x1]
	FText GraphicGuideTitle;//[Offset: 0x48, Size: 0x18]
	GraphicGuideInfo[] GraphicGuideInfos;//[Offset: 0x60, Size: 0x10]
	InGameGuideConditionBase*[] ConditionList;//[Offset: 0x70, Size: 0x10]
	InGameGuideConditionBase*[] EndConditionList;//[Offset: 0x80, Size: 0x10]
	bool IsAutoEnterNextStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	float ResetDurationTime;//[Offset: 0x94, Size: 0x4]
	FString LuaPath;//[Offset: 0x98, Size: 0x10]
	FString[] LuaArgs;//[Offset: 0xa8, Size: 0x10]
	bool IsKeyStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool IsContinueCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	FText ShowTips;//[Offset: 0xc0, Size: 0x18]
	bool bDrawHFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	enum ShowTipsDir;//[Offset: 0xd9, Size: 0x1]
	Vector2D ShowTipsOffsetEx;//[Offset: 0xdc, Size: 0x8]
	FString ResetShowTips;//[Offset: 0xe8, Size: 0x10]
	bool bEnableHandGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float HandGuideTime;//[Offset: 0xfc, Size: 0x4]
	enum HandGuideType;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: GraphicGuideInfo
	SlateBrush ImageIcon;//[Offset: 0x0, Size: 0x88]
	FText GuideTitle;//[Offset: 0x88, Size: 0x18]
	FText GuideDesc;//[Offset: 0xa0, Size: 0x18]

--------------------------------
Class: InGameGuideConditionBase.Object
	void OnStepStartBP();// 0xa1d39f8
	void OnStepEndBP();// 0xa1d39f8
	void EnableBP();// 0xa1d39f8
	void DisabledBP();// 0xa1d39f8
	bool CheckConditionBP();// 0xa13b5dc

--------------------------------
Class: PickUpReqData
	PickUpWrapperActor* PickupActor;//[Offset: 0x0, Size: 0x8]
	PickUpItemData PickUpData;//[Offset: 0x8, Size: 0x38]
	bool bIsAutoPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	int AutoPickUpRecommendCount;//[Offset: 0x44, Size: 0x4]
	bool bIsReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	PickUpItemData ReplaceItemData;//[Offset: 0x50, Size: 0x38]
	ItemDefineID TargetID;//[Offset: 0x88, Size: 0x18]
	bool bLobaMarket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bLongPressReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	bool bQuickReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]

--------------------------------
Class: OpticalPriorityInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Priority;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	delegate OnPlayerWeaponChangeState;//[Offset: 0x100, Size: 0x10]
	delegate OnPlayerStartFireDelegate;//[Offset: 0x110, Size: 0x10]
	delegate OnPlayerStopFireDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnPlayerWeaponShootDelegate;//[Offset: 0x130, Size: 0x10]
	delegate OnPlayerReportShootDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnPlayerWeaponReloadEndDelegate;//[Offset: 0x168, Size: 0x10]
	delegate OnWeaponDestroyDelegate;//[Offset: 0x178, Size: 0x10]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x188, Size: 0x10]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x198, Size: 0x10]
	delegate OnPutOnWeaponBeginDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate OnPutOnWeaponEndDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate OnPutOffBeginDelegate;//[Offset: 0x1c8, Size: 0x10]
	delegate OnPutOffEndDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate PreSwapWeaponDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate PostSwapWeaponDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate EnterFireChangeStageDelegate;//[Offset: 0x238, Size: 0x10]
	delegate OnUnEquipImmediatelyDelegate;//[Offset: 0x248, Size: 0x10]
	delegate EventChangeUseWeaponSlot;//[Offset: 0x258, Size: 0x10]
	ApexCharacter* OwnerCharacter;//[Offset: 0x2b0, Size: 0x8]
	WeaponTransformConfig[] WeaponTransformConfigs;//[Offset: 0x2b8, Size: 0x10]
	bool bHnadleWeaponFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bUseSimuScreenRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	float WeaponDisInView;//[Offset: 0x2cc, Size: 0x4]
	float CheckWeaponFollowTime;//[Offset: 0x2d0, Size: 0x4]
	float CheckWeaponFollowUpdateTime;//[Offset: 0x2d4, Size: 0x4]
	float WeaponFollowDisMin;//[Offset: 0x2d8, Size: 0x4]
	float WeaponFollowDisMax;//[Offset: 0x2dc, Size: 0x4]
	float WeaponFollowDisMinADS;//[Offset: 0x2e0, Size: 0x4]
	float WeaponFollowDisMaxADS;//[Offset: 0x2e4, Size: 0x4]
	float SimuScreenRatioMin;//[Offset: 0x2e8, Size: 0x4]
	float SimuScreenRatioMax;//[Offset: 0x2ec, Size: 0x4]
	<enum,SimuWeaponFollow> TeamWeapon1Follow;//[Offset: 0x2f0, Size: 0x50]
	<enum,SimuWeaponFollow> TeamWeapon2Follow;//[Offset: 0x340, Size: 0x50]
	<enum,SimuWeaponFollow> EnemyWeapon1Follow;//[Offset: 0x390, Size: 0x50]
	<enum,SimuWeaponFollow> EnemyWeapon2Follow;//[Offset: 0x3e0, Size: 0x50]
	enum[] StatesToFire;//[Offset: 0x438, Size: 0x10]
	bool bDrawAutoShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bBallisticRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	bool bBallisticBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 0x1]
	bool bCostFireSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44b, Size: 0x1]
	bool bRecoveryEndClearPressGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	bool bLinkFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 0x1]
	bool RemoteIsOptimizeBulletEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44e, Size: 0x1]
	int RemoteBulletCountOfScreen;//[Offset: 0x450, Size: 0x4]
	int RemoteBulletDataGetPartNum;//[Offset: 0x454, Size: 0x4]
	bool RemoteIsHideMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool Is3DUICustomColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	bool bFireShakeOld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 0x1]
	int FireShakeCounts;//[Offset: 0x45c, Size: 0x4]
	float MinCreditScoreEnableDamage;//[Offset: 0x460, Size: 0x4]
	LinearColor CurCustomColor;//[Offset: 0x464, Size: 0x10]
	float CurCustomWidth;//[Offset: 0x474, Size: 0x4]
	float CurCustomHalo;//[Offset: 0x478, Size: 0x4]
	int CurBCustomSet;//[Offset: 0x47c, Size: 0x4]
	LinearColor CurCustomLaserColor;//[Offset: 0x480, Size: 0x10]
	<FName,WeaponBallisticInfo> WeaponBallisticMap;//[Offset: 0x4a0, Size: 0x50]
	int BulletNoEnoughCount;//[Offset: 0x4f0, Size: 0x4]
	uint32 CurShootID;//[Offset: 0x4f4, Size: 0x4]
	<uint32,bool> ReportShootIDMap;//[Offset: 0x4f8, Size: 0x50]
	enum[] StatesCacheFire;//[Offset: 0x548, Size: 0x10]
	float CacheFireProtectTime;//[Offset: 0x558, Size: 0x4]
	delegate OnWeaponAttachChangedDelegate;//[Offset: 0x578, Size: 0x10]
	float SwitchWeaponValue;//[Offset: 0x588, Size: 0x4]
	enum CurUseWeaponSlot;//[Offset: 0x58c, Size: 0x1]
	enum SyncUseWeaponSlot;//[Offset: 0x58d, Size: 0x1]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	SwitchWeaponParamter SimSwitchWeapon;//[Offset: 0x623, Size: 0x6]
	OBEffectBullet*[] OBEffectBulletCacheList;//[Offset: 0x668, Size: 0x10]
	class ShootWeaponBullet* BulletTemplate;//[Offset: 0x678, Size: 0x8]
	class AutoEffectBullet* BulletEffectTemplate1P;//[Offset: 0x680, Size: 0x8]
	class OBEffectBullet* BulletEffectTemplate3P;//[Offset: 0x688, Size: 0x8]
	ApgameWeaponSlotMap RepWeaponSlotMap;//[Offset: 0x6c0, Size: 0x1]
	int GunAdsGuideId;//[Offset: 0x710, Size: 0x4]
	float EnemyDistance;//[Offset: 0x714, Size: 0x4]
	<enum,int> GunGuideMap;//[Offset: 0x718, Size: 0x50]
	enum[] AdsGunGuide;//[Offset: 0x768, Size: 0x10]
	float PickupGuideIntervalTime;//[Offset: 0x778, Size: 0x4]
	<int,int> AmmoGuideNumThreshold;//[Offset: 0x780, Size: 0x50]
	bool bUseThermal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	bool bGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 0x1]
	void SwitchWeaponBySlot(enum Slot, bool bUseAnimation, bool bNeedPop, bool bInNoneToMeleeSlot, bool bNeedChangeFireBtn);// 0x7f5cf4c
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x7f5cf38
	void StartGuide(int GuideID);// 0x7f5960c
	void SetUseThermal(bool InValue);// 0xa19abb4
	void SetFirePrepareShooting(bool State);// 0x7f5c078
	void SetBtnPressState(bool bShoot, bool bPress, bool bNeedAim, bool bNeedCloseAim, float ShootDelayTime, bool bNeedNotify, bool bReleaseFire);// 0x7f5bb58
	void SetAutoShootFiring(bool _AutoShootFire);// 0x7f5bfa0
	void SetAutoEnterAim(bool _AutoEnterAim);// 0xa19aedc
	void ServerStartSwitchWeaponWithTime(enum Slot, bool bUseAnimation, double NowTime);// 0x7f5a950
	void ServerStartSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bNeedPop, bool bInFirstPick);// 0x7f5d26c
	void ServerMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x7f5c500
	void RPC_ServerSwitchWeaponWithTime(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime, bool bNeedPop, bool bInFirstPick, byte InSwitchOpIndex);// 0x7f59d50
	void RPC_ServerSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bNeedPop, bool bInNoneToMeleeSlot);// 0x7f5d9fc
	void RPC_ServerSetFireShooting(bool State, bool bCancel);// 0xa19b160
	void RPC_ServerSetBulletNoEnoughCount(int count);// 0xa19b4b0
	void RPC_Server_WeaponCharge(ApgameWeaponInstanceId InstanceID);// 0x7f5e110
	void RPC_Server_SwapWeapon();// 0x7f5e3e0
	void RPC_Server_LocalForceFinishSwitch(bool bInterrupted);// 0x7f5e450
	void RPC_RefreshEquipStateAfterSpawnWeapon(ApgameWeaponInstanceId InWeaponDataIdentity, enum InDataSlot, byte InNetMsgIndex, bool bInPlayerControlled, bool bInServerEquipped);// 0x7f5e778
	void RPC_MulticastSwitchWeapon(enum InDataSlot, byte InDataSlotIndex, bool bUseAnimation, bool bNeedPop);// 0x7f5d738
	void RPC_MulticastSpawnWeapon(enum InDataSlot, const ApgameWeaponInitializationData InData, const ApgameWeaponAttributeSetInitialDataHandle InInitialDataHandle);// 0x7f5f5a0
	void RPC_MulticastSetFireShooting(bool State, bool bCancel);// 0xa19afe8
	void RPC_MulticastDestroyWeapon(ApgameWeaponInstanceId InWeaponDataIdentity, bool bEnableBroadcast);// 0x7f5ec28
	void RPC_Multicast_WeaponCharge(ApgameWeaponInstanceId InstanceID);// 0x7f5e010
	void RPC_Multicast_OnAttachmentChanged(enum InDataSlot);// 0x7f5e210
	void RPC_Multicast_LocalForceFinishSwitch(bool bInterrrupted);// 0x7f5e55c
	void RPC_ClientTakeOutWeaponIfEmptyHand(enum InPreferDataSlot, bool bInSpawned, byte InSwitchOpIndex, ApgameWeaponInstanceId InInstanceId);// 0x7f596f0
	void RPC_ClientTakeDamage(float Distance);// 0xa19aca4
	void RPC_ClientSwitchWeaponWithTime(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime, bool bNeedPop);// 0x7f5b34c
	void RPC_ClientSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bNeedPop);// 0x7f599c0
	void RPC_ClientFixSwitchError(enum InDataSlot, byte InDataSlotIndex, bool bEquip);// 0x7f5d4fc
	void RPC_ClientChangeReloadTimePerkAttr(enum Op, float ChangeValue);// 0xa19ad7c
	void RPC_Client_SetNeedSwitchIcon(bool bNeed);// 0xa19b2d8
	void RPC_Client_ServerAckSwitchWeapon(double AckTime);// 0x7f5b24c
	void RequestFire();// 0x7f5ec14
	void OnWeaponAttachmentChanged(Weapon* Weapon);// 0x7f5e310
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x4d0141c
	void OnSelfTakeDamage(float Damage, int DamageType, bool HeadShot, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x7f59160
	void OnRep_SyncUseWeaponSlot();// 0x4c69ec8
	void OnRep_SimSwitchWeapon();// 0x4f70048
	void OnRep_RepWeaponSlotMap();// 0x5f95c8c
	void OnPlayerWeaponReloadEnd();// 0x7f5de0c
	void OnPawnPlayMontageWithSectionPos(byte CharacterAnimType, float PlayRate, float InTimeToStartMontageAt, bool bStopAllMontages, bool bIsFPP);// 0x4dd607c
	void OnPawnPlayMontageWithAnimPoseType(byte InPawnAnimType, byte InPoseType, float InPlayRate, float InStart, bool bInStopAllMontages, bool bInIsFPP);// 0x4e4cda0
	void OnPawnPlayMontage(byte CharacterAnimType, float PlayRate, float InTimeToStartMontageAt, bool bStopAllMontages, bool bIsFPP);// 0x4b7bb44
	void OnPawnDoMontageWithAnimType(byte CharacterAnimType, bool bPlayOrStop);// 0x4b8cae4
	void OnMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x7f5c7c8
	void OnGamepadCheckWeaponReload();// 0x7f596dc
	void OnEquipChargeRifle();// 0x7f59048
	void OnEnterState(enum State, enum EnteredOverrideState);// 0x4e1a018
	void OnAttachProp(enum AttachmentType);// 0x7f5cd90
	void OnApexCharacterPossessedCallback(Controller* pController);// 0x7f5f9e8
	void OnAimEnd();// 0x7f5ebc0
	void OnAimChange(bool IsAiming);// 0x7f5eae8
	void NotifyUseItem();// 0x7f5c210
	void NotifyChargeUI(Weapon* Weapon);// 0x7f5df40
	void LocalSwapWeapon();// 0x7f5e43c
	void LocalForceFinishSwitchWeapon(bool bNeedInterrupt);// 0x7f5ce60
	void LocalEquipFirstWeapon(enum InDataSlot);// 0x7f5e6a8
	void LeaveRaiseAfterClimb();// 0x7f5c1c8
	void HandlePlayerStopFire(Weapon* InWeapon);// 0x5271334
	void HandlePlayerStartFire(Weapon* InWeapon);// 0x526a9d8
	void HandleFireRelatedPawnState(bool bIsPressing, bool bNeedAim, bool bNeedCloseAim, float FireDelayTime);// 0x5157614
	void HandleContinuousUseRecover();// 0x7f5c224
	WeaponTransformConfig GetWeaponTransformConfig(int WeaponID);// 0x7f5f29c
	Weapon* GetWeaponTargetBySlot(enum Slot);// 0xa19b588
	Weapon* GetWeaponTargetByItemID(int ItemID);// 0x7f5f040
	Weapon* GetWeaponTargetByInstanceID(int InstanceID);// 0x7f5ef68
	ApgameWeaponCoreComponent* GetWeaponCoreCompByUISlot(enum InUiSlot);// 0x7f5a7bc
	ApgameWeaponCoreComponent* GetWeaponCoreCompByDataSlot(enum InDataSlot);// 0x7f5a524
	ShootWeapon* GetWeaponByDataSlot(enum InDataSlot);// 0x7f5a3ac
	ShootWeapon* GetUsingWeapon();// 0x7f5a2e0
	bool GetUseThermal();// 0xa19ac88
	enum GetUISlotByDataSlot(enum InDataSlot);// 0x7f5a6dc
	FName GetTargetBackSlot(Weapon* Weapon);// 0x7f5de68
	float GetSwitchTotalTime();// 0x7f5de20
	ParticleSystem* GetParticleTemplate();// 0x7f5905c
	bool GetNeedSwitchIcon();// 0xa19b3b8
	ShootWeapon* GetLastUseMainWeapon();// 0x7f5a278
	enum GetLastUseMainUISlot();// 0x7f5a2ac
	bool GetFirePrepareShooting();// 0x7f5c150
	bool GetFirePreparePressing();// 0x7f5c190
	int GetEquipScopeMaxSight();// 0x7f5a91c
	enum GetDataSlotByUISlot(enum InUiSlot);// 0x7f5a5fc
	enum GetCurrentUsingWeaponSlot();// 0x7f5e668
	Weapon* GetCurrentUsingWeapon();// 0xa19b3d4
	enum GetCurrentUsingDataSlot();// 0xa19b494
	bool GetAutoFireShooting();// 0xa19afcc
	bool GetAutoEnterAim();// 0xa19afb0
	Weapon*[] GetAllWeaponTargetList();// 0x7f5ee98
	ProxyActorWeaponData[] GetAllWeaponProxyData();// 0x7f5edc8
	void GetAimShootConfigByAutoShooting(out bool bNeedAim, out float ShootDelayTime);// 0x7f5b748
	enum GetADefaultWeaponSlot();// 0x7f5c1dc
	void GenerateFakeHitEffect(ParticleSystem* Template);// 0x7f59090
	void ForceBackpackWeapon(Weapon* InWeapon);// 0x7f5cbf0
	void EnterFireChangeStageSingle(bool bPress, bool bNeedAim, bool bNeedCloseAim, float ShootDelayTime);// 0x7f5b8c8
	void CreateFakeHitEffectPool();// 0x7f59034
	void ClientSwitchWeapon(enum Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime);// 0x7f5af34
	void ClientSaveSwitchData(enum Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double NowTime);// 0x7f5ab44
	void ClientRemoveConfirmedData(double RemoveTime);// 0x7f5ae60
	void ClientMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x7f5c238
	void ClientBackpackWeapon(Weapon* ShootWeapon);// 0x7f5ccc0
	void ClearPool();// 0x7f59018
	void CheckAutoRunGunState(enum curPawnState, bool bIsEnter);// 0x7f5ca90
	void ChangeUseWeaponSlotEvent__DelegateSignature(enum InOld, enum InNew);// 0xa1d39f8
	void CalSwitchProcess();// 0x7f5de54
	void BeginClientAccounting();// 0x5258188

--------------------------------
Class: ApgameWeaponInstanceId
	uint16 Value;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: ApgameWeaponInitializationData
	uint16 RepIndex;//[Offset: 0x0, Size: 0x2]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 0x18]
	SpawnWeaponAdditionalData AdditionalData;//[Offset: 0x20, Size: 0x38]

--------------------------------
Class: SpawnWeaponAdditionalData
	bool bUseSpecialBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bFirstPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	int8 SignatureModelIndex;//[Offset: 0x2, Size: 0x1]
	int SkinID;//[Offset: 0x4, Size: 0x4]
	int InitBulletNum;//[Offset: 0x8, Size: 0x4]
	int DeriveID;//[Offset: 0xc, Size: 0x4]
	int ExtraBulletNum;//[Offset: 0x10, Size: 0x4]
	int SpecialBulletNum;//[Offset: 0x14, Size: 0x4]
	int SkinOwnerKey;//[Offset: 0x18, Size: 0x4]
	int CumulativeKill;//[Offset: 0x1c, Size: 0x4]
	int SignatureId;//[Offset: 0x20, Size: 0x4]
	int SignatureLevel;//[Offset: 0x24, Size: 0x4]
	int[] SignatureFeatureIdList;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ApgameWeaponAttributeSetInitialDataHandle

--------------------------------
Class: WeaponTransformConfig
	int ID;//[Offset: 0x0, Size: 0x4]
	float TPPAO;//[Offset: 0x4, Size: 0x4]
	Vector TPPOffsetHand;//[Offset: 0x8, Size: 0xc]
	<enum,Transform> TPPTransformsMap;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: SimuWeaponFollow
	bool bWeaponMainFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bWeaponAttachFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: WeaponBallisticInfo

--------------------------------
Class: SwitchWeaponParamter
	enum TargetSlot;//[Offset: 0x0, Size: 0x1]
	bool bNeedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum CurrentSlot;//[Offset: 0x2, Size: 0x1]
	bool bNeedPop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bFirstPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	byte RepIndex;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: OBEffectBullet.SignificanceManagedActor.Actor.Object
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x290, Size: 0x10]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2b8, Size: 0x8]
	float CurMovingTime;//[Offset: 0x2e0, Size: 0x4]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: ShootWeaponBullet.SignificanceManagedActor.Actor.Object
	Color DebugBulletTraceColor;//[Offset: 0x2a0, Size: 0x4]
	Color DebugBulletSphereColor;//[Offset: 0x2a4, Size: 0x4]
	float DebugBulletTraceTime;//[Offset: 0x2a8, Size: 0x4]
	float DebugBulletTraceInterval;//[Offset: 0x2ac, Size: 0x4]
	int DebugBulletSphereSegments;//[Offset: 0x2b0, Size: 0x4]
	ShootWeaponDataAsset* ShootConfigData;//[Offset: 0x2c0, Size: 0x8]
	BulletMovementComponent* PMComp;//[Offset: 0x2f8, Size: 0x8]
	SphereComponent* SphereComp;//[Offset: 0x300, Size: 0x8]
	Vector ShootDir;//[Offset: 0x308, Size: 0xc]
	MovementSyncData ShootStart;//[Offset: 0x318, Size: 0x18]
	delegate OnBulletImpact;//[Offset: 0x380, Size: 0x10]
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0xa1d39f8
	void OnImpact(out const HitResult _ImpactResult);// 0x7e3fb78
	ApexCharacter* GetInstigatorCharacter();// 0x7e3fb44

--------------------------------
Class: ShootWeaponDataAsset.WeaponDataAsset.DataAsset.Object
	bool bHasMagazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x960, Size: 0x1]
	bool bCanAutoShoot;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x960, Size: 0x1]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x960, Size: 0x1]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x960, Size: 0x1]
	bool bUseRebasing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x960, Size: 0x1]
	bool bDebugAIShotGunMissPierce;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x960, Size: 0x1]
	bool bIsAlternantSocketActive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x960, Size: 0x1]
	bool bIsAutoSwitchAlternantSocket;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x960, Size: 0x1]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x961, Size: 0x1]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x961, Size: 0x1]
	bool bAllowAim;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x961, Size: 0x1]
	bool EnableManualCameraOffsetZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x961, Size: 0x1]
	bool bCirculateReloadAnim;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x961, Size: 0x1]
	bool bAimAndBolt;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x961, Size: 0x1]
	byte AutoShootTargetChannel;//[Offset: 0x962, Size: 0x1]
	enum ReloadMethod;//[Offset: 0x963, Size: 0x1]
	enum SightType;//[Offset: 0x964, Size: 0x1]
	enum FireModeDefault;//[Offset: 0x965, Size: 0x1]
	enum FireModeDefaultUnlock;//[Offset: 0x966, Size: 0x1]
	enum ImpactDirType;//[Offset: 0x967, Size: 0x1]
	enum ShoulderADSConfig;//[Offset: 0x968, Size: 0x1]
	int8 BulletPierceTimes;//[Offset: 0x969, Size: 0x1]
	CurveVector* SprintCameraShakeCurve;//[Offset: 0x970, Size: 0x8]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x978, Size: 0x20]
	float HammerPointDamageRatio;//[Offset: 0x998, Size: 0x4]
	FName HitEffectTag;//[Offset: 0x99c, Size: 0x8]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x9a4, Size: 0x4]
	float AutoEffectBulletDelay;//[Offset: 0x9a8, Size: 0x4]
	float BeamStartLength;//[Offset: 0x9ac, Size: 0x4]
	float BeamStartLengthTpp;//[Offset: 0x9b0, Size: 0x4]
	Vector BulletDecalScale;//[Offset: 0x9b4, Size: 0xc]
	float AutoShootDis;//[Offset: 0x9c0, Size: 0x4]
	float AutoShootADSDis;//[Offset: 0x9c4, Size: 0x4]
	float AutoShootDelayBegin;//[Offset: 0x9c8, Size: 0x4]
	Vector2D AutoShootViewSize;//[Offset: 0x9cc, Size: 0x8]
	float AutoShootDelayEnd;//[Offset: 0x9d4, Size: 0x4]
	float DrawShootLineTime;//[Offset: 0x9d8, Size: 0x4]
	float TppCosLimit;//[Offset: 0x9dc, Size: 0x4]
	int BulletDecreasePerShoot;//[Offset: 0x9e0, Size: 0x4]
	int BulletSendPerShoot;//[Offset: 0x9e4, Size: 0x4]
	float GameDeviationAccuracy;//[Offset: 0x9e8, Size: 0x4]
	float MaxMovingTime;//[Offset: 0x9ec, Size: 0x4]
	FOVChangeTimeByScope AdsStartTimeByWeapon;//[Offset: 0x9f0, Size: 0x20]
	FOVChangeTimeByScope AdsEndTimeByWeapon;//[Offset: 0xa10, Size: 0x20]
	<int,float> SightID2ZoomTime;//[Offset: 0xa30, Size: 0x50]
	<enum,float> FPPCameraAimOffset;//[Offset: 0xa80, Size: 0x50]
	<FName,float> FPPCameraAimOffsetZ;//[Offset: 0xad0, Size: 0x50]
	<enum,float> AdsFovFactor;//[Offset: 0xb20, Size: 0x50]
	<enum,float> AdsFovChangeDelay;//[Offset: 0xb70, Size: 0x50]
	<enum,bool> TPPAdsUseFPP;//[Offset: 0xbc0, Size: 0x50]
	float ADSWeaponFOV;//[Offset: 0xc10, Size: 0x4]
	float SensitiveFireYawRate;//[Offset: 0xc14, Size: 0x4]
	float SensitiveFirePitchRate;//[Offset: 0xc18, Size: 0x4]
	FName DefaultScopeSocket;//[Offset: 0xc1c, Size: 0x8]
	FName ShellDropSocketName;//[Offset: 0xc24, Size: 0x8]
	FName AlternantShellDropSocketName;//[Offset: 0xc2c, Size: 0x8]
	float WeaponBodyLength;//[Offset: 0xc34, Size: 0x4]
	float ShotGunVerticalSpread;//[Offset: 0xc38, Size: 0x4]
	float ShotGunHorizontalSpread;//[Offset: 0xc3c, Size: 0x4]
	ItemDefineID BulletType;//[Offset: 0xc40, Size: 0x18]
	float BulletFireSpeed;//[Offset: 0xc58, Size: 0x4]
	WeaponFireModeInfo[] FireModeTotal;//[Offset: 0xc60, Size: 0x10]
	WeaponFireModeInfo[] FireModeTotalAI;//[Offset: 0xc70, Size: 0x10]
	FName MuzzleSocketName;//[Offset: 0xc80, Size: 0x8]
	FName AlternantMuzzleSocketName;//[Offset: 0xc88, Size: 0x8]
	FName BarrelStabilizerMuzzleName;//[Offset: 0xc90, Size: 0x8]
	FName DefaultMuzzleSocketName;//[Offset: 0xc98, Size: 0x8]
	CurveFloat* ShootIntervalCurve;//[Offset: 0xca0, Size: 0x8]
	CurveFloat* ShootIntervalCurveTurbo;//[Offset: 0xca8, Size: 0x8]
	FName ScopeAimCameraSocketName;//[Offset: 0xcb0, Size: 0x8]
	Rotator[] ShotgunBallisticTemplate;//[Offset: 0xcb8, Size: 0x10]
	int ShootBulletLaunchNum;//[Offset: 0xcc8, Size: 0x4]
	float ShotgunBallisticScale;//[Offset: 0xccc, Size: 0x4]
	CurveFloat* ShotgunAimPackRatioX;//[Offset: 0xcd0, Size: 0x8]
	CurveFloat* ShotgunAimPackRatioY;//[Offset: 0xcd8, Size: 0x8]
	CurveFloat* ShotgunAimChargePackX;//[Offset: 0xce0, Size: 0x8]
	CurveFloat* ShotgunAimChargePackY;//[Offset: 0xce8, Size: 0x8]
	float PostFireStateTime;//[Offset: 0xcf0, Size: 0x4]
	float FireFovDeltaWithoutADS;//[Offset: 0xcf4, Size: 0x4]
	float FireFovDeltaWithoutADSLerpTime;//[Offset: 0xcf8, Size: 0x4]
	float FireFovDeltaWithoutADSDelay;//[Offset: 0xcfc, Size: 0x4]
	float LineTraceShootRadius;//[Offset: 0xd00, Size: 0x4]
	bool RemoteShootHitOrderPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 0x1]
	int RemoteShootHitAsyncNum;//[Offset: 0xd08, Size: 0x4]
	bool RemoteShootAsyncOverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 0x1]
	int MaxBulletNumInOneClip;//[Offset: 0xd10, Size: 0x4]
	<int,int> ExtendMaxBulletNumInOneClipList;//[Offset: 0xd18, Size: 0x50]
	float BulletSphereRadius;//[Offset: 0xd68, Size: 0x4]
	CurveFloat* DistanceScaleCurve;//[Offset: 0xd70, Size: 0x8]
	<int,float> BulletRadiuConfigByDis;//[Offset: 0xd78, Size: 0x50]
	float MaxValidHitTime;//[Offset: 0xdc8, Size: 0x4]
	float TraceDistance;//[Offset: 0xdcc, Size: 0x4]
	float BulletRange;//[Offset: 0xdd0, Size: 0x4]
	float TppBulletBias;//[Offset: 0xdd4, Size: 0x4]
	float AiBulletBias;//[Offset: 0xdd8, Size: 0x4]
	float AiTraceBlockDistance;//[Offset: 0xddc, Size: 0x4]
	float RangeModifier;//[Offset: 0xde0, Size: 0x4]
	float ReferenceDistance;//[Offset: 0xde4, Size: 0x4]
	float BaseImpactDamage;//[Offset: 0xde8, Size: 0x4]
	float BaseLensDamage;//[Offset: 0xdec, Size: 0x4]
	float BaseFinalShootDamage;//[Offset: 0xdf0, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0xdf8, Size: 0x8]
	float DamageImpulse;//[Offset: 0xe00, Size: 0x4]
	float BulletMomentum;//[Offset: 0xe04, Size: 0x4]
	int MaxNoGravityRange;//[Offset: 0xe08, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0xe0c, Size: 0x4]
	ScopeZeroPointConfig[] ScopeZeroPointConfig;//[Offset: 0xe10, Size: 0x10]
	float BulletSpeedScaleByCharMove;//[Offset: 0xe20, Size: 0x4]
	int LowShootSoundBulletNum;//[Offset: 0xe24, Size: 0x4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0xe28, Size: 0x4]
	float ImpactEffectSkipDistance;//[Offset: 0xe2c, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0xe30, Size: 0x4]
	float MaxFakeLensEffectSkipDistance;//[Offset: 0xe34, Size: 0x4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0xe38, Size: 0x8]
	int MaxOBBulletTrackCompNum;//[Offset: 0xe40, Size: 0x4]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0xe48, Size: 0x8]
	float RemainEffectTime;//[Offset: 0xe50, Size: 0x4]
	float MinusBiasSquared;//[Offset: 0xe54, Size: 0x4]
	CurveFloat* FakeStartPointSpeedCurve;//[Offset: 0xe58, Size: 0x8]
	CurveFloat* FakeStartPointSpeedCurveADS;//[Offset: 0xe60, Size: 0x8]
	float LensDecreaseTime;//[Offset: 0xe68, Size: 0x4]
	float LenDecreaseValue;//[Offset: 0xe6c, Size: 0x4]
	float LensIncreaseTime;//[Offset: 0xe70, Size: 0x4]
	float LensDrawDistance;//[Offset: 0xe74, Size: 0x4]
	float FinalDrawDistance;//[Offset: 0xe78, Size: 0x4]
	float LaserSightUpdateTime;//[Offset: 0xe7c, Size: 0x4]
	float LaserSightDistance;//[Offset: 0xe80, Size: 0x4]
	float LaserSightMaxDrawDistance;//[Offset: 0xe84, Size: 0x4]
	float LaserSightEffectWidth;//[Offset: 0xe88, Size: 0x4]
	CurveFloat* LaserSightPointCurve;//[Offset: 0xe90, Size: 0x8]
	Vector LaserSightLocOffset;//[Offset: 0xe98, Size: 0xc]
	float LaserSight3PDistanceRate;//[Offset: 0xea4, Size: 0x4]
	<enum,float> WeaponState2FireMinTime;//[Offset: 0xea8, Size: 0x50]
	float CrossHairBurstSpeed;//[Offset: 0xef8, Size: 0x4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0xefc, Size: 0x4]
	Vector2D TppBulletProgressLocation;//[Offset: 0xf00, Size: 0x8]
	float TppBulletProgressRotate;//[Offset: 0xf08, Size: 0x4]
	<enum,ViewAssistViewMoveConfig> ViewType2ViewMoveConfig;//[Offset: 0xf10, Size: 0x50]
	<enum,ViewAssistAimViewMoveConfig> ViewType2AimViewMoveConfig;//[Offset: 0xf60, Size: 0x50]
	<enum,ViewAssistFireViewMoveConfig> ViewType2FireViewMoveConfig;//[Offset: 0xfb0, Size: 0x50]
	<enum,ViewAssistAimSnappingConfig> ViewType2AimSnappingConfig;//[Offset: 0x1000, Size: 0x50]
	<enum,ViewAssistFireSnappingConfig> ViewType2FireSnappingConfig;//[Offset: 0x1050, Size: 0x50]
	<enum,ViewAssistEdgeSnappingConfig> ViewType2EdgeSnappingConfig;//[Offset: 0x10a0, Size: 0x50]
	<enum,ViewAssistTickSnappingConfig> ViewType2TickSnappingConfig;//[Offset: 0x10f0, Size: 0x50]
	<enum,ViewAssistQuickSnappingConfig> ViewType2QuickSnappingConfig;//[Offset: 0x1140, Size: 0x50]
	float ReloadTime;//[Offset: 0x1190, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0x1194, Size: 0x4]
	float ReloadTimeVerifyCoff;//[Offset: 0x1198, Size: 0x4]
	float ForceExitReloadTimeRatio;//[Offset: 0x119c, Size: 0x4]
	float RelaodAnimTolerenceTime;//[Offset: 0x11a0, Size: 0x4]
	float ReloadTacticalAnimTolerenceTime;//[Offset: 0x11a4, Size: 0x4]
	CurveFloat* DamageDecayCurve;//[Offset: 0x11a8, Size: 0x8]
	CurveFloat* LensDamageDecayCurve;//[Offset: 0x11b0, Size: 0x8]
	int MaxLensFakeEffect;//[Offset: 0x11b8, Size: 0x4]
	Vector2D BaseLenFactor;//[Offset: 0x11bc, Size: 0x8]
	float EnergyRaiseTime;//[Offset: 0x11c4, Size: 0x4]
	float EnergyDownTime;//[Offset: 0x11c8, Size: 0x4]
	int HitSlowlyID;//[Offset: 0x11cc, Size: 0x4]

--------------------------------
Class: WeaponDataAsset.DataAsset.Object
	bool bBulletIndexAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bAutoAimPostFireConfig;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bDebugCrossHair;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bUseTraceBullet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bDebugTraceBullet;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bDebugWeaponMeshTick;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bDebugAttachMeshTick;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bAttachToCameraAtFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bAntiCheatOn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bUseSmallScopeMode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 0x1]
	bool bUseEffectOptimize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	bool bUseCompleteShoulderCrossHair;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bZeroAimChargeEnergyWhenExitAiming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bUseAimChargeToggleOption;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	bool EnableTraceBulletInEmulator;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31, Size: 0x1]
	bool bCheckChangeCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32, Size: 0x1]
	bool bOpenStateMonitor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32, Size: 0x1]
	enum WeaponAnimType;//[Offset: 0x33, Size: 0x1]
	enum WeaponConfigType;//[Offset: 0x34, Size: 0x1]
	enum RecoilType;//[Offset: 0x35, Size: 0x1]
	enum MuzzleFxRenderPass;//[Offset: 0x36, Size: 0x1]
	enum SpringType;//[Offset: 0x37, Size: 0x1]
	ApgameWeaponLogicInstanceDefinition[] LogicInstanceList;//[Offset: 0x38, Size: 0x10]
	enum[] LogicStates;//[Offset: 0x48, Size: 0x10]
	<GameplayTag,WeaponComponentOptimizationSettings> LogicOptimizations;//[Offset: 0x58, Size: 0x50]
	<enum,WeaponComponentOptimizationSettings> LogicStateOptimizations;//[Offset: 0xa8, Size: 0x50]
	MovementModifyConfig MovementModifyConfig;//[Offset: 0xf8, Size: 0x50]
	int BeEquipAnimationID;//[Offset: 0x148, Size: 0x4]
	float BackpackSwitchGunAlpha;//[Offset: 0x14c, Size: 0x4]
	float BackpackSwitchGunTime;//[Offset: 0x150, Size: 0x4]
	int MaxHeat;//[Offset: 0x154, Size: 0x4]
	int DecreaseHeat;//[Offset: 0x158, Size: 0x4]
	float DecreaseRate;//[Offset: 0x15c, Size: 0x4]
	int IncreaseHeat;//[Offset: 0x160, Size: 0x4]
	float MaxDisruptorEnergy;//[Offset: 0x164, Size: 0x4]
	float EnergyDecreasePerShot;//[Offset: 0x168, Size: 0x4]
	float EnergyDecreaseDelta;//[Offset: 0x16c, Size: 0x4]
	float ChargeTime;//[Offset: 0x170, Size: 0x4]
	ApgameChargeConsumeItem[] ChargeConsumeList;//[Offset: 0x178, Size: 0x10]
	<enum,float> ChargeBuffList;//[Offset: 0x188, Size: 0x50]
	float MaxUIEnergyPercentWhenDec;//[Offset: 0x1d8, Size: 0x4]
	int DisplayConsumeItemIndex;//[Offset: 0x1dc, Size: 0x4]
	FString ChargeTipText;//[Offset: 0x1e0, Size: 0x10]
	int ChargeGuideIdHUD1Left;//[Offset: 0x1f0, Size: 0x4]
	int ChargeGuideIdHUD1Right;//[Offset: 0x1f4, Size: 0x4]
	int ChargeGuideIdHUD2;//[Offset: 0x1f8, Size: 0x4]
	float SetEnergyFullEffectShowTime;//[Offset: 0x1fc, Size: 0x4]
	SoftObjectPath ChargingBarImg;//[Offset: 0x200, Size: 0x18]
	SoftObjectPath ChargeBarFullImg;//[Offset: 0x218, Size: 0x18]
	LinearColor ChargingBarColor;//[Offset: 0x230, Size: 0x10]
	SoftObjectPath ChargingBGImg;//[Offset: 0x240, Size: 0x18]
	SoftObjectPath ChargingBGImgHUD2;//[Offset: 0x258, Size: 0x18]
	SoftObjectPath ChargeEndBGImg;//[Offset: 0x270, Size: 0x18]
	SoftObjectPath ChargeEndBGImgHUD2;//[Offset: 0x288, Size: 0x18]
	LinearColor ChargingBGBorderColor;//[Offset: 0x2a0, Size: 0x10]
	LinearColor ChargingEndBGBorderColor;//[Offset: 0x2b0, Size: 0x10]
	LinearColor ChargingBGColor;//[Offset: 0x2c0, Size: 0x10]
	LinearColor ChargingEndBGColor;//[Offset: 0x2d0, Size: 0x10]
	LinearColor ChargingBorderColor;//[Offset: 0x2e0, Size: 0x10]
	LinearColor ChargingEndBorderColor;//[Offset: 0x2f0, Size: 0x10]
	SoftObjectPath ChargeBulletImg;//[Offset: 0x300, Size: 0x18]
	LinearColor ChargingEndBulletColor;//[Offset: 0x318, Size: 0x10]
	FName EnergyEmptyWhenFire;//[Offset: 0x328, Size: 0x8]
	FName EnergyEmptyWhenPutOn;//[Offset: 0x330, Size: 0x8]
	FName EnergyEmptyWhenInHand;//[Offset: 0x338, Size: 0x8]
	float EnergyThreshold;//[Offset: 0x340, Size: 0x4]
	float EnergyAddSpeed;//[Offset: 0x344, Size: 0x4]
	float EnergySubSpeed;//[Offset: 0x348, Size: 0x4]
	float LinearDamping;//[Offset: 0x34c, Size: 0x4]
	float DisposeTime;//[Offset: 0x350, Size: 0x4]
	float BallisiticPrecision;//[Offset: 0x354, Size: 0x4]
	float HorizontalCancelSpring;//[Offset: 0x358, Size: 0x4]
	float RecoilSpeed;//[Offset: 0x35c, Size: 0x4]
	float BulletDecayDelay;//[Offset: 0x360, Size: 0x4]
	float BulletDecaySpeed;//[Offset: 0x364, Size: 0x4]
	float BulletClearDelay;//[Offset: 0x368, Size: 0x4]
	bool bUseHitRecoilFactorInEmulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	RecoilFactor4D HitRecoilFactor;//[Offset: 0x370, Size: 0x10]
	float HitRecoilCDTime;//[Offset: 0x380, Size: 0x4]
	<enum,RecoilPoseFactor> RecoilPoseFactorMap;//[Offset: 0x388, Size: 0x50]
	float SpringHeatFactor;//[Offset: 0x3d8, Size: 0x4]
	Vector2D SpringHeatLimit;//[Offset: 0x3dc, Size: 0x8]
	float SpringCoolTime;//[Offset: 0x3e4, Size: 0x4]
	enum[] WeaponBackSocketPosition;//[Offset: 0x3e8, Size: 0x10]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x3f8, Size: 0x4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x3fc, Size: 0x4]
	float FirstPickupToIdleTime;//[Offset: 0x400, Size: 0x4]
	float MaxRaiseWeaponTime;//[Offset: 0x404, Size: 0x4]
	float MaxLowerWeaponTime;//[Offset: 0x408, Size: 0x4]
	float RaiseWeaponAfterClimbTime;//[Offset: 0x40c, Size: 0x4]
	float PreSwitchFromBackpackToIdleTime;//[Offset: 0x410, Size: 0x4]
	float EquipAttachmentTime;//[Offset: 0x414, Size: 0x4]
	float Breath;//[Offset: 0x418, Size: 0x4]
	SkeletalMesh* LowLevelBarrel;//[Offset: 0x420, Size: 0x28]
	SkeletalMesh* Level4Barrel;//[Offset: 0x448, Size: 0x28]
	SkeletalMesh* LowLevelBarrelLod;//[Offset: 0x470, Size: 0x28]
	SkeletalMesh* Level4BarrelLod;//[Offset: 0x498, Size: 0x28]
	SkeletalMesh* LaserSightMesh;//[Offset: 0x4c0, Size: 0x28]
	SkeletalMesh* LaserSightMeshLod;//[Offset: 0x4e8, Size: 0x28]
	float DelayCloseAimTime;//[Offset: 0x510, Size: 0x4]
	float AimChargeUpSpeed;//[Offset: 0x514, Size: 0x4]
	float AimChargeUpDelay;//[Offset: 0x518, Size: 0x4]
	float AimChargeDownSpeed;//[Offset: 0x51c, Size: 0x4]
	float AimChargeDownDelay;//[Offset: 0x520, Size: 0x4]
	float[] AimChargeArray;//[Offset: 0x528, Size: 0x10]
	float AimChargeAdditionalDamage;//[Offset: 0x538, Size: 0x4]
	FName AimChargePercentRtpcName;//[Offset: 0x53c, Size: 0x8]
	SDeviation DeviationInfo;//[Offset: 0x544, Size: 0x30]
	CrossHairConfig* CrossHairConfig;//[Offset: 0x578, Size: 0x8]
	HitCrossHairConfig* HitCrossHairConfig;//[Offset: 0x580, Size: 0x8]
	AutoCrossHairConfig* AutoCrossHairConfig;//[Offset: 0x588, Size: 0x8]
	float CrosshairLerpSpeed;//[Offset: 0x590, Size: 0x4]
	float TppCrosshairScale;//[Offset: 0x594, Size: 0x4]
	class CameraShake* CameraShakeTemplate_TPPCameraMode;//[Offset: 0x598, Size: 0x8]
	class CameraShake* CameraShakeTemplate_FPPCameraMode;//[Offset: 0x5a0, Size: 0x8]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x5a8, Size: 0x8]
	CameraShakeConfig* CameraShakeTestConfig;//[Offset: 0x5b0, Size: 0x8]
	float CameraShakeInnerRadius;//[Offset: 0x5b8, Size: 0x4]
	float CameraShakeOuterRadius;//[Offset: 0x5bc, Size: 0x4]
	float CameraShakFalloff;//[Offset: 0x5c0, Size: 0x4]
	ParticleSystem* ShellDropFX;//[Offset: 0x5c8, Size: 0x8]
	MuzzleFxStruct MuzzleFxData;//[Offset: 0x5d0, Size: 0x40]
	Vector ShellDropFXScale;//[Offset: 0x610, Size: 0xc]
	float RandomRadius;//[Offset: 0x61c, Size: 0x4]
	float RandomRadiusFactor;//[Offset: 0x620, Size: 0x4]
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x628, Size: 0x50]
	<byte,AkAudioEvent*> SoundDataMap_3P;//[Offset: 0x678, Size: 0x50]
	SpecificWeaponSoundConfig[] SpecificSoundConfig;//[Offset: 0x6c8, Size: 0x10]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x6d8, Size: 0x28]
	float ShootSoundProtectTime;//[Offset: 0x700, Size: 0x4]
	float ShootCallbackProtectTime;//[Offset: 0x704, Size: 0x4]
	int CheckShootNum;//[Offset: 0x708, Size: 0x4]
	float CheckShootEnemyRatio;//[Offset: 0x70c, Size: 0x4]
	int TraceBulletNum;//[Offset: 0x710, Size: 0x4]
	float TraceBulletEffectTime;//[Offset: 0x714, Size: 0x4]
	float CharacterTraceRadius;//[Offset: 0x718, Size: 0x4]
	float BulletTraceDistance;//[Offset: 0x71c, Size: 0x4]
	float CoolDownTime;//[Offset: 0x720, Size: 0x4]
	WeaponReloadStageConfig[] TacticalReloadStageConfig;//[Offset: 0x728, Size: 0x10]
	WeaponReloadStageConfig[] AllReloadStageConfig;//[Offset: 0x738, Size: 0x10]
	<enum,FName> WeaponAttchSocketMap;//[Offset: 0x748, Size: 0x50]
	<enum,FName> OpticalAttchSocketMap;//[Offset: 0x798, Size: 0x50]
	<enum,ItemDefineID> DefaultAttachList;//[Offset: 0x7e8, Size: 0x50]
	class AnimInstance* AnimBPClassFPP;//[Offset: 0x838, Size: 0x28]
	class AnimInstance* AnimBPClassTPP;//[Offset: 0x860, Size: 0x28]
	Rotator SniperADSRelativeRotation;//[Offset: 0x888, Size: 0xc]
	Vector SniperADSRelativeLocation;//[Offset: 0x894, Size: 0xc]
	<int,WeaponAntiCheatConfig> AntiCheatConfigs;//[Offset: 0x8a0, Size: 0x50]
	float SafetyScoreCD;//[Offset: 0x8f0, Size: 0x4]
	float HitDataTimeout;//[Offset: 0x8f4, Size: 0x4]
	float HitDataRecordTime;//[Offset: 0x8f8, Size: 0x4]
	int HitDataRecordCount;//[Offset: 0x8fc, Size: 0x4]
	<enum,float> WeaponStateLeaveCondition;//[Offset: 0x900, Size: 0x50]
	ApgameWeaponAttachPosToSocketOverride[] AttachPosToSocketOverrides;//[Offset: 0x950, Size: 0x10]

--------------------------------
Class: ApgameWeaponLogicInstanceDefinition
	FName InstanceName;//[Offset: 0x0, Size: 0x8]
	GameplayTag RegisterTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WeaponComponentOptimizationSettings
	WeaponComConfig Hold;//[Offset: 0x0, Size: 0x5]
	WeaponComConfig Back;//[Offset: 0x5, Size: 0x5]

--------------------------------
Class: WeaponComConfig
	bool Tick_Authority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool Tick_AI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool Tick_Autonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool Tick_Simulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool Tick_OBSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: MovementModifyConfig
	<FName,MovementModifier> ModifyMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MovementModifier
	enum MovementAttribute;//[Offset: 0x0, Size: 0x1]
	float ModifierValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApgameChargeConsumeItem
	ItemDefineID Item;//[Offset: 0x0, Size: 0x18]
	int ConsumeNum;//[Offset: 0x18, Size: 0x4]
	<enum,int> Condition2ConsumeNums;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: RecoilFactor4D
	Vector2D RecoilFactor;//[Offset: 0x0, Size: 0x8]
	Vector2D RandomFactor;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RecoilPoseFactor
	RecoilFactor4D FactorADS;//[Offset: 0x0, Size: 0x10]
	RecoilFactor4D FactorNoADS;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]
	float DeviationShoulderShoot;//[Offset: 0x4, Size: 0x4]
	float ShoulderShootFixFactor;//[Offset: 0x8, Size: 0x4]
	float DeviationShootGain;//[Offset: 0xc, Size: 0x4]
	float DeviationShootFall;//[Offset: 0x10, Size: 0x4]
	float DeviationShootFactor;//[Offset: 0x14, Size: 0x4]
	float DeviationShootMax;//[Offset: 0x18, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x1c, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x20, Size: 0x4]
	float DeviationStanceStand;//[Offset: 0x24, Size: 0x4]
	float DeviationStanceCrouch;//[Offset: 0x28, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: WeaponHitPartCoff
	float Base_ChargeBullet;//[Offset: 0x0, Size: 0x4]
	float head;//[Offset: 0x4, Size: 0x4]
	float Head_SkullPiercer;//[Offset: 0x8, Size: 0x4]
	float Head_ChargeBullet;//[Offset: 0xc, Size: 0x4]
	float Body;//[Offset: 0x10, Size: 0x4]
	float Body_ChargeBullet;//[Offset: 0x14, Size: 0x4]
	float Thighs;//[Offset: 0x18, Size: 0x4]
	float Thighs_ChargeBullet;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: FOVChangeTimeByScope
	float NoAim;//[Offset: 0x0, Size: 0x4]
	float Sight1X;//[Offset: 0x4, Size: 0x4]
	float Sight2X;//[Offset: 0x8, Size: 0x4]
	float Sight3X;//[Offset: 0xc, Size: 0x4]
	float Sight4X;//[Offset: 0x10, Size: 0x4]
	float Sight6X;//[Offset: 0x14, Size: 0x4]
	float Sight8X;//[Offset: 0x18, Size: 0x4]
	float Sight10X;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WeaponFireModeInfo
	enum FireMode;//[Offset: 0x0, Size: 0x1]
	FName BallisticName;//[Offset: 0x4, Size: 0x8]
	float ShootInterval;//[Offset: 0xc, Size: 0x4]
	int ShootMultiMax;//[Offset: 0x10, Size: 0x4]
	int ShootBullets;//[Offset: 0x14, Size: 0x4]
	float FireInterval;//[Offset: 0x18, Size: 0x4]
	float FireAlloInterval;//[Offset: 0x1c, Size: 0x4]
	float LensInterval;//[Offset: 0x20, Size: 0x4]
	float FinalShootInterval;//[Offset: 0x24, Size: 0x4]
	float LinkInterval;//[Offset: 0x28, Size: 0x4]
	bool bCanLinkFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bCanAutoAimShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float AutoAimShootWaitTime;//[Offset: 0x30, Size: 0x4]
	float DoubleClickInterval;//[Offset: 0x34, Size: 0x4]
	bool bCanSingleAimShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanShotgunReleaseShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	int UnlockItemID;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: ScopeZeroPointConfig
	int ScopeItemID;//[Offset: 0x0, Size: 0x4]
	int ScopeSight;//[Offset: 0x4, Size: 0x4]
	float[] ZeroPointDistanceArray;//[Offset: 0x8, Size: 0x10]
	float[] ZeroPointUIBiasArray;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ViewAssistViewMoveConfig
	bool EnableViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float ViewAccelerateRadius;//[Offset: 0x4, Size: 0x4]
	float ViewDecelerateRadius;//[Offset: 0x8, Size: 0x4]
	float EdgeDecelerateWidth;//[Offset: 0xc, Size: 0x4]
	CurveFloat* EdgeDecelerateFactor;//[Offset: 0x10, Size: 0x8]
	float MaxDistance;//[Offset: 0x18, Size: 0x4]
	float BaseAccelerateSpeed;//[Offset: 0x1c, Size: 0x4]
	float BaseDecelerateSpeed;//[Offset: 0x20, Size: 0x4]
	CurveFloat* DistanceFactor;//[Offset: 0x28, Size: 0x8]
	CurveFloat* DecelerateCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ViewAssistAimViewMoveConfig
	bool EnableAimViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableAimViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float AimDecelerateRadius;//[Offset: 0x4, Size: 0x4]
	float AimAccelerateRadius;//[Offset: 0x8, Size: 0x4]
	float AimMaxDistance;//[Offset: 0xc, Size: 0x4]
	float AimEdgeDecelerateWidth;//[Offset: 0x10, Size: 0x4]
	CurveFloat* AimEdgeDecelerateFactor;//[Offset: 0x18, Size: 0x8]
	float AimingAccelerateFactor;//[Offset: 0x20, Size: 0x4]
	float AimBaseDecelerateSpeed;//[Offset: 0x24, Size: 0x4]
	CurveFloat* AimDistanceFactor;//[Offset: 0x28, Size: 0x8]
	CurveFloat* AimDecelerateCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ViewAssistFireViewMoveConfig
	bool EnableFireViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableFireViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float FireDecelerateRadius;//[Offset: 0x4, Size: 0x4]
	float FireAccelerateRadius;//[Offset: 0x8, Size: 0x4]
	float FireMaxDistance;//[Offset: 0xc, Size: 0x4]
	float FireAccelerateFactor;//[Offset: 0x10, Size: 0x4]
	float FireBaseDecelerateSpeed;//[Offset: 0x14, Size: 0x4]
	float FireEdgeDecelerateWidth;//[Offset: 0x18, Size: 0x4]
	CurveFloat* FireEdgeDecelerateFactor;//[Offset: 0x20, Size: 0x8]
	CurveFloat* FireDistanceFactor;//[Offset: 0x28, Size: 0x8]
	CurveFloat* FireDecelerateCurve;//[Offset: 0x30, Size: 0x8]
	float FireDecelerateTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ViewAssistAimSnappingConfig
	bool EnableAimSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableAimPitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableAimSnappingDebug;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepAimSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float AimSnappingCD;//[Offset: 0x4, Size: 0x4]
	<enum,float> BaseAimSnappingSpeed;//[Offset: 0x8, Size: 0x50]
	float AimSnappingMaxDistance2Reticle;//[Offset: 0x58, Size: 0x4]
	<enum,float> AimSnappingSightFactor;//[Offset: 0x60, Size: 0x50]
	float MaxAimSnappingDistance;//[Offset: 0xb0, Size: 0x4]
	CurveFloat* AimSnappingDistanceFactor;//[Offset: 0xb8, Size: 0x8]
	float EnemyCrouchAimSnappingSizeFactor;//[Offset: 0xc0, Size: 0x4]
	float EnemyDyingAimSnappingSizeFactor;//[Offset: 0xc4, Size: 0x4]
	float AimSnappingTime;//[Offset: 0xc8, Size: 0x4]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: ViewAssistFireSnappingConfig
	bool EnableFireSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableFirePitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableFireSnappingDebug;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepFireSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float FireSnappingCD;//[Offset: 0x4, Size: 0x4]
	<enum,float> BaseFireSnappingSpeed;//[Offset: 0x8, Size: 0x50]
	float NoAimFireSnappingSpeed;//[Offset: 0x58, Size: 0x4]
	<enum,float> FireSnappingMaxDistance2Reticle;//[Offset: 0x60, Size: 0x50]
	float NoAimFireSnappingMaxDistance2Reticle;//[Offset: 0xb0, Size: 0x4]
	float MaxFireSnappingDistance;//[Offset: 0xb4, Size: 0x4]
	CurveFloat* FireSnappingDistanceFactor;//[Offset: 0xb8, Size: 0x8]
	float EnemyCrouchFireSnappingSizeFactor;//[Offset: 0xc0, Size: 0x4]
	float EnemyDyingFireSnappingSizeFactor;//[Offset: 0xc4, Size: 0x4]
	float FireSnappingTime;//[Offset: 0xc8, Size: 0x4]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: ViewAssistEdgeSnappingConfig
	bool EnableEdgePushing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnablePitchEdgePushing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableDebugEdgePushing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepEdgePushingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bTriggerByLeftScreenInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bTriggerByRightScreenInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	float EdgePushingRadius;//[Offset: 0x4, Size: 0x4]
	float EdgePushingWidth;//[Offset: 0x8, Size: 0x4]
	float EdgePushingMaxDistance;//[Offset: 0xc, Size: 0x4]
	CurveFloat* EdgePushingDistanceFactor;//[Offset: 0x10, Size: 0x8]
	float EdgePushingMinSpeed;//[Offset: 0x18, Size: 0x4]
	float BaseEdgePushingSpeed;//[Offset: 0x1c, Size: 0x4]
	float EdgePushingTime;//[Offset: 0x20, Size: 0x4]
	float EdgePushingCD;//[Offset: 0x24, Size: 0x4]
	float GamePadTriggerThreshold;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ViewAssistTickSnappingConfig
	bool EnableTickSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableTickPitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool DebugDrawTickSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float TickSnappingMaxDistance2Reticle;//[Offset: 0x4, Size: 0x4]
	float TickSnappingMaxDistance;//[Offset: 0x8, Size: 0x4]
	CurveFloat* TickSnappingDistanceFactor;//[Offset: 0x10, Size: 0x8]
	float TickSnappingSpeed;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ViewAssistQuickSnappingConfig
	bool EnableQuickFireSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableQuickAimSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableQuickPitchSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool DebugDrawQuickSnapping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float QuickSnappingCD;//[Offset: 0x4, Size: 0x4]
	float QuickSnappingMaxDistance;//[Offset: 0x8, Size: 0x4]
	float QuickSnappingTime;//[Offset: 0xc, Size: 0x4]
	float QuickSnappingMaxDistance2Reticle;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CrossHairConfig.DataAsset.Object
	WeaponCrossHairPerformData[] CrossHairDatas;//[Offset: 0x30, Size: 0x10]
	float SprintAlpha;//[Offset: 0x40, Size: 0x4]
	float SprintAlphaFadeSpeed;//[Offset: 0x44, Size: 0x4]
	WeaponCrossHairAimChargeConfig[] AimChargeArray;//[Offset: 0x48, Size: 0x10]
	bool bUseChangeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	LinearColor AimTeamMateColor;//[Offset: 0x5c, Size: 0x10]
	LinearColor AimEnemyColor;//[Offset: 0x6c, Size: 0x10]
	LinearColor NormalColor;//[Offset: 0x7c, Size: 0x10]
	float MaxDetectDistance;//[Offset: 0x8c, Size: 0x4]
	float TeamMateDetectInerval;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] CrossHair;//[Offset: 0x0, Size: 0x10]
	LinearColor CrossHairColor;//[Offset: 0x10, Size: 0x10]
	<int,ShoulderCrossHairConfig> ShoulderCrossHairConfig;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 0x18]
	Object* IconObj;//[Offset: 0x18, Size: 0x8]
	float Offset;//[Offset: 0x20, Size: 0x4]
	float Alpha;//[Offset: 0x24, Size: 0x4]
	float IconRotate;//[Offset: 0x28, Size: 0x4]
	float LogicRotate;//[Offset: 0x2c, Size: 0x4]
	Vector2D Scale2D;//[Offset: 0x30, Size: 0x8]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	float U;//[Offset: 0x8, Size: 0x4]
	float V;//[Offset: 0xc, Size: 0x4]
	float UL;//[Offset: 0x10, Size: 0x4]
	float VL;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ShoulderCrossHairConfig
	int ReplaceIndex;//[Offset: 0x0, Size: 0x4]
	WeaponCrossHairIconData ReplaceCrossHair;//[Offset: 0x8, Size: 0x40]

--------------------------------
Class: WeaponCrossHairAimChargeConfig
	Vector2D CrosshairPack;//[Offset: 0x0, Size: 0x8]
	LinearColor CrossHairColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: HitCrossHairConfig.DataAsset.Object
	BulletHitPerformData BulletHitData;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: BulletHitPerformData
	CanvasIcon2D NormalIcon;//[Offset: 0x0, Size: 0x18]
	CanvasIcon2D HeadShootIcon;//[Offset: 0x18, Size: 0x18]
	Object* NormalIconObj;//[Offset: 0x30, Size: 0x8]
	Object* HeadShootIconObj;//[Offset: 0x38, Size: 0x8]
	BulletHitPositionData[] PositionList;//[Offset: 0x40, Size: 0x10]
	float DefaultShowTime;//[Offset: 0x50, Size: 0x4]
	Vector2D Offset;//[Offset: 0x54, Size: 0x8]

--------------------------------
Class: BulletHitPositionData
	float Offset;//[Offset: 0x0, Size: 0x4]
	float LogicRotate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AutoCrossHairConfig.DataAsset.Object
	WeaponCrossHairIconData[] CrossHair;//[Offset: 0x30, Size: 0x10]
	LinearColor WaitColor;//[Offset: 0x40, Size: 0x10]
	LinearColor ShootColor;//[Offset: 0x50, Size: 0x10]
	float ScaleBegin;//[Offset: 0x60, Size: 0x4]
	float ScaleEnd;//[Offset: 0x64, Size: 0x4]
	WeaponCrossHairIconData TipsUI;//[Offset: 0x68, Size: 0x40]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	int ShootState;//[Offset: 0xac, Size: 0x4]
	bool bTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float offsetScale;//[Offset: 0xb4, Size: 0x4]
	float offsetSpeed;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: CameraShakeConfig.DataAsset.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float OscillationDuration;//[Offset: 0x34, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x38, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x3c, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x40, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x64, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x88, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x94, Size: 0x4]
	float AnimScale;//[Offset: 0x98, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x9c, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0xa0, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0xa4, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa8, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: MuzzleFxStruct
	Vector LocalMuzzelFXScale;//[Offset: 0x0, Size: 0xc]
	Vector ScopeMuzzelFXScale;//[Offset: 0xc, Size: 0xc]
	CurveFloat* MuzzleFXFOVScaleCurve;//[Offset: 0x18, Size: 0x8]
	Vector RemoteMuzzelFXScale;//[Offset: 0x20, Size: 0xc]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x2c, Size: 0x10]
	bool bUseMuzzleLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SpecificWeaponSoundConfig
	enum FireMode;//[Offset: 0x0, Size: 0x1]
	int AttachmentID;//[Offset: 0x4, Size: 0x4]
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x8, Size: 0x50]
	<byte,AkAudioEvent*> SoundDataMap_3P;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: WeaponReloadStageConfig
	enum ReloadStage;//[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	bool bInterraptStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bClearClipBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAddClipBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	int AddBulletNum;//[Offset: 0xc, Size: 0x4]
	bool bCirculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int CirculationTime;//[Offset: 0x14, Size: 0x4]
	bool bInterraptByFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float FireInterraptTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WeaponAntiCheatConfig
	float ShootHeightRatio;//[Offset: 0x0, Size: 0x4]
	float ShootRadiusRatio;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ShootHalfHeightAlwCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ShootRadiusAlwCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ShootMoveRatioRTTCurve;//[Offset: 0x18, Size: 0x8]
	float HitHeightRatio;//[Offset: 0x20, Size: 0x4]
	float HitRadiusRatio;//[Offset: 0x24, Size: 0x4]
	CurveFloat* HitHalfHeightAlwCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* HitRadiusAlwCurve;//[Offset: 0x30, Size: 0x8]
	CurveFloat* HitMoveRatioRTTCurve;//[Offset: 0x38, Size: 0x8]
	float HeadHitFloorRatio;//[Offset: 0x40, Size: 0x4]
	float HeadHitRadiusRatio;//[Offset: 0x44, Size: 0x4]
	float BodyHitFloorRatio;//[Offset: 0x48, Size: 0x4]
	float BodyHitHeightRatio;//[Offset: 0x4c, Size: 0x4]
	float BodyHitRadiusRatio;//[Offset: 0x50, Size: 0x4]
	float HitPlayerScaleRatio;//[Offset: 0x54, Size: 0x4]
	float MoveSpeedScaleRatio;//[Offset: 0x58, Size: 0x4]
	float ShootRateCheckMulCoff;//[Offset: 0x5c, Size: 0x4]
	int ValidBulletNumTolerance;//[Offset: 0x60, Size: 0x4]
	float ValidBulletCheckMulCoff;//[Offset: 0x64, Size: 0x4]
	float ShootForWardAngle;//[Offset: 0x68, Size: 0x4]
	float PlayerForWardAngleFPP;//[Offset: 0x6c, Size: 0x4]
	float PlayerForWardAngleTPP;//[Offset: 0x70, Size: 0x4]
	float ShootForWardDitance;//[Offset: 0x74, Size: 0x4]
	int ShootForWardCounts;//[Offset: 0x78, Size: 0x4]
	float ShootDistanceRadiusRatio;//[Offset: 0x7c, Size: 0x4]
	int ShootImpactPointCounts;//[Offset: 0x80, Size: 0x4]
	int ShootNoViewMoveCounts;//[Offset: 0x84, Size: 0x4]
	float ShootAutoAimAlwAngle;//[Offset: 0x88, Size: 0x4]
	CurveFloat* ShootAutoAimAngleCurve;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: ApgameWeaponAttachPosToSocketOverride
	enum Pos;//[Offset: 0x0, Size: 0x1]
	FName SocketName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x1f8, Size: 0x8]
	void ResumeMoveAfterImpactWithNoLost();// 0x7b430b0
	void ResetTickDelay();// 0xa1084a8
	void ForceStop();// 0x7b430d0

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x134, Size: 0x4]
	float MaxSpeed;//[Offset: 0x138, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13c, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13c, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13c, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13c, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13c, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13c, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13c, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13d, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13d, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x140, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x144, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x150, Size: 0x4]
	float Buoyancy;//[Offset: 0x154, Size: 0x4]
	float Bounciness;//[Offset: 0x158, Size: 0x4]
	float Friction;//[Offset: 0x15c, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x160, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x164, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x168, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x178, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x188, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x18c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x194, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x198, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x19c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x1a0, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x1a4, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x1a8, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1ac, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x997c764
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x997c80c
	void SetInterpolatedComponent(SceneComponent* Component);// 0x997c6e0
	void ResetInterpolation();// 0xa381634
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xa1d39f8
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xa1d39f8
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x997c600
	Vector LimitVelocity(Vector NewVelocity);// 0x997c570
	bool IsVelocityUnderSimulationThreshold();// 0xa381650
	bool IsInterpolationComplete();// 0xa381608

--------------------------------
Class: MovementSyncData
	PrimitiveComponent* Base;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AutoEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystem* CurFXTemplate;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* LastFXTemplate;//[Offset: 0x2b8, Size: 0x8]
	float CurMovingTime;//[Offset: 0x2d4, Size: 0x4]
	float CurRemainTime;//[Offset: 0x2d8, Size: 0x4]
	float CurBulletSpeed;//[Offset: 0x2dc, Size: 0x4]
	Vector StartPos;//[Offset: 0x2e0, Size: 0xc]
	Vector EndPos;//[Offset: 0x2ec, Size: 0xc]
	ShootWeaponBullet* TracedTrueBullet;//[Offset: 0x318, Size: 0x8]
	ActorComponent*[] FXComps;//[Offset: 0x330, Size: 0x10]
	void OnTrueBulletHit(HitResult HitInfo);// 0x4e289c0

--------------------------------
Class: ApgameWeaponSlotMap
	bool bSwapped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ApgameWeaponCoreComponent.SignificanceManagedActorComponent.ActorComponent.Object
	enum DataSlot;//[Offset: 0x11b, Size: 0x1]
	ApgameWeaponInitializationData InitializationData;//[Offset: 0x120, Size: 0x58]
	ApgameWeaponInitializationData RepInitializationData;//[Offset: 0x178, Size: 0x58]
	ApgameWeaponOwnedAttributeSetInfo[] NetAttributeSetsCache;//[Offset: 0x1d0, Size: 0x10]
	ApgameWeaponLogicInstance[] OwnedLogicInstances;//[Offset: 0x230, Size: 0x10]
	ApgameWeaponAttributeSet*[] OwnedAttributeSets;//[Offset: 0x260, Size: 0x10]
	ApgameWeaponAttributeSet*[] ReplicatedAttributeSets;//[Offset: 0x270, Size: 0x10]
	WeaponDataAsset* WeaponConfig;//[Offset: 0x280, Size: 0x8]
	ShootWeapon* WeaponCosmetic;//[Offset: 0x288, Size: 0x8]
	ApgameWeaponEventProxy* EventProxyCache;//[Offset: 0x290, Size: 0x8]
	ApgameWeaponEventProxy* EventProxy;//[Offset: 0x298, Size: 0x8]
	<enum,float> TempWeaponDataMap;//[Offset: 0x2b0, Size: 0x50]
	InGameWeaponDataSubsystem* GlobalWeaponDataCache;//[Offset: 0x328, Size: 0x8]
	void RPC_ServerClearTempWeaponData(ApgameWeaponInstanceId InWeaponInstanceId);// 0x7a981e4
	void RPC_ServerChangeWeaponData(ApgameWeaponInstanceId InWeaponInstanceId, enum InDataKey, float InTempData);// 0x7a982a8
	void OnRep_RepInitializationRepData();// 0x4e0edac
	ApgameWeaponInstanceUniqueId GetInstanceUniqueId();// 0x7a98464
	ApgameWeaponInstanceId GetDataIdentity();// 0xa0f6b08

--------------------------------
Class: ApgameWeaponOwnedAttributeSetInfo
	ApgameWeaponAttributeSet* AttributeSet;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApgameWeaponAttributeSet.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: ApgameWeaponLogicInstance
	interface class None* UObjectPtr;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ApgameWeaponInstanceUniqueId
	ApgameWeaponInstanceId InstanceID;//[Offset: 0x0, Size: 0x2]
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShootWeapon.Weapon.Actor.Object
	CrossHairLogicObject* CrossHairComponent;//[Offset: 0x2a8, Size: 0x8]
	WeaponAntiCheatLogicObject* WeaponAntiCheatComponent;//[Offset: 0x2b0, Size: 0x8]
	WeaponDisruptorLogicObject* WeaponDisruptorComponent;//[Offset: 0x2b8, Size: 0x8]
	WeaponBallisticLogicObject* WeaponBallisticComponent;//[Offset: 0x2c0, Size: 0x8]
	TraceBulletLogicObject* TraceBulletComponent;//[Offset: 0x2c8, Size: 0x8]
	HeatSystemLogicObject* HeatSystemComponent;//[Offset: 0x2d0, Size: 0x8]
	ShootWeaponEffectLogicObject* ShootWeaponEffectComponent;//[Offset: 0x2d8, Size: 0x8]
	WeaponReloadLogicObject* WeaponReloadComponent;//[Offset: 0x2e0, Size: 0x8]
	ShootWeaponLogicObject* ShootWeaponComponent;//[Offset: 0x2e8, Size: 0x8]
	bool WasLastShootCharged();// 0x7e3de68
	void ToggleZoomScale(bool bOB);// 0x7e3e1d0
	void StopFireWeapon();// 0x7e3df5c
	bool StopFireFilter();// 0x7e3df24
	void StopDelayReload();// 0x7e3d174
	void StartReload();// 0x7e3d4ac
	void SetSpecialBulletUse(bool _bUseSpecialBullet);// 0x7e3ce90
	void SetOpticalMap(out const <int,int> PriorityMap);// 0x7e3c3b4
	void SetMaxBulletNumInOneClip(int Num);// 0x7e3cf48
	void SetExtraBulletNum(int _ExtraBulletNum);// 0x7e3cd74
	void SetBulletNumInClip(int Num, enum ChangeReason, bool NeedToClient, bool NeedToServer);// 0x7e3cff8
	void ReloadImmediately(bool bCostBullet);// 0x7e3d248
	void ReloadDelayed(float ReloadTime, bool bCostBullet);// 0x7e3d188
	void NotifyReloadToAntiCheat();// 0x7e3c6a8
	bool MayNotConsumeBulletWhenFire();// 0x7e3d4c0
	bool IsStopFireStateDelay();// 0x7e3dbd4
	bool IsRemoteFireEffectOptimize();// 0x7e3db9c
	bool IsRemoteAnimationOptimize();// 0x7e3db64
	bool IsOverHeat();// 0x7e3dc7c
	bool HasMultipleScaleScope();// 0x7e3df70
	bool HasEquippedHighMagScopeAndADS();// 0x7e3dfa8
	void HandleExchangeOptical(int OldOpticalID, int NewOpticalID);// 0x7e3c538
	enum GetWeaponWithSpecificType();// 0x7e3c7f4
	float GetWeaponBodyLength();// 0x7e3ca04
	FName GetVerifyScopeSocketNameFromEntity();// 0x7e3cb10
	int GetUnEquipMagBulletNum();// 0x7e3cd40
	bool GetSpecialBulletUse();// 0x7e3ce58
	int GetSpecialBulletNumInClipSync();// 0x7e3ccd8
	int GetSingleShootPelletNum();// 0x7e3cc70
	enum GetSightTypeRuntime();// 0x7e3c6bc
	FName GetShellDropSocketNameFromEntity();// 0x7e3cb78
	double GetServerTimeFromClient();// 0x7e3c7c0
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex);// 0x7e3c93c
	float GetReloadTimePerkRatio();// 0x7e3d36c
	float GetReloadAnimStartPercent(bool bStoredOrCurrent);// 0x7e3d3d4
	float GetReferenceDistance();// 0x7e3c828
	float GetRangeModifier();// 0x7e3c85c
	int GetOpticalPriority(int ItemID);// 0x7e3c5f0
	bool GetNeedRecoverPostFire();// 0x7e3dea0
	Transform GetMuzzleTransformConsiderBarrelStab();// 0x7e3ca38
	Transform GetMuzzleTransform();// 0x7e3caa4
	FName GetMuzzleSocketNameFromEntity();// 0x7e3cc3c
	FText GetMinScale();// 0x7e3e014
	float GetMaxValidHitTimeFromEntity();// 0x7e3cb44
	FText GetMaxScale();// 0x7e3e0f0
	int GetMaxHeat();// 0x7e3c674
	int GetMaxChargeEnergy();// 0x7e3de34
	int GetMaxBulletNumInOneClip();// 0x7e3cfc4
	float GetLensDamageBase();// 0x7e3c8d4
	bool GetIsMaxScale();// 0x7e3e198
	bool GetIsAlternantMuzzleSocketActiveFromEntity(bool bThinkBarrel);// 0x7e3cbac
	bool GetIsAllowShoulderShoot();// 0x7e3dc0c
	int GetIntMaxScale();// 0x7e3e0bc
	WeaponHitPartCoff GetHitPartCoff();// 0x7e3c890
	Vector2D GetFireRecoilTarget();// 0x7e3c6f0
	Vector2D GetFireRecoilRandom();// 0x7e3c724
	WeaponFireModeInfo[] GetFireModeList();// 0x7e3d5c4
	int GetFireModeIndex();// 0x7e3d590
	int GetExtraBulletNum();// 0x7e3cdf0
	int GetExtendedMagQuality();// 0x7e3ce24
	int GetCurSpecialBulletNum();// 0x7e3cf14
	int GetCurrentHeat();// 0x7e3ded8
	int GetCurrentEquipSight();// 0x7e3dfe0
	float GetCurReloadTime();// 0x7e3d3a0
	enum GetCurReloadMethod();// 0x7e3d460
	enum GetCurFireMode();// 0x7e3d648
	BulletEffectConfig GetCurBulletEffectConfig(out bool bGetSuccess);// 0x7e3d67c
	float GetCrossHairBurstSpeed();// 0x7e3c78c
	float GetCrossHairBurstIncreaseSpeed();// 0x7e3c758
	bool GetClipHasInfiniteBullets();// 0x7e3d4f8
	int GetChargeTime();// 0x7e3de00
	FString GetChargeItemTipText();// 0x7e3dcfc
	int GetChargeItemNumToConsume();// 0x7e3ddcc
	ItemDefineID GetChargeItemDefineID();// 0x7e3dcb4
	ItemDefineID GetBulletTypeFromEntity();// 0x7e3d548
	int GetBulletNumInClipSync();// 0x7e3cd0c
	int GetBulletNumInClipFake();// 0x7e3cca4
	int GetBulletNumInClip();// 0x7e3d140
	float GetBaseImpactDamageEntity();// 0x7e3c908
	int GetAvailableBulletsNumInBackpack(bool bExcludeInfiniteBullet);// 0x7e3d2e0
	void FixBulletNumWithValideData();// 0x7e3d530
	void ClientReportBulletNumNoEnough();// 0x7e3d2cc
	bool CheckDisruptorCanCharge();// 0x7e3dc44

--------------------------------
Class: CrossHairLogicObject.ApgameWeaponLogicObject.Object
	CrossHairConfig* CrossHairConfig_Runtime;//[Offset: 0x60, Size: 0x8]
	AutoCrossHairConfig* AutoCrossHairConfig_Runtime;//[Offset: 0x68, Size: 0x8]
	ApexCharacterBase* CrossHairHitCharacter;//[Offset: 0x70, Size: 0x8]
	void OnWeaponShoot();// 0x4cfec0c
	void DrawWeaponCrosshair(HUDWidgetBase* WeaponHudWidget);// 0x7b9b808

--------------------------------
Class: HUDWidgetBase.Object
	bool EnableSWidgetDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float DesignedResolution;//[Offset: 0x30, Size: 0x4]
	Vector2D Position;//[Offset: 0x34, Size: 0x8]
	Vector2D ScreenPosition;//[Offset: 0x3c, Size: 0x8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	float Opacity;//[Offset: 0x48, Size: 0x4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	ApexGameHUD* HUDOwner;//[Offset: 0x50, Size: 0x8]
	ApexPlayerController* APPlayerController;//[Offset: 0x58, Size: 0x8]
	Pawn* CharacterOwner;//[Offset: 0x60, Size: 0x8]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	float LastRenderTime;//[Offset: 0x6c, Size: 0x4]
	Vector2D RenderPosition;//[Offset: 0x70, Size: 0x8]
	Vector2D RenderSize;//[Offset: 0x78, Size: 0x8]
	float RenderScale;//[Offset: 0x80, Size: 0x4]
	Vector2D CanvasCenter;//[Offset: 0x84, Size: 0x8]
	Canvas* Canvas;//[Offset: 0x90, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x98, Size: 0x8]
	RenderObjectList(FieldPathProperty)[] RenderObjectList;//[Offset: 0xa0, Size: 0x10]
	void SWidgetDraw(float DeltaTime);// 0x7cbb8ac
	bool ShouldSWidgetDraw(bool bShowScores);// 0x7cbb970
	bool ShouldDraw(bool bShowScores);// 0x7cbb7d4
	void SetHidden(bool bIsHidden);// 0x7cbba48
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x7cb979c
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x7cb9b3c
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x7cb9068
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x7cb94d8
	Vector2D ProjectToCanvasPos(Vector WorldPos, Actor* WorldActor);// 0x7cb8f20
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, float Depth, bool ToDebugCanvas);// 0x7cba558
	Vector2D DrawTextAPEX(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x7cbad6c
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x7cb9e44
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x7cb9d08
	void Draw(float DeltaTime);// 0x7cbb710
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x7cbb638

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x38, Size: 0x8]
	TextureUVs UVs;//[Offset: 0x40, Size: 0x10]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x58, Size: 0x10]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	Vector2D RenderOffset;//[Offset: 0x6c, Size: 0x8]
	float Rotation;//[Offset: 0x74, Size: 0x4]
	Vector2D RotPivot;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float RenderPriority;//[Offset: 0xc, Size: 0x4]
	Vector2D Position;//[Offset: 0x10, Size: 0x8]
	Vector2D Size;//[Offset: 0x18, Size: 0x8]
	LinearColor RenderColor;//[Offset: 0x20, Size: 0x10]
	float RenderOpacity;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 0x4]
	float V;//[Offset: 0x4, Size: 0x4]
	float UL;//[Offset: 0x8, Size: 0x4]
	float VL;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x48, Size: 0x18]
	Font* Font;//[Offset: 0x60, Size: 0x8]
	float TextScale;//[Offset: 0x68, Size: 0x4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	Vector2D ShadowDirection;//[Offset: 0x70, Size: 0x8]
	LinearColor ShadowColor;//[Offset: 0x78, Size: 0x10]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	LinearColor OutlineColor;//[Offset: 0x8c, Size: 0x10]
	byte HorzPosition;//[Offset: 0x9c, Size: 0x1]
	byte VertPosition;//[Offset: 0x9d, Size: 0x1]

--------------------------------
Class: ApexGameHUD.HUD.Actor.Object
	bool bShowEnemyHeadName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bShowEnemyHeadHp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	bool bShowTeammateHeadName_BR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]
	bool bShowTeammateHeadHp_BR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 0x1]
	bool bShowTeammateHeadName_MP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	bool bShowTeammateHeadHp_MP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 0x1]
	int HeadNameMaxShowCount;//[Offset: 0x388, Size: 0x4]
	bool bShowEnemyHeadName_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	bool bShowEnemyHeadHp_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	bool bShowTeammateHeadName_BR_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 0x1]
	bool bShowTeammateHeadHp_BR_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 0x1]
	bool bShowTeammateHeadName_MP_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bShowTeammateHeadHp_MP_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	bool bDiffCharacterNameColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x398, Size: 0x10]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x3a8, Size: 0x10]
	bool IsOpenAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	bool IsOpenADSMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 0x1]
	class InGameUIDataTable* UIDataTemplate;//[Offset: 0x3c0, Size: 0x28]
	bool bOpenCharPawnStateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	InGameUIDataTable* UIData;//[Offset: 0x3f0, Size: 0x8]
	bool ArcUseWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	<uint32,HeadNamePool> HeadNameMap;//[Offset: 0x400, Size: 0x50]
	<FName,Widget*> WidgetMap;//[Offset: 0x460, Size: 0x50]
	delegate OnTeamInfoChange;//[Offset: 0x4c0, Size: 0x10]
	delegate OnHealthInfoChange;//[Offset: 0x4d0, Size: 0x10]
	delegate OnKnockdownShiledChange;//[Offset: 0x4e0, Size: 0x10]
	delegate OnLifeNumber;//[Offset: 0x500, Size: 0x10]
	delegate OnPlayerKillOrAssist;//[Offset: 0x510, Size: 0x10]
	delegate OnMyPlayerKillKing;//[Offset: 0x520, Size: 0x10]
	delegate OnVisualSoundTrigger;//[Offset: 0x530, Size: 0x10]
	delegate OnTeamInfoTotalChange;//[Offset: 0x540, Size: 0x10]
	delegate OnPlayerCompleteDie;//[Offset: 0x550, Size: 0x10]
	delegate OnAutonomousPlayerStateChange;//[Offset: 0x560, Size: 0x10]
	delegate OnPlayerHurt;//[Offset: 0x570, Size: 0x10]
	delegate OnPlayerIconClicked;//[Offset: 0x580, Size: 0x10]
	delegate OnPlayerEmoteRefresh;//[Offset: 0x590, Size: 0x10]
	delegate OnTurnTableRefresh;//[Offset: 0x5a0, Size: 0x10]
	FString GameHUDSuffix;//[Offset: 0x5c8, Size: 0x10]
	FName SmallMapUIName;//[Offset: 0x5d8, Size: 0x8]
	Widget* SmallMapUI;//[Offset: 0x5e0, Size: 0x8]
	Widget* NavigatorPanelUI;//[Offset: 0x5e8, Size: 0x8]
	bool bMapRotationEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	void ShowViewportCanvas();// 0x79e3a94
	void SetShowEnemyHeadHp_RT(bool enable);// 0x79e3ac0
	void SetRedPointSizeAndPos(Widget* NavigatorPanel, float HalfLength, Vector2D InPos, float AngleLength);// 0x79e2c9c
	void SetMiniMapSizeAndPos(Vector2D InSize, Vector2D InPos, float DistanceScale, float RenderScale, float RenderOpacity);// 0x79e2ec8
	void SetForbiddenCrossHairEnable(bool enable);// 0x79e3758
	void SetDrawHUD(bool Visible);// 0x79e3818
	void SetCrossHairVisible(bool Visible);// 0x79e38dc
	void SetCharPawnStateCheck(const bool bCheck);// 0x79e39b0
	void RemoveNameShowPool(UserWidget* TargetWidget);// 0x79e3c58
	void PopCanvasSafeZone();// 0x79e3a70
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x5a54bbc
	void OnLoadUIDataComplete();// 0x79e399c
	void OnAsyncLoadingFinished();// 0x79e3aac
	FString GetGameHUDSuffix();// 0x79e3284
	GameHUDItemBase* GetGameHUDItemByType(enum ItemType);// 0x79e31b8
	bool GetForbiddenCrossHairEnable();// 0xa0de020
	bool GetDrawHUD();// 0xa0de03c
	bool CheckNameShowByPool(uint32 PlayerKey, bool bEnemy, float DistanceSq, UserWidget* TargetWidget);// 0x79e3d14
	bool CheckNameShow(uint32 PlayerKey);// 0x79e3b90
	void AddTexture(int Index, Actor* Target, Texture2D* Texture, out const Vector2D TexturePosition, out const Vector2D TextureSize, float DrawOpacity, float LifeTime);// 0x79e3398

--------------------------------
Class: InGameUIDataTable.Object
	<FName,GameHUDEachInfo> SyncLoadList;//[Offset: 0x28, Size: 0x50]
	<FName,GameHUDEachInfo> HighLevelASyncFrameLoadList;//[Offset: 0x78, Size: 0x50]
	<FName,GameHUDEachInfo> ASyncFrameLoadList;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: GameHUDEachInfo
	FName UIType;//[Offset: 0x0, Size: 0x8]
	InGameUIConditionBase*[] ConditionList;//[Offset: 0x8, Size: 0x10]
	FName MountNodeName;//[Offset: 0x18, Size: 0x8]
	int Index;//[Offset: 0x20, Size: 0x4]
	bool bDefaultHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	FName UIName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InGameUIConditionBase.Object

--------------------------------
Class: HeadNamePool
	float DistanceSq;//[Offset: 0x0, Size: 0x4]
	bool bEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	UserWidget* TargetWidget;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameHUDItemBase.ActorComponent.Object
	void TryRefreshUI();// 0xa11fdd0
	GameFlowHUDMgr* GetOwnerHUDMgr();// 0x7c0d28c

--------------------------------
Class: GameFlowHUDMgr.ActorComponent.Object
	class GameFlowHUDItemBase[] ConfigGameFlowHUDItems;//[Offset: 0xf8, Size: 0x10]
	GameFlowHUDItemBase*[] InstancedGameFlowHUDItems;//[Offset: 0x120, Size: 0x10]
	void TryRefreshUI();// 0x7c0c360
	bool IsPlayerReconnected();// 0x7c0c22c
	bool IsPlayerHasPawnState(enum State);// 0x7c0c264
	ApexCharacter* GetViewedCharacter();// 0x7c0c1f8
	PawnStateManager* GetPlayerPawnStateManager();// 0x7c0c32c
	ApexGameState* GetApexGameState();// 0x7c0c1c4

--------------------------------
Class: GameFlowHUDItemBase.Object
	bool EnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float UpdateTimerInterval;//[Offset: 0x8c, Size: 0x4]
	class UserWidget* EffectUI;//[Offset: 0x90, Size: 0x8]
	void TryRefreshUI();// 0xa11f9dc
	void OnTickBP(float DeltaSeconds);// 0xa1d39f8
	void OnGameFlowEndBP();// 0xa1d39f8
	void OnGameFlowBeginBP();// 0xa1d39f8
	GameFlowHUDMgr* GetOwnerHUDMgr();// 0x7c0b240

--------------------------------
Class: PawnStateManager.ActorComponent.Object
	FName PawnStateRelationTableName;//[Offset: 0xf8, Size: 0x8]
	PawnStateManagerTableMap* PawnStateManagerTableMap;//[Offset: 0x100, Size: 0x8]
	PawnStateDataAsset* PawnStateConfig;//[Offset: 0x108, Size: 0x8]
	ApexCharacterBase* PawnStateCharacterBase;//[Offset: 0x110, Size: 0x8]
	ApexCharacterMovementComponent* PawnStateMovementComponent;//[Offset: 0x118, Size: 0x8]
	ApexGameState* PawnStateGameState;//[Offset: 0x120, Size: 0x8]
	uint64 StateMask;//[Offset: 0x1d8, Size: 0x8]
	<enum> MainHandStates;//[Offset: 0x1e0, Size: 0x50]
	<enum,enum> PawnStateOverrideMap;//[Offset: 0x230, Size: 0x50]
	uint64 ReconnectedStateMask;//[Offset: 0x280, Size: 0x8]
	uint64 DebugServerStateMask;//[Offset: 0x288, Size: 0x8]
	bool IgnoreStateTimeoutCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	delegate OnStateAdded;//[Offset: 0x3c8, Size: 0x10]
	delegate OnStateRemoved;//[Offset: 0x3d8, Size: 0x10]
	delegate OnPoseStateChanged;//[Offset: 0x3e8, Size: 0x10]
	delegate OnMovementModeChanged;//[Offset: 0x3f8, Size: 0x10]
	delegate OnPostStateChanged;//[Offset: 0x408, Size: 0x10]
	delegate OnPostStateChangedWithChar;//[Offset: 0x418, Size: 0x10]
	delegate OnOverrideStateChanged;//[Offset: 0x428, Size: 0x10]
	uint64 CurrentFrame;//[Offset: 0x438, Size: 0x8]
	<enum,byte> PawnStateRepeatEntryCountMap;//[Offset: 0x440, Size: 0x50]
	uint64 PrevCheckStateMask;//[Offset: 0x490, Size: 0x8]
	void ServerSyncOverrideStates(const OverrideStateSyncData[] SynDataList);// 0x7d9383c
	void ServerReportStatePath(uint64 Mask, const StateBlockMap[] StateBlockMaps, const StatePath[] StatePath);// 0x7d931fc
	void ServerReportSimpleState(uint64 Mask, uint64 BlockMask, const enum[] BlockOverrideState, uint64 RemoveMask, const enum[] RemoveOverrideState);// 0x7d92ef0
	void ServerReportRepeatEntryState(enum EntryState, FString Info);// 0x7d92bec
	void ServerReportPawnStateTimeout(const enum[] TimeoutArray, bool bIsNetLost);// 0x7d92a74
	void ServerReportBlockState(enum State);// 0x7d92e2c
	void S2CSyncStateMask(uint64 ServerStateMask);// 0x7d936b4
	void RequestSyncOverrideState();// 0xa156d44
	void RemoveMainHandState(enum RemovedState);// 0x7d93a28
	void OnRep_StateMask(uint64 PrevStateMask);// 0x468f590
	void OnRep_ReconnectedStateMask();// 0x7d934ac
	void IgnoreStateTimeout(bool bIgnore);// 0x7d92d5c
	void ClientSyncOverrideStates(const OverrideStateSyncData[] SynDataList);// 0x7d93930
	void C2SSyncStateMask(uint64 AutonomousStateMask);// 0x7d935f0
	void C2SReliableSyncStateMask(uint64 AutonomousStateMask);// 0x7d9352c
	void BrocastSyncStateMask(uint64 ServerStateMask);// 0x7d93778
	void BPSyncStateMask();// 0x7d93bb0
	void AddMainHandState(enum NewState);// 0x7d93aec

--------------------------------
Class: OverrideStateSyncData
	enum SrcPawnState;//[Offset: 0x0, Size: 0x1]
	enum DestPawnState;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: StateBlockMap
	enum State;//[Offset: 0x0, Size: 0x1]
	bool bRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	StateBlockData[] StateBlockData;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: StateBlockData
	enum BlockState;//[Offset: 0x0, Size: 0x1]
	int BlockCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StatePath
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	bool bEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum State;//[Offset: 0x5, Size: 0x1]
	bool bSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	byte MovementMode;//[Offset: 0x7, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PawnStateManagerTableMap.BaseGameflowSubsystem.Object
	FString PawnStateConfig;//[Offset: 0x38, Size: 0x10]
	PawnStateDataAsset* PawnStateDataAsset;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BaseGameflowSubsystem.Object
	void OnApexCharacterBeginPlayOrEndPlay(ApexCharacter* InApexCharacter, bool bBeginPlay);// 0x7b08154

--------------------------------
Class: PawnStateDataAsset.DataAsset.Object
	bool bLogDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bLogAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bLogAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bLogSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	enum[] ServerControlStates;//[Offset: 0x38, Size: 0x10]
	float AutonomousSyncInterval;//[Offset: 0x48, Size: 0x4]
	float StateLogInterval;//[Offset: 0x4c, Size: 0x4]
	float DefaultStateTimeOutWarningTime;//[Offset: 0x50, Size: 0x4]
	<enum> NoWarningState;//[Offset: 0x58, Size: 0x50]
	<enum,float> ForceStateLeaveCondition;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: ApexCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	ApexCharacterMovementSetting* ApexCharacterMovementSetting;//[Offset: 0x830, Size: 0x8]
	PrimitiveComponent* LastBase;//[Offset: 0x838, Size: 0x8]
	bool bServerUseClientMoveRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1]
	float KnockDownSpeedValue;//[Offset: 0x8f0, Size: 0x4]
	float DeathSpeedZeroTime;//[Offset: 0x8f4, Size: 0x4]
	int SkillForbidSprint;//[Offset: 0x8f8, Size: 0x4]
	float FallingAccelScale;//[Offset: 0x8fc, Size: 0x4]
	float AirSpeedCapScale;//[Offset: 0x900, Size: 0x4]
	MovementTagVolume* MovementTagVolume;//[Offset: 0x908, Size: 0x8]
	MovementGravityFieldVolume* MovementGravityFieldVolume;//[Offset: 0x910, Size: 0x8]
	<FName,MovementCurveModifierConfigForDistance> PerkModifyConfig;//[Offset: 0x9c8, Size: 0x50]
	ApexCharacterBase* ApexCharacterBase;//[Offset: 0xa68, Size: 0x8]
	bool ForbidMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8c, Size: 0x1]
	float WalkingSpeedModify;//[Offset: 0xb7c, Size: 0x4]
	ParticleSystemComponent* LandingFXComponent;//[Offset: 0xc58, Size: 0x8]
	MaterialInterface* ClimbTipsLineMaterialInstanceForTPP;//[Offset: 0xcf0, Size: 0x8]
	MaterialInterface* ClimbTipsLineMaterialInstanceForFPP;//[Offset: 0xcf8, Size: 0x8]
	Actor* ClimbTipsActor;//[Offset: 0xd00, Size: 0x8]
	StaticMeshComponent* ClimbTipsActorMesh;//[Offset: 0xd08, Size: 0x8]
	bool IsLittleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9c, Size: 0x1]
	bool bAutoJumpClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9f, Size: 0x1]
	bool bAutoJumpClimbEnterClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 0x1]
	MovementClimbSetting OverrideMovementClimbSetting;//[Offset: 0xfa8, Size: 0x18]
	bool BCheckSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc7, Size: 0x1]
	ParticleSystem* LastSlidingFX;//[Offset: 0x1010, Size: 0x8]
	ParticleSystemComponent*[] SlidingFXComponents;//[Offset: 0x1018, Size: 0x10]
	delegate DelegateOnMotionMovementEnd;//[Offset: 0x1040, Size: 0x10]
	bool RuntimeWarpingPointWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050, Size: 0x1]
	Vector WarpingEndLocation;//[Offset: 0x1054, Size: 0xc]
	Vector[] RuntimeWarpingPointLocationArrayEditor;//[Offset: 0x1060, Size: 0x10]
	WarpingSocketData[] RuntimeWarpingSocketArray;//[Offset: 0x1070, Size: 0x10]
	Vector MotionExtendVelocity;//[Offset: 0x1080, Size: 0xc]
	MotionWarpingDataAsset* CurrentMotionMovementData;//[Offset: 0x1090, Size: 0x8]
	RepMotionData RepMotionData;//[Offset: 0x1098, Size: 0x78]
	float RepMotionMovementTime;//[Offset: 0x1110, Size: 0x4]
	bool bControllerLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156e, Size: 0x1]
	float DSAdjustOverDistance;//[Offset: 0x1578, Size: 0x4]
	float DSAdjustLargeVelocity;//[Offset: 0x157c, Size: 0x4]
	PrimitiveComponent* DRNetLastBase;//[Offset: 0x15f8, Size: 0x8]
	MovementAntiDataAsset* MovementAntiDataAsset;//[Offset: 0x16c8, Size: 0x8]
	MovementAntiCommonDataAsset* MovementAntiCommonDataAsset;//[Offset: 0x16d0, Size: 0x8]
	ReconnectSyncData ReconnectSyncData;//[Offset: 0x1728, Size: 0x10]
	int ReceivePacketFiveSecond;//[Offset: 0x1748, Size: 0x4]
	int ServerAdjustCount;//[Offset: 0x1768, Size: 0x4]
	Vector2D ServerCapsuleSize;//[Offset: 0x1770, Size: 0x8]
	float AISlidingMinSpeed;//[Offset: 0x1790, Size: 0x4]
	float AISlidingMaxSpeed;//[Offset: 0x1794, Size: 0x4]
	float AISlidingTime;//[Offset: 0x1798, Size: 0x4]
	AIPhySimuPoint[] AIPhysPointsSeq;//[Offset: 0x17a0, Size: 0x10]
	Vector2D AIClimbHelper;//[Offset: 0x17b0, Size: 0x8]
	int AIPhysPointIndex;//[Offset: 0x17b8, Size: 0x4]
	Vector NavLinkStartLocation;//[Offset: 0x17bc, Size: 0xc]
	Vector NavLinkEndLocation;//[Offset: 0x17c8, Size: 0xc]
	bool ClimbOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d4, Size: 0x1]
	float AIRemainDelta;//[Offset: 0x17d8, Size: 0x4]
	float MaxAIJumpZVelocity;//[Offset: 0x17dc, Size: 0x4]
	float AIClimbPawnRadiusScale;//[Offset: 0x17e0, Size: 0x4]
	float MaxAIJumpHeight;//[Offset: 0x17e4, Size: 0x4]
	float AIClimbVelocity;//[Offset: 0x17e8, Size: 0x4]
	float AIJumpVelocity;//[Offset: 0x17ec, Size: 0x4]
	bool bUseTickGroupSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c0, Size: 0x1]
	byte TickGroupSetting;//[Offset: 0x18c1, Size: 0x1]
	void SyncLaunch(out const Vector InVelocity, bool bXYOverride, bool bZOverride, enum Action, Actor* Actor);// 0x79c53a0
	void StopSlide();// 0x79c3c90
	void StartMotionMovementByData(MotionWarpingDataAsset* InMotionMovementData);// 0x79c5ca0
	void StartMotionMovement(int NewMotionMovementID);// 0x79c5d5c
	void SetOpenSlideJump(bool bOpen);// 0x79c6064
	void SetJumpEnable(bool InEnableJump);// 0x79c72d0
	void SetExternalRotation(out const Rotator InExternalRotation, bool bSweep);// 0x79c4b94
	void SetExternalLocationAndRotation(out const Vector InExternalLocation, out const Rotator InExternalRotation, bool bSweep, bool bIsTeleport);// 0x79c492c
	void SetExternalLocation(out const Vector InExternalLocation, bool bSweep, bool bIsTeleport);// 0x79c4d18
	void ServerUpdateSimulatedReport(int InSimulatedAdjustCount, int InSnapshotAvoidAdjustCount, int InSnapshotForceAdjustCount, int InSimulatedLongTimeCount, int InSimulatedLongTimeAdjustCount, int InSimulatedLongDistanceAdjustCount, int InSimulatedDynamicAdjustCount, int InSimulatedManyPacketCount, int InSimulatedLargeVelocityAdjustCount);// 0x79c3f90
	void ServerSyncLaunchAck(int InClientLaunchAck);// 0x79c50a8
	void ServerSyncLaunch(const Vector InVelocity, enum Action, Actor* Actor, double ClientTimeStamp);// 0x79c516c
	void ServerStartMotionMovementByData(const MotionWarpingSyncData MotionWarpingSyncData);// 0x79c5b40
	void ServerSlidingToAir();// 0xa0d744c
	void ServerSlideFailProcess(enum EnterState);// 0x79c5fa0
	void ServerSetAutoJumpClimb(bool bEnable);// 0x79c7204
	void ServerReportClimb(int ClimbMultiJumpTimes, int ClimbMultiJumpCount);// 0x79c44bc
	void ServerReportAutoRun(float AutoSprintDistance, float AutoSprintDTime);// 0x79c45fc
	void ServerPingClientSyncTimeStamp(float ServerTimeStamp, float ClientTimeStamp);// 0x79c3d8c
	void ServerMoveWithoutRotation(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x79c7a30
	void ServerMoveTri(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float TimeStamp1, Vector_NetQuantize10 InAccel1, byte PendingFlags1, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x79c7390
	void ServerMoveDualWithoutRotation(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x79c7dd4
	void ServerMoveDualHybridRootMotionWithoutRotation(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x79c82f4
	void ServerMove_ServerUseClientMove(float Timestamp, Vector_NetQuantize10 InVelocity, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x79c8814
	void ServerLittleJump(const MovementSyncData MovementSyncData);// 0x79c6e6c
	void ServerEnterOneKeyClimb(bool bNeedJump);// 0x79c6b14
	void ServerEnterHanging(const MovementSyncMultData MovementSyncData);// 0x79c63b0
	void ServerEnterClimbOver(const MovementSyncMultData MovementSyncData, byte ClimbOverFrom);// 0x79c661c
	void ServerEnterClimb(const MovementSyncData MovementSyncData, uint16 ActorRotationYaw);// 0x79c68ec
	void ServerEndMotionMovement(const MovementSyncData MovementSyncData, uint16 ActorRotationYaw);// 0x79c5898
	void ServerEnableCheckSliding(bool NewEnable);// 0x79c6128
	void ServerClimbFailProcess(const MovementSyncData MovementSyncData, Vector_NetQuantize100 CurrentVelocity);// 0x79c70a8
	void ServerClimbBigJump(const Vector WallNormal, const float VelFrac);// 0x79c6d30
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x4962c20
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x4a74b40
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x5af4408
	void OnRep_ServerControllerLost();// 0x582f66c
	void OnRep_RepMotionMovementTime();// 0x5215f88
	void OnRep_RepMotionData();// 0x56639c0
	void OnRep_NeedWaitLevelStreaming();// 0x79c3d6c
	void OnRecoverOnServer();// 0x79c4484
	void OnPreReconnectOnServer();// 0x79c44a8
	void OnControllerLost();// 0x79c442c
	bool IsUseSlidingButtonVeer();// 0xa0d74c4
	bool IsSlideJumpMode();// 0xa0d7484
	bool IsOpenSlideJump();// 0xa0d74a4
	void FlushHitCD(int HitSlowlyID);// 0x79c5678
	void EnterOneKeyClimb();// 0x79c6be0
	void EndMotionMovement();// 0x79c5c8c
	void EnableCheckSliding(bool NewEnable);// 0x79c61f4
	void ClientSyncLaunch(int InClientLaunchAck, const Vector InVelocity, enum Action);// 0x79c4ef0
	void ClientSetExternalLocationWitchSync(const MovementSyncData MovementSyncData, bool bSweep, bool bIsTeleport);// 0x79c473c
	void ClientPingClientSyncTimeStamp(float ServerTimeStamp);// 0x79c3ecc
	void BrocastStartMotionMovementByData(const MotionWarpingSyncData MotionWarpingSyncData);// 0x79c59f4
	void BrocastSlidingToAir();// 0xa0d7430
	void BrocastSlideFailProcess(enum EnterState);// 0x79c5edc
	void BrocastEnterSlide();// 0xa0d7468
	void BrocastEnterOneKeyClimb(bool bNeedJump);// 0x79c6a48
	void BrocastEnterHanging(const MovementSyncMultData MovementSyncData);// 0x79c62b8
	void BrocastEnterClimbOver(const MovementSyncMultData MovementSyncData, byte ClimbOverFrom);// 0x79c64a8
	void BrocastEnterClimb(const MovementSyncData MovementSyncData, uint16 ActorRotationYaw);// 0x79c6790
	void BrocastEndMotionMovement(const MovementSyncData MovementSyncData, uint16 ActorRotationYaw);// 0x79c573c
	void BrocastClimbFailProcess(const MovementSyncData MovementSyncData, Vector_NetQuantize100 CurrentVelocity);// 0x79c6f4c
	void BrocastClimbBigJump(const Vector WallNormal, const float VelFrac);// 0x79c6bf4
	void ApplyConsumeTimeStamp(float NewConsumeTimeStamp);// 0x79c5e18
	void AIStartSliding(out const Vector InVelocity);// 0x79c3ca4

--------------------------------
Class: ApexCharacterMovementSetting.DataAsset.Object
	float ValidClientDistanceDiff;//[Offset: 0x30, Size: 0x4]
	bool bCorrectCharacterRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float SlideWallHeightAdjust;//[Offset: 0x38, Size: 0x4]
	float ForceFindFloorTime;//[Offset: 0x3c, Size: 0x4]
	float ForceFindFloorDist;//[Offset: 0x40, Size: 0x4]
	float DSAdjustOverDistance;//[Offset: 0x44, Size: 0x4]
	float DSAdjustLargeVelocity;//[Offset: 0x48, Size: 0x4]
	float SimulatedForceUpdateLocationTime;//[Offset: 0x4c, Size: 0x4]
	bool bOpenSimulatedPredicting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bServerPredictMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	float RTTToleranceRate;//[Offset: 0x54, Size: 0x4]
	float LagTolerance;//[Offset: 0x58, Size: 0x4]
	float PredictInterval;//[Offset: 0x5c, Size: 0x4]
	int PerFrameUsePacket;//[Offset: 0x60, Size: 0x4]
	bool bOnlyLosePredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float LosePredictTime;//[Offset: 0x68, Size: 0x4]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x70, Size: 0x4]
	float ClientAdjustPassWallCheckDistance;//[Offset: 0x74, Size: 0x4]
	bool bOpenReconnectSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bOpenStopNoSendPacket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool EnableSTDRPhysCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	float STDRPhysCorrectionStartTime;//[Offset: 0x7c, Size: 0x4]
	float DRLinceTraceLength;//[Offset: 0x80, Size: 0x4]
	bool bOBUseDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	int MovingInputRate;//[Offset: 0x88, Size: 0x4]
	float AppendMoveDuration;//[Offset: 0x8c, Size: 0x4]
	int AppendOneMoveThreshold;//[Offset: 0x90, Size: 0x4]
	int AppendTwoMoveThreshold;//[Offset: 0x94, Size: 0x4]
	bool EnableLogMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	float SmoothAdjustionWorldLocationSpeed;//[Offset: 0x9c, Size: 0x4]
	float MaxSmoothAdjustionWorldLocationOffset;//[Offset: 0xa0, Size: 0x4]
	bool EnableSmoothAdjustionWorldLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bPreExternalAccel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	MovementTagAttributeDataAsset* TagAttributeTable;//[Offset: 0xa8, Size: 0x8]
	float ShowLockTipsCD;//[Offset: 0xb0, Size: 0x4]
	int PenetratingUpCheckNum;//[Offset: 0xb4, Size: 0x4]
	float ZeroPenetrationDepthAdjustLength;//[Offset: 0xb8, Size: 0x4]
	float CharacterMaxSpeed;//[Offset: 0xbc, Size: 0x4]
	float WalkingFriction;//[Offset: 0xc0, Size: 0x4]
	float WalkingBaseSpeed;//[Offset: 0xc4, Size: 0x4]
	float WalkingStopSpeed;//[Offset: 0xc8, Size: 0x4]
	float WalkingAccelSpeed;//[Offset: 0xcc, Size: 0x4]
	CurveFloat* WalkingAccelSpeedCurve;//[Offset: 0xd0, Size: 0x8]
	float[] StepHeightSection;//[Offset: 0xd8, Size: 0x10]
	bool bUseForceStepUpDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	float ForceStepUpDistance;//[Offset: 0xec, Size: 0x4]
	float ForceStepUpWalkableAngle;//[Offset: 0xf0, Size: 0x4]
	float ForceStepUpWalkableNormalZ;//[Offset: 0xf4, Size: 0x4]
	float WalkSlideWallRate;//[Offset: 0xf8, Size: 0x4]
	float SlideAlongSurfaceNoMoveAngle;//[Offset: 0xfc, Size: 0x4]
	float AfterSlideAlongSurfaceNoMoveAngle;//[Offset: 0x100, Size: 0x4]
	float SlideAlongSurfaceCheckDistance;//[Offset: 0x104, Size: 0x4]
	float SlideAlongSurfaceVelocityChangeAngle;//[Offset: 0x108, Size: 0x4]
	int SlideAlongSurfaceNoMoveTimes;//[Offset: 0x10c, Size: 0x4]
	float SlideAlongSurfaceNoMoveDistance;//[Offset: 0x110, Size: 0x4]
	CurveFloat* WalkingFrictionToAbsoluteSpeedCurve;//[Offset: 0x118, Size: 0x8]
	CurveFloat* WalkingAccelerationToSpeedCurve;//[Offset: 0x120, Size: 0x8]
	bool bWalkingUseCurveAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	MovementModifyConfig MovementModifyConfig;//[Offset: 0x130, Size: 0x50]
	float ApexPerchRadiusThreshold;//[Offset: 0x180, Size: 0x4]
	float ApexPerchHeight;//[Offset: 0x184, Size: 0x4]
	MovementCameraState[] EnterSprintCameraState;//[Offset: 0x188, Size: 0x10]
	float WalkSlopeAngle;//[Offset: 0x198, Size: 0x4]
	float WalkSlopeNormalZ;//[Offset: 0x19c, Size: 0x4]
	float WalkSlopeTime;//[Offset: 0x1a0, Size: 0x4]
	float WalkSlopeCD;//[Offset: 0x1a4, Size: 0x4]
	float WalkSlopeControlAngleLimit;//[Offset: 0x1a8, Size: 0x4]
	float FallingLandSoundDistance;//[Offset: 0x1ac, Size: 0x4]
	float FallingLandParticleDistance;//[Offset: 0x1b0, Size: 0x4]
	MovementStiffCurveDataAsset* StiffCurveTable;//[Offset: 0x1b8, Size: 0x8]
	float StiffCD;//[Offset: 0x1c0, Size: 0x4]
	float JumpHeight;//[Offset: 0x1c4, Size: 0x4]
	bool bLimitSlideJumpHorizontalVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	float LimitJumpHorizontalVelocity;//[Offset: 0x1cc, Size: 0x4]
	CurveFloat* LimitJumpHorizontalVelocityCurve;//[Offset: 0x1d0, Size: 0x8]
	CurveFloat* JumpHorizontalVelocityFirstJumpTimeCurve;//[Offset: 0x1d8, Size: 0x8]
	float MaxJumpHorizontalVelocityNoLimit;//[Offset: 0x1e0, Size: 0x4]
	float ContinuousUseSlideJumpCD;//[Offset: 0x1e4, Size: 0x4]
	bool bLimitRecoverLandVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	float RecoverLandHorizontalVelocity;//[Offset: 0x1ec, Size: 0x4]
	CurveFloat* JumpRightAfterLandingTime_HeightScaleCurve;//[Offset: 0x1f0, Size: 0x8]
	float AirAccelSpeed;//[Offset: 0x1f8, Size: 0x4]
	float AirSpeedCap;//[Offset: 0x1fc, Size: 0x4]
	Vector4 CollisionMoveVelocity;//[Offset: 0x200, Size: 0x10]
	float CollisionMoveForwardVelocity;//[Offset: 0x210, Size: 0x4]
	float CollisionMoveTime;//[Offset: 0x214, Size: 0x4]
	float FallingDownSoundSpeed;//[Offset: 0x218, Size: 0x4]
	float FallingImpactMaxSpeed;//[Offset: 0x21c, Size: 0x4]
	float FallingStepHeight;//[Offset: 0x220, Size: 0x4]
	float JumpControlCD;//[Offset: 0x224, Size: 0x4]
	float JumpControlAccel;//[Offset: 0x228, Size: 0x4]
	CurveFloat* FallingAccelerationToSpeedCurve;//[Offset: 0x230, Size: 0x8]
	bool bFallingUseCurveAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	SurfaceParticleDataAsset* LandingLightFX;//[Offset: 0x240, Size: 0x28]
	SurfaceParticleDataAsset* LandingHardFX;//[Offset: 0x268, Size: 0x28]
	bool bUseDitchFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	float DitchWalkableAngle;//[Offset: 0x294, Size: 0x4]
	float DitchWalkableNormalZ;//[Offset: 0x298, Size: 0x4]
	float DitchWalkableTime;//[Offset: 0x29c, Size: 0x4]
	float TSTurnCheckAngle;//[Offset: 0x2a0, Size: 0x4]
	float TSTurnProtectAngle;//[Offset: 0x2a4, Size: 0x4]
	float TSBaseTime;//[Offset: 0x2a8, Size: 0x4]
	float TSBaseSpeed;//[Offset: 0x2ac, Size: 0x4]
	float TSBaseScale;//[Offset: 0x2b0, Size: 0x4]
	float TSBaseRotateSpeed;//[Offset: 0x2b4, Size: 0x4]
	float TSBaseMaxRotateAngle;//[Offset: 0x2b8, Size: 0x4]
	float TSTurnTime;//[Offset: 0x2bc, Size: 0x4]
	float TSTurnSpeed;//[Offset: 0x2c0, Size: 0x4]
	float TSTurnScale;//[Offset: 0x2c4, Size: 0x4]
	<enum,MovementFallingGravityData> MovementFallingGravityData;//[Offset: 0x2c8, Size: 0x50]
	float MovingGravityScale;//[Offset: 0x318, Size: 0x4]
	float JumpingGravityScale;//[Offset: 0x31c, Size: 0x4]
	float SlidingGravityScale;//[Offset: 0x320, Size: 0x4]
	float ClimbingGravityScale;//[Offset: 0x324, Size: 0x4]
	float SlideGuideCountdownInit;//[Offset: 0x328, Size: 0x4]
	int SlideJumpGuideCountdownInit;//[Offset: 0x32c, Size: 0x4]
	int BigJumpGuideCountdownInit;//[Offset: 0x330, Size: 0x4]
	int SprintGuideID;//[Offset: 0x334, Size: 0x4]
	int SlideGuideID;//[Offset: 0x338, Size: 0x4]
	int ClimbGuideID;//[Offset: 0x33c, Size: 0x4]
	int SlideJumpGuideID;//[Offset: 0x340, Size: 0x4]
	int BigJumpGuideID;//[Offset: 0x344, Size: 0x4]
	float SlideGuideCDInit;//[Offset: 0x348, Size: 0x4]
	float SlideJumpGuideCDInit;//[Offset: 0x34c, Size: 0x4]
	float ClimbGuideCDInit;//[Offset: 0x350, Size: 0x4]
	float SprintWithGunCDInit;//[Offset: 0x354, Size: 0x4]
	float ValidServerDistance;//[Offset: 0x358, Size: 0x4]
	MovementClimbSetting MovementClimbSetting;//[Offset: 0x360, Size: 0x18]
	float ClimbHorizontalAcceleration;//[Offset: 0x378, Size: 0x4]
	float ClimbHorizontalAccelerationScale;//[Offset: 0x37c, Size: 0x4]
	float ClimbFriction;//[Offset: 0x380, Size: 0x4]
	float ClimbMinFrictionSpeed;//[Offset: 0x384, Size: 0x4]
	float FaceRotationTime;//[Offset: 0x388, Size: 0x4]
	float MaxClimbStepHeight;//[Offset: 0x38c, Size: 0x4]
	float MaxClimbAngle;//[Offset: 0x390, Size: 0x4]
	float MaxClimbZNormalValue;//[Offset: 0x394, Size: 0x4]
	float MaxFacingWallAngle;//[Offset: 0x398, Size: 0x4]
	float MaxVelocityWallAngle;//[Offset: 0x39c, Size: 0x4]
	float MaxFacingWallAngle_Base;//[Offset: 0x3a0, Size: 0x4]
	float MaxVelocityWallAngle_Base;//[Offset: 0x3a4, Size: 0x4]
	float JumpButtonTriggerEnterClimbTime;//[Offset: 0x3a8, Size: 0x4]
	float ExitClimbAngle;//[Offset: 0x3ac, Size: 0x4]
	float FallingToClimbVelocityZ;//[Offset: 0x3b0, Size: 0x4]
	float FallingToClimbOverDistance;//[Offset: 0x3b4, Size: 0x4]
	float ClimbControlAngleLimit;//[Offset: 0x3b8, Size: 0x4]
	bool bFallingWhenZeroAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	CurveFloat* ClimbAnimVelocityCurve;//[Offset: 0x3c0, Size: 0x8]
	float ClimbBoxCheckHeight;//[Offset: 0x3c8, Size: 0x4]
	float ClimbBoxCheckDistance;//[Offset: 0x3cc, Size: 0x4]
	float TimeForHold;//[Offset: 0x3d0, Size: 0x4]
	float TimeOfHideMesh;//[Offset: 0x3d4, Size: 0x4]
	float RotateBackThreshold;//[Offset: 0x3d8, Size: 0x4]
	float RotateBackAngle;//[Offset: 0x3dc, Size: 0x4]
	float RotateBackSpeed;//[Offset: 0x3e0, Size: 0x4]
	bool bRotateBackOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	int ClimbFailCount;//[Offset: 0x3e8, Size: 0x4]
	int ClimbSuccessCount;//[Offset: 0x3ec, Size: 0x4]
	float ClimbTipsCD;//[Offset: 0x3f0, Size: 0x4]
	class Actor* ClimbTipsActorPath;//[Offset: 0x3f8, Size: 0x28]
	float ClimbTipsLength;//[Offset: 0x420, Size: 0x4]
	float ClimbTipsCheckDistFPP;//[Offset: 0x424, Size: 0x4]
	float ClimbTipsCheckDistTPP;//[Offset: 0x428, Size: 0x4]
	float ClimbTipsDisappearDistFPP;//[Offset: 0x42c, Size: 0x4]
	float ClimbTipsDisappearDistTPP;//[Offset: 0x430, Size: 0x4]
	float ClimbTipsToWallDist;//[Offset: 0x434, Size: 0x4]
	float ClimbTipsHeightOffset;//[Offset: 0x438, Size: 0x4]
	float ClimbTipsNotShowHeight;//[Offset: 0x43c, Size: 0x4]
	bool bOpenClimbTipsHeightCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bOpenClimbTipsHeightCheckWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	SoftObjectPath ClimbTipsLineMaterialForTPP;//[Offset: 0x448, Size: 0x18]
	SoftObjectPath ClimbTipsLineMaterialForFPP;//[Offset: 0x460, Size: 0x18]
	bool bClimbAlongWallStepUpUseSmallCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	Vector4 ClimbOverDuration;//[Offset: 0x480, Size: 0x10]
	float ClimbOverHorizontalCheckDistance;//[Offset: 0x490, Size: 0x4]
	float ClimbOverVerticalCheckDistance;//[Offset: 0x494, Size: 0x4]
	float ClimbOverOverDistance;//[Offset: 0x498, Size: 0x4]
	Vector ClimbOverAnimHeightRange;//[Offset: 0x49c, Size: 0xc]
	bool bClimbOverRestimeRateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	float FallingToClimbOverVelocityZ;//[Offset: 0x4ac, Size: 0x4]
	float HangingDuration;//[Offset: 0x4b0, Size: 0x4]
	float CheckHangingDuration;//[Offset: 0x4b4, Size: 0x4]
	float HangingVerticalDistance;//[Offset: 0x4b8, Size: 0x4]
	enum BaseHangingMode;//[Offset: 0x4bc, Size: 0x1]
	bool bShowClimbOverCheckDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 0x1]
	bool bShowWallNormalDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 0x1]
	bool bShowClimbNormalDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bf, Size: 0x1]
	float AutoClimbMaxFacingWallAngle;//[Offset: 0x4c0, Size: 0x4]
	float AutoClimbMaxVelocityWallAngle;//[Offset: 0x4c4, Size: 0x4]
	float OneKeyClimbWalkingHorizontalCheck;//[Offset: 0x4c8, Size: 0x4]
	float OneKeyClimbFallingHorizontalCheck;//[Offset: 0x4cc, Size: 0x4]
	float OneKeyClimbBackCheck;//[Offset: 0x4d0, Size: 0x4]
	float ClimbBigJumpScreenDis;//[Offset: 0x4d4, Size: 0x4]
	float ClimbBigJumpScreenAngle;//[Offset: 0x4d8, Size: 0x4]
	float ClimbBigJumpAngle;//[Offset: 0x4dc, Size: 0x4]
	CurveFloat* ClimbBigJumpNormalVelocityCurve;//[Offset: 0x4e0, Size: 0x8]
	CurveFloat* ClimbBigJumpVerticalVelocityCurve;//[Offset: 0x4e8, Size: 0x8]
	CurveFloat* SlideJumptoClimbBigJumpNormalVelocityCurve;//[Offset: 0x4f0, Size: 0x8]
	CurveFloat* SlideJumptoClimbBigJumpVerticalVelocityCurve;//[Offset: 0x4f8, Size: 0x8]
	float HangingClimbBigJumpNormalVelocity;//[Offset: 0x500, Size: 0x4]
	float HangingClimbBigJumpVerticalVelocity;//[Offset: 0x504, Size: 0x4]
	float ClimbInAirBigJumpCD;//[Offset: 0x508, Size: 0x4]
	float ClimbBigJumpControlCD;//[Offset: 0x50c, Size: 0x4]
	float ClimbBigJumpControlAccel;//[Offset: 0x510, Size: 0x4]
	float ClimbBigJumpEndZSpeed;//[Offset: 0x514, Size: 0x4]
	float ClimbBigJumpPreJumpTime;//[Offset: 0x518, Size: 0x4]
	float ClimbBigJumpToleranceJumpTime;//[Offset: 0x51c, Size: 0x4]
	float ClimbBigJumpHoldTime;//[Offset: 0x520, Size: 0x4]
	float ClimbBigJumpCancelForwardLimitAngle;//[Offset: 0x524, Size: 0x4]
	float EnterSlideRequiredSpeed;//[Offset: 0x528, Size: 0x4]
	float EnterSlideRequiredSpeedAir;//[Offset: 0x52c, Size: 0x4]
	float EnterSlideRequiredTotalSpeed;//[Offset: 0x530, Size: 0x4]
	float EnterSlideRequiredZSpeed;//[Offset: 0x534, Size: 0x4]
	float SlideBoostSpeed;//[Offset: 0x538, Size: 0x4]
	CurveFloat* Current2DSpeed_SlideBoostSpeedCurve;//[Offset: 0x540, Size: 0x8]
	float SlideBoostSpeedCap;//[Offset: 0x548, Size: 0x4]
	float SlideBoostSpeedCD;//[Offset: 0x54c, Size: 0x4]
	float StandToSlideTime;//[Offset: 0x550, Size: 0x4]
	Vector2D SlideAccel;//[Offset: 0x554, Size: 0x8]
	float SlideAccelAngle;//[Offset: 0x55c, Size: 0x4]
	float SlidingVelocityDecay;//[Offset: 0x560, Size: 0x4]
	CurveFloat* SlidingVelocityDecayCurve;//[Offset: 0x568, Size: 0x8]
	CurveFloat* SlidingVelocityDecayCurveNoSlideBoost;//[Offset: 0x570, Size: 0x8]
	float SlidingDeceleration;//[Offset: 0x578, Size: 0x4]
	float SlidingStopSpeed;//[Offset: 0x57c, Size: 0x4]
	float SlidingMaxStopSpeed;//[Offset: 0x580, Size: 0x4]
	float SlidingWantToStopSpeed;//[Offset: 0x584, Size: 0x4]
	float PlayerControlAffectDirNeedSpeed;//[Offset: 0x588, Size: 0x4]
	float PlayerControlAffectDirSpeed;//[Offset: 0x58c, Size: 0x4]
	enum[] FormulaSequence;//[Offset: 0x590, Size: 0x10]
	float MaxSlidingStepHeight;//[Offset: 0x5a0, Size: 0x4]
	float SlidingStepHeightDeceleration;//[Offset: 0x5a4, Size: 0x4]
	float SlopeSlidingGravityScale;//[Offset: 0x5a8, Size: 0x4]
	float SlidingJumpScreenVeerAngle;//[Offset: 0x5ac, Size: 0x4]
	float SlidingJumpScreenVeerLeftRightAngle;//[Offset: 0x5b0, Size: 0x4]
	float SlidingJumpHeight;//[Offset: 0x5b4, Size: 0x4]
	CurveFloat* JumpRightAfterLandingTime_HeightScaleCurve_ForSlideJump;//[Offset: 0x5b8, Size: 0x8]
	float SlideJumpTime;//[Offset: 0x5c0, Size: 0x4]
	float SlidingJumpScreenDis;//[Offset: 0x5c4, Size: 0x4]
	float SlidingJumpScreenAngle;//[Offset: 0x5c8, Size: 0x4]
	float JumpRightAfterSliding_SpeedGettingLimitTime;//[Offset: 0x5cc, Size: 0x4]
	float JumpRightAfterSliding_BoostSpeedPunishRatio;//[Offset: 0x5d0, Size: 0x4]
	float EnterFallingAllowJumpMaxTime;//[Offset: 0x5d4, Size: 0x4]
	float SlideEnterFallingAllowJumpMaxTime;//[Offset: 0x5d8, Size: 0x4]
	bool bEnterFallingAllowJumpCheckEnterSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	SurfaceParticleDataAsset* SlidingFX;//[Offset: 0x5e0, Size: 0x28]
	Vector SlidingFXLocation;//[Offset: 0x608, Size: 0xc]
	MovementCameraState[] EnterSlidingCameraState;//[Offset: 0x618, Size: 0x10]
	int LittleJumpMotionAssetID;//[Offset: 0x628, Size: 0x4]
	bool EnableMotionMovementLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	bool bOpenHitSlowly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 0x1]
	bool bUseSlowdownPlan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62e, Size: 0x1]
	float HitRateCD;//[Offset: 0x630, Size: 0x4]
	<enum,float> StateHitRate;//[Offset: 0x638, Size: 0x50]
	<enum> StateHitNoEffect;//[Offset: 0x688, Size: 0x50]
	<int,MovementHitSlowlyData> MovementHitSlowlyMap;//[Offset: 0x6d8, Size: 0x50]
	SurfaceFloatDataAsset* SurfaceDecayDataAsset;//[Offset: 0x728, Size: 0x8]
	float SyncLaunchTimeOut;//[Offset: 0x730, Size: 0x4]
	bool bSimulatedTickOptimizationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 0x1]
	bool bShowSimulatedTickAngelLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 0x1]
	float SimulatedTickDistance;//[Offset: 0x738, Size: 0x4]
	float SimulatedTickAngelLimit;//[Offset: 0x73c, Size: 0x4]
	float SimulatedTickAngelLimitBuffer;//[Offset: 0x740, Size: 0x4]
	bool bServerTrustClientMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 0x1]
	float ReconnectCheckDistance;//[Offset: 0x748, Size: 0x4]
	float ReconnectDistanceTolerance;//[Offset: 0x74c, Size: 0x4]
	float ReconnectCheckTime;//[Offset: 0x750, Size: 0x4]

--------------------------------
Class: MovementTagAttributeDataAsset.DataAsset.Object
	<FName,MovementTagAttribute> TagAttributeMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: MovementTagAttribute
	float ClimbNormalAngel;//[Offset: 0x0, Size: 0x4]
	float ClimbNormalZ;//[Offset: 0x4, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x8, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0xc, Size: 0x4]
	float StepUpScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MovementCameraState
	float EnterVelocity;//[Offset: 0x0, Size: 0x4]
	float LeaveVelocity;//[Offset: 0x4, Size: 0x4]
	StateLerpArrayInfos EnterCameraState;//[Offset: 0x8, Size: 0x50]
	StateLerpArrayInfos LeaveCameraState;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovementStiffCurveDataAsset.DataAsset.Object
	<enum,CurveFloat*> StiffCurveTable;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: SurfaceParticleDataAsset.DataAsset.Object
	<byte,ParticleSystem*> SurfaceTable;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: MovementFallingGravityData
	float GravityScale;//[Offset: 0x0, Size: 0x4]
	float EffectTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovementClimbSetting
	float ClimbLimitHeight;//[Offset: 0x0, Size: 0x4]
	float FinalJumpHeight;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ClimbLimitSpeedCurve;//[Offset: 0x8, Size: 0x8]
	float ClimbOverNextHorizontalCheckDistance;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MovementHitSlowlyData
	uint32 Priority;//[Offset: 0x0, Size: 0x4]
	CurveFloat* HitRateCurve;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SurfaceFloatDataAsset.DataAsset.Object
	<byte,float> SurfaceTable;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: MovementTagVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MovementGravityFieldVolume.Volume.Brush.Actor.Object
	float GravityScale;//[Offset: 0x2a8, Size: 0x4]
	float JumpScale;//[Offset: 0x2ac, Size: 0x4]
	float SlidingJumpScale;//[Offset: 0x2b0, Size: 0x4]
	float AirSpeedCapScale;//[Offset: 0x2b4, Size: 0x4]
	float FallingAccelScale;//[Offset: 0x2b8, Size: 0x4]
	float StiffVelocityScale;//[Offset: 0x2bc, Size: 0x4]
	bool bIsDefaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]

--------------------------------
Class: MovementCurveModifierConfigForDistance
	enum MovementAttribute;//[Offset: 0x0, Size: 0x1]
	CurveFloat* AttributeCurve;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WarpingSocketData
	Vector_NetQuantize10 Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MotionWarpingDataAsset.MotionExtractorDataAsset.DataAsset.Object
	AnimMontage* FPPMotionMontage;//[Offset: 0x40, Size: 0x8]
	AnimMontage* TPPMotionMontage;//[Offset: 0x48, Size: 0x8]
	byte MotionMovementWarpingType;//[Offset: 0x50, Size: 0x1]
	byte MotionMovementLocationProcessingType;//[Offset: 0x51, Size: 0x1]
	byte MotionMovementMode;//[Offset: 0x52, Size: 0x1]
	enum MovementNetMode;//[Offset: 0x53, Size: 0x1]
	enum SimulateMode;//[Offset: 0x54, Size: 0x1]
	float MotionMovementStepUpHeight;//[Offset: 0x58, Size: 0x4]
	bool EnableWarpingEndLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float[] MarkingWarpingPointTimeStampArrayEditor;//[Offset: 0x60, Size: 0x10]
	bool BForbiddenViewControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool EnableMotionMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	FString Desc;//[Offset: 0x78, Size: 0x10]
	bool bNoChangeMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: MotionExtractorDataAsset.DataAsset.Object
	CurveVector* MotionMovementCurve;//[Offset: 0x30, Size: 0x8]
	float EndRotationYaw;//[Offset: 0x38, Size: 0x4]
	void ImportCurve();// 0x62f7248
	void ExportCurve();// 0x62f7260

--------------------------------
Class: RepMotionData
	bool bUseMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	MotionWarpingSyncData StartMotionWarpingSyncData;//[Offset: 0x8, Size: 0x50]
	MovementSyncData EndMotionWarpingSyncData;//[Offset: 0x58, Size: 0x18]
	uint16 EndMotionRotationYaw;//[Offset: 0x70, Size: 0x2]

--------------------------------
Class: MotionWarpingSyncData
	PrimitiveComponent* Base;//[Offset: 0x0, Size: 0x8]
	MotionWarpingDataAsset* MotionMovementData;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MovementAntiDataAsset.DataAsset.Object
	float NormalWalkingSpeed;//[Offset: 0x30, Size: 0x4]
	float WholeWalkingSpeed;//[Offset: 0x34, Size: 0x4]
	float NormalSlidingSpeed;//[Offset: 0x38, Size: 0x4]
	float WholeSlidingSpeed;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* TolerateDistanceFactor;//[Offset: 0x40, Size: 0x8]
	float UseRecoverySpeed;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MovementAntiCommonDataAsset.DataAsset.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bPassWallSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	int MaxTotalPassWallTimes;//[Offset: 0x34, Size: 0x4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x38, Size: 0x4]
	bool MoveUseRecoverySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bMoveUseRecoveryNeedPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool SimpleMoveSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	CurveFloat* MovePunishInterval;//[Offset: 0x40, Size: 0x8]
	CurveFloat* MoveCheckInterval;//[Offset: 0x48, Size: 0x8]
	CurveFloat* PunishTime;//[Offset: 0x50, Size: 0x8]
	float MinMoveCheckInterval;//[Offset: 0x58, Size: 0x4]
	bool ZMoveSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	CurveFloat* JumpTolerateFactor;//[Offset: 0x60, Size: 0x8]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool FallingCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bIsForceAdjustZWhenFallingCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]
	float FallingCheckInterval;//[Offset: 0x6c, Size: 0x4]
	float FallingCheckDistance;//[Offset: 0x70, Size: 0x4]
	float FallingCheckTolerateFactor;//[Offset: 0x74, Size: 0x4]
	bool TimeSpeedCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	float TimeSpeedCheckInterval;//[Offset: 0x7c, Size: 0x4]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x80, Size: 0x4]
	CurveFloat* DecideTimeSpeedGearToTimes;//[Offset: 0x88, Size: 0x8]
	float DefaultMaxDeltaTime;//[Offset: 0x90, Size: 0x4]
	int TimeSpeedFilterTimes;//[Offset: 0x94, Size: 0x4]
	bool LaunchCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	float LaunchCheckInterval;//[Offset: 0x9c, Size: 0x4]
	int MaxLaunchCount;//[Offset: 0xa0, Size: 0x4]
	int MaxCheatLaunchCount;//[Offset: 0xa4, Size: 0x4]
	float MaxLaunchCheatSpeed;//[Offset: 0xa8, Size: 0x4]
	bool ClientPacketTimeOutCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bLogClientPacketTimeOutCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	float ClientPacketTimeOut;//[Offset: 0xb0, Size: 0x4]
	bool PowerSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bPowerPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	float PowerPunishTime;//[Offset: 0xb8, Size: 0x4]
	float PowerPunishInterval;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: ReconnectSyncData
	bool bNeedWaitLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector_NetQuantize100 ServerLineTraceLocation;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: AIPhySimuPoint

--------------------------------
Class: MovementSyncMultData
	PrimitiveComponent* Base;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApexGameState.GameState.GameStateBase.Info.Actor.Object
	enum GameViewType;//[Offset: 0x308, Size: 0x1]
	int MaxCampNum;//[Offset: 0x30c, Size: 0x4]
	int MaxPlayerNumInGame;//[Offset: 0x310, Size: 0x4]
	int MaxPlayerNumInTeam;//[Offset: 0x314, Size: 0x4]
	int ValidRealPlayerNum;//[Offset: 0x318, Size: 0x4]
	int MaxRealPlayerNum;//[Offset: 0x31c, Size: 0x4]
	int AIPlayerNum;//[Offset: 0x320, Size: 0x4]
	class MsgCenter* MsgCenterClass;//[Offset: 0x378, Size: 0x8]
	MsgCenter* ServerMsgCenter;//[Offset: 0x380, Size: 0x8]
	bool bEnableAnimationBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	GameStatisticsManager* GameStatisticsManager;//[Offset: 0x390, Size: 0x8]
	GameEndDataReportComponent* GameEndDataReportComponent;//[Offset: 0x398, Size: 0x8]
	ProxyMovementManager* ProxyMovementManager;//[Offset: 0x3a0, Size: 0x8]
	GameSyncSettingComponent* GameSyncSettingComponent;//[Offset: 0x3a8, Size: 0x8]
	GameStateGravityElevatorComponent* GravityElevatorComponent;//[Offset: 0x3b0, Size: 0x8]
	BattlefieldMessageComponent* BattlefieldMessageComp;//[Offset: 0x3b8, Size: 0x8]
	GameInitControllerComponent* GameInitController;//[Offset: 0x3c0, Size: 0x8]
	SoftObjectPath InitDataAsset;//[Offset: 0x3c8, Size: 0x18]
	ApexGameCreditScoreRatingManager* CreditScoreRatingManager;//[Offset: 0x3e0, Size: 0x8]
	ApexSequenceComponent* SequenceComponent;//[Offset: 0x3e8, Size: 0x8]
	SelectLegendComponentBase* GameStateSelectLegendComp;//[Offset: 0x3f0, Size: 0x8]
	GameStateInGameRegionComponent* GameStateInGameRegionComponent;//[Offset: 0x3f8, Size: 0x8]
	ApexPlayerState*[] DefenderTeam;//[Offset: 0x400, Size: 0x10]
	ApexPlayerState* Defender;//[Offset: 0x410, Size: 0x8]
	RTPCParamInfo[] CustomShootSoundRTPCParamList;//[Offset: 0x418, Size: 0x10]
	class MiniMapManager* MiniMapManagerClass;//[Offset: 0x428, Size: 0x8]
	bool bGuideModeBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	bool ShowKillAssistTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1]
	bool bShowBulletAs999;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 0x1]
	bool bShowArmorRelegationAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 0x1]
	<enum,int> PreSpawnPropsWeaponMap;//[Offset: 0x438, Size: 0x50]
	enum ServerSpawnMethod;//[Offset: 0x488, Size: 0x1]
	enum ClientSpawnMethod;//[Offset: 0x489, Size: 0x1]
	FString GameModeID;//[Offset: 0x490, Size: 0x10]
	FString GameModeZoneID;//[Offset: 0x4a0, Size: 0x10]
	bool bForbidVisualSoundByBucket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	bool bForbidVisualSoundByCircleWave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 0x1]
	int ForbidVisualSoundWaveNumber;//[Offset: 0x4c0, Size: 0x4]
	GameModeStageInfo GameModeStageInfo;//[Offset: 0x4c4, Size: 0x10]
	int RandomTeamJumpTailID;//[Offset: 0x4d4, Size: 0x4]
	ZiplineManager* ZiplineManager;//[Offset: 0x4d8, Size: 0x8]
	ApexTrain* Train;//[Offset: 0x530, Size: 0x8]
	ConveyorBeltCamp* ConveyorCamp;//[Offset: 0x538, Size: 0x8]
	ParticleEffectFactory* AParticleEffectFactoryInstance;//[Offset: 0x540, Size: 0x8]
	class ParticleEffectFactory* ParticleEffectFactoryClass;//[Offset: 0x548, Size: 0x8]
	AudioEffectManager* AudioEffectManagerInstance;//[Offset: 0x550, Size: 0x8]
	class AudioEffectManager* AudioEffectManagerClass;//[Offset: 0x558, Size: 0x8]
	GlobalSpeakerComponent* GlobalSoundPlayer;//[Offset: 0x568, Size: 0x8]
	AudioRegionMgrComponent* GlobalAudioRegionMgr;//[Offset: 0x570, Size: 0x8]
	GameStatisticsReportComponent* GameStatisticsReportComponent;//[Offset: 0x578, Size: 0x8]
	BGMManager* BGMManagerInstance;//[Offset: 0x580, Size: 0x8]
	class BGMManager* BGMManagerClass;//[Offset: 0x588, Size: 0x8]
	EffectLoaderManager* EffectLoaderManagerInstance;//[Offset: 0x590, Size: 0x8]
	GameStateCommonInfo* GameStateCommonInfo;//[Offset: 0x598, Size: 0x8]
	ApexRespawnBeacon*[] ApexRespawnBeaconArray;//[Offset: 0x5a0, Size: 0x10]
	ApexHeatShield*[] ApexHeatShieldArray;//[Offset: 0x5b0, Size: 0x10]
	Actor*[] PoisonTargets;//[Offset: 0x5c0, Size: 0x10]
	SurveyBeacon*[] ApexSurveyBeaconArray;//[Offset: 0x5d8, Size: 0x10]
	int64[] ScoutCharacterCount;//[Offset: 0x5e8, Size: 0x10]
	int[] NextWhiteCircleForCurrentWave;//[Offset: 0x5f8, Size: 0x10]
	int SurveyBeaconGoal;//[Offset: 0x608, Size: 0x4]
	int DispersionDistance;//[Offset: 0x60c, Size: 0x4]
	<class InGameSingletonObject,InGameSingletonObject*> MapInGameObjectClass2Instanced;//[Offset: 0x640, Size: 0x50]
	CommonSignMgr* CommonSignMgr;//[Offset: 0x690, Size: 0x8]
	SyncActionFilterInfo SyncFilterItem;//[Offset: 0x698, Size: 0x18]
	LootDronesPathsDataAsset* LootDronesPathsDataAsset;//[Offset: 0x758, Size: 0x8]
	int ReviveFlowID;//[Offset: 0x760, Size: 0x4]
	<int,Actor*> KnockdownShieldMap;//[Offset: 0x768, Size: 0x50]
	GameStatisticsSetting GameStatisticsSetting;//[Offset: 0x7b8, Size: 0x28]
	SurfaceGridManager* SurfaceGridManager;//[Offset: 0x7e0, Size: 0x8]
	<class ApexAnimNotifySound,ApexAnimNotifySound*> AnimNotifyMap;//[Offset: 0x7e8, Size: 0x50]
	GameStateMapComponent* MapComponent;//[Offset: 0x838, Size: 0x8]
	int64 RespawnDeadlineTime;//[Offset: 0x840, Size: 0x8]
	int[] CurrentActivityTypeList;//[Offset: 0x848, Size: 0x10]
	CharacterAnimationIntKey[] EditAnimPreLoad;//[Offset: 0x858, Size: 0x10]
	WeaponAnimationIntKey[] EditWeaponAnimPreLoad;//[Offset: 0x868, Size: 0x10]
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1]
	bool bOpenFriendOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x879, Size: 0x1]
	bool bOpenEnemyOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87a, Size: 0x1]
	bool bOpenEnemyOutline_Addition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87b, Size: 0x1]
	int EnemyOutlineID_Addition;//[Offset: 0x87c, Size: 0x4]
	bool bRemoveEnemyOutlinePerformDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	bool bEnablePickUpOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 0x1]
	enum PickupOutlingeRenderLevel;//[Offset: 0x882, Size: 0x1]
	<int> ForcePickUpOutlineItemSet;//[Offset: 0x888, Size: 0x50]
	bool bIsShowInvincibleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 0x1]
	bool bOverridePlayerDeadDelayHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d9, Size: 0x1]
	float OverrideDelayHideDuration;//[Offset: 0x8dc, Size: 0x4]
	bool bUsingCacheCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]
	enum CacheCameraMode;//[Offset: 0x8e1, Size: 0x1]
	bool bShowPickUpEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e2, Size: 0x1]
	bool bEnablePickItemPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e3, Size: 0x1]
	bool bShowPingTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 0x1]
	bool bIsOverrideAutoPingEnemyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 0x1]
	bool bIsAutoPingEnemyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e6, Size: 0x1]
	bool bOverrideAutoPickUpSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e7, Size: 0x1]
	bool bOverrideEnableAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1]
	bool bMapUseClientOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 0x1]
	bool bEnableTDMTeamColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ea, Size: 0x1]
	bool bEnableOpenBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8eb, Size: 0x1]
	SkillConfigDataAsset* SkillConfigOnGameMode;//[Offset: 0x8f0, Size: 0x8]
	DsFunctionConfig[] DsFunctionConfigArray;//[Offset: 0x968, Size: 0x10]
	GameStateAirDropMgr* AirDropStateMgr;//[Offset: 0x9e0, Size: 0x8]
	RadiationCircleStateComponent* RadiationCircleState;//[Offset: 0x9e8, Size: 0x8]
	GamblingMachine* GamblingMachine;//[Offset: 0x9f0, Size: 0x8]
	bool bDoNotNeedReleaseSelectLegendSceneInPostInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1]
	bool IsParachuteShowPoisonCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1]
	class APPerk[] GameplayPerkClasses;//[Offset: 0xa00, Size: 0x10]
	bool UseSurveyBeacon(int TeamID);// 0x79f71c8
	bool UseRespawnBeacon(int Index);// 0x79f7290
	bool ShouldTakeDamage(float Damage, byte CurDamageType, Controller* EventInstigator, Actor* DamageCauser, ApexCharacter* Victim);// 0x79f7c8c
	void SetValidRealPlayerNum(int ValidNum);// 0x79f81bc
	void SetMaxCampNum(int NewMaxCampNum);// 0x79f8280
	void SetGameViewType(enum NewGameViewType);// 0x79f8344
	void SetForbidVisualSoundByCircleWave(bool NewForbid);// 0x79f7ad8
	void SetForbidVisualSoundByBucketID(bool NewForbid);// 0x79f7ba8
	void ResetNextWhiteCircleForCurrentWave();// 0x79f70a0
	void ReportMultiData(FString FlowName, out const FString[] DataJsonArray);// 0xa1d39f8
	void RemoveKnockdownShield(int InPlayerKey);// 0x79f6dd4
	void RemoveActionFilterID(int ActionFilterID, FName InTag);// 0x5f7d6a0
	void PushEvent(int EventId, Actor* RelevantActors, Controller* Controller);// 0x79f7f50
	void OnWaveStart();// 0x79f71b4
	void OnRepLootDronesPathsDataAsset();// 0x548410c
	void OnRep_ScoutCharacterCount(out const int64[] OriginValue);// 0x53089ac
	void OnRep_NextWhiteCircleForCurrentWave(out const int[] OriginValue);// 0x6066f88
	void OnRep_GameStateActionFilterInfo();// 0x514f7f0
	void OnRep_GameModeZoneID();// 0x59a4c2c
	void OnRep_GameModeStageInfo_Lua(GameModeStageInfo OldStageInfo);// 0xa1d39f8
	void OnRep_GameModeStageInfo(GameModeStageInfo OldStageInfo);// 0x5c63590
	void OnRep_GameModeID_Lua();// 0xa1d39f8
	void OnRep_GameModeID();// 0x5aa50ec
	void OnRep_DefenderTeam();// 0xa0dfa98
	void OnRep_Defender();// 0xa1d39f8
	void OnRep_CurrentActivityTypeList();// 0x53102d0
	void OnRep_bForbidVisualSoundByCircleWave();// 0x52919cc
	void OnRep_bForbidVisualSoundByBucket();// 0x79f7c78
	void OnPlayerValid(uint32 PlayerKey);// 0x79f8100
	void OnEffectLoaderManagerBPLoaded(SoftObjectPath BPPath);// 0x79f7358
	void NotifyRemoteURLChanged(FString IP, int Port);// 0x79f6ba0
	bool IsForbidVisualSound();// 0xa0dfa6c
	Actor* GMGetClosestLootDrones();// 0x79f7628
	ZiplineManager* GetZiplineManager();// 0xa0dfa14
	int GetValidRealPlayerNum();// 0xa0dfb80
	Vector GetTrainStationLocation(bool bCurrentStation);// 0x79f74bc
	ApexTrain* GetTrain();// 0x79f75c0
	FString GetSubModeID();// 0x58257e0
	SelectLegendComponentBase* GetSelectLegendComp();// 0xa0dfad0
	RadiationCircleStateComponent* GetRadiationCircleState();// 0x79f69b8
	InGameSingletonObject* GetOrAddInGameSingletonObject(class InGameSingletonObject InGameObjectClass);// 0x79f6fdc
	int GetMaxRealPlayerNum();// 0xa0dfb64
	int GetMaxPlayerNumInTeam();// 0xa0dfb9c
	int GetMaxPlayerNumInGame();// 0xa0dfbb8
	FString GetMainModeID();// 0x5825974
	Actor* GetKnockdownShield(int InPlayerKey);// 0x79f6d10
	GameStateInGameRegionComponent* GetInGameRegionComponent();// 0xa0dfab4
	GameStatisticsManager* GetGameStatisticsManager();// 0xa0dfb28
	ApexGameSettings GetGameSetting();// 0x79f775c
	FString GetGameModeZoneID();// 0x79f765c
	GameModeStageInfo GetGameModeStageInfo();// 0xa0dfa30
	FString GetGameModeID();// 0x79f7854
	GameEndDataReportComponent* GetGameEndDataReportComponent();// 0xa0dfaec
	bool GetEnableOpenBackpack();// 0x541367c
	enum GetCurrentStageType();// 0xa0dfa50
	ConveyorBeltCamp* GetConveyorCamp();// 0x79f758c
	CommonSignMgr* GetCommonSignMgr();// 0xa0df9f8
	ApexTrain* GetApexTrain();// 0x79f75f4
	GameStateAirDropMgr* GetAirDropStateMgr();// 0x79f6aac
	int GetAIPlayerNum();// 0x51a73a8
	void ClearActionFilter();// 0x79f6fc8
	bool CanSeeBeacon(int TeamID);// 0x79f70b4
	static int ApexInGameEncryptTest(Object* WorldContext, int TargetInt, float TargetFloat);// 0x79f791c
	void AddKnockdownShield(int InPlayerKey, Actor* InActor);// 0x79f6e90
	void AddActionFilterID(int ActionFilterID, FName InTag);// 0x5fa5f68

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2b0, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x2b8, Size: 0x8]
	int ElapsedTime;//[Offset: 0x2c0, Size: 0x4]
	void OnRep_MatchState();// 0xa338728
	void OnRep_ElapsedTime();// 0xa33870c

--------------------------------
Class: MsgCenter.Object
	<enum,MsgCenterConfig> Config;//[Offset: 0x28, Size: 0x50]
	int MaxShowNum;//[Offset: 0x78, Size: 0x4]
	float ShowTime;//[Offset: 0x7c, Size: 0x4]
	void PushEvent(int EventId, Actor* RelevantActors, Controller* Controller, bool bHasAutonomousPlayed, bool bHasCDCheckedProbability);// 0x7d634f8

--------------------------------
Class: GameStatisticsManager.ActorComponent.Object
	GameStatisticsSetting GameStatisticsSetting;//[Offset: 0x118, Size: 0x28]
	GameStatisticsVOSetting GameStatisticsVOSetting;//[Offset: 0x140, Size: 0x28]
	UAEDataTable* ParameterIntegerDataTable;//[Offset: 0x168, Size: 0x8]
	UAEDataTable* GameModeDataTable;//[Offset: 0x170, Size: 0x8]
	UAEDataTable* GameModeSecondTable;//[Offset: 0x178, Size: 0x8]
	int GrenadeUID;//[Offset: 0x1e0, Size: 0x4]
	void OnSkillReleased(ApexCharacter* Character, UTSkill* Skill, enum SkillType);// 0x7c6355c
	void OnPlayerRespawn(int CauserPlayerKey, int VictimPlayerKey, enum RespawnType);// 0x7c63014
	void OnPlayerInputReActive(uint32 PlayerKey);// 0x7c63310
	void OnPlayerInputDeActive(uint32 PlayerKey);// 0x7c633d4
	void OnPlayerExit(uint32 PlayerKey);// 0x7c63498
	void OnLegendRespawnOrDied(uint32 PlayerKey, bool bIsRespawn);// 0x7c631d0
	void OnGameStart();// 0xa130e1c
	bool IsHaveNextLife(int PlayerKey);// 0x7c63890
	int GetTotalTeamNum();// 0xa130eb0
	int GetTotalPlayerNum();// 0xa130eec
	int GetSurviveTeam();// 0xa130e74
	int GetSurvivePlayer();// 0xa130e38
	int GetRatingTeamRankScore(int PlayerKey);// 0x7c636f8
	int GetRatingKillAssistScore(int PlayerKey);// 0x7c637c4
	PlayerStatisticsManager* GetPlayerStatisticsManager(uint32 PlayerKey);// 0x5c7a7e8
	PlayerInfo[] GetPlayerObservers(int PlayerKey);// 0x5c61eb4
	int GetPlayerKill(int PlayerKey);// 0x7c63ae0
	float GetPlayerDamage(int PlayerKey);// 0x7c63958
	int GetPlayerAssist(int PlayerKey);// 0x7c63a1c
	int GetObservers();// 0x7c63ba4
	ApexPlayerState*[] GetDeadPlayers();// 0x7c62f44

--------------------------------
Class: GameStatisticsSetting
	float AssistAccountableDuration;//[Offset: 0x0, Size: 0x4]
	float KnockDownCauserTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ComboTime;//[Offset: 0x8, Size: 0x8]
	float ComboKnockDownTime;//[Offset: 0x10, Size: 0x4]
	float VerticalDamageHeight;//[Offset: 0x14, Size: 0x4]
	float BehindDamageAngle;//[Offset: 0x18, Size: 0x4]
	float DamageRecoveryHPTime;//[Offset: 0x1c, Size: 0x4]
	float RespawnKillTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: GameStatisticsVOSetting
	float MegaKillTime;//[Offset: 0x0, Size: 0x4]
	int MegaKillNum;//[Offset: 0x4, Size: 0x4]
	float[] KnockDownCamboTime;//[Offset: 0x8, Size: 0x10]
	float FarEngagementMinDist;//[Offset: 0x18, Size: 0x4]
	float SquadEngagementCalloutDebounce;//[Offset: 0x1c, Size: 0x4]
	float SameEventDebounce;//[Offset: 0x20, Size: 0x4]
	float ChanceForCharacterComment;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FName,nameToProperty(FieldPathProperty)> nameToProperty;//[Offset: 0xc0, Size: 0x50]
	static bool BP_ToDerivedRowDataQuery(out AETableDerivedRowDataQueryBP IoDerivedQuery, out const AETableRowDataQueryBP InQuery, FName InParentRowColumnName);// 0x7f9da64
	static bool BP_MakeRowDataQuery(out AETableRowDataQueryBP OutQuery, UAEDataTable* InTable, FName InRowName);// 0x7f9dc90
	static bool BP_MakeDerivedRowDataQueryWithColumnName(out AETableDerivedRowDataQueryBP IoDerivedQuery, UAEDataTable* InTable, FName InRowName, FName InParentRowColumnName);// 0x7f9d81c
	static bool BP_GetCellValueFromQuery(out TableRowBase OutValue, out const AETableRowDataQueryBP InQuery, FName InColumnName);// 0x7f9e72c
	static bool BP_GetCellValueFromDerivedQuery(out TableRowBase OutValue, out const AETableDerivedRowDataQueryBP InQuery, FName InColumnName);// 0x7f9e418
	static bool BP_GetCellArrayValueFromQuery(out int[] OutArray, out const AETableRowDataQueryBP InQuery, FName InColumnName);// 0x7f9e1b4
	static bool BP_GetCellArrayValueFromDerivedQuery(out int[] OutArray, out const AETableDerivedRowDataQueryBP InQuery, FName InColumnName);// 0x7f9de60

--------------------------------
Class: AETableDerivedRowDataQueryBP

--------------------------------
Class: AETableRowDataQueryBP

--------------------------------
Class: TableRowBase

--------------------------------
Class: PlayerStatisticsManager.ActorComponent.Object
	GameStatisticsManager* CacheGameStatisticsManager;//[Offset: 0x100, Size: 0x8]
	float RefreshTime;//[Offset: 0x114, Size: 0x4]
	GMStatisticsData GMStatisticsData;//[Offset: 0x118, Size: 0x44]
	float[] CreditScores;//[Offset: 0x160, Size: 0x10]
	void SendRescuesOrRespawnTimes(uint32 PlayerKey, int RescuesOrRespawnTimes);// 0x7dee810
	void SendPositiveFeedback_PlayerNormalKill(uint32 PlayerKey);// 0x7deeef8
	void SendPositiveFeedback_KnockDownKill(uint32 PlayerKey, const PositiveFeedback_KnockDown PositiveFeedback_KnockDown, const PositiveFeedback_Kill PositiveFeedback_Kill);// 0x7deea94
	void SendPositiveFeedback_KnockDown(uint32 PlayerKey, const PositiveFeedback_KnockDown PositiveFeedback_KnockDown);// 0x7deeda4
	void SendPositiveFeedback_Kill(uint32 PlayerKey, const PositiveFeedback_Kill PositiveFeedback_Kill);// 0x7deec64
	void SendPositiveFeedback_GrenadeMultiHit(uint32 PlayerKey, const PositiveFeedback_GrenadeMultiHit PositiveFeedback_GrenadeMultiHit);// 0x7dee950
	void SendPlayerRankScore(uint32 PlayerKey, int RankScore);// 0x7dee6d0
	void BroadcastSurviveUpdate(byte SurvivePlayer, byte SurviveTeam);// 0x7def580
	void BroadcastSlidingWeaponListTime(int TotalTime);// 0x7dee548
	void BroadcastRemovePlayer(const uint32 PlayerKey);// 0x7deefbc
	void BroadcastRatingScore_BR(const RatingScoreInfo RatingScoreInfo);// 0x7def48c
	void BroadcastPlayerKilled_MPBase(const VictimData_MPBase VictimData, const CauserKillData CauserKillData, const AssistDataList AssistDataList);// 0x7def294
	void BroadcastPlayerKilled_BR(uint32 Victim, const CauserKillData CauserKillData, const AssistDataList AssistDataList, byte SurvivePlayer, byte SurviveTeam);// 0x7def800
	void BroadcastPlayerKilled(uint32 Victim, const CauserKillData CauserKillData, const AssistDataList AssistDataList);// 0x7df0100
	void BroadcastPlayerDamage(const uint32 Causer, const uint32 Victim, const float Damage);// 0x7deff44
	void BroadcastOpenSocreTime(int TotalTime);// 0x7dee484
	void BroadcastObStop(uint32 PlayerKey, uint32 ObserverPlayerKey);// 0x7defc64
	void BroadcastObStart(uint32 PlayerKey, PlayerInfo Observer);// 0x7defda4
	void BroadcastMsg(uint32 PlayerKey, FString Msg);// 0x7defaf4
	void BroadcastDyingDamage(uint32 Causer, uint32 Victim, float Damage);// 0x7df02f8
	void BroadcastBecomeKillKing_BR(uint32 KillKingPlayerKey, byte KillKingMaxKill);// 0x7def6c0
	void BroadcastAddPlayer(const PlayerInfoToClient PlayerInfo);// 0x7df04b4
	void BoardcastResetRoundStatistics();// 0xa165de8
	void BoardcastOpenShopTime(float TotalTime);// 0x7dee60c
	void BoardcastAddPlayerScore(int PlayerKey, int Score);// 0x7def154
	void BoardcastAddCampScore(const CampScoringRecord Record);// 0x7def080

--------------------------------
Class: PositiveFeedback_KnockDown

--------------------------------
Class: PositiveFeedback_Kill

--------------------------------
Class: PositiveFeedback_GrenadeMultiHit
	uint32 GrenadeID;//[Offset: 0x0, Size: 0x4]
	uint32 KnockDownCount;//[Offset: 0x4, Size: 0x4]
	uint32 KillCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RatingScoreInfo
	RankScoreData[] RankScoreInfo;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RankScoreData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int RankScore;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VictimData_MPBase

--------------------------------
Class: CauserKillData

--------------------------------
Class: AssistDataList

--------------------------------
Class: PlayerInfo
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
	int TeamID;//[Offset: 0xc, Size: 0x4]
	int CampID;//[Offset: 0x10, Size: 0x4]
	FString PlayerName;//[Offset: 0x18, Size: 0x10]
	int Corps_Select_ID;//[Offset: 0x28, Size: 0x4]
	int[] CurrentEmotePaintingData;//[Offset: 0x38, Size: 0x10]
	int Rating;//[Offset: 0x58, Size: 0x4]
	int DailyWinTime;//[Offset: 0x5c, Size: 0x4]
	bool bAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int[] Emote;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: PlayerInfoToClient
	PlayerInfo PlayerInfo;//[Offset: 0x0, Size: 0x108]
	SimpleTrackerData[] TrackerData;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: CampScoringRecord
	int CampID;//[Offset: 0x0, Size: 0x4]
	int CampRole;//[Offset: 0x4, Size: 0x4]
	int Score;//[Offset: 0x8, Size: 0x4]
	enum Reason;//[Offset: 0xc, Size: 0x1]
	bool FinishGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: GMStatisticsData
	byte TeamRank;//[Offset: 0x0, Size: 0x1]
	byte Rank;//[Offset: 0x1, Size: 0x1]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int DeathNum;//[Offset: 0x8, Size: 0x4]
	float DamageAmount;//[Offset: 0xc, Size: 0x4]
	float SurviveTime;//[Offset: 0x10, Size: 0x4]
	float TeamSurviveTime;//[Offset: 0x14, Size: 0x4]
	int RescueNum;//[Offset: 0x18, Size: 0x4]
	int RevivalNum;//[Offset: 0x1c, Size: 0x4]
	int AssistNum;//[Offset: 0x20, Size: 0x4]
	int ComboKill;//[Offset: 0x24, Size: 0x4]
	float HeadShotRate;//[Offset: 0x28, Size: 0x4]
	float RecoveryHP;//[Offset: 0x2c, Size: 0x4]
	int MeleeKillNum;//[Offset: 0x30, Size: 0x4]
	int GrenadeLikeItemKill;//[Offset: 0x34, Size: 0x4]
	float MoveDistance;//[Offset: 0x38, Size: 0x4]
	int RevivalByOtherNum;//[Offset: 0x3c, Size: 0x4]
	int KillCountBySelf;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: GameEndDataReportComponent.ActorComponent.Object
	void ServerDataRepWorkbenchTypeChoose(enum InType);// 0x7c0822c
	void ServerDataRepStartRespawnGenerateData(int PlayerKey);// 0x7c078f4
	void ServerDataRepRowdyPlayNum(int InIndex);// 0x7c07a6c
	void ServerDataRepRowdyLocData(out int Index, Vector Location);// 0x7c07b28
	void ServerDataRepRespawnStartTimeGenerateData(int PlayerKey, int InTime);// 0x7c077bc
	void ServerDataRepRespawnEndTimeGenerateData(int PlayerKey, int InTime);// 0x7c0754c
	void ServerDataRepRespawnDistanceGenerateData(int PlayerKey, int InDistance);// 0x7c07684
	void ServerDataRepReplicatorUseSuccessNum(int InIndex);// 0x7c0862c
	void ServerDataRepReplicatorUseNum(int InIndex);// 0x7c086e8
	void ServerDataRepReplicatorSpawnItemNum(int InIndex);// 0x7c079b0
	void ServerDataRepReplicatorLocData(out int Index, int Type, Vector Location);// 0x7c087a4
	void ServerDataRepReplicatorCostMaterial(int InIndex, int InCostNum);// 0x7c084f4
	void ServerDataRepNextLifeEndTimeGenerateData(int PlayerKey, int InTime);// 0x7c07414
	void ServerDataRepLootBinOpenData(int InIndex, int PlayerKey);// 0x7c07f28
	void ServerDataRepLootBinLocData(out int Index, Vector Location, int BinType);// 0x7c08060
	void ServerDataRepLootBinIceGenerateData(int InIndex, int IceNum);// 0x7c07d34
	void ServerDataRepLootBinIceActiveData(int InIndex);// 0x7c07e6c
	void ServerDataRepLootBinCreepLocData(out int Index, Vector Location, enum SpecialType);// 0x7c08f84
	void ServerDataRepLootBinCreepKillData(int InIndex, int PlayerKey, enum Region);// 0x7c08dd0
	void ServerDataRepLootBinCreepDestroyData(int InIndex, int InQuality, <int,int> PickUpData);// 0x7c08970
	void ServerDataRepLootBinBottomGenerateData(int InIndex);// 0x7c07c78
	void ServerDataRepHarvesterLocData(out int Index, Vector Location);// 0x7c083a4
	void ServerDataRepHarvesterExtractNum(int Index);// 0x7c082e8
	void ServerDataRepDoorData(out int DoorIndex, bool bOpen, Vector Location);// 0x7c09150

--------------------------------
Class: ProxyMovementManager.ActorComponent.Object
	bool bProxySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float LimitAngle;//[Offset: 0xfc, Size: 0x4]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	<uint32,ProxySyncData*> ProxySyncDataMap;//[Offset: 0x108, Size: 0x50]
	bool bEquipSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	float ProxyExistTime;//[Offset: 0x15c, Size: 0x4]
	bool RemoteWeaponSoundSyncSW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	float RemoteWeaponSoundSyncDis;//[Offset: 0x174, Size: 0x4]
	float RemoteWeaponSoundKeepTime;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: ProxySyncData.Info.Actor.Object
	<Actor*> NeedSyncPlayers;//[Offset: 0x278, Size: 0x50]
	ApexCharacter* SyncCharacter;//[Offset: 0x2c8, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x2d0, Size: 0x8]
	float DamageSimulateTimeOut;//[Offset: 0x2d8, Size: 0x4]
	float SimulateServerTimeStamp;//[Offset: 0x2dc, Size: 0x4]
	PrimitiveComponent* Base;//[Offset: 0x2e0, Size: 0x8]
	ProxyActorBasicData ProxyActorBasicData;//[Offset: 0x2e8, Size: 0xc]
	ProxyActorMovementData ProxyActorMovementData;//[Offset: 0x2f4, Size: 0x24]
	byte ReplicatedMovementMode;//[Offset: 0x318, Size: 0x1]
	uint64 StateMask;//[Offset: 0x320, Size: 0x8]
	BulletHitInfoReplicateData[] BulletHitData;//[Offset: 0x328, Size: 0x10]
	ProxyActorWeaponData[] WeaponData;//[Offset: 0x338, Size: 0x10]
	ProxyActorHurtData HurtData;//[Offset: 0x348, Size: 0x38]
	ProxyActorKnockdownShieldData KnockdownShieldData;//[Offset: 0x380, Size: 0x2]
	ProxyActorRescueData RescueData;//[Offset: 0x384, Size: 0xc]
	bool bAgentIsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	int[] PawnProxyParticleIDList;//[Offset: 0x398, Size: 0x10]
	<int,ParticleSystemAsync*> PawnProxyPSAMap;//[Offset: 0x3a8, Size: 0x50]
	int PawnProxyReplacedMatID;//[Offset: 0x3f8, Size: 0x4]
	MaterialInterface*[] CachedMaterials;//[Offset: 0x400, Size: 0x10]
	PawnProxyVoidStatus VoidStatus;//[Offset: 0x418, Size: 0x5]
	float DitherValue;//[Offset: 0x420, Size: 0x4]
	PawnProxyPhantomVoidStatus PhantomVoidStatus;//[Offset: 0x424, Size: 0xc]
	void OnRep_WeaponData();// 0x55be3a0
	void OnRep_VoidStatus();// 0x7dfcffc
	void OnRep_StateMask();// 0x528e84c
	void OnRep_RescueData();// 0x7dfd0cc
	void OnRep_ProxyActorMovementData();// 0x5161f10
	void OnRep_ProxyActorBasicData();// 0x5e3c44c
	void OnRep_PhantomVoidStatus();// 0x7dfcfd4
	void OnRep_PawnProxyReplacedMatID(int LastMatID);// 0x7dfd010
	void OnRep_PawnProxyParticleIDList();// 0x5d95cbc
	void OnRep_KnockdownShieldData();// 0x582f6b4
	void OnRep_HurtData();// 0x5e512a8
	void OnRep_DitherValue();// 0x7dfcfe8
	void OnRep_BulletHitData();// 0x54bed20

--------------------------------
Class: ProxyActorBasicData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int LegendID;//[Offset: 0x4, Size: 0x4]
	int LegendSkinID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ProxyActorMovementData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Velocity;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BulletHitInfoReplicateData
	Actor* Actor;//[Offset: 0x20, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x28, Size: 0x8]
	MovementSyncData ShootStart;//[Offset: 0x30, Size: 0x18]
	MovementSyncData ShootEnd;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: ProxyActorWeaponData
	ItemDefineID WeaponID;//[Offset: 0x0, Size: 0x18]
	enum WeaponSaveSlot;//[Offset: 0x18, Size: 0x1]
	int WeaponSkinID;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ProxyActorHurtData
	int VictimPlayerKey;//[Offset: 0x0, Size: 0x4]
	float Damage;//[Offset: 0x4, Size: 0x4]
	int DamageType;//[Offset: 0x8, Size: 0x4]
	int AttackerPlayerKey;//[Offset: 0xc, Size: 0x4]
	byte AvatarDamagePosition;//[Offset: 0x10, Size: 0x1]
	bool bIsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bIsFatalHealthCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bIsHitShield;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bIsShieldBroken;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	uint32 ShootID;//[Offset: 0x14, Size: 0x4]
	uint32 PelletID;//[Offset: 0x18, Size: 0x4]
	float AimPercent;//[Offset: 0x1c, Size: 0x4]
	byte AimChargeLevel;//[Offset: 0x20, Size: 0x1]
	double TimeOutServerTime;//[Offset: 0x28, Size: 0x8]
	int DamageItemId;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ProxyActorKnockdownShieldData
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte Level;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ProxyActorRescueData
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int SourcePlayerKey;//[Offset: 0x4, Size: 0x4]
	int TargetPlayerKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PawnProxyVoidStatus
	bool bEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	CharacterVoidParams VoidParams;//[Offset: 0x1, Size: 0x4]

--------------------------------
Class: CharacterVoidParams
	bool bCanSeeOtherInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanSeeOtherVoidInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoSetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bClearComponentOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: PawnProxyPhantomVoidStatus
	bool bEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int InstigatorTeamID;//[Offset: 0x4, Size: 0x4]
	int InstigatorCampID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameSyncSettingComponent.ActorComponent.Object
	CharacterSyncSetting CharacterSyncSetting;//[Offset: 0xf8, Size: 0x78]
	FString MovementConfigPath;//[Offset: 0x170, Size: 0x10]
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	bool bOpenWeaponEncryption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1]
	void Onrep_CharacterSyncSetting();// 0x5a3cf80

--------------------------------
Class: CharacterSyncSetting
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOpenWeaponEncryption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	CharacterMovementSyncSetting MovementSyncSetting;//[Offset: 0x8, Size: 0x70]

--------------------------------
Class: CharacterMovementSyncSetting
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float MaxJumpHeight;//[Offset: 0x4, Size: 0x4]
	float MaxSpeed;//[Offset: 0x8, Size: 0x4]
	CharacterMovementSyncSetting_LegendClimbData[] LegendClimbData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CharacterMovementSyncSetting_LegendClimbData
	enum LegendType;//[Offset: 0x0, Size: 0x1]
	float ClimbLimitHeight;//[Offset: 0x4, Size: 0x4]
	float FinalJumpHeight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameStateGravityElevatorComponent.ActorComponent.Object
	<int,GravityElevator*> LauncherIDtoActorMap;//[Offset: 0x148, Size: 0x50]
	<int,FString> LauncherToSpawnerConfig;//[Offset: 0x248, Size: 0x50]
	void ReportDSElevatorOpenInfo(uint32 PlayerKey);// 0x7c4e5b8
	void RegisterElevatorSpawner(ElevatorSpawner* ElevatorSpawner);// 0x7c4e7f0
	void RegisterElevatorLauncher(GravityElevator* ElevatorLauncher);// 0x7c4e86c
	GravityElevator* GetElevatorLauncherByID(int ElevatorLauncherUID);// 0x7c4e634
	int GetAssociatedElevatorNum(int ElevatorLauncherUID);// 0x7c4e6b8
	void ActiveGravityElevator(const GravityElevator* ElevatorLauncher, PlayerController* LaunchController);// 0x7c4e73c

--------------------------------
Class: GravityElevator.Actor.Object
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2e0, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2e8, Size: 0x8]
	ParticleSystemComponent* HeadIcon;//[Offset: 0x2f0, Size: 0x8]
	int MiniMapIndex;//[Offset: 0x2f8, Size: 0x4]
	enum CurState;//[Offset: 0x318, Size: 0x1]
	PlayerController* HandlingController;//[Offset: 0x320, Size: 0x8]
	int RepUniqueID;//[Offset: 0x328, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	float PlayerCanInteractionDist;//[Offset: 0x330, Size: 0x4]
	float PlayerCanInteractionHight;//[Offset: 0x334, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x338, Size: 0x10]
	int UniqueID;//[Offset: 0x348, Size: 0x4]
	float ActivateTime;//[Offset: 0x34c, Size: 0x4]
	float HandleTime;//[Offset: 0x350, Size: 0x4]
	float CoolDownTime;//[Offset: 0x354, Size: 0x4]
	<int,Object*> HandleIconMap;//[Offset: 0x358, Size: 0x50]
	AkAudioEvent* AudioActiveGravity;//[Offset: 0x3a8, Size: 0x28]
	AkAudioEvent* AudioDeActiveGravity;//[Offset: 0x3d0, Size: 0x28]
	AkAudioEvent* AudioStartHandlingGravity;//[Offset: 0x3f8, Size: 0x28]
	void ServerStopHandleElevator(PlayerController* Controller);// 0x7c8ce50
	void ServerHandleElevator(PlayerController* Controller);// 0x7c8cf20
	void OnRep_RepUniqueID();// 0x58a7c30
	void OnRep_HandlingController();// 0x54ff2b0
	void OnRep_CurState();// 0x4830a28
	void NativeSimulatedEnterNormalState();// 0xa1d39f8
	void NativeSimulatedEnterActivatedState();// 0xa1d39f8
	void EnterActivateState();// 0x7c8cff0
	void CoolDownComplete();// 0x7c8cdf4
	void ActivateSuccess();// 0x7c8ce3c
	void ActivateEnd();// 0x7c8ce28

--------------------------------
Class: ElevatorSpawner.Actor.Object
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2d8, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystemComponent* HeadIcon;//[Offset: 0x2e8, Size: 0x8]
	int MiniMapIndex;//[Offset: 0x2f0, Size: 0x4]
	int UniqueID;//[Offset: 0x2f4, Size: 0x4]
	int WarningLeftTime;//[Offset: 0x2f8, Size: 0x4]
	AkAudioEvent* AudioActiveGravity;//[Offset: 0x300, Size: 0x28]
	AkAudioEvent* AudioDeActiveGravity;//[Offset: 0x328, Size: 0x28]
	bool bRepActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool bRepDissapearWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	int RepUniqueID;//[Offset: 0x354, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	void OnRep_RepUniqueID();// 0x598c244
	void OnRep_RepDissapearWarning();// 0x58336fc
	void OnRep_RepActivated();// 0x5bfeaf0
	void DisappearWarning();// 0x7bdc00c
	void Deactivate();// 0x7bdc044
	void BP_ServerElevaterActiveState(bool bActive);// 0xa1d39f8
	void BP_ClientElevaterActiveState(bool bActive);// 0xa1d39f8
	void BP_ClientDisappearWarning();// 0xa1d39f8
	void Activate(float ActivateTime, PlayerController* LaunchController);// 0x7bdc058

--------------------------------
Class: BattlefieldMessageComponent.ActorComponent.Object
	FName KillAssistTableName;//[Offset: 0xf8, Size: 0x8]
	FName ActiveMessageTableName;//[Offset: 0x100, Size: 0x8]
	FName ActiveMessageKeyName;//[Offset: 0x108, Size: 0x8]
	FName MessageTypeKeyName;//[Offset: 0x110, Size: 0x8]
	int MaxCacheNumber;//[Offset: 0x118, Size: 0x4]
	int MaxMiniDisplayCount;//[Offset: 0x11c, Size: 0x4]
	float MinDisplayTime;//[Offset: 0x120, Size: 0x4]
	float KAItemLifeTime;//[Offset: 0x124, Size: 0x4]
	FName[] FeedbackWaitWidgetArray;//[Offset: 0x128, Size: 0x10]
	bool bOnlyDisplayTeamMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	float FeedbackUIOffsetY;//[Offset: 0x170, Size: 0x4]
	uint32 CurrentKillKing;//[Offset: 0x174, Size: 0x4]
	void OnTreasureDoorOpened(uint32 PlayerKey);// 0x7b0daf8
	void OnSecondLifeMessage(Controller* Controller);// 0x7b0d474
	void OnPlayerOpenCarePackage(uint32 PlayerKey, int LootZoneID);// 0x7b0d9c0
	void OnPlayerKilled(Controller* Killer, Controller* VictimPlayer, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys, Controller* RealKiller);// 0x7b0e1ac
	void OnPlayerGotoDying(Controller* Killer, Controller* VictimPlayer, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys, Controller* RealKiller);// 0x7b0dd2c
	void OnBombPlanted(uint32 PlayerKey);// 0x7b0dc70
	void OnBombDefused(uint32 PlayerKey);// 0x7b0dbb4
	void MulticastSecondLifeMessage(ApexPlayerState* ApexPlayerState);// 0x7b0d3b0
	void MulticastKillKingMessage(BattlefieldKillKingMessage Message);// 0x7b0d530
	void DispatchKillKingMessage(enum MessageType, Controller* Killer, Controller* Victim, int KillCount);// 0x7b0d794
	void ClientRefreshDamage(uint32 Causer, float Damage);// 0x7b0efb4
	void ClientOnRescueRespawnPositiveFeedback(uint32 SourcePlayerKey, int TotalReviveCount);// 0x7b0e8b0
	void ClientOnKillPositiveFeedback(uint32 KillerKey, out const PositiveFeedback_Kill Message);// 0x7b0ed10
	void ClientOnJumpIntoBRFeedback(uint32 PlayerKey, enum Reason);// 0x7b0e778
	void ClientOnGrenadeMultiHitPositiveFeedback(uint32 PlayerKey, out const PositiveFeedback_GrenadeMultiHit Message);// 0x7b0e62c
	void ClientOnDownPositiveFeedback(uint32 KillerKey, out const PositiveFeedback_KnockDown Message);// 0x7b0ee58
	void ClientOnDownKillPositiveFeedback(uint32 KillerKey, out const PositiveFeedback_KnockDown DownMessage, out const PositiveFeedback_Kill KillMessage);// 0x7b0eb20
	void ClientOnAssistPositiveFeedback(uint32 AssisterKey, int TotalAssistCount);// 0x7b0e9e8
	void ClientDispatchPlayerKillMessage(BattlefieldPlayerKillMessage Message);// 0x7b0f484
	void ClientDispatchOpenCarePackageTreasureDoorMessage(uint32 PlayerKey, bool bIsDoor);// 0x7b0f0ec
	void ClientDispatchBombDefusalMessage(uint32 PlayerKey, bool bIsPlant, bool bIsClutch, float BlastRemainTime);// 0x7b0f234

--------------------------------
Class: BattlefieldPlayerKillMessage
	BattlefieldPlayerInfo KillerInfo;//[Offset: 0x0, Size: 0x20]
	uint32[] AssisterPlayerKeys;//[Offset: 0x20, Size: 0x10]
	BattlefieldPlayerInfo VictimInfo;//[Offset: 0x30, Size: 0x20]
	int DamageType;//[Offset: 0x50, Size: 0x4]
	int WeaponID;//[Offset: 0x54, Size: 0x4]
	int WeaponSkinID;//[Offset: 0x58, Size: 0x4]
	int KillMsgSkinID;//[Offset: 0x5c, Size: 0x4]
	bool bHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bBlindSnipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool bShootThroughSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	int ComboKill;//[Offset: 0x64, Size: 0x4]
	bool bKillLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool IsRevenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	enum MessageType;//[Offset: 0x6a, Size: 0x1]
	enum KillKingMessageType;//[Offset: 0x6b, Size: 0x1]
	int KillCount;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: ApexGameCreditScoreRatingManager.ActorComponent.Object
	SoftObjectPath CreditScoreConfig;//[Offset: 0xf8, Size: 0x18]
	CreditScoreRatingData* CreditScoreData;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: CreditScoreRatingData.DataAsset.Object
	float RecoverValue;//[Offset: 0x30, Size: 0x4]
	float RecoRecoverValueverThreshold;//[Offset: 0x34, Size: 0x4]
	float KickOutScore;//[Offset: 0x38, Size: 0x4]
	<enum,float> ScoreLimitation;//[Offset: 0x40, Size: 0x50]
	<enum,float> ScoreReduceLimitation;//[Offset: 0x90, Size: 0x50]
	<enum,float> TacticScore;//[Offset: 0xe0, Size: 0x50]
	<enum,int> TacticToleranceNum;//[Offset: 0x130, Size: 0x50]
	float PingToleranceThreshold;//[Offset: 0x180, Size: 0x4]
	int PingToleranceNum;//[Offset: 0x184, Size: 0x4]
	float SuspiciousActionThresholdMid;//[Offset: 0x188, Size: 0x4]
	float SuspiciousActionThresholdHigh;//[Offset: 0x18c, Size: 0x4]
	bool bOpenCreditScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]

--------------------------------
Class: ApexSequenceComponent.ActorComponent.Object
	ApexLevelSequenceActor* LevelSequenceActor;//[Offset: 0xf8, Size: 0x8]
	delegate OnSpawnObjectEvent;//[Offset: 0x100, Size: 0x10]
	Object* TransformOriginActor;//[Offset: 0x110, Size: 0x8]
	void StopSequence();// 0x55f8648
	void SetSequnce(LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings);// 0x7a39a70
	void SequenceOnFinish();// 0x7a394b4
	void PlaySequence(LevelSequence* LevelSequence, const FString[] OverrideNames, const Actor*[] OverrideActors, MovieSceneSequencePlaybackSettings Settings);// 0x5e29628
	void PauseSequence();// 0x7a39590
	void OverrideBindings(const FString[] OverrideNames, const Actor*[] OverrideActors);// 0x7a39194
	void JumpToFrameSequence(int NewPosition);// 0x7a394c8
	float GetSequenceDuration();// 0x7a3955c
	Actor* GetSequenceActorBindingObj(LevelSequenceActor* SequenceActor);// 0x5b39b78
	LevelSequenceActor* GetLevelSequenceActor();// 0x7a39480
	void ApexStopSequence();// 0x7a39680
	void ApexSequenceOnFinish();// 0x51918f8
	void ApexPlaySequence(LevelSequence* LevelSequence, const FString[] OverrideNames, const Actor*[] OverrideActors, MovieSceneSequencePlaybackSettings Settings);// 0x7a39694
	void ApexPauseSequence();// 0x7a3966c
	void ApexJumpToFrameSequence(int NewPosition);// 0x7a395a4
	float ApexGetSequenceDuration();// 0x7a39638

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0xa299350
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0xa2994d0
	Object* FindMetaDataByClass(class Object InClass);// 0xa299598
	Object* CopyMetaData(Object* InMetaData);// 0xa299408

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bApplyRebase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bApplyOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	float StartBlendInTime;//[Offset: 0x14, Size: 0x4]
	Vector Offset;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ApexLevelSequenceActor.LevelSequenceActor.Actor.Object

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x280, Size: 0x24]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x2a8, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x2b0, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x2c8, Size: 0x10]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x2d8, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x2e0, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2f0, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2f8, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	void ShowBurnin();// 0x90fe3c8
	void SetSequence(LevelSequence* InSequence);// 0x54c10e4
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x90fe3f0
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x90fe4c8
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x5f7cd8c
	void ResetBindings();// 0x90fde5c
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x90fdeac
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x90fe004
	void OnLevelSequenceLoaded__DelegateSignature();// 0xa1d39f8
	LevelSequence* LoadSequence();// 0x90fe678
	void HideBurnin();// 0x90fe3dc
	LevelSequencePlayer* GetSequencePlayer();// 0xa299688
	LevelSequence* GetSequence();// 0x90fe6ac
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x90fe188

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x828, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x90ffa38
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x5a49c98

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x3b8, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x3c8, Size: 0x10]
	delegate OnStop;//[Offset: 0x3d8, Size: 0x10]
	delegate OnPause;//[Offset: 0x3e8, Size: 0x10]
	delegate OnFinished;//[Offset: 0x3f8, Size: 0x10]
	byte Status;//[Offset: 0x408, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x409, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x410, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x418, Size: 0x4]
	int DurationFrames;//[Offset: 0x41c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x420, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x438, Size: 0x24]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x460, Size: 0x300]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x7c8, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x7d8, Size: 0x10]
	void StopAtCurrentTime();// 0x8d99518
	void Stop();// 0x8d9952c
	void SetTimeRange(float StartTime, float Duration);// 0x8d98c88
	void SetPlayRate(float PlayRate);// 0x8d98394
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x8d99130
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x8d99268
	void SetFrameRate(FrameRate FrameRate);// 0x8d98ef8
	void SetFrameRange(int StartFrame, int Duration);// 0x8d98dc0
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x8d982c8
	void ScrubToSeconds(float TimeInSeconds);// 0x8d988dc
	bool ScrubToMarkedFrame(FString InLabel);// 0x8d98620
	void ScrubToFrame(FrameTime NewPosition);// 0x8d98b10
	void Scrub();// 0x8d9957c
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x8d97e00
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x8d97ec4
	void PlayToSeconds(float TimeInSeconds);// 0x8d98998
	bool PlayToMarkedFrame(FString InLabel);// 0x8d98720
	void PlayToFrame(FrameTime NewPosition);// 0x8d98bcc
	void PlayReverse();// 0x8d99674
	void PlayLooping(int NumLoops);// 0x8d995a4
	void Play();// 0x8d99688
	void Pause();// 0x8d99590
	void JumpToSeconds(float TimeInSeconds);// 0x8d98820
	void JumpToPosition(float NewPlaybackPosition);// 0x8d99074
	bool JumpToMarkedFrame(FString InLabel);// 0x8d98520
	void JumpToFrame(FrameTime NewPosition);// 0x8d98a54
	bool IsReversed();// 0x8d98494
	bool IsPlaying();// 0x51d2dcc
	bool IsPaused();// 0x8d984d8
	void GoToEndAndStop();// 0x8d994ac
	QualifiedFrameTime GetStartTime();// 0xa24cf48
	float GetPlayRate();// 0x8d98458
	float GetPlaybackStart();// 0xa24cfe0
	float GetPlaybackPosition();// 0x8d993e8
	float GetPlaybackEnd();// 0xa24cf84
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x8d98004
	float GetLength();// 0x8d99378
	FrameRate GetFrameRate();// 0xa24cf68
	int GetFrameDuration();// 0x8d98fbc
	QualifiedFrameTime GetEndTime();// 0xa24cf20
	QualifiedFrameTime GetDuration();// 0x8d98ff8
	bool GetDisableCameraCuts();// 0xa24cf00
	QualifiedFrameTime GetCurrentTime();// 0x8d9902c
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x8d98154
	void ChangePlaybackDirection();// 0x8d99660

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x90fda60

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x248, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x300, Size: 0x8]
	void SetSettings(Object* InSettings);// 0xa1d39f8
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0xa29971c

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: SelectLegendComponentBase.ActorComponent.Object
	LegendLoadoutInfo[] LegendLoadoutInfoList;//[Offset: 0xf8, Size: 0x10]
	void ReChooseLegend(ApexPlayerState* PlayerState, int LegendID);// 0x7e28c30
	void OnRep_LegendLoadoutInfoList();// 0xa1d39f8
	void OnCancelConfirmLegend(ApexPlayerState* PlayerState);// 0x7e28b6c
	void ConfirmLegend(ApexPlayerState* PlayerState, bool bIsRepick, bool ImmediatelyChange);// 0x7e28858
	void ChooseLegendSkin(ApexPlayerState* PlayerState, int SkinID);// 0x7e28718
	void ChooseLegend(ApexPlayerState* PlayerState, int LegendID);// 0x7e28a2c

--------------------------------
Class: LegendLoadoutInfo
	int LegendID;//[Offset: 0x0, Size: 0x4]
	int LoadoutID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameStateInGameRegionComponent.ActorComponent.Object
	bool bNeedDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bEnableTickUpdateDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	<enum,InGameRegionData> RegionTypeToRegionData;//[Offset: 0x110, Size: 0x50]
	InGameRegionConfig[] InGameRegionConfigArray;//[Offset: 0x160, Size: 0x10]
	void OnRep_EnableTickUpdateDynamic();// 0x7c4fa9c

--------------------------------
Class: InGameRegionData
	<InGameRegionID,InGameRegionObjectList> RegionIDToObjectList_Static;//[Offset: 0x10, Size: 0x50]
	<InGameRegionID,InGameRegionObjectList> RegionIDToObjectList_Dynamic;//[Offset: 0x60, Size: 0x50]
	<InGameRegionObject,InGameRegionID> DynamicRegionObjectToRegionID;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: InGameRegionID

--------------------------------
Class: InGameRegionObjectList
	InGameRegionObject[] InGameRegionObjectDataArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InGameRegionObject

--------------------------------
Class: InGameRegionConfig
	enum RegionType;//[Offset: 0x0, Size: 0x1]
	int ClientRegionSize;//[Offset: 0x4, Size: 0x4]
	int ServerRegionSize;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RTPCParamInfo
	FString RTPCKey;//[Offset: 0x0, Size: 0x10]
	float Value;//[Offset: 0x10, Size: 0x4]
	int InterpolationTimeMs;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MiniMapManager.ActorComponent.Object
	void UpdateRedCircleItem();// 0xa1496a4

--------------------------------
Class: GameModeStageInfo
	enum StageType;//[Offset: 0x0, Size: 0x1]
	float EnterStageTime;//[Offset: 0x4, Size: 0x4]
	float StageDuration;//[Offset: 0x8, Size: 0x4]
	int EnterStageTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ZiplineManager.Object
	ZiplineBatchActor* ZiplineBatchActorStatic;//[Offset: 0x30, Size: 0x8]
	ZiplineBatchActor* ZiplineBatchActorDynamic;//[Offset: 0x38, Size: 0x8]
	ZiplineBatchActor* ZiplineBatchActorCreated;//[Offset: 0x40, Size: 0x8]
	ZiplineBatchComponent* ZiplineRidingBatchComponent;//[Offset: 0x48, Size: 0x8]
	<ZiplineComponent*,bool> ZipLineMap;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: ZiplineBatchActor.Actor.Object
	ZiplineISMBatchComponent* ZiplineISMBatchComponent;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: ZiplineISMBatchComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ZiplineInstanceData[] ZiplineDataList;//[Offset: 0x8a8, Size: 0x10]
	ZiplineComponent*[] ZiplineCompList;//[Offset: 0x8b8, Size: 0x10]
	int[] RemovedPrimitiveDataIdx;//[Offset: 0x8c8, Size: 0x10]
	StaticMesh* SplitStaticMesh;//[Offset: 0x8d8, Size: 0x8]
	MaterialInterface* MeshMaterialDynamic;//[Offset: 0x8e0, Size: 0x8]
	MaterialInterface* MeshMaterialStatic;//[Offset: 0x8e8, Size: 0x8]
	StaticMesh* SoftMeshPtr;//[Offset: 0x8f0, Size: 0x28]
	MaterialInterface* SoftMatDynamicPtr;//[Offset: 0x918, Size: 0x28]
	MaterialInterface* SoftMatStaticPtr;//[Offset: 0x940, Size: 0x28]
	enum ZiplineState;//[Offset: 0x968, Size: 0x1]
	void SetState(out const enum InState);// 0x7f84b44
	void RemoveZipline(ZiplineComponent* InZipline);// 0x7f84e5c
	void LoadResourceDone(AsyncLoaderBase* Loader);// 0x5611a54
	void HighlightZipline(ZiplineComponent* InZipline, bool bHighlight);// 0x7f84c24
	void HideZipline(ZiplineComponent* InZipline);// 0x7f84d8c
	void AddZipline(ZiplineComponent* InZipline);// 0x7f84f2c

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x7a8, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x7b8, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x7c0, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x7dc, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7f8, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808, Size: 0x1]
	float[] ProbeIntensityPerLod;//[Offset: 0x810, Size: 0x10]
	int OcclusionLayerNumNodes;//[Offset: 0x820, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x824, Size: 0x1c]
	bool bWorldBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x848, Size: 0x4]
	int SpecifiedSplitFactor;//[Offset: 0x84c, Size: 0x4]
	int SpecifiedMinVertsToSplitNode;//[Offset: 0x850, Size: 0x4]
	float CustomDistanceScale;//[Offset: 0x854, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x98836f0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x6c0, Size: 0x10]
	InstancedStaticMeshInstanceCustomData[] PerInstanceSMCustomData;//[Offset: 0x6d0, Size: 0x10]
	bool bUsePerInstanceMPData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e0, Size: 0x1]
	InstancedStaticMeshMeshProbesData[] PerInstanceMPData;//[Offset: 0x6e8, Size: 0x10]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f8, Size: 0x1]
	int InstancingRandomSeed;//[Offset: 0x6fc, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x700, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x704, Size: 0x4]
	float InstanceMinScreenSize;//[Offset: 0x708, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x710, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x780, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x788, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x988fbcc
	bool UpdateInstanceCustomData(int InstanceIndex, out const Vector4 NewInstanceCustomData, bool bMarkRenderStateDirty, bool bTeleport);// 0x988fa08
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x988ef60
	bool RemoveInstance(int InstanceIndex);// 0x988f070
	void NewInstance();// 0x9890468
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x488f118
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x988ed78
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x988ebbc
	int GetInstanceCount();// 0x988f03c
	void DeleteInstance();// 0x98904b0
	void ClearInstances();// 0xa33a008
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x988f7bc
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x988f324
	bool BatchUpdateInstancesCustomDatas(int StartInstanceIndex, out const Vector4[] NewInstancesCustomDatas, bool bMarkRenderStateDirty, bool bTeleport);// 0x988f5cc
	bool BatchUpdateInstancesCustomData(int StartInstanceIndex, int NumInstances, out const Vector4 NewInstancesCustomData, bool bMarkRenderStateDirty, bool bTeleport);// 0x988f118
	int AddInstanceWorldSpaceWithCustomData(out const Transform WorldTransform, out const Vector4 InstnaceCustomData);// 0x988ff90
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x9890268
	int AddInstanceWithCustomData(out const Transform InstanceTransform, out const Vector4 InstnaceCustomData);// 0x98900f8
	int AddInstanceOffset(out const Transform InstanceTransform, out const Vector InstanceOffset);// 0x988fe2c
	int AddInstance(out const Transform InstanceTransform);// 0x9890364

--------------------------------
Class: ZiplineInstanceData
	int InstanceIdxStart;//[Offset: 0x0, Size: 0x4]
	int InstanceCount;//[Offset: 0x4, Size: 0x4]
	int PrimitiveDataIdx;//[Offset: 0x8, Size: 0x4]
	ZiplineBuildData BuildData;//[Offset: 0xc, Size: 0x2c]

--------------------------------
Class: ZiplineBuildData
	Vector ZiplineStart;//[Offset: 0x0, Size: 0xc]
	Vector ZiplineEnd;//[Offset: 0xc, Size: 0xc]
	int CurveSeparateNum;//[Offset: 0x18, Size: 0x4]
	int NumSegments;//[Offset: 0x1c, Size: 0x4]
	float TileMaterial;//[Offset: 0x20, Size: 0x4]
	Vector2D ZiplineMinMax;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
	Vector4 ShCoefficient;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshInstanceCustomData
	Vector4 CustomData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshMeshProbesData
	float MeshProbesIntensity;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: ZiplineBatchComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Material* ZiplineMat;//[Offset: 0x5a0, Size: 0x8]
	Material* SoftMatPtr;//[Offset: 0x5a8, Size: 0x28]
	ZiplineComponent*[] TmpZiplineList;//[Offset: 0x5d0, Size: 0x10]
	ZiplineComponent*[] CurZiplineList;//[Offset: 0x5e0, Size: 0x10]
	<ZiplineComponent*,ZiplineBatchData> ZiplineMeshMap;//[Offset: 0x5f0, Size: 0x50]
	ZiplineBatchData ZiplineBatchData;//[Offset: 0x640, Size: 0x28]
	ZiplineComponent*[] NeedZiplineList;//[Offset: 0x668, Size: 0x10]
	ZiplineIndexDist[] ZiplineIndexDistList;//[Offset: 0x678, Size: 0x10]
	void LoadResourceDone(AsyncLoaderBase* Loader);// 0x565bcd0

--------------------------------
Class: ZiplineBatchData

--------------------------------
Class: ZiplineIndexDist

--------------------------------
Class: ApexTrain.Actor.Object
	float AudioEffectRange;//[Offset: 0x2e0, Size: 0x4]
	TrainCoach* NearestCoach;//[Offset: 0x2e8, Size: 0x8]
	TrainSaveData ReplicatedSaveData;//[Offset: 0x330, Size: 0x18]
	enum CurrentState;//[Offset: 0x348, Size: 0x1]
	float TickInterval;//[Offset: 0x34c, Size: 0x4]
	bool bAdjustDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool bTrainHiddenTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	ApexSoundSpeakerComponent* Speaker;//[Offset: 0x3a8, Size: 0x8]
	AkComponent* AKComp;//[Offset: 0x3b0, Size: 0x8]
	float ForceUpdateDistance;//[Offset: 0x3d0, Size: 0x4]
	float LerpLimit;//[Offset: 0x3d4, Size: 0x4]
	bool bOpenOverlapOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	float DepartureBanTime;//[Offset: 0x3dc, Size: 0x4]
	bool bPlayBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	AkAudioEvent* EngineAudio;//[Offset: 0x3e8, Size: 0x8]
	TrainStateComponent* TrainStateComp;//[Offset: 0x3f8, Size: 0x8]
	ApexRail* LocalDrivingRail;//[Offset: 0x400, Size: 0x8]
	bool bPenetrateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	ApexRail* ServerDrivingRail;//[Offset: 0x410, Size: 0x8]
	float PreCalcNextRailSeconds;//[Offset: 0x418, Size: 0x4]
	ApexRail* ServerNextDrivingRail;//[Offset: 0x420, Size: 0x8]
	ApexRail* LastDrivingRail;//[Offset: 0x428, Size: 0x8]
	bool bForceDetectedFlash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 0x1]
	bool bLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	TrainInfo Locomotives;//[Offset: 0x440, Size: 0x28]
	TrainInfo[] Coachs;//[Offset: 0x468, Size: 0x10]
	float MAXERRORDISTANCE;//[Offset: 0x478, Size: 0x4]
	int VehicleGUID;//[Offset: 0x480, Size: 0x4]
	Transform Offset;//[Offset: 0x490, Size: 0x30]
	bool bRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	float Acceleration;//[Offset: 0x4c4, Size: 0x4]
	float MaxSpeed;//[Offset: 0x4c8, Size: 0x4]
	float TrainRuntime;//[Offset: 0x4cc, Size: 0x4]
	bool bOpenParkTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	FString TrainName;//[Offset: 0x4d8, Size: 0x10]
	bool bStartWithNearestPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	float DebugStart;//[Offset: 0x4ec, Size: 0x4]
	enum StartUpType;//[Offset: 0x4f0, Size: 0x1]
	float ManualParkingWatingTime;//[Offset: 0x4f4, Size: 0x4]
	FName RailTag;//[Offset: 0x4f8, Size: 0x8]
	TrainSaveData StateSnapShot;//[Offset: 0x540, Size: 0x18]
	float PenetrateCharacterDistance;//[Offset: 0x564, Size: 0x4]
	Vector BoxSize;//[Offset: 0x568, Size: 0xc]
	Vector BoxLocation;//[Offset: 0x574, Size: 0xc]
	bool bShowPenetrateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	float PenetrateCheckDistance;//[Offset: 0x584, Size: 0x4]
	void SwitchTrainControlStateTrack(out const ChapterParams Params);// 0x7a4dc4c
	void SwitchTrainControlState(ApexPlayerController* Controller, bool bManual);// 0x7a4de30
	void SetTrainMaxSpeed(out const ChapterParams Params);// 0x7a4da68
	void SetTrainDistance(float Distance);// 0x7a4d108
	void ServerChangeState(enum TargetStateType);// 0x7a4d1c4
	float SelectARandomRail();// 0x7a4d810
	void OnRep_ServerNext();// 0x551d2f4
	void OnRep_SaveData();// 0x48af844
	void OnRep_locomotivesInfo();// 0x56316d0
	void OnRep_Hidden();// 0x7a4e034
	void Onrep_GUID();// 0x54e8118
	void OnRep_CurrentState();// 0x4fadc50
	void OnRep_CoachInfo();// 0x7a4d844
	void NetMulticast_ChangeState(enum TargetStateType, TrainSaveData TheStateSnapShot, bool bManual);// 0x7a4d288
	void Multi_SetDrivingRail(ApexRail* Rail, bool bInit, float Distance);// 0x7a4d644
	void Multi_ChangeRail(ApexRail* Rail);// 0x7a4d580
	void Hidden(bool bNewHidden);// 0x7a4df70
	Transform GetTrainTransform();// 0x7a4d4a4
	Transform GetTrainTrans();// 0xa0f09f4
	Vector GetTrainStationLocation(bool bCurrentStation);// 0x7a4d858
	enum GetTrainState();// 0xa0f09d4
	Rotator GetTrainRotation();// 0x7a4d510
	Vector GetTrainLocation();// 0x7a4d548
	Vector GetSafeLocation(float DistanceAlgongRail);// 0x7a4cdfc
	int GetNextStationIndex();// 0x7a4d928
	float GetDistancePercent();// 0x7a4e048
	int GetCoachsNum();// 0x7a4d0cc
	Vector GetCoachLocation(int CoachIndex);// 0x7a4cf88
	TrainCoach* GetCoach(int CoachIndex);// 0x7a4cec4
	void EnterPoint(FString Tag);// 0x7a4d974

--------------------------------
Class: ChapterParams
	ChapterParam[] Params;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ChapterParam
	FString VariableName;//[Offset: 0x0, Size: 0x10]
	float FloatValue;//[Offset: 0x10, Size: 0x4]
	FString StringValue;//[Offset: 0x18, Size: 0x10]
	int NumberValue;//[Offset: 0x28, Size: 0x4]
	enum Type;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: TrainCoach.Actor.Object
	FString ID;//[Offset: 0x2f8, Size: 0x10]
	float SimulatedMoveDistance;//[Offset: 0x344, Size: 0x4]
	float BodyLength;//[Offset: 0x348, Size: 0x4]
	int CoachKey;//[Offset: 0x34c, Size: 0x4]
	TargetPoint* MoveProxy;//[Offset: 0x358, Size: 0x8]
	ApexTrain* TrainOwner;//[Offset: 0x368, Size: 0x8]
	PrimitiveComponent*[] IndirectOptimizeComps;//[Offset: 0x370, Size: 0x10]
	bool bOpentClientOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	float CoachCullDistance;//[Offset: 0x384, Size: 0x4]
	float InteractiveDistance;//[Offset: 0x388, Size: 0x4]
	bool bCloseSimulateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	Vector BoxExtent;//[Offset: 0x390, Size: 0xc]
	Transform BoxOffset;//[Offset: 0x3a0, Size: 0x30]
	bool bApplyAttachmentReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	StaticMeshComponent* CoachMainMesh;//[Offset: 0x3d8, Size: 0x8]
	NavMeshSurfaceComponent* NavMeshSurfaceComponent;//[Offset: 0x3e0, Size: 0x8]
	void OnRep_Coachkey();// 0x7eaf298
	void OnCoachTransformUpdate();// 0xa1d39f8
	bool IsInFrustum();// 0x7eaf260
	void Hidden(bool bNewHidden);// 0x7eaf160
	int GetPingType();// 0xa17eca8
	bool CheckTeammateOn();// 0x7eaf128
	void AddIndirectOptimizeComp(PrimitiveComponent* TargetComp);// 0x7eaf1e4

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: NavMeshSurfaceComponent.SceneComponent.ActorComponent.Object
	bool bEnableTickUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float UpdateInterval;//[Offset: 0x26c, Size: 0x4]
	bool bNeedGenerateNavLinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	void UpdateSurface();// 0x7d6ad14

--------------------------------
Class: TrainSaveData
	float Velocity;//[Offset: 0x0, Size: 0x4]
	float DistanceToStartPoint;//[Offset: 0x4, Size: 0x4]
	float Timestamp;//[Offset: 0x8, Size: 0x4]
	ApexRail* Rail;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ApexRail.Actor.Object
	ApexTrain* SimulateTrain;//[Offset: 0x270, Size: 0x8]
	float DrivingTime;//[Offset: 0x278, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 0x1]
	int AutoBrakeEventID;//[Offset: 0x280, Size: 0x4]
	int ManualBrakeEventID;//[Offset: 0x284, Size: 0x4]
	int DepartureEventID;//[Offset: 0x288, Size: 0x4]
	int ManualParkingEventID;//[Offset: 0x28c, Size: 0x4]
	int AutoParkingEventID;//[Offset: 0x290, Size: 0x4]
	int BinNum;//[Offset: 0x294, Size: 0x4]
	class StopSuplyBin* BinClass;//[Offset: 0x298, Size: 0x8]
	StopSuplyBin*[] StopBins;//[Offset: 0x2a0, Size: 0x10]
	StopSuplyBin*[] SharedBins;//[Offset: 0x2b0, Size: 0x10]
	<int,UMVehiclePoint*> FeaturePoints;//[Offset: 0x2c0, Size: 0x50]
	SplineComponent* RailEditorComp;//[Offset: 0x310, Size: 0x8]
	SplineComponent* RailRuntimeComp;//[Offset: 0x318, Size: 0x8]
	bool bFinishRailBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	float RTRailSubLength;//[Offset: 0x338, Size: 0x4]
	ApexRail*[] NextStations;//[Offset: 0x340, Size: 0x10]
	ApexRail*[] PreStations;//[Offset: 0x350, Size: 0x10]
	FString StationName;//[Offset: 0x360, Size: 0x10]
	int StationIndex;//[Offset: 0x370, Size: 0x4]
	float WaitDuration;//[Offset: 0x374, Size: 0x4]
	float RailLength;//[Offset: 0x378, Size: 0x4]
	bool bDrawOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	StaticMesh* OrientationMesh;//[Offset: 0x380, Size: 0x8]
	MaterialInterface* OrientationMat;//[Offset: 0x388, Size: 0x8]
	bool bNeedDrawMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float RailMeshPerLen;//[Offset: 0x394, Size: 0x4]
	StaticMesh* RailMesh;//[Offset: 0x398, Size: 0x8]
	void OnFinishRailBuild();// 0xa1d39f8
	Vector GetStationLocation();// 0x7a33088
	int GetStationIndex();// 0xa0edb88
	Vector GetStationEndLocation();// 0x7a33050
	FString GetPointTagInScaleY(float TagValue);// 0xa1d39f8
	FString GetPointTagInScaleX(float TagValue);// 0xa1d39f8
	void AutoSetTangent(float Tension, bool bStationaryEndpoints);// 0x7a32f10

--------------------------------
Class: StopSuplyBin.Actor.Object
	Vector LeftDoorDefaultLocation;//[Offset: 0x270, Size: 0xc]
	Vector RightDoorDefaultLocation;//[Offset: 0x27c, Size: 0xc]
	Vector BinDefaultLocation;//[Offset: 0x288, Size: 0xc]
	SceneComponent* LeftDoorGroup;//[Offset: 0x298, Size: 0x8]
	SceneComponent* RightDoorGroup;//[Offset: 0x2a0, Size: 0x8]
	SceneComponent* BinGroup;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystemComponent* OpenParticleComp;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystemComponent* FlashParticleComp;//[Offset: 0x2b8, Size: 0x8]
	class BinActor* SuplyBinClass;//[Offset: 0x2c0, Size: 0x8]
	BinActor* SuplyBin;//[Offset: 0x2c8, Size: 0x8]
	bool bBinOpenState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bNeedBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	CurveVector* DoorRotateCurve;//[Offset: 0x2d8, Size: 0x8]
	TimelineComponent* DoorRotateTimeLineComp;//[Offset: 0x2e0, Size: 0x8]
	CurveVector* DoorLiftCurve;//[Offset: 0x2e8, Size: 0x8]
	TimelineComponent* DoorLiftTimeLineComp;//[Offset: 0x2f0, Size: 0x8]
	CurveVector* BinLiftCurve;//[Offset: 0x2f8, Size: 0x8]
	TimelineComponent* BinLCTimeLineComp;//[Offset: 0x300, Size: 0x8]
	byte TimelineDirection;//[Offset: 0x308, Size: 0x1]
	void SwitchFlashLightState(bool bBeginFlash);// 0x7e80bf0
	void PlayAnimationFromEnd();// 0x7e80ee0
	void PlayAnimation();// 0x7e80ef4
	void Onrep_BinOnpenState();// 0x5671be8
	void OnLerpDoorRotate(Vector interpolatedVal);// 0x4b693f0
	void OnLerpDoorLift(Vector interpolatedVal);// 0x7e80db8
	void OnLerpBinLift(Vector interpolatedVal);// 0x7e80cc8
	void OnFinishLerpDoorRotate();// 0x50e0378
	void OnFinishDoorLift();// 0x50e0360
	void OnFinishBinLift();// 0x53ea048
	enum GetStopBinState();// 0x7e80f08

--------------------------------
Class: BinActor.SignificanceManagedActor.Actor.Object
	enum eZoneType;//[Offset: 0x310, Size: 0x1]
	LootZoneTypeInfo LootZoneTypeInfo;//[Offset: 0x318, Size: 0x18]
	enum eBuildingType;//[Offset: 0x330, Size: 0x1]
	SceneComponent* BinWrapper;//[Offset: 0x338, Size: 0x8]
	StaticMeshComponent* BinCover;//[Offset: 0x340, Size: 0x8]
	StaticMeshComponent* BinLight;//[Offset: 0x348, Size: 0x8]
	StaticMeshComponent* BinBottom;//[Offset: 0x350, Size: 0x8]
	StaticMeshComponent* BinTray;//[Offset: 0x358, Size: 0x8]
	StaticMeshComponent* BinBase;//[Offset: 0x360, Size: 0x8]
	MaterialInterface* BlueMat;//[Offset: 0x368, Size: 0x8]
	MaterialInterface* BlueLightMat;//[Offset: 0x370, Size: 0x8]
	ParticleSystemComponent* ParticleSys;//[Offset: 0x378, Size: 0x8]
	CapsuleComponent* KillBox;//[Offset: 0x380, Size: 0x8]
	float KillBoxActiveTime;//[Offset: 0x388, Size: 0x4]
	BinDetectedBox[] Boxs;//[Offset: 0x390, Size: 0x10]
	BinDetectedBox AutoOpenBox;//[Offset: 0x3a0, Size: 0x18]
	float NeedTraceDist;//[Offset: 0x3b8, Size: 0x4]
	float NoBtnNeedTraceTime;//[Offset: 0x3bc, Size: 0x4]
	float Duration;//[Offset: 0x3c0, Size: 0x4]
	CurveVector* VectorCurve;//[Offset: 0x3c8, Size: 0x8]
	CurveFloat* FloatCurve;//[Offset: 0x3d0, Size: 0x8]
	Vector RotateAxis;//[Offset: 0x3d8, Size: 0xc]
	bool HasCloseOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	bool CanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 0x1]
	bool IsAICanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6, Size: 0x1]
	Vector ForbiddenTransLocation;//[Offset: 0x3e8, Size: 0xc]
	float TriggerOutDist;//[Offset: 0x3f4, Size: 0x4]
	Vector PropNotOpenOffset;//[Offset: 0x3f8, Size: 0xc]
	int NotOpenShowPropLevel;//[Offset: 0x404, Size: 0x4]
	float PropHeight;//[Offset: 0x408, Size: 0x4]
	<int,int> PropCount2TotalWidth;//[Offset: 0x410, Size: 0x50]
	float DefaultTotalWidth;//[Offset: 0x460, Size: 0x4]
	float GenerateDelay;//[Offset: 0x464, Size: 0x4]
	bool bIsDynamicSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	int MaterialNum;//[Offset: 0x46c, Size: 0x4]
	int[] ItemsList;//[Offset: 0x470, Size: 0x10]
	FName ZoneVolumeID;//[Offset: 0x484, Size: 0x8]
	FName SpawnItemTableName;//[Offset: 0x48c, Size: 0x8]
	int MaxSpawnItemRetryCount;//[Offset: 0x494, Size: 0x4]
	int SpawnItemCount;//[Offset: 0x498, Size: 0x4]
	int MiniSpawnItemCount;//[Offset: 0x49c, Size: 0x4]
	FName OpenBinSoundName;//[Offset: 0x4a0, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x4a8, Size: 0x8]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	ActivityDynamicMaterialComponent* DynamicMaterialComp;//[Offset: 0x4b8, Size: 0x8]
	int OpenBottomEventID;//[Offset: 0x4f0, Size: 0x4]
	TimelineComponent* MoveTimeline;//[Offset: 0x4f8, Size: 0x8]
	TimelineComponent* RotateTimeline;//[Offset: 0x500, Size: 0x8]
	byte MoveTimelineDirection;//[Offset: 0x509, Size: 0x1]
	byte RotateTimelineDirection;//[Offset: 0x50b, Size: 0x1]
	enum IsAlreadyOpen;//[Offset: 0x528, Size: 0x1]
	Vector TimelineVector;//[Offset: 0x52c, Size: 0xc]
	float TimelineRotate;//[Offset: 0x538, Size: 0x4]
	Vector TrayTimelineVector;//[Offset: 0x53c, Size: 0xc]
	float TrayTimelineRotate;//[Offset: 0x548, Size: 0x4]
	PickUpWrapperActor*[] PickUpList;//[Offset: 0x550, Size: 0x10]
	SceneComponent* BinBottomWrapper;//[Offset: 0x560, Size: 0x8]
	SceneComponent* BinTrayWrapper;//[Offset: 0x568, Size: 0x8]
	ParticleSystemComponent* BottomParticleSys;//[Offset: 0x570, Size: 0x8]
	int[] Heros;//[Offset: 0x578, Size: 0x10]
	float BottomDuration;//[Offset: 0x588, Size: 0x4]
	CurveVector* TrayVectorCurve;//[Offset: 0x590, Size: 0x8]
	CurveFloat* BottomFloatCurve;//[Offset: 0x598, Size: 0x8]
	Vector BottomRotateAxis;//[Offset: 0x5a0, Size: 0xc]
	Vector[] BottomPropPos;//[Offset: 0x5b0, Size: 0x10]
	float BottomGenerateDelay;//[Offset: 0x5c0, Size: 0x4]
	bool bIsBottomDynamicSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	int[] BottomItemsList;//[Offset: 0x5c8, Size: 0x10]
	FName BottomSpawnItemTableName;//[Offset: 0x5d8, Size: 0x8]
	int BottomSpawnItemCount;//[Offset: 0x5e0, Size: 0x4]
	TimelineComponent* TrayMoveTimeline;//[Offset: 0x5e8, Size: 0x8]
	TimelineComponent* BottomRotateTimeline;//[Offset: 0x5f0, Size: 0x8]
	byte TrayMoveTimelineDirection;//[Offset: 0x5f9, Size: 0x1]
	byte BottomRotateTimelineDirection;//[Offset: 0x5fb, Size: 0x1]
	enum IsBottomOpen;//[Offset: 0x618, Size: 0x1]
	bool IsBlueBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	MaterialInterface* RedMat;//[Offset: 0x620, Size: 0x8]
	MaterialInterface* RedLightMat;//[Offset: 0x628, Size: 0x8]
	int GroupID;//[Offset: 0x630, Size: 0x4]
	bool IsSpatialGroupBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1]
	FName SpatialGroupName;//[Offset: 0x638, Size: 0x8]
	int ID;//[Offset: 0x640, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x648, Size: 0x10]
	TimerHandle KillBoxActiveTimer;//[Offset: 0x660, Size: 0x8]
	float MinAdditinalSpeed;//[Offset: 0x684, Size: 0x4]
	float MaxAdditinalSpeed;//[Offset: 0x688, Size: 0x4]
	float TreasureSpawnDely;//[Offset: 0x68c, Size: 0x4]
	enum IceBinState;//[Offset: 0x690, Size: 0x1]
	enum BinType;//[Offset: 0x691, Size: 0x1]
	int IceCoinItemID;//[Offset: 0x694, Size: 0x4]
	int MinIceCoinNum;//[Offset: 0x698, Size: 0x4]
	int MaxIceCoinNum;//[Offset: 0x69c, Size: 0x4]
	int GrenadeItemID;//[Offset: 0x6a0, Size: 0x4]
	int MinIceGrenadeNum;//[Offset: 0x6a4, Size: 0x4]
	int MaxIceGrenadeNum;//[Offset: 0x6a8, Size: 0x4]
	float IceUnFreezeTime;//[Offset: 0x6ac, Size: 0x4]
	float IceUnFreezeValue;//[Offset: 0x6b0, Size: 0x4]
	float MiniMapWarningTime;//[Offset: 0x6b4, Size: 0x4]
	FName IceFreezeParamName;//[Offset: 0x6b8, Size: 0x8]
	FName IceFreezeMatParamName;//[Offset: 0x6c0, Size: 0x8]
	FString IceBinBankName;//[Offset: 0x6c8, Size: 0x10]
	FName IceMeltSoundName;//[Offset: 0x6d8, Size: 0x8]
	FString SpawnBankName;//[Offset: 0x6e0, Size: 0x10]
	FName SpawnSoundName;//[Offset: 0x6f0, Size: 0x8]
	int SpawnSoundItemID;//[Offset: 0x6f8, Size: 0x4]
	Vector BoxSpawnOffset;//[Offset: 0x6fc, Size: 0xc]
	bool IsNeedShowIceBinLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	StaticMeshComponent* IceMesh;//[Offset: 0x710, Size: 0x8]
	ParticleSystemComponent* IceEffect;//[Offset: 0x718, Size: 0x8]
	MaterialInstanceDynamic* DynamicLightMeshMatrial;//[Offset: 0x720, Size: 0x8]
	int VipActivityType;//[Offset: 0x740, Size: 0x4]
	int CertaintyDropActivityItem;//[Offset: 0x744, Size: 0x4]
	bool IsShowNotOpenBinTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 0x1]
	void TrayMoveTimelineFinishCallback();// 0x7b200dc
	void TrayMoveTimelineCallback(Vector Val);// 0x585d410
	void StartUnFreeze();// 0x7b1fd7c
	void SetID(int InID, enum InReason);// 0x7b1fe14
	void SetCanOpen(bool bCanOpen);// 0x7b20450
	void RotateTimelineFinishCallback();// 0x7b2026c
	void RotateTimelineCallback(float Val);// 0x7b202b4
	void PlayTimeline(bool bReverse, bool bToEnd);// 0x7b20124
	void PlaySpawnSound();// 0xa104854
	void OnRep_RepIsBottomOpen();// 0x5db2980
	void OnRep_RepIsBlueBin();// 0x4fcff1c
	void OnRep_RepIsAlreadyOpen();// 0x5667824
	void OnRep_IsFreeze();// 0x7b1fd90
	void NotOpenBinShowTips();// 0x7b20404
	void MoveTimelineFinishCallback();// 0x7b203bc
	void MoveTimelineCallback(Vector Val);// 0x509b94c
	bool IsFreeze();// 0x7b1fda4
	bool IsCanOpen();// 0x7b20418
	void DynamicBinEarlyGenerate();// 0x7b1fe00
	void CloseBin();// 0x7b2052c
	void BP_OnServerOpen(Character* OpenCharacter);// 0xa1d39f8
	void BP_BinOpen_Callback();// 0xa1d39f8
	void BP_BinBottomOpen_Callback();// 0xa1d39f8
	void BottomRotateTimelineFinishCallback();// 0x7b20094
	void BottomRotateTimelineCallback(float Val);// 0x5647a70
	void BottomPlayTimeline(bool bReverse, bool bToEnd);// 0x7b1ff4c

--------------------------------
Class: LootZoneTypeInfo
	enum LootZoneType;//[Offset: 0x0, Size: 0x1]
	FString CustomZoneType;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BinDetectedBox
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xf8, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1]
	void Stop();// 0xa392920
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x99c4ac0
	void SetTimelineLengthMode(byte NewLengthMode);// 0x99c4d70
	void SetTimelineLength(float NewLength);// 0x99c4e04
	void SetPlayRate(float NewRate);// 0x99c4fdc
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x99c5188
	void SetNewTime(float NewTime);// 0x99c4f0c
	void SetLooping(bool bNewLooping);// 0x99c50b0
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x99c49d8
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x99c4cd4
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x99c4ba8
	void ReverseFromEnd();// 0x58ea9f8
	void Reverse();// 0x99c5318
	void PlayFromStart();// 0x99c532c
	void Play();// 0xa392940
	void OnRep_Timeline();// 0x99c49c4
	bool IsReversing();// 0x99c52cc
	bool IsPlaying();// 0xa392900
	bool IsLooping();// 0x99c506c
	float GetTimelineLength();// 0x99c4ed8
	float GetPlayRate();// 0x99c4fa0
	float GetPlaybackPosition();// 0x99c514c
	bool GetIgnoreTimeDilation();// 0x99c4c90

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: UMVehiclePoint.TargetPoint.Actor.Object
	int EventId;//[Offset: 0x270, Size: 0x4]
	ApexRail* TargetRail;//[Offset: 0x278, Size: 0x8]
	int InputKey;//[Offset: 0x280, Size: 0x4]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x560, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x5c8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5e0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5f8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x610, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x62c, Size: 0x4]
	float Duration;//[Offset: 0x630, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x636, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x637, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 0x1]
	float LoopPosition;//[Offset: 0x63c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x640, Size: 0xc]
	void UpdateSpline();// 0x99b17d4
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x99b0744
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x99b0228
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x99b1730
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x99b03bc
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x99b05b0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x99b091c
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x99b0010
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x99b09f8
	void SetSplineLocalPoints(out const Vector[] Points);// 0x99b0840
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x99b168c
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x4fba82c
	void SetDrawDebug(bool bShow);// 0x99b15f0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x99aebc0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x99b13b4
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x99b14f8
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x99b0cc8
	bool IsClosedLoop();// 0x99b137c
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x99ae51c
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x99ad748
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x99ae340
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x99add20
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x99aff6c
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x99ae84c
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x99adad8
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x99ae6b4
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x99ad600
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99af4c0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x99ae24c
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x99ad2e8
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x99af160
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x99ade20
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x99ad990
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99afb10
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x99ae5c0
	byte GetSplinePointType(int PointIndex);// 0x99b014c
	float GetSplineLength();// 0xa38dc90
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x99ad0a8
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x5eda9a0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x99adf9c
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x99ad848
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99af5b4
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x99ae408
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x99ad1a4
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99af2dc
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x99ae068
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x99ad4b8
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99af3cc
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x99ae158
	int GetNumberOfSplinePoints();// 0xa38dccc
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4625130
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4e3ce7c
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41efc58
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x99aefc0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x99aee70
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99af708
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x99ae9bc
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x99aecb4
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x99aeda4
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x99adbd8
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99afd14
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x99ae758
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x99aea58
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x99af90c
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x99acad0
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x99ac688
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x99acce0
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x99ac810
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x99acbd8
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x99ac8c4
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x99ac9c8
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x99acef0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x99acff8
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x99acde8
	void ClearSplinePoints(bool bUpdateSpline);// 0x99b12e0
	void AddSplineWorldPoint(out const Vector Position);// 0x99b0c20
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x99b0dac
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x99b0f40
	void AddSplineLocalPoint(out const Vector Position);// 0x99b0b78
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x99b1088
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x99b11bc

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: ApexSoundSpeakerComponent.ActorComponent.Object
	bool Muted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	AkComponent* ComponentToPlay;//[Offset: 0x100, Size: 0x8]
	void StopSoundByType();// 0x7a49934
	void StopSoundById(int PlayingID, int Duration);// 0x7a497fc
	void SetSwitchByType(FName SwitchGroup, FName SwitchState);// 0x7a4a23c
	void SetState(FName StateGroup, FName State);// 0x7a4a534
	void SetRTPCValueByType(FName RTPC, float Value, int InterpolationTimeMs);// 0x7a4a378
	void SetRegionByType();// 0xa0f08a4
	int PlaySoundByName(FString AkEventName, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool StopWhenOwnerDestroyed);// 0x7a49948
	int PlaySound(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool StopWhenOwnerDestroyed);// 0x7a49ddc

--------------------------------
Class: TrainStateComponent.ActorComponent.Object
	<enum,TrainSaveData> PendingState;//[Offset: 0xf8, Size: 0x50]
	<enum,TrainState*> TrainStateMap;//[Offset: 0x150, Size: 0x50]
	ApexTrain* Train;//[Offset: 0x1a0, Size: 0x8]
	TrainState* CurrentState;//[Offset: 0x1c0, Size: 0x8]
	TrainstateConfig[] StateConfig;//[Offset: 0x1d0, Size: 0x10]

--------------------------------
Class: TrainState.Object
	AkAudioEvent*[] TempAudios;//[Offset: 0x28, Size: 0x10]
	AkAudioEvent*[] Audios;//[Offset: 0x58, Size: 0x10]
	bool bAutoPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int EventId;//[Offset: 0x6c, Size: 0x4]
	bool bShowBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	ApexTrain* Train;//[Offset: 0x78, Size: 0x8]
	ApexRail* CurrentRail;//[Offset: 0x80, Size: 0x8]
	TrainStateComponent* TrainStateMachine;//[Offset: 0x88, Size: 0x8]
	void SelfPlayAudiosInTurn();// 0x7eb2b20
	void PlayAudiosInTurn(AkAudioEvent*[] InAudios);// 0x7eb2988
	void BroadcastText();// 0x7eb2b00

--------------------------------
Class: TrainstateConfig
	TrainState* State;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrainInfo
	float BodyLength;//[Offset: 0x0, Size: 0x4]
	class Actor* BodyClass;//[Offset: 0x8, Size: 0x8]
	float Padding;//[Offset: 0x10, Size: 0x4]
	bool bAllowIgnoreMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float DistanceTOLocomotive;//[Offset: 0x18, Size: 0x4]
	TrainCoach* Coach;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ConveyorBeltCamp.Actor.Object
	ApexRail* RailCache;//[Offset: 0x280, Size: 0x8]
	ConveyorBeltVehicle*[] ActiveBelts;//[Offset: 0x300, Size: 0x10]
	ConveyorBeltVehicle*[] SleepBelts;//[Offset: 0x310, Size: 0x10]
	bool bActiveSpawnerAtBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	class ConveyorBeltVehicle* ConveyorBeltClass;//[Offset: 0x328, Size: 0x8]
	FString TransTag;//[Offset: 0x330, Size: 0x10]
	ApexRail* RunRail;//[Offset: 0x340, Size: 0x8]
	int BeltsPoolCapacity;//[Offset: 0x348, Size: 0x4]
	bool bUseCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	ConveyCampGroup[] Groups;//[Offset: 0x350, Size: 0x10]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	void UpdateRailLocation();// 0x7b99174
	void StartSpawnConveyBelt(ConveyCampGroup InGroup, int Index);// 0x7b98eb4
	void SpawnCamp();// 0x7b99188
	void PlayEffectOnBoxSwitchState(bool bUp);// 0x7b98fec
	void OnVehicleDestroyed(Actor* Actor);// 0x7b990b8
	void OnRunRailChanged(Vector BeginLocation, Vector EndLocation);// 0xa1d39f8
	void OnBoxSwitchState(bool bUp);// 0xa1d39f8

--------------------------------
Class: ConveyCampGroup
	int BoxNum;//[Offset: 0x0, Size: 0x4]
	int BoxSpawnInterval;//[Offset: 0x4, Size: 0x4]
	int NextGroupInterval;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ConveyorBeltVehicle.ApexTrain.Actor.Object
	AKAudioEventArgs[] CacheAudio;//[Offset: 0x5d0, Size: 0x10]
	FString IgnoreDirectionName;//[Offset: 0x5e8, Size: 0x10]
	void OnReceivedTrainStateChanged(enum TargetType);// 0x7b99890
	void NetMulticastSetTrans(Transform Intrans);// 0x7b9974c
	void MarkDestroy();// 0xa1116e8

--------------------------------
Class: AKAudioEventArgs
	AkAudioEvent* Audio;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ParticleEffectFactory.Info.Actor.Object
	<int,class ParticleEffectBase> MapEffectID2CameraParticleEffectCfg;//[Offset: 0x270, Size: 0x50]

--------------------------------
Class: ParticleEffectBase.Object
	int ParticleEffectID;//[Offset: 0x28, Size: 0x4]
	int ParticleDisplayDuration;//[Offset: 0x2c, Size: 0x4]
	int DelayHideTime;//[Offset: 0x30, Size: 0x4]
	bool DestroyWhenHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool DeactivatePSCWhenHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool ShouldRefreshWhenCameraModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bUseTranslucencySortPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	int TranslucencySortPriority;//[Offset: 0x38, Size: 0x4]
	delegate OnShow;//[Offset: 0x3c, Size: 0x10]
	delegate OnReqHide;//[Offset: 0x4c, Size: 0x10]
	bool EnableSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	ParticleSystem* ParticleTemplate;//[Offset: 0x60, Size: 0x28]
	ParticleSystemComponent* ParticleSystemComp;//[Offset: 0x90, Size: 0x8]
	FName BindSocket;//[Offset: 0x98, Size: 0x8]
	Actor* InstigatorActor;//[Offset: 0xa0, Size: 0x8]
	void SetParticleEffectID(int EffectID);// 0x7d850b0
	void SetOnShowDelegate(delegate OnShowCallBack);// 0x7d85280
	void SetOnReqHideDelegate(delegate OnReqHideCallBack);// 0x7d85188
	void ReqShow(bool bNewCreate);// 0x7d8545c
	bool ReqHide(bool ForceImmediatelyHide);// 0x7d853b4
	void PreShowParticleEffect();// 0xa1534d8
	void PreLoad();// 0x7d854f8
	void PostShowParticleEffect();// 0xa1534bc
	void OnReqHideParticleEffect();// 0xa153484
	void OnHideParticleEffect();// 0xa1534a0
	ParticleSystemComponent* GetParticleSystemComp();// 0x7d85378
	int GetParticleEffectID();// 0x7d8514c

--------------------------------
Class: AudioEffectManager.ActorComponent.Object
	<FName,class AudioEffect> MapAudioEffectID2AudioEffectCfg;//[Offset: 0xf8, Size: 0x50]
	FString[] BanksNames;//[Offset: 0x148, Size: 0x10]
	enum AudioAttachMode;//[Offset: 0x158, Size: 0x1]
	<FName,AudioEffect*> MapAudioID2InstancedAudioEffect;//[Offset: 0x160, Size: 0x50]
	<FName,int> MapAudioID2LastInstancedPlayingID;//[Offset: 0x1b0, Size: 0x50]
	void StopParachuteAudioEvent(FName AudioEffectID);// 0x7aca85c
	void StopAudio(FName AudioEffectID, int PlayingID);// 0x7aca954
	void PostParachuteAudioEvent(FName AudioEffectID);// 0x7aca8d8
	int PlayAudio(FName AudioEffectID, bool StopWhenAttachedToDestroyed, Actor* AudioInstigator);// 0x7acaa0c

--------------------------------
Class: AudioEffect.Object
	AkAudioEvent* AudioEvent_Autonomous;//[Offset: 0x28, Size: 0x8]
	FName AttachSocket;//[Offset: 0x30, Size: 0x8]
	Vector AttachOffset;//[Offset: 0x38, Size: 0xc]
	AkComponent* AkComponent;//[Offset: 0x48, Size: 0x8]
	void Stop();// 0x7aca1a4
	int PlayAtAttachment(Actor* AttachedActor, bool StopWhenAttachedToDestroyed, Actor* AudioInstigator);// 0x7aca1b8

--------------------------------
Class: GlobalSpeakerComponent.ApexSoundSpeakerComponent.ActorComponent.Object
	void SettActorSwitch(Actor* Target, FName SwitchGroup, FName SwitchState);// 0x7c804ac
	void SetComponentSwitch(AkComponent* Target, FName SwitchGroup, FName SwitchState);// 0x7c8065c
	void SetActorRTPCValue(Actor* Target, FName RTPC, float Value, int InterpolationTimeMs);// 0x7c8080c
	int PlayWorldObjectSoundByName(Actor* Target, FName EventName, bool StopWhenOwnerDestroyed);// 0x7c80e40
	int PlayWorldObjectSound(enum SoundType, Actor* Target, AkAudioEvent* AkEvent, bool StopWhenOwnerDestroyed);// 0x7c8100c
	int PlayUISoundByName(FName EventName);// 0x7c81250
	int PlayUISound(AkAudioEvent* AkEvent);// 0x7c81314
	int PlaySoundAtLocationByName(FName EventName, Vector Location, Rotator Orientation);// 0x7c80a3c
	int PlaySoundAtLocation(enum SoundType, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation);// 0x7c80c00
	int PlayBGMByName(FName EventName);// 0x7c813d8
	int PlayBGM(AkAudioEvent* AkEvent);// 0x7c8149c
	int Play2DSound(enum SoundType, AkAudioEvent* AkEvent);// 0x7c80364

--------------------------------
Class: AudioRegionMgrComponent.ActorComponent.Object
	<AkComponent*> EnemyPositionComponents;//[Offset: 0x108, Size: 0x50]
	<AkComponent*> RemotePositionComponents;//[Offset: 0x158, Size: 0x50]
	AkComponent*[] RemoteUpdatedCompsCache;//[Offset: 0x1a8, Size: 0x10]
	AkComponent* RiverAmbComp;//[Offset: 0x1b8, Size: 0x8]
	AkComponent* MagmaAmbComp;//[Offset: 0x1c0, Size: 0x8]
	FName[] RowNames;//[Offset: 0x1c8, Size: 0x10]
	AudioRegionInitializer* AudioRegionIniter;//[Offset: 0x1d8, Size: 0x8]
	AudioRegion* AudioRegionCore;//[Offset: 0x1e0, Size: 0x8]
	<int,AudioRegion*> EnemyPositionCompWithAudioRegionsMap;//[Offset: 0x1e8, Size: 0x50]
	RiverAmbient* RiverAmbCore;//[Offset: 0x238, Size: 0x8]
	RiverAmbient* MagmaAmbCore;//[Offset: 0x240, Size: 0x8]
	AudioRegion* AudioRegionRemote;//[Offset: 0x248, Size: 0x8]
	void RiverAmbUnloadBank();// 0x7acc21c
	void RiverAmbLoadBank();// 0x7acc230
	void OnRemoteExitAudioRegion(int AkCompId, uint32 RegionID);// 0x7acc244
	void OnRemoteEnterAudioRegion(int AkCompId, uint32 RegionID);// 0x7acc300
	void OnExitAudioRegion(uint32 RegionID);// 0x7acc474
	void OnEnterAudioRegion(uint32 RegionID);// 0x7acc5a8
	void OnEnemyUpdate();// 0x7acc1e0
	void OnEnemyExitAudioRegion(int AkCompId, uint32 RegionID);// 0x7acc3b8
	void OnEnemyEnterAudioRegion(int AkCompId, uint32 RegionID);// 0x7acc4f0
	void MagmaAmbUnloadBank();// 0x7acc1f4
	void MagmaAmbLoadBank();// 0x7acc208

--------------------------------
Class: AudioRegionInitializer.Object

--------------------------------
Class: AudioRegion.Object

--------------------------------
Class: RiverAmbient.Object
	AkComponent* pRiverAmbComp;//[Offset: 0x180, Size: 0x8]

--------------------------------
Class: GameStatisticsReportComponent.ActorComponent.Object
	int ZoneTD;//[Offset: 0x1f4, Size: 0x4]
	LootDronesDataReporter* LootDronesDataReporter;//[Offset: 0x200, Size: 0x8]
	void OnGameStart();// 0x7c6e594

--------------------------------
Class: LootDronesDataReporter.Object
	void OnGameModeFinish();// 0x7d1583c

--------------------------------
Class: BGMManager.ActorComponent.Object
	bool bStopLastBGMActively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	<enum,FName> MapBGMType2AudioEffect;//[Offset: 0x100, Size: 0x50]
	void StopBGM(enum BGMType);// 0x7b1d680
	void SetBGM(enum BGMType, FName AudioEffectID);// 0x7b1d548
	void PlayBGM(enum BGMType);// 0x7b1d73c

--------------------------------
Class: EffectLoaderManager.ActorComponent.Object
	EffectLoaderGroupManager*[] HighGroupManagers;//[Offset: 0x108, Size: 0x10]
	EffectLoaderGroupManager*[] MiddleGroupManagers;//[Offset: 0x118, Size: 0x10]
	EffectLoaderGroupManager*[] LowGroupManagers;//[Offset: 0x128, Size: 0x10]
	EffectLoaderGroupManager*[] GroupManagers;//[Offset: 0x138, Size: 0x10]
	FString EffectLoaderManagerClassName;//[Offset: 0x148, Size: 0x10]
	ApexCharacter* OwnerCharacter;//[Offset: 0x158, Size: 0x8]

--------------------------------
Class: EffectLoaderGroupManager.Object
	enum PickerType;//[Offset: 0x28, Size: 0x1]
	int PoolNum;//[Offset: 0x2c, Size: 0x4]
	int Score;//[Offset: 0x30, Size: 0x4]
	EffectLoaderAction*[] EffectLoaderActions;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EffectLoaderAction.Object
	EffectLoaderGroupManager* OwnerManager;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GameStateCommonInfo.ActorComponent.Object
	int LineTraceLowestZ;//[Offset: 0xf8, Size: 0x4]
	Vector2D MapHeightRange;//[Offset: 0xfc, Size: 0x8]
	float SeaLevelHeightOffset;//[Offset: 0x104, Size: 0x4]

--------------------------------
Class: ApexHeatShield.Actor.Object
	float LifeTime;//[Offset: 0x2d8, Size: 0x4]
	float StartupTime;//[Offset: 0x2dc, Size: 0x4]
	float DestroyTime;//[Offset: 0x2e0, Size: 0x4]
	float WarningTime;//[Offset: 0x2e4, Size: 0x4]
	float DestroyDelayTime;//[Offset: 0x2e8, Size: 0x4]
	float Realtime;//[Offset: 0x2ec, Size: 0x4]
	float RealtimeSync;//[Offset: 0x2f0, Size: 0x4]
	float TakeDamageInterval;//[Offset: 0x2f4, Size: 0x4]
	float[] TakeDamageValue;//[Offset: 0x2f8, Size: 0x10]
	float MaxHealth;//[Offset: 0x308, Size: 0x4]
	float PoisonCircleAlpha;//[Offset: 0x30c, Size: 0x4]
	AkAudioEvent* CenterDeployAudio;//[Offset: 0x310, Size: 0x28]
	AkAudioEvent* SustainAudio;//[Offset: 0x338, Size: 0x28]
	AkAudioEvent* PoisonSustainAudio;//[Offset: 0x360, Size: 0x28]
	AkAudioEvent* EndingAudio;//[Offset: 0x388, Size: 0x28]
	AkAudioEvent* PoisonEndingAudio;//[Offset: 0x3b0, Size: 0x28]
	AkAudioEvent* DestroyAudio;//[Offset: 0x3d8, Size: 0x28]
	AkAudioEvent* PoisonDestroyAudio;//[Offset: 0x400, Size: 0x28]
	AkAudioEvent* TakeDamageAudio;//[Offset: 0x428, Size: 0x28]
	CapsuleComponent* RangeCapsule;//[Offset: 0x450, Size: 0x8]
	StaticMeshComponent* HeatShieldMesh;//[Offset: 0x458, Size: 0x8]
	CommonAdditiveFadeComponent* AdditiveFadeComponent;//[Offset: 0x460, Size: 0x8]
	PrimitiveComponent* ImpactComponentWeak;//[Offset: 0x468, Size: 0x8]
	enum CurrentState;//[Offset: 0x470, Size: 0x1]
	RadiationCircleStateComponent* RadiationCircleStateComponentWeak;//[Offset: 0x474, Size: 0x8]
	CircleMgrComponent* CircleMgrComponentWeak;//[Offset: 0x47c, Size: 0x8]
	Vector PoisonCirclePos;//[Offset: 0x484, Size: 0xc]
	float PoisonCircleRadius;//[Offset: 0x490, Size: 0x4]
	bool bInWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	bool bIsEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 0x1]
	bool bNeedTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496, Size: 0x1]
	float TakeDamageTime;//[Offset: 0x498, Size: 0x4]
	float CurrentHealth;//[Offset: 0x49c, Size: 0x4]
	int TeamID;//[Offset: 0x4a0, Size: 0x4]
	int CampID;//[Offset: 0x4a4, Size: 0x4]
	int CurrentIndex;//[Offset: 0x4a8, Size: 0x4]
	void PlayAudio(out const AkAudioEvent* AudioEvent, bool bStopWhenAttachedToDestroyed);// 0x79fb6ac
	void OnRepHealth();// 0x55882a8
	void OnRep_RealtimeSync();// 0x5ae2118
	void NotifyHeatSHieldUI();// 0x79fb698
	void NotifyEndUI();// 0x79fb684
	void DisplayWarning();// 0xa1d39f8
	void DisplayTakeDamage();// 0xa1d39f8
	void DisplayStartup();// 0xa1d39f8
	void DisplayDestroy();// 0xa1d39f8
	void DisplayAtWork();// 0xa1d39f8

--------------------------------
Class: CommonAdditiveFadeComponent.AdditiveFadeComponent.SceneComponent.ActorComponent.Object
	void SetIsMixFade(float InIsMixFade);// 0x7b7620c

--------------------------------
Class: AdditiveFadeComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x258, Size: 0x4]
	LinearColor ShapeColorHDR;//[Offset: 0x25c, Size: 0x10]
	float Radius;//[Offset: 0x26c, Size: 0x4]
	float FadeDistance;//[Offset: 0x270, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bAddedToSceneVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	bool bIsMixFade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1]
	void SetRadius(float InRadius);// 0x97e417c

--------------------------------
Class: RadiationCircleStateComponent.ActorComponent.Object
	bool bIsEnableCircleVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bIsEnableCircleRunVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bIsFinalCircleOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	bool bIsPreInitBlueCircleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 0x1]
	bool bIsPreInitBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	RadiationCircleStateRep RadiationCircleStateRep;//[Offset: 0x100, Size: 0x3c]
	int TotalCircleWaveNum;//[Offset: 0x13c, Size: 0x4]
	void SetTotalCircleWaveNum(int CircleWaveNum);// 0x7e055fc
	void OnRep_TotalCircleWaveNum();// 0x7e04114
	void OnRep_RepRadiationCircleStateRep();// 0x5ab9340
	bool IsLessening();// 0xa16a1c0
	bool IsInWhiteCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x7e04128
	bool IsInCircleLessenFrom(out const Vector Location, bool IsPosRebaseUsed);// 0x7e043c8
	bool IsInBlueCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x7e045f0
	bool IsFinalCircleOver();// 0x7e04288
	bool IsCircleValid();// 0x7e042c8
	bool IsActorInWhiteCircle(Actor* InActor);// 0x7e04300
	bool IsActorInCircleLessenFrom(Actor* InActor);// 0x7e04528
	bool IsActorInBlueCircle(Actor* InActor);// 0x7e04750
	bool HasLessened();// 0x7e055b0
	Vector GetWhiteCircle();// 0xa16a204
	int GetTotalCircleWaveNum();// 0x7e056b8
	float GetShrinkDirDistance2CircleLessenFrom(out const Vector Location, bool IsPosRebaseUsed);// 0x7e04818
	float GetPlayerDistPercentBetweenTowCircle();// 0x7e054d8
	Vector GetOrignBlueCircle();// 0x7e05734
	Vector GetNextWhiteCircle();// 0x58f7c00
	float GetLessenProgress();// 0x7e0550c
	bool GetIsPreInitBlueCircle();// 0x7e056f4
	float GetDistPercentBetweenTowCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x7e052b8
	float GetDistance2WhiteCircleCenter(out const Vector Location, bool IsPosRebaseUsed);// 0x7e04c58
	float GetDistance2WhiteCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x7e05098
	float GetDistance2BlueCircleCenter(out const Vector Location, bool IsPosRebaseUsed);// 0x7e04a38
	float GetDistance2BlueCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x7e04e78
	int GetCurCircleWave();// 0xa16a1e8
	float GetCurCircleStatusLastTime();// 0xa16a19c
	float GetCurCircleStatusElapsedTime();// 0x51472c8
	float GetCurCircleSafeZoneTipsElapsedTime();// 0x7e05540
	enum GetCurCircleInfo();// 0x7e05574
	Vector GetBlueCircle();// 0x7e0577c
	float GetActorShrinkDirDistance2CircleLessenFrom(Actor* InActor);// 0x7e04974
	float GetActorDistPercentBetweenTowCircle(Actor* InActor);// 0x7e05414
	float GetActorDistance2WhiteCircleCenter(Actor* InActor);// 0x7e04db4
	float GetActorDistance2WhiteCircle(Actor* InActor);// 0x7e051f4
	float GetActorDistance2BlueCircleCenter(Actor* InActor);// 0x7e04b94
	float GetActorDistance2BlueCircle(Actor* InActor);// 0x7e04fd4
	void BroadcastShutDownCircle();// 0xa16a228

--------------------------------
Class: RadiationCircleStateRep
	enum CircleInfo;//[Offset: 0x0, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x4, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x10, Size: 0xc]
	Vector NextWhiteCircle;//[Offset: 0x1c, Size: 0xc]
	int CircleWaveIndex;//[Offset: 0x28, Size: 0x4]
	float StartTimeSpan;//[Offset: 0x2c, Size: 0x4]
	float EndTimeSpan;//[Offset: 0x30, Size: 0x4]
	bool IsPreInitMiniMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: CircleMgrComponent.ActorComponent.Object
	RadiationCircleStateComponent* CircleStateComponent;//[Offset: 0x108, Size: 0x8]
	int CareerNumberTips;//[Offset: 0x124, Size: 0x4]
	float CircleBlueTimeScale;//[Offset: 0x128, Size: 0x4]
	float WorldHalfSize;//[Offset: 0x12c, Size: 0x4]
	ApexCharacter* FirstCharacter;//[Offset: 0x130, Size: 0x8]
	enum CircleType;//[Offset: 0x138, Size: 0x1]
	bool UseCircleWaveTypeConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	FirstCircleCfg FirstCircleConfigs;//[Offset: 0x13c, Size: 0x18]
	CircleCfg[] CircleConfigs;//[Offset: 0x158, Size: 0x10]
	int TeammatesTooFarEventID;//[Offset: 0x168, Size: 0x4]
	float TeammatesTooFarDistance;//[Offset: 0x16c, Size: 0x4]
	float TeammatesTooFarCheckSeconds;//[Offset: 0x170, Size: 0x4]
	CircleCfg[] RuntimeCircleConfigs;//[Offset: 0x178, Size: 0x10]
	bool bMakePainWhenOutOfBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	float CircleTimeScale;//[Offset: 0x18c, Size: 0x4]
	Vector CurBlueCircle;//[Offset: 0x190, Size: 0xc]
	Vector CachedBlueCircle;//[Offset: 0x19c, Size: 0xc]
	Vector CurWhiteCircle;//[Offset: 0x1a8, Size: 0xc]
	Vector CachedWhiteCircle;//[Offset: 0x1b4, Size: 0xc]
	Vector NextCachedWhiteCircle;//[Offset: 0x1c0, Size: 0xc]
	int CurCircleIndex;//[Offset: 0x1cc, Size: 0x4]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bPlaySound2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	int CircleLessenLogIntervalTicks;//[Offset: 0x208, Size: 0x4]
	CirleAreaVolume* CacheCircleAreaVolume;//[Offset: 0x210, Size: 0x8]
	SequenceTimer* WaveTimer;//[Offset: 0x220, Size: 0x8]
	FName VolumeTag;//[Offset: 0x228, Size: 0x8]
	CirleAreaVolume* PoisonCircleAreaVolumeConfig;//[Offset: 0x230, Size: 0x28]
	CircleGridManager* CircleGridManager;//[Offset: 0x260, Size: 0x8]
	void SetCirclePainEnable(bool enable);// 0x7b6f4e4
	CircleCfg GetCurrentCircleConfig();// 0x7b6f3c8
	void ExportImage();// 0x7b6f238
	void EndReportCircleFlowData(int CircleIndex);// 0x7b6f250
	void EndCircle();// 0x7b6f66c
	void BeginReportCircleFlowData(int CircleIndex);// 0x7b6f30c
	void BeginCircle();// 0xa10e460
	void AheadOneCircleFlow(bool ExecuteCircleFunc);// 0x7b6f5a8

--------------------------------
Class: CircleCfg
	float DelayTime;//[Offset: 0x0, Size: 0x4]
	CircleSoundStart WhiteCircleSoundStart;//[Offset: 0x4, Size: 0x10]
	CircleSoundDelay[] BlueCircleCountDownSound;//[Offset: 0x18, Size: 0x10]
	float BlueCircleStartLessenTime;//[Offset: 0x28, Size: 0x4]
	CircleSoundStart BlueCircleSoundStart;//[Offset: 0x2c, Size: 0x10]
	bool WhiteCircleNotBan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float LessenDuration;//[Offset: 0x40, Size: 0x4]
	float WhiteCircleRadius;//[Offset: 0x44, Size: 0x4]
	float WhiteOffset;//[Offset: 0x48, Size: 0x4]
	float RadianPainValue;//[Offset: 0x4c, Size: 0x4]
	float RadianPainIntervalTime;//[Offset: 0x50, Size: 0x4]
	enum CircleType;//[Offset: 0x54, Size: 0x1]
	int CircleRadiusParam;//[Offset: 0x58, Size: 0x4]
	int MapRadiusParam;//[Offset: 0x5c, Size: 0x4]
	int ScaleNumber;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: CircleSoundStart
	float SoundDelayTime;//[Offset: 0x0, Size: 0x4]
	int SoundID1;//[Offset: 0x4, Size: 0x4]
	int SoundID2;//[Offset: 0x8, Size: 0x4]
	int SoundID3;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CircleSoundDelay
	int SoundIDFar;//[Offset: 0x0, Size: 0x4]
	int SoundIDClose;//[Offset: 0x4, Size: 0x4]
	float SoundDelayTime;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: FirstCircleCfg
	bool bUseCustomWhiteCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D WhiteCircleCenter;//[Offset: 0x4, Size: 0x8]
	bool bPreInitBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float BluerCircleRadius;//[Offset: 0x10, Size: 0x4]
	bool bConcentricCircles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool IsPreInitCircleShowOnMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool IsWhiteCircleNotBan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	FName[] AvoidAreaTag;//[Offset: 0x270, Size: 0x10]
	int LazyTryCountForPermittedPos;//[Offset: 0x280, Size: 0x4]
	Vector2D ForceCenterOnLinePointA;//[Offset: 0x284, Size: 0x8]
	Vector2D ForceCenterOnLinePointB;//[Offset: 0x28c, Size: 0x8]
	BoxComponent* CircleBoxArea;//[Offset: 0x298, Size: 0x8]

--------------------------------
Class: SequenceTimer.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString TimerDesc;//[Offset: 0x30, Size: 0x10]
	float TimerDuration;//[Offset: 0x40, Size: 0x4]
	SequenceTimerData[] RegisterTimers;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SequenceTimerData
	float Time;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CircleGridManager.DataAsset.Object
	<int,CircleGridDataManager*> GridDatas;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: CircleGridDataManager.DataAsset.Object
	Vector2D Origin;//[Offset: 0x30, Size: 0x8]
	float GridSize;//[Offset: 0x38, Size: 0x4]
	int MaxRateCount;//[Offset: 0x3c, Size: 0x4]
	int MaxBitCount;//[Offset: 0x40, Size: 0x4]
	int[] DataTable;//[Offset: 0x48, Size: 0x10]
	int RowNum;//[Offset: 0x58, Size: 0x4]
	int ColNum;//[Offset: 0x5c, Size: 0x4]
	<int,CircleGridDataTable*> CircleGridDataTablePtr;//[Offset: 0x60, Size: 0x50]
	bool IsFirstCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: CircleGridDataTable.DataAsset.Object
	IntPoint[] DataMap;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SurveyBeacon.SignificanceManagedActor.Actor.Object
	float FadeDist;//[Offset: 0x300, Size: 0x4]
	float NearDist;//[Offset: 0x304, Size: 0x4]
	float HeightOffset;//[Offset: 0x308, Size: 0x4]
	float MaxDist;//[Offset: 0x30c, Size: 0x4]
	float MaxAngle;//[Offset: 0x310, Size: 0x4]
	bool bIsShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	int Index;//[Offset: 0x318, Size: 0x4]
	ParticleSystem* DetectEnemyParticle;//[Offset: 0x320, Size: 0x28]
	ApexCharacter* BeUsedPlayer;//[Offset: 0x348, Size: 0x8]
	bool hasShowTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool hasOpenBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	void SetShowIcon(bool bNewShow);// 0x7e86738
	void SetOffset(Transform Offset);// 0x7e867fc
	void SetIndex(int InIndex);// 0x7e86940
	void Lua_MiniMapShowIcon();// 0xa1d39f8
	void Lua_MiniMapHideIcon();// 0xa1d39f8
	int GetPingType();// 0xa17c3f8
	Transform GetOffset();// 0xa17c348
	int GetIndex();// 0xa17c3bc
	void BrocastPlayDetectParticle(float DetectRadius);// 0x7e86674
	void BP_PingSelf();// 0xa1d39f8
	void BP_OnUseBeacon(ApexCharacter* Character);// 0xa1d39f8
	void BP_OnStopUseBeacon(bool bHasInjected, ApexCharacter* Character);// 0xa1d39f8
	void BP_OnShowChange(bool bNewShow);// 0xa1d39f8
	void BP_OnFade(float Opacity);// 0xa1d39f8

--------------------------------
Class: InGameSingletonObject.Object

--------------------------------
Class: CommonSignMgr.ActorComponent.Object
	CommonSignListSerializer SignListSerializer;//[Offset: 0x100, Size: 0x120]
	<int,CommonSignData> CommonSignDataMap_Client;//[Offset: 0x220, Size: 0x50]
	bool UpdateCommonSignDuration_Client(int Index, float Duration);// 0x7b7ff24
	void Server_DeleteSign(int Index);// 0x60dfb54
	void OnCommonSignCreateComplete();// 0x7b7ff10
	CommonSignData GetCommonSignData(int Index);// 0x7b80068
	void DeleteSignForSelf(const int Index);// 0x7b80238
	void DeleteAllSign();// 0x7b80224
	int CreateSignWithTimeForSelf(const Vector WorldPosition, const enum SignType, const float Duration);// 0x7b80410
	int CreateSignForTeamWithData(ApexPlayerController* PlayerController, Vector WorldPosition, enum SignType, out const SignAdditionData SignAdditionData);// 0x7b80a54
	int CreateSignForTeam(ApexPlayerController* PlayerController, Vector WorldPosition, enum SignType);// 0x7b80ca4
	int CreateSignForSelf(Vector WorldPosition, enum SignType, Actor* FollowedCharacter, float Duration);// 0x7b80814
	int CreateSignForAllWithData(Vector WorldPosition, enum SignType, out const SignAdditionData SignAdditionData);// 0x7b80e68
	int CreateSignForAll(Vector WorldPosition, enum SignType);// 0x7b8103c
	int CreateFollowedSignForSelf(Vector WorldPosition, enum SignType, Actor* FollowedCharacter, int SignStyle);// 0x7b805d4
	int CreateCommonSign_Client(out CommonSignData SignData);// 0x7b802f4

--------------------------------
Class: CommonSignData.FastArraySerializerItem
	int SignSyncIndex;//[Offset: 0xc, Size: 0x4]
	Vector WorldPosition;//[Offset: 0x10, Size: 0xc]
	enum SignType;//[Offset: 0x1c, Size: 0x1]
	enum TypeFor;//[Offset: 0x1d, Size: 0x1]
	uint32 SourcePlayerID;//[Offset: 0x20, Size: 0x4]
	float Duration;//[Offset: 0x24, Size: 0x4]
	int TeamID;//[Offset: 0x28, Size: 0x4]
	Actor* FollowedActor;//[Offset: 0x2c, Size: 0x8]
	uint32 NetworkGUIDValue;//[Offset: 0x34, Size: 0x4]
	SignAdditionData SignAdditionData;//[Offset: 0x38, Size: 0x8]
	float CreateTime;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SignAdditionData
	int CampID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CommonSignListSerializer.FastArraySerializer
	CommonSignData[] SignList;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: SyncActionFilterInfo
	enum[] DisablePawnStateList;//[Offset: 0x0, Size: 0x10]
	uint64 FinalPawnActionFilterResult;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: LootDronesPathsDataAsset.DataAsset.Object
	class SplinePathActor[] LootDronesPathsClass;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SplinePathActor.Actor.Object
	Vector InitLocation;//[Offset: 0x270, Size: 0xc]

--------------------------------
Class: GameStateMapComponent.ActorComponent.Object
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemInfos;//[Offset: 0x100, Size: 0x10]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemAddInfos;//[Offset: 0x110, Size: 0x10]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemChangeInfos;//[Offset: 0x120, Size: 0x10]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemRemoveInfos;//[Offset: 0x130, Size: 0x10]
	MiniMapStaticItemInfo[] ClientSideApexMiniMapStaticItemInfos;//[Offset: 0x140, Size: 0x10]
	<int,MiniMapStaticItemInfo> CacheApexMiniMapStaticItemInfos;//[Offset: 0x150, Size: 0x50]
	void RemoveMapItemStaicInfo(int Index, enum Type);// 0x7c50fe4
	void OnRep_ApexMiniMapStaticItemInfos();// 0x51d0fe8
	MiniMapStaticItemInfo[] GetMiniMapStaticItemRemoveInfos();// 0x7c507c4
	MiniMapStaticItemInfo[] GetMiniMapStaticItemInfos();// 0x7c50ad0
	MiniMapStaticItemInfo[] GetMiniMapStaticItemChangeInfos();// 0x7c508c8
	MiniMapStaticItemInfo[] GetMiniMapStaticItemAddInfos();// 0x7c509cc
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemRemoveInfos();// 0x7c50bd4
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemInfos();// 0x7c50ee0
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemChangeInfos();// 0x7c50cd8
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemAddInfos();// 0x7c50ddc
	void ChangeMapItemStaicStateInfo(int Index, enum Type, byte State, Vector Location, float Yaw);// 0x7c5109c
	int AddMapItemStaicInfo(enum Type, Vector Location, float Yaw, int ScaleType, float Length, bool Immediately, float Radius, int Level, int InTrainCoachIndex);// 0x7c51208

--------------------------------
Class: MiniMapStaticItemInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	byte Type;//[Offset: 0x4, Size: 0x1]
	byte State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]
	float Radius;//[Offset: 0x18, Size: 0x4]
	byte ScaleType;//[Offset: 0x1c, Size: 0x1]
	float Length;//[Offset: 0x20, Size: 0x4]
	int Level;//[Offset: 0x24, Size: 0x4]
	int TrainCoachIndex;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CharacterAnimationIntKey
	byte ListType;//[Offset: 0x0, Size: 0x1]
	byte AnimType;//[Offset: 0x1, Size: 0x1]
	byte PoseType;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: WeaponAnimationIntKey
	byte ListType;//[Offset: 0x0, Size: 0x1]
	enum AnimType;//[Offset: 0x1, Size: 0x1]
	byte PoseType;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SkillConfigDataAsset.DataAsset.Object
	<enum,float> FloatDataAsset;//[Offset: 0x30, Size: 0x50]
	<enum,bool> BoolDataAsset;//[Offset: 0x80, Size: 0x50]
	bool HasFloat(enum Key);// 0x7e5ac10
	bool HasBool(enum Key);// 0x7e5aab4
	float GetFloat(enum Key, float DefaultFloat);// 0xa175324
	bool GetBool(enum Key, bool DefaultBool);// 0x7e5a940

--------------------------------
Class: DsFunctionConfig
	int IsClose;//[Offset: 0x0, Size: 0x4]
	int FunctionId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameStateAirDropMgr.ActorComponent.Object
	AirDropSpawnInfo[] LandingAirdropArray;//[Offset: 0xf8, Size: 0x10]
	AirDropSpawnInfo[] LastAirdropArray;//[Offset: 0x108, Size: 0x10]
	float ShowEffectTime;//[Offset: 0x118, Size: 0x4]
	bool bNeedNotifySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	FString SpeakerNameKey;//[Offset: 0x120, Size: 0x10]
	FString ContentKey;//[Offset: 0x130, Size: 0x10]
	AkAudioEvent* AudioEvent;//[Offset: 0x140, Size: 0x8]
	<enum,AirDropAudioConfigData> EventIDMap;//[Offset: 0x148, Size: 0x50]
	TimerHandle ShowCurPointsInfoTimer;//[Offset: 0x1b8, Size: 0x8]
	AirDropAreaSpawnInfo[] CurAreasInfo;//[Offset: 0x1c0, Size: 0x10]
	AirDropPointSpawnInfo[] CurPointsInfo;//[Offset: 0x1d0, Size: 0x10]
	void OnSpawnAirDrops(int Round, enum AirDropType, enum ActorType, out const AirDropSpawnInfo[] SpawnInfoArray);// 0x7c4a08c
	void OnSpawnAirDropAreas(int Round, enum AirDropType, out const AirDropAreaSpawnInfo[] SpawnInfoArray);// 0x7c49cc4
	void OnSpawnAirDropAreaFirsts(int Round, enum AirDropType, out const AirDropPointSpawnInfo[] SpawnInfoArray, float ShowTime);// 0x7c49a48
	void OnRep_RepCurPointsInfo();// 0x7c497ec
	void OnRep_RepCurAreasInfo();// 0x7c49800
	void OnRep_LandingAirdropArray();// 0x53d5978
	void OnPlayAirDropAreaNotify();// 0x7c49a34
	void OnAirDropLanded(int ID);// 0x7c49fd0
	AirDropPointSpawnInfo[] GetCurPointSpawnInfo();// 0x7c49814
	AirDropAreaSpawnInfo[] GetCurAreaSpawnInfo();// 0x7c49924
	AirDropSpawnInfo[] GetAirDropSpawnInfoArray();// 0x7c49eb8
	void ClearCurPointsInfo();// 0x7c497d8
	void ClearAirDrop();// 0x7c49fbc

--------------------------------
Class: AirDropSpawnInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	byte Type;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: AirDropAreaSpawnInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int Level;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Radius;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AirDropPointSpawnInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	int Level;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AirDropAudioConfigData
	int EventId;//[Offset: 0x0, Size: 0x4]
	float DropAirDropTeamAudioDelta;//[Offset: 0x4, Size: 0x4]
	int DropAirDropTeamAudioID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GamblingMachine.SignificanceManagedActor.Actor.Object
	int SpeedMini;//[Offset: 0x300, Size: 0x4]
	int SpeedMax;//[Offset: 0x304, Size: 0x4]
	int PlayerUserCount;//[Offset: 0x308, Size: 0x4]
	int MachineUserCount;//[Offset: 0x30c, Size: 0x4]
	int ItemOutPut;//[Offset: 0x310, Size: 0x4]
	int CD;//[Offset: 0x314, Size: 0x4]
	int Index;//[Offset: 0x318, Size: 0x4]
	void SetOffset(Transform Offset);// 0x7c01050
	void SetIndex(int InIndex);// 0x7c01154
	void ServerPlayGameMarkStart(FString BoxName, int PlayerKey);// 0x7c00c64
	void ServerPlayGameMarkEnd(int PlayerKey);// 0x7c00d4c
	enum ServerPlayGameCheck(FString BoxName, int PlayerKey);// 0x7c00f58
	enum ServerPlayGame(out const int[] ListID, out const int[] ListNum, int PlayerKey);// 0x7c00dc8
	void OnCompEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x7c00960
	void OnCompBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7c00a8c
	int GetPingType();// 0xa11f2bc
	Transform GetOffset();// 0xa11f20c
	int GetIndex();// 0xa11f280

--------------------------------
Class: APPerk.Object
	int RunPlatform;//[Offset: 0x30, Size: 0x4]
	int ID;//[Offset: 0x34, Size: 0x4]
	float Duration;//[Offset: 0x38, Size: 0x4]
	float Cooldown;//[Offset: 0x3c, Size: 0x4]
	bool bNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCheckConditionIfNotNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bManualIfNotNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bUpdateWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bStopIfConditionMismatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bShowTipsWhenActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bShowTipsByTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	APPerkContext* Context;//[Offset: 0x48, Size: 0x8]
	APPerkTrigger* Trigger;//[Offset: 0x50, Size: 0x8]
	APPerkAction*[] Actions;//[Offset: 0x58, Size: 0x10]
	APPerkManagerComponent* CurOwnerManagerComp;//[Offset: 0x68, Size: 0x8]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x70, Size: 0x50]
	int InstancedNodesTotalSize;//[Offset: 0xc0, Size: 0x4]
	void OnPerkStop(APPerkManagerComponent* ManagerComponent);// 0x7a9f2c4
	void OnPerkCDComplete(APPerkManagerComponent* ManagerComponent);// 0x7a9f228

--------------------------------
Class: APPerkManagerComponent.ActorComponent.Object
	DataTable* SkillsTable;//[Offset: 0x108, Size: 0x8]
	int[] PutOnPerkIDs;//[Offset: 0x110, Size: 0x10]
	int[] OutsidePerkIDs;//[Offset: 0x130, Size: 0x10]
	int[] AddedPerkIDs;//[Offset: 0x140, Size: 0x10]
	APPerk*[] Perks;//[Offset: 0x150, Size: 0x10]
	PerkBlackBoard* Blackboard;//[Offset: 0x160, Size: 0x8]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	void ShowTips(int TipsPerkID);// 0x5a79c9c
	void OnSkillUnInitFinished(int SkillIndex, UTSkill* Skill);// 0x5aa22cc
	void OnSkillInitFinished(int SkillIndex, UTSkill* Skill);// 0x4b8d0a8
	void OnRep_OutsidePerkIDs();// 0x5ab2b8c
	void OnRep_AddedPerkIDs();// 0x7aa7e40
	void OnEnableTriggerSkill(int SkillIndex, UTSkill* Skill);// 0x5b46c44
	void OnDisableTriggerSkill(int SkillIndex, UTSkill* Skill);// 0x5d78bb8
	void OnAsyncLoadSucceedByClass(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, bool bPutOn);// 0x7aa8160
	void OnAsyncLoadSucceed(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, int ID);// 0x7aa84a8
	void OnAsyncLoadFailed(out const SoftObjectPath[] Paths, enum Reason, int ID);// 0x7aa7e54
	bool IsDisableTriggerSkill();// 0x7aa87e8
	void Exec_Mult_RemovePerk(int PerkID);// 0x7aa7bc4
	void Exec_Mult_RemoveAllPerk();// 0xa0f8d30
	void Exec_Mult_AddPerk(int PerkID);// 0x7aa7c88
	void ClientLogPerkInfo(FString DebugMessage);// 0x7aa7d4c

--------------------------------
Class: PerkBlackBoard.Object

--------------------------------
Class: APPerkContext.Object

--------------------------------
Class: APPerkTrigger.Object
	APPerk* OwnerPerk;//[Offset: 0x30, Size: 0x8]
	float ExpiredTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: APPerkAction.Object
	bool bResetWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	APPerk* OwnerPerk;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: ApexGameSettings
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool KnockdownShield4NoSkipDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool IsSkipRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool IsNeedSpawnTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool KeepBackpackWhenNoTome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool ClearBackpackWhenChangeLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool ResetHealthWhenChangeLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	FName PlayerLoadoutTable;//[Offset: 0x8, Size: 0x8]
	FName LoadoutWeaponTable;//[Offset: 0x10, Size: 0x8]
	bool WithLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bForceLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool AutoAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	FName ModeItemJsonPath;//[Offset: 0x1c, Size: 0x8]
	FName ModeDynamicItemPath;//[Offset: 0x24, Size: 0x8]
	bool bIsAutoCreateLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool GameModeBanOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool EnableObAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	FString GameModeSkillConfigID;//[Offset: 0x30, Size: 0x10]
	int SecurityModeID;//[Offset: 0x40, Size: 0x4]
	int BattlefieldPositiveFeedbackActiveID;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 0x24]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 0x10]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 0x8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: WeaponAntiCheatLogicObject.ApgameWeaponLogicObject.Object
	int ValidBulletNum;//[Offset: 0x38, Size: 0x4]
	CharacterPositionCheckRecord ShootPlayerPosInfo;//[Offset: 0x40, Size: 0x48]
	float ShootHalfHeightVerify_Move;//[Offset: 0x88, Size: 0x4]
	float ShootRadiusVerify_Move;//[Offset: 0x8c, Size: 0x4]
	CharacterPositionCheckRecord HitPlayerPosInfo;//[Offset: 0x90, Size: 0x48]
	float HitHalfHeightVerify_Move;//[Offset: 0xd8, Size: 0x4]
	float HitRadiusVerify_Move;//[Offset: 0xdc, Size: 0x4]
	<int64,bool> ShootDataCheckOver;//[Offset: 0x130, Size: 0x50]
	int ShootForwardCheckCounts;//[Offset: 0x180, Size: 0x4]
	BulletHitInfoUploadData[] ServerCacheHitInfoData;//[Offset: 0x188, Size: 0x10]
	BulletHitInfoUploadData[] ServerRecordHitInfoData;//[Offset: 0x198, Size: 0x10]
	void SetSafetyScoreLastTime(enum SafeReason, float Time);// 0x7f3be2c
	void ServerRecordHitInfoArray();// 0x7f3c1a0
	void ServerCacheHitInfoArray(out const BulletHitInfoUploadData[] InHitDataArr);// 0x7f3c1b4
	void OperateRecordHitInfoSimp();// 0x7f3c18c
	bool OnWeaponShootHitLinkCheck();// 0x7f3db00
	Vector GetShootPlayerShootDirAndDist(BulletHitInfoUploadData BulletHitData, out float Dist);// 0x7f3d8b0
	float GetSafetyScoreLastTime(enum SafeReason);// 0x7f3bd68
	WeaponAntiCheatConfig GetAntiCheatConfig();// 0x7f3c140
	CharacterPositionCheckRecord GetActionPositonByTimeStamp(ApexCharacter* Character, double Timestamp, bool bAutonomous, out FString DebugStr);// 0x7f3c758
	void EnterSafetyScore(enum SafeReason, FString Details);// 0x7f3bf64
	void ClearPlayerPosRecordInfo();// 0x7f3c6fc
	bool CheckWeaponCreditScore(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d36c
	bool CheckValidBulletNum(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d478
	bool CheckShootStartPoint(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d048
	bool CheckShootPlayerLuffy(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d154
	bool CheckShootObstacle(out BulletHitInfoUploadData BulletHitData);// 0x7f3cc18
	bool CheckShootForward(out const BulletHitInfoUploadData BulletHitData);// 0x7f3cb0c
	bool CheckShootEndPoint(out BulletHitInfoUploadData BulletHitData);// 0x7f3ce30
	bool CheckShootDistance(out const BulletHitInfoUploadData BulletHitData);// 0x7f3cd24
	bool CheckShootDataViewMove();// 0x7f3da90
	bool CheckShootDataTimeOut(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d260
	bool CheckShootDataImPactPoint();// 0x7f3dac8
	bool CheckShootDataChargeLens();// 0x7f3da58
	bool CheckShootBulletInfo(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d79c
	bool CheckShootBulletID(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d584
	bool CheckPointInsideSphere(Vector CheckPoint, Vector SphereCenter, float SphereRadius);// 0x7f3c2c4
	bool CheckPointInsideCapsule(Vector CheckPoint, Vector CapsuleCenter, float CapsuleHalfHeight, float CapsuleRadius);// 0x7f3c4bc
	bool CheckPlayerForward(out const BulletHitInfoUploadData BulletHitData);// 0x7f3ca00
	bool CheckOpenFireTime(out const BulletHitInfoUploadData BulletHitData);// 0x7f3d690
	bool CheckHitPlayerScale(out const BulletHitInfoUploadData BulletHitData);// 0x7f3cf3c
	void AdjustValidBulletNum();// 0x7f3c2b0

--------------------------------
Class: BulletHitInfoUploadData
	Actor* Actor;//[Offset: 0x2c, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x34, Size: 0x8]
	MovementSyncData ShootStart;//[Offset: 0x50, Size: 0x18]
	MovementSyncData ShootEnd;//[Offset: 0x68, Size: 0x18]

--------------------------------
Class: CharacterPositionCheckRecord
	double Timestamp;//[Offset: 0x0, Size: 0x8]
	double TimeLineRTT;//[Offset: 0x8, Size: 0x8]
	float CapsuleRadius;//[Offset: 0x10, Size: 0x4]
	float CapsuleHalfHeight;//[Offset: 0x14, Size: 0x4]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	Vector Velocity;//[Offset: 0x30, Size: 0xc]
	PrimitiveComponent* Base;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: WeaponDisruptorLogicObject.ApgameWeaponLogicObject.Object
	bool bIsCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bChargingSuccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bEnergyEmptyAtBackpack;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	void WeaponCharge();// 0x7f4d5c0
	void PostWeaponEquipped();// 0x7f4d5d4
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x4c3f878
	void OnSprintStateChange(int SprintState);// 0x7f4d4f0
	void OnShot();// 0x49ca180
	void OnEnergyEmpty();// 0x7f4d190
	void OnCharging();// 0x7f4d4c4
	void OnChargePhaseChanged(enum NewPhase, enum OldPhase);// 0x7f4d058
	void OnChargeItemChanged();// 0x59087b8
	void OnChargeInterrupt();// 0x7f4d5ac
	void OnChargeEnd();// 0x7f4d4b0
	void OnChargeBegin();// 0x7f4d4dc
	void NotifyChargingEffect();// 0x7f4d044
	bool HasEnoughChargeItem();// 0x7f4d1d8
	bool HasCharged();// 0x7f4d370
	byte GetOwnerNetRole();// 0x7f4d1a4
	void DisruptorEnergyDecreaseByTime(float dt);// 0x7f4d3a8
	void DisruptorEnergyDecreaseByShot();// 0x7f4d464
	bool ConsumeChargeItem(ItemDefineID ItemID, int count);// 0x7f4d210
	bool CheckCanCharge();// 0x7f4d478

--------------------------------
Class: WeaponBallisticLogicObject.ApgameWeaponLogicObject.Object
	TssModule* CurTssModule;//[Offset: 0xa0, Size: 0x8]
	enum curPos;//[Offset: 0xcc, Size: 0x1]
	uint64 CurPosFrameCounter;//[Offset: 0xd0, Size: 0x8]
	RecoilFactor4D CurFactor;//[Offset: 0xd8, Size: 0x10]
	uint64 CurFactorFrameCounter;//[Offset: 0xe8, Size: 0x8]
	void OnWeaponStopFire();// 0x54a7de0
	void OnWeaponStartFire();// 0x525c4d8
	void OnWeaponShootPlayer();// 0x51c7c58
	void OnWeaponShoot();// 0x4c2482c

--------------------------------
Class: TssModule.ApexGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bCheckDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	FString[] ChannelHost;//[Offset: 0x60, Size: 0x10]
	FString[] ChannelIP;//[Offset: 0x70, Size: 0x10]
	EmulatorInfo GetEmulatorInfo();// 0x7eb48bc

--------------------------------
Class: ApexGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: EmulatorInfo
	bool bEmulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString EmulatorName;//[Offset: 0x8, Size: 0x10]
	bool bRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bMalware;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bCDN;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bCS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: TraceBulletLogicObject.ApgameWeaponLogicObject.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x50, Size: 0x18]
	TssModule* TssModule;//[Offset: 0x68, Size: 0x8]
	void UseTraceBullet(int UseNum);// 0x7ea6d44
	void GetTraceBulletTrans(out Transform BulletStartTrans);// 0x7ea6c28
	bool CheckTraceRangeEnemy();// 0x7ea6bf0
	bool CheckRemainTraceBullet(int UseNum);// 0x7ea6e00

--------------------------------
Class: AutoAimEnemyInfo
	ApexCharacter* EnemyPawn;//[Offset: 0x0, Size: 0x8]
	float DisToScreenCenterSq;//[Offset: 0x8, Size: 0x4]
	Vector WorldLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: HeatSystemLogicObject.ApgameWeaponLogicObject.Object
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x5b79258
	int GetMaxHeat();// 0x7cac244
	int GetCurrentHeat();// 0xa138368
	void BeginHeatIncrease();// 0x5423d10
	void BeginHeatDecrease();// 0x5cd66fc

--------------------------------
Class: ShootWeaponEffectLogicObject.WeaponEffectLogicObject.ApgameWeaponLogicObject.Object
	bool bAnyLensPSC;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x109, Size: 0x1]
	ParticleSystemComponent* FppMuzzleFXComp;//[Offset: 0x110, Size: 0x8]
	ParticleSystemComponent* TppMuzzleFXComp;//[Offset: 0x118, Size: 0x8]
	ParticleSystemComponent* AlternantMuzzleFXComp;//[Offset: 0x120, Size: 0x8]
	ParticleSystemComponent* FireLightFXComp;//[Offset: 0x128, Size: 0x8]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x130, Size: 0x10]
	Vector MuzzleFXOriginalScale;//[Offset: 0x140, Size: 0xc]
	Vector ShootEffectStartPos;//[Offset: 0x14c, Size: 0xc]
	uint64 ShootEffectStartPosFrameCounter;//[Offset: 0x158, Size: 0x8]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x160, Size: 0x4]
	ParticleSystemComponent* FppShellDropFXComp;//[Offset: 0x168, Size: 0x8]
	ParticleSystemComponent* TppShellDropFXComp;//[Offset: 0x170, Size: 0x8]
	ParticleSystemComponent* FppAlternateShellDropFXComp;//[Offset: 0x178, Size: 0x8]
	ParticleSystemComponent* TppAlternateShellDropFXComp;//[Offset: 0x180, Size: 0x8]
	float ShootTimeAccumulate;//[Offset: 0x19c, Size: 0x4]
	float RandomRadius_Runtime;//[Offset: 0x1a8, Size: 0x4]
	CameraShake* CameraShakeInst_FPP;//[Offset: 0x1c0, Size: 0x8]
	CameraShake* CameraShakeInst_TPP;//[Offset: 0x1c8, Size: 0x8]
	CameraShake* CameraShakeInst_Aim;//[Offset: 0x1d0, Size: 0x8]
	ParticleSystemComponent* LensParticleComponent1P;//[Offset: 0x1d8, Size: 0x8]
	ParticleSystemComponent* LensParticleComponent3P;//[Offset: 0x1e0, Size: 0x8]
	ParticleSystemComponent* LaserParticleComponent1P;//[Offset: 0x1e8, Size: 0x8]
	ParticleSystemComponent* LaserParticleComponent3P;//[Offset: 0x1f0, Size: 0x8]
	void StopChargeSound();// 0x7e42f70
	void OnStopFire();// 0x41d9398
	void OnAimChange(bool IsAiming);// 0x4c02494
	ParticleSystem* GetParticleSystem(FrameParticleEffect ParticleEffect, bool bIsFPP, bool bADS, bool bSelf);// 0x7e42840
	int GetAvailableOBEffectBulletNum(OBEffectBullet*[] OBEffectBulletsCacheList);// 0x7e42f84
	void AddActiveMuzzleFXQueue(bool bIsLocal, bool bIsScopeIn, bool bIsFPP, bool bHasBarrel, bool bHasCharged, bool bHasL4Barrel, float DistanceToViewer);// 0x7e43644
	void ActiveMuzzleFX_Delay(bool bIsLocal, bool bIsScopeIn, bool bIsFPP, bool bHasBarrel, bool bHasCharged, bool bHasL4Barrel, float DistanceToViewer, bool bPreSpawn);// 0x7e431d4
	void ActiveLocalShellDropFX(bool bIsFPP);// 0x7e43a30

--------------------------------
Class: WeaponEffectLogicObject.ApgameWeaponLogicObject.Object
	float ShootCallbackWaitAccumulate;//[Offset: 0x38, Size: 0x4]
	<FName,ApexSoundCallback> SoundCallbackMap;//[Offset: 0x50, Size: 0x50]
	<FName,float> SoundRTPCValueMap;//[Offset: 0xa0, Size: 0x50]
	Vector SoundLastPlayPos;//[Offset: 0xf0, Size: 0xc]
	AudioRegionMgrComponent* AudioRegionMgr;//[Offset: 0x100, Size: 0x8]
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x4665d04
	void OnSoundEventCallBack(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x7f4e190
	static AkAudioEvent* GetAkAudioBySoundMap(out const <byte,AkAudioEvent*> SoundMap, byte Action);// 0x7f4df4c

--------------------------------
Class: ApexSoundCallback
	ApexSoundCallbackConfig* CallBackConfig;//[Offset: 0x0, Size: 0x8]
	int SoundSeq;//[Offset: 0x8, Size: 0x4]
	delegate SoundEventCB;//[Offset: 0xc, Size: 0x10]
	Actor* Actor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ApexSoundCallbackConfig.Object
	int CallbackMask;//[Offset: 0x28, Size: 0x4]
	ApexAnimNotifySoundModule*[] Modules;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: FrameParticleEffect
	FString EffectName;//[Offset: 0x0, Size: 0x10]
	ParticleSystem* ParticleFPP;//[Offset: 0x10, Size: 0x28]
	ParticleSystem* ParticleFPPADS;//[Offset: 0x38, Size: 0x28]
	ParticleSystem* ParticleTPPSelf;//[Offset: 0x60, Size: 0x28]
	ParticleSystem* ParticleTPPOther;//[Offset: 0x88, Size: 0x28]
	FName AttachSocket;//[Offset: 0xb0, Size: 0x8]
	enum ParticleEvent;//[Offset: 0xb8, Size: 0x1]
	bool StopWhenEventLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]

--------------------------------
Class: WeaponReloadLogicObject.ApgameWeaponLogicObject.Object
	WeaponReloadStageConfig[] CurReloadStageConfig;//[Offset: 0x40, Size: 0x10]
	void WeaponReloadWait();// 0x7f691d4
	void WeaponReloadEnd(bool bResetBulletNum, bool bNeedToServer, bool bNeedToClient);// 0x7f69000
	void StopReloadAndFire();// 0x7f68c58
	void StopReload();// 0x7f694d4
	void StartReload();// 0x7f694e8
	void SetReloadStage(int ReloadStageIndex);// 0x7f68f30
	void ResetReloadAnim();// 0x7f68f08
	void ResetFakeBulletNumInBackpack();// 0x7f68ebc
	void OnWeaponPostSwap();// 0x56149d0
	void OnUnlimitedBulletChange(Controller* Instigator);// 0x7f68d28
	void OnStateInterrupted(enum LeavedState, enum Reason, enum InterruptedBy);// 0x535ebbc
	void OnReloadStageStart();// 0x7f68f1c
	void OnItemPickUpSuccess(out const PickupNotifyData PickupNotifyData);// 0x4f6d9fc
	void OnItemListNetUpdated();// 0x4e85894
	void OnItemDropSuccess();// 0x7f68de4
	void NotifyShootBtnPress();// 0x7f69230
	void NotifyAutoReloadUiEffect();// 0x7f691e8
	void InitReloadStageConfig();// 0x7f68fec
	float GetStoredReloadAnimStartPercent();// 0x7f694a0
	float GetReloadTimeRatioWhenStart();// 0xa19ca9c
	float GetReloadAnimStartPercent(int StartStageIndex);// 0x7f69244
	float GetCurrentReloadAnimStartPercent();// 0x7f6946c
	float GetCurReloadTimeSum();// 0x7f691fc
	enum GetCurReloadMethod();// 0xa19cab8
	int CostReserveBulletNum(int ClipNeedNum);// 0x7f68df8
	bool CheckStoredReloadStage();// 0xa19cad4
	void CheckStopReloadAndStartFire(float InterruptCheckTime);// 0x7f68c6c
	bool CheckBulletCanAddContinue();// 0x7f68ed0
	void CheckAutoReloadEnd();// 0x7f68c44

--------------------------------
Class: ShootWeaponLogicObject.ApgameWeaponMainLogicObject.ApgameWeaponLogicObject.Object
	bool bMultiBulletHitCharacter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x178, Size: 0x1]
	enum ShootHitPostionAI;//[Offset: 0x17a, Size: 0x1]
	BulletReadyData[] LocalBulletReadyList;//[Offset: 0x1a0, Size: 0x10]
	int LocalLaunchBulletNum;//[Offset: 0x1b0, Size: 0x4]
	BulletHitInfoReplicateData[] RemoteBulletHitInfoData;//[Offset: 0x210, Size: 0x10]
	MovementSyncData LastLensHit;//[Offset: 0x220, Size: 0x18]
	<int64,BulletHitInfoUploadData> UploadDataSavedMap;//[Offset: 0x248, Size: 0x50]
	<int64,SecurityLogHitTargetInfo> HitTargetInfoSavedMap;//[Offset: 0x298, Size: 0x50]
	<int,int> OpticalPriorityMap;//[Offset: 0x2e8, Size: 0x50]
	Vector LastImpactEffectLocation;//[Offset: 0x338, Size: 0xc]
	float LastImpactEffectTime;//[Offset: 0x344, Size: 0x4]
	Vector ShootTargetLoc;//[Offset: 0x348, Size: 0xc]
	Actor* ShootHitActor;//[Offset: 0x354, Size: 0x8]
	void UpdateBulletHitData(out const BulletHitInfoReplicateData BulletHitArray);// 0x7e3ffd8
	void SubBackPackOrSpecialBulletNum(int Num);// 0x7e402e0
	void SetOpticalMap(out const <int,int> PriorityMap);// 0x7e40384
	void SetMaxBulletNumInOneClip(int Num);// 0x7e40264
	void SetCurSpecialBulletNum(int Num, enum ChangeReason, bool bToClient);// 0x7e40168
	void OnUnlimitedBulletChange(Controller* Instigator);// 0x7e40644
	void OnTargetCharacterDead();// 0x7e4035c
	void OnItemUpdated(ItemDefineID DefineID, int State);// 0x7e400a0
	void InitOpticalMap();// 0x7e40370
	void HandleExchangeOptical(int OldOpticalID, int NewOpticalID);// 0x7e40508
	int GetOpticalPriority(int ItemID);// 0x7e405c0
	void ClearPawnWeaponState();// 0x7e406c0

--------------------------------
Class: ApgameWeaponMainLogicObject.ApgameWeaponLogicObject.Object
	MovementModifyConfig MovementModifyConfig;//[Offset: 0xd8, Size: 0x50]
	bool IsOwnerAutonomous();// 0x7a97b40
	bool IsLikeAutonomous();// 0x7a97b78
	enum GetWeaponType();// 0x7a97a4c
	bool GetWeaponIsInit();// 0x7a97a04
	enum GetWeaponAnimType();// 0x7a978f8
	ItemDefineID GetItemDefineID();// 0x7a97acc
	bool GetIsCurUsingWeapon();// 0x7a9792c
	int GetDeriveID();// 0x7a97a80
	ItemHandleBase* GetBackpackItemHandle();// 0x7a97964
	BackpackComponent* GetBackpackComponent();// 0x7a97998
	void DoAttachWeaponToHand();// 0x7a978e4
	bool CheckWeaponEquiping();// 0x7a979cc

--------------------------------
Class: BulletReadyData
	Transform TargetPosInfo;//[Offset: 0x0, Size: 0x30]
	uint32 ShootID;//[Offset: 0x30, Size: 0x4]
	byte PelletID;//[Offset: 0x34, Size: 0x1]
	Vector EffectBulletEnd;//[Offset: 0x38, Size: 0xc]
	bool bTraceEfficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: BulletEffectConfig
	ParticleSystem* NormalTailFx1P;//[Offset: 0x0, Size: 0x28]
	ParticleSystem* ChargeTailFx1P;//[Offset: 0x28, Size: 0x28]
	ParticleSystem* BeamTailFx3P;//[Offset: 0x50, Size: 0x28]
	ParticleSystem* LensTail1P;//[Offset: 0x78, Size: 0x28]
	ParticleSystem* LensTail3P;//[Offset: 0xa0, Size: 0x28]
	HitEffectDataAsset* DefaultHitEffects;//[Offset: 0xc8, Size: 0x28]
	HitEffectDataAsset* SpecialHitEffects;//[Offset: 0xf0, Size: 0x28]

--------------------------------
Class: ApgameWeaponEventProxy.ApgameEventProxy.Object
	delegate OnCurBulletChange;//[Offset: 0x90, Size: 0x10]
	delegate OnOBBackpackBulletChange;//[Offset: 0xa0, Size: 0x10]
	delegate OnStartFireDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate OnStopFireDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnWeaponShootDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xf0, Size: 0x10]
	delegate OnWeaponReloadAnimStartDelegage;//[Offset: 0x100, Size: 0x10]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x110, Size: 0x10]
	delegate OnWeaponFireModeDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnEnergyValueChanged;//[Offset: 0x130, Size: 0x10]
	delegate WeaponPostFireDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnPlayWeaponFrameStaticMeshEffectDelegate;//[Offset: 0x150, Size: 0x10]
	delegate OnPlayWeaponFrameAudioEffectDelegate;//[Offset: 0x160, Size: 0x10]
	delegate OnDisruptorChargeValueChangedDelegate;//[Offset: 0x170, Size: 0x10]
	delegate OnWeaponAimChargeLevelChange;//[Offset: 0x180, Size: 0x10]
	delegate OnWeaponAimChargeValueChange;//[Offset: 0x190, Size: 0x10]
	delegate OnPreFireEnergyIncrease;//[Offset: 0x1a0, Size: 0x10]
	delegate OnPreFireEnergyDecrease;//[Offset: 0x1b0, Size: 0x10]
	delegate OnHeatChangeDelegate;//[Offset: 0x1c0, Size: 0x10]
	delegate OnPlayWeaponFrameEffectParticleDelegate;//[Offset: 0x1d0, Size: 0x10]
	delegate OnPlayWeaponFramMainEffectDelegate;//[Offset: 0x1e0, Size: 0x10]
	delegate OnDisruptorChargeBeginOrEnd;//[Offset: 0x200, Size: 0x10]
	delegate PostShootDelegate;//[Offset: 0x210, Size: 0x10]
	ApgameWeaponCoreComponent* WeaponCoreComp;//[Offset: 0x248, Size: 0x8]
	void ServerSendUnreliableEventWithId(const ApgameEvent InEvent, ApgameWeaponInstanceId InDataId);// 0x7a9a600
	void ServerSendReliableEventWithId(const ApgameEvent InEvent, ApgameWeaponInstanceId InDataId);// 0x7a9a7d4
	void ServerHandleTLogDataArray(ApgameWeaponInstanceId InWeaponDataIdentity, const BulletHitInfoTLogData[] DataArray);// 0x7a9b080
	void ServerHandleHitDataArray(ApgameWeaponInstanceId InWeaponDataIdentity, const BulletHitInfoUploadData[] DataArray, const WeaponReportData WeaponReportData);// 0x7a9b21c
	void PostShootDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponShootDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0xa1d39f8
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0xa1d39f8
	void OnWeaponReloadAnimStartDelegage__DelegateSignature(float StartPercent);// 0xa1d39f8
	void OnWeaponPostFireDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponFireModeDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponEquipSecondWeaponDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponAimChargeValueChangeDelegate__DelegateSignature();// 0xa1d39f8
	void OnWeaponAimChargeLevelChangeDelegate__DelegateSignature();// 0xa1d39f8
	void OnStopFireDelegate__DelegateSignature();// 0xa1d39f8
	void OnStartFireDelegate__DelegateSignature();// 0xa1d39f8
	void OnPreFireEnergyIncrease__DelegateSignature();// 0xa1d39f8
	void OnPreFireEnergyDecrease__DelegateSignature();// 0xa1d39f8
	void OnPlayWeaponFrameStaticMeshEffectDelegate__DelegateSignature(enum EffectEvent, float ValueData, int InStackCount);// 0xa1d39f8
	void OnPlayWeaponFrameMainEffectDelegate__DelegateSignature(enum EffectEvent, float ValueData, int InStackCount);// 0xa1d39f8
	void OnPlayWeaponFrameEffectParticleDelegate__DelegateSignature(enum EffectEvent, float ValueData);// 0xa1d39f8
	void OnPlayWeaponFrameAudioEffectDelegate__DelegateSignature(enum EffectEvent);// 0xa1d39f8
	void OnOBBackpackBulletChange__DelegateSignature();// 0xa1d39f8
	void OnHeatChangeDelegate__DelegateSignature(float HeatValue);// 0xa1d39f8
	void OnEnergyValueChangedDelegate__DelegateSignature(float EnergyValue, enum EffectEvent);// 0xa1d39f8
	void OnDisruptorChargeValueChangedDelegate__DelegateSignature(float Value);// 0xa1d39f8
	void OnDisruptorChargeBeginOrEnd__DelegateSignature(bool bBegin);// 0xa1d39f8
	void OnCurBulletChange__DelegateSignature();// 0xa1d39f8
	void NetMulticastSendUnreliableEventWithId(const ApgameEvent InEvent, ApgameWeaponInstanceId InDataId);// 0x7a99ea8
	void NetMulticastSendReliableEventWithId(const ApgameEvent InEvent, ApgameWeaponInstanceId InDataId);// 0x7a9a07c
	void K2_SendEventToServerWithId(ApgameEvent InEvent, bool bInReliable);// 0x7a9ae38
	void K2_SendEventToClientWithId(ApgameEvent InEvent, bool bInReliable);// 0x7a9abf0
	void K2_NetMulticastEventWithId(ApgameEvent InEvent, bool bInReliable);// 0x7a9a9a8
	void ClientSendUnreliableEventWithId(const ApgameEvent InEvent, ApgameWeaponInstanceId InDataId);// 0x7a9a254
	void ClientSendReliableEventWithId(const ApgameEvent InEvent, ApgameWeaponInstanceId InDataId);// 0x7a9a428

--------------------------------
Class: ApgameEventProxy.Object
	void ServerSendUnreliableEvent(const ApgameEvent InEvent);// 0x7a7df8c
	void ServerSendReliableEvent(const ApgameEvent InEvent);// 0x7a7e0f4
	void SendEventToServer(out const ApgameEvent InEvent, bool bInReliable);// 0x7a7e624
	void SendEventToClient(out const ApgameEvent InEvent, bool bInReliable);// 0x7a7e440
	void ResetToReusable(bool bInShrink);// 0x7a7ee78
	void NetMulticastSendUnreliableEvent(const ApgameEvent InEvent);// 0x7a7d9ec
	void NetMulticastSendReliableEvent(const ApgameEvent InEvent);// 0x7a7db54
	void NetMulticastEvent(out const ApgameEvent InEvent, bool bInReliable);// 0x7a7e25c
	bool K2_SendEvent(out const ApgameEvent InEvent);// 0xa0f279c
	void K2_RemoveListenersByObject(const Object* InObject, GameplayTag InTag);// 0x7a7e8f8
	void K2_RemoveListenersByHandle(out ApgameEventHandle IoHandle);// 0x7a7e808
	ApgameEventHandle K2_ListenEventTag(GameplayTag InTag, const Object* InObject, out const delegate InCallback, out const ApgameEventListenParameters InParameters);// 0x7a7eac4
	bool K2_AskEvent(out const ApgameEvent InEvent);// 0xa0f2638
	void ClientSendUnreliableEvent(const ApgameEvent InEvent);// 0x7a7dcbc
	void ClientSendReliableEvent(const ApgameEvent InEvent);// 0x7a7de24

--------------------------------
Class: ApgameEvent

--------------------------------
Class: BulletHitInfoTLogData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	uint32 DocuType;//[Offset: 0x4, Size: 0x4]
	byte PelletID;//[Offset: 0x8, Size: 0x1]
	Vector_NetQuantize ShootWeaponPos;//[Offset: 0xc, Size: 0xc]
	Vector2D ShootMomentRecoil;//[Offset: 0x18, Size: 0x8]
	byte ShootMomentSightType;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: WeaponReportData

--------------------------------
Class: ApgameEventHandle
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	uint16 DelegateId;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: ApgameEventListenParameters
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FName PriorityName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: InGameWeaponDataSubsystem.BaseGameflowSubsystem.Object
	ApgameWeaponConfigDataCache[] WeaponConfigInfoList;//[Offset: 0xd8, Size: 0x10]
	<int,ApgameWeaponItemInfoCache> WeaponItemInfoMap;//[Offset: 0xe8, Size: 0x50]
	class ShootWeaponBullet* BulletTemplate;//[Offset: 0x138, Size: 0x8]
	class AutoEffectBullet* EffectBulletTemplate;//[Offset: 0x140, Size: 0x8]
	class OBEffectBullet* OBBulletTemplate;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: ApgameWeaponConfigDataCache
	WeaponDataAsset* ConfigData;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ApgameWeaponItemInfoCache
	bool bNumberColorListInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	BattleItemHandleBase* ItemConfig;//[Offset: 0x8, Size: 0x8]
	Weapon3DUIChangeNum[] NumberColorList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Weapon3DUIChangeNum
	byte ColorNum1;//[Offset: 0x0, Size: 0x1]
	byte ColorNum2;//[Offset: 0x1, Size: 0x1]
	byte ColorNum3;//[Offset: 0x2, Size: 0x1]
	byte FlashNum;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BlackMarketPickUpWrapperResult.SearchedPickUpWrapperResult
	SearchedPickUpWrapperResult[] PickUpList;//[Offset: 0x98, Size: 0x10]
	int ItemQuality;//[Offset: 0xa8, Size: 0x4]
	enum GroupType;//[Offset: 0xac, Size: 0x1]
	bool bShowAsGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	bool bIsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]
	int AmmoNumInClip;//[Offset: 0xb0, Size: 0x4]
	LobaBlackMarket* BlackMarket;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: SkillActorDelayShowTime
	float FPPDelayShowTime;//[Offset: 0x0, Size: 0x4]
	float TPPDelayShowTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ViewAssistParamInfo
	bool OnlyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ContainDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool OnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: RespawnFlowData
	uint32 Rescuer;//[Offset: 0x0, Size: 0x4]
	byte ReviveFrom;//[Offset: 0x4, Size: 0x1]
	FString SecReportData;//[Offset: 0x8, Size: 0x10]
	int64 ClientStartTime;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: EmojiGiveALikeMgr.ActorComponent.Object
	float TickTimerInterval;//[Offset: 0xf8, Size: 0x4]
	float CheckDist;//[Offset: 0xfc, Size: 0x4]
	Emoji3DActor* CurrentEmojiActor;//[Offset: 0x104, Size: 0x8]
	void SetEmojiOK();// 0x7bdf620
	void RPCServerSetEmojiOK(Emoji3DActor* EmojiActor);// 0x7bdf55c
	void AfterTickCheck_Client(float DeltaTime, out const Vector ViewLocation, out const Rotator ViewRotation);// 0x47aa140

--------------------------------
Class: Emoji3DActor.MissilePropsWeapon.DynamicMovementActor.Actor.Object
	CapsuleComponent* Emoji3DRootCapsule;//[Offset: 0x3b8, Size: 0x8]
	SceneComponent* EmojiInfoUIRoot;//[Offset: 0x3c0, Size: 0x8]
	StaticMeshComponent* Emoji3DBaseMesh;//[Offset: 0x3c8, Size: 0x8]
	ParticleSystemComponent* Emoji3DParticle;//[Offset: 0x3d0, Size: 0x8]
	ParticleSystemComponent* DestroyPsc;//[Offset: 0x3d8, Size: 0x8]
	AkComponent* EmojiAkComponent;//[Offset: 0x3e0, Size: 0x8]
	enum[] HideParticlePawnStates;//[Offset: 0x3e8, Size: 0x10]
	uint64 HideParticlePawnStateMask;//[Offset: 0x3f8, Size: 0x8]
	WidgetComponent* WidgetComp;//[Offset: 0x400, Size: 0x8]
	UserWidget* UIWidget;//[Offset: 0x408, Size: 0x8]
	FName NormalThrowSound;//[Offset: 0x410, Size: 0x8]
	FName NormalLandSound;//[Offset: 0x418, Size: 0x8]
	FName NormalActiveSound;//[Offset: 0x420, Size: 0x8]
	FName SpecialThrowSound;//[Offset: 0x428, Size: 0x8]
	FName SpecialLandSound;//[Offset: 0x430, Size: 0x8]
	FName SpecialActiveSound;//[Offset: 0x438, Size: 0x8]
	float DestroyFadeOutTime;//[Offset: 0x440, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x444, Size: 0x4]
	FName EmojiId;//[Offset: 0x448, Size: 0x8]
	bool IsLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	Vector LandedImpactNormal;//[Offset: 0x454, Size: 0xc]
	FString OwnerCharName;//[Offset: 0x460, Size: 0x10]
	int OwnerCharTeamID;//[Offset: 0x470, Size: 0x4]
	int OwnerCharTeamIdx;//[Offset: 0x474, Size: 0x4]
	bool bDisplayDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	float DestroyFadeOutTotalDeltaTime;//[Offset: 0x47c, Size: 0x4]
	int[] GiveALikePlayerList;//[Offset: 0x480, Size: 0x10]
	Vector OwnerAimedPosition;//[Offset: 0x490, Size: 0xc]
	void ShowEmojiInfo(bool Show);// 0x7bdced4
	void SetDisplayInfo(bool bIsAimed, const bool bShowInAnim);// 0x7bdcd84
	void OnRepDisplayDestroy();// 0x5907d10
	void OnRep_OwnerCharTeamIdx();// 0x53e9df0
	void OnRep_OwnerCharTeamID();// 0x53e9e08
	void OnRep_OwnerCharName();// 0x53e9e20
	void OnRep_LandedImpactNormal();// 0x5915a28
	void OnRep_IsLanded();// 0x5915b24
	void OnRep_EmojiID();// 0x5c94270
	void OnRep_EmojiGiveALike();// 0x613ca40
	void OnAimedAtClient(bool NewIsAimed, Vector AimedPosition);// 0x7bdcfa0
	bool IsSelfEmojiActor();// 0x7bdcb94
	bool IsExistInGiveALikeList(const int PlayerKey);// 0x7bdcbcc
	Vector GetUIRootPosition();// 0x7bdcb1c
	void EnterDestroy();// 0x7bdcb08
	void DisplayDestroy();// 0xa1d39f8
	void AddGiveALikePlayer(const int PlayerKey);// 0x7bdccc8

--------------------------------
Class: MissilePropsWeapon.DynamicMovementActor.Actor.Object
	bool bIsFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bHasFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	DynamicMovementComponent_Projetile* MovementComponent;//[Offset: 0x298, Size: 0x8]
	bool HasBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bMoveStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bImpacted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	bool TempHasBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 0x1]
	float BounceMinVelocity;//[Offset: 0x2a4, Size: 0x4]
	AkAudioEvent* BounceAudio;//[Offset: 0x2a8, Size: 0x8]
	AkAudioEvent* ExplosionAudio;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* ExplosionPs;//[Offset: 0x2b8, Size: 0x8]
	float TailFxDelayHideTime;//[Offset: 0x2c0, Size: 0x4]
	int MaxBounceTime;//[Offset: 0x2c4, Size: 0x4]
	float MaxBounceFriction;//[Offset: 0x2c8, Size: 0x4]
	float ExplosionTime;//[Offset: 0x2cc, Size: 0x4]
	float LaunchDelayTime;//[Offset: 0x2d0, Size: 0x4]
	float ExplosionStartTime;//[Offset: 0x2d4, Size: 0x4]
	bool bDebugProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	float RealExplosionTime;//[Offset: 0x2dc, Size: 0x4]
	bool bRealExplosionTimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	TimerHandle ExplosionTh;//[Offset: 0x2e8, Size: 0x8]
	TimerHandle LaunchDelayTh;//[Offset: 0x2f0, Size: 0x8]
	bool bPrepareExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool DoneExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	int TeamID;//[Offset: 0x2fc, Size: 0x4]
	int CampID;//[Offset: 0x300, Size: 0x4]
	Actor*[] TeamMateArray;//[Offset: 0x308, Size: 0x10]
	ApexPlayerState* OwnerPs;//[Offset: 0x318, Size: 0x8]
	float HintRadius;//[Offset: 0x320, Size: 0x4]
	int ExplosionHintId;//[Offset: 0x324, Size: 0x4]
	float ActivateHintInterval;//[Offset: 0x328, Size: 0x4]
	float LastActiveHintTime;//[Offset: 0x32c, Size: 0x4]
	bool bHasCreateWarningIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	int ItemID;//[Offset: 0x334, Size: 0x4]
	bool NeedDynamicScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float DynamicScaleFactor;//[Offset: 0x33c, Size: 0x4]
	int IndicatorMaxNum;//[Offset: 0x340, Size: 0x4]
	class WarningActor* ExplosionIndicatorBp;//[Offset: 0x348, Size: 0x8]
	WarningActor* ExplosionIndicator;//[Offset: 0x350, Size: 0x8]
	float ExplosionIndicatorDelay;//[Offset: 0x358, Size: 0x4]
	float BeginPlayTime;//[Offset: 0x35c, Size: 0x4]
	FName AttachSocketName;//[Offset: 0x368, Size: 0x8]
	float LeftTime;//[Offset: 0x370, Size: 0x4]
	bool bTimingExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	bool bEnableDamageHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 0x1]
	uint64 FakeID;//[Offset: 0x378, Size: 0x8]
	MissilePropsWeapon* LinkMissilePropsWeaponWeak;//[Offset: 0x380, Size: 0x8]
	SkeletalMeshComponent* MissileSkeletalMesh;//[Offset: 0x388, Size: 0x8]
	void OnRepImpacted();// 0xa14ac94
	void OnRepDoneExplosion();// 0x5073af8
	void OnMoveEventStop(out const HitResult ImpactResult, bool bServer, Actor* InOwner);// 0x5a9c7a8
	void OnMoveEventPreBounce(out const HitResult ImpactResult, out bool bNeedBounce, out bool bNeedIgnoreActorCollision);// 0x52c0b08
	void OnMoveEventBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* InOwner);// 0x5154428

--------------------------------
Class: WarningActor.Actor.Object
	Actor* Source;//[Offset: 0x270, Size: 0x8]
	Actor* Target;//[Offset: 0x278, Size: 0x8]
	Vector Location;//[Offset: 0x280, Size: 0xc]
	void ShowArrowAndEffect();// 0xa1d39f8
	void SetTarget(Actor* InTarget);// 0x7f2e858
	void SetSourceAndTarget(Actor* InSource, Actor* InTarget);// 0x7f2e7a4
	void SetSourceAndLocation(Actor* InSource, Vector InLocation);// 0x7f2e6ec
	void SetSource(Actor* InSource);// 0x7f2e8d4
	void SetCountDownOffset(Vector Offset);// 0xa1d39f8
	void NativeShowCountDown(float InTime, bool bReset);// 0xa1d39f8
	void NativeHideCountDown();// 0xa1d39f8
	void HideArrowAndEffect();// 0xa1d39f8
	Vector GetTargetActorLocation();// 0x5d89528

--------------------------------
Class: FiniteBattleBehStateMachine.ActorComponent.Object
	bool bStateInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	<enum,AbstractState*> BattleBehStateMap;//[Offset: 0x100, Size: 0x50]
	AbstractState* CurrentState;//[Offset: 0x150, Size: 0x8]
	byte Role;//[Offset: 0x158, Size: 0x1]

--------------------------------
Class: AbstractState.Object
	byte Role;//[Offset: 0x28, Size: 0x1]
	Actor* Owner;//[Offset: 0x30, Size: 0x8]
	void SetOwner(byte InRole, Actor* InOwner);// 0x7bee73c
	Actor* GetOwner();// 0xa11ba3c

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	int MaxBatchCount;//[Offset: 0x154, Size: 0x4]
	float MaxBatchSec;//[Offset: 0x158, Size: 0x4]
	BTNode*[] NodeInstances;//[Offset: 0x188, Size: 0x10]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x9ca066c
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x9ca0824
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x9ca0728

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x130, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x140, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x9cba698
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x9cba7e8
	Vector GetPathDestination();// 0x9cba714
	byte GetPathActionType();// 0x9cba74c

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x278, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x280, Size: 0x68]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2e9, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2ec, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2f0, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c8, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]
	bool bForceBiDirOffMeshCon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ApexAIPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	AIHearingEventConfig[] HearingConfig;//[Offset: 0x1c8, Size: 0x10]
	Actor* MuteActor;//[Offset: 0x1d8, Size: 0x8]
	float MuteActorTime;//[Offset: 0x1e0, Size: 0x4]
	int SightBodyHorizontalGrids;//[Offset: 0x1fc, Size: 0x4]
	int SightBodyVerticalGrids;//[Offset: 0x200, Size: 0x4]
	int SightBodyGridResolution;//[Offset: 0x204, Size: 0x4]
	bool DebugAISightBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	SoftClassPath[] OneSideActorClass;//[Offset: 0x240, Size: 0x10]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xf8, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0x108, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x120, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x1a8, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1b8, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x9c99f84
	void RequestStimuliListenerUpdate();// 0x9c9a510
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x9c9a524
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x9c9a448
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x9c9a160
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x9c9a258
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x9c9a350
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x9c9a044

--------------------------------
Class: AIHearingEventConfig
	enum HearingType;//[Offset: 0x0, Size: 0x1]
	float Range;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x9c9b07c
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x9c9b12c
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x9c9af88
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x57b4140
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x9c9ae08

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	int VisualLoggerEQSItemsNum;//[Offset: 0x9c, Size: 0x4]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0xa1, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa8, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xb0, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb8, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xc0, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xd0, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd8, Size: 0x8]
	void AILoggingVerbose();// 0xa3b9b1c
	void AIIgnorePlayers();// 0xa3b9b38

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	float ItemsSampleRate;//[Offset: 0x140, Size: 0x4]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x9cb4e8c

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]
	int GeneratorIdx;//[Offset: 0x40, Size: 0x4]
	int TestIdx;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]
	int QueryNodeIdx;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 0x4]
	byte TestPurpose;//[Offset: 0x34, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	RuntimeFloatCurve ScoreCurve;//[Offset: 0x1f0, Size: 0x88]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x279, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x9cb3ea8
	Vector[] GetResultsAsLocations();// 0x9cb3f60
	Actor*[] GetResultsAsActors();// 0x9cb4030
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x9cb4100
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x9cb41d0
	float GetItemScore(int ItemIndex);// 0x9cb42a0
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0xa1d39f8

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x9c96914

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x9cb9fa4
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x9cb9768
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x9cb95cc
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9cb9c5c
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9cb9e1c
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9cb985c
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9cb9a5c

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ApexAIComponent.ActorComponent.Object
	void OnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x797061c
	void OnMedicineStop(int ItemID);// 0x797078c
	void OnMedicineStart(int ItemID);// 0x7970808
	void OnMedicineBreak(int ItemID);// 0x7970710

--------------------------------
Class: CharacterTeamItemUseTipComponent.ActorComponent.Object
	void RPC_BattleItemUse(const BattleItemUseTipInfo BattleItemUseTipInfo);// 0x7b6df78
	void OnBattleItemUseStopEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x7b6e074
	void OnBattleItemUseStartEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x7b6e22c
	void OnBattleItemUseInteruptEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x7b6e150

--------------------------------
Class: BattleItemUseTipInfo
	Character* User;//[Offset: 0x0, Size: 0x8]
	float Duration;//[Offset: 0x8, Size: 0x4]
	uint32 ItemID;//[Offset: 0xc, Size: 0x4]
	byte EventType;//[Offset: 0x10, Size: 0x1]
	int TeamIdx;//[Offset: 0x14, Size: 0x4]
	int HealthHeal;//[Offset: 0x18, Size: 0x4]
	int ShieldHeal;//[Offset: 0x1c, Size: 0x4]
	int SkillID;//[Offset: 0x20, Size: 0x4]
	int PlayerKey;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ModifyAttributeData.Object
	enum NetExecutionPolicy;//[Offset: 0x28, Size: 0x1]
	float Duration;//[Offset: 0x2c, Size: 0x4]
	float Period;//[Offset: 0x30, Size: 0x4]
	int ModifyByPawnStateMask;//[Offset: 0x34, Size: 0x4]
	enum ChangeType;//[Offset: 0x38, Size: 0x1]
	AttributeModifierInfo[] Modifiers;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AttributeModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	enum ModifierOp;//[Offset: 0x38, Size: 0x1]
	enum SumOp;//[Offset: 0x39, Size: 0x1]
	DynamicSumOp DynamicSumOp;//[Offset: 0x40, Size: 0x20]
	AttributeModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x168]
	ModifyEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1c8, Size: 0x1]

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DynamicSumOp
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xb8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0xe0, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x158, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	AttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: AttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: CustomCalculationBasedFloat
	class ModifyMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: ModifyMagnitudeCalculation.AttributeCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const AttributeModifierSpec Spec);// 0x7d52284

--------------------------------
Class: AttributeCalculation.Object
	AttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AttributeModifierSpec
	FName Tip;//[Offset: 0x0, Size: 0x8]
	ModifyAttributeData* ModifyAttributeData;//[Offset: 0x8, Size: 0x8]
	byte RemoveMode;//[Offset: 0x10, Size: 0x1]
	Actor* Source;//[Offset: 0x14, Size: 0x8]
	ModifierSpec[] Modifiers;//[Offset: 0x20, Size: 0x10]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	AttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x38, Size: 0x28]
	float Level;//[Offset: 0x100, Size: 0x4]
	bool IsInitLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	FName PawnStateKey;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AttributeCaptureSpecContainer
	AttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	AttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: AttributeCaptureSpec
	AttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ModifyEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ApexTreasureDoor.ApexImpusleDoor.ApexDoor.SignificanceManagedActor.Actor.Object
	int TreasureDoorID;//[Offset: 0x534, Size: 0x4]
	float OpenDuringTime;//[Offset: 0x538, Size: 0x4]
	float FXTime;//[Offset: 0x53c, Size: 0x4]
	ItemDefineID KeyItemID;//[Offset: 0x540, Size: 0x18]
	int VaultOpenedEventID;//[Offset: 0x558, Size: 0x4]
	int NoVaultKeyPingID;//[Offset: 0x55c, Size: 0x4]
	int SelfHaveVaultKeyPingID;//[Offset: 0x560, Size: 0x4]
	int TeammateHaveVaultKeyPingID;//[Offset: 0x564, Size: 0x4]
	CommonBtnComponent* TriggeredBtnComponent;//[Offset: 0x568, Size: 0x8]
	bool IsAlreadyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	bool IsOpenning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1]
	PrimitiveComponent* LockComp;//[Offset: 0x588, Size: 0x8]
	ParticleSystemComponent* DoorLockAlarmParticle;//[Offset: 0x590, Size: 0x8]
	ParticleSystemComponent* LightAlarmParticle;//[Offset: 0x598, Size: 0x8]
	float AlarmInterval;//[Offset: 0x5a0, Size: 0x4]
	int AlarmCountPerExcute;//[Offset: 0x5a4, Size: 0x4]
	FName TreasureDoorAlarmSound;//[Offset: 0x5a8, Size: 0x8]
	Vector AlarmLocation;//[Offset: 0x5b0, Size: 0xc]
	int CurAlarmCount;//[Offset: 0x5bc, Size: 0x4]
	BoxComponent* ForbiddenBox;//[Offset: 0x5c8, Size: 0x8]
	bool bDebugAreadlyOpenForbidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	float ForbiddenCheckInterval;//[Offset: 0x5d4, Size: 0x4]
	Vector ForbiddenTransLocation;//[Offset: 0x5d8, Size: 0xc]
	enum[] ForbiddenTransStates;//[Offset: 0x5e8, Size: 0x10]
	ApexCharacter*[] NeedCheckForbiddenInPlayers;//[Offset: 0x5f8, Size: 0x10]
	void SetLockPrimitiveComp(PrimitiveComponent* Comp);// 0x7a5089c
	void ProcessTreasurePickups();// 0x7a506c0
	void OnTreasurePicked(Actor* PickByActor);// 0x7a50604
	void OnRep_RepIsAlreadyOpen();// 0x603fbb4
	void OnRep_CurAlarmCount();// 0x609c5f4
	void OnProgress(enum State, uint32 OpenerKey);// 0x7a509ac
	void OnForbiddenIn(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7a502ac
	void OnDropKey(Controller* Controller, ItemDefineID ItemDefineID, int count);// 0x7a506d4
	bool IsOpend();// 0x7a50954
	void CheckForForbiddenOut();// 0x7a50298
	void BP_TreasureDoorOnProgress(enum State);// 0xa1d39f8
	void BP_TreasureDoorFXStart_Event();// 0xa1d39f8

--------------------------------
Class: ApexImpusleDoor.ApexDoor.SignificanceManagedActor.Actor.Object
	float OpenDoorImpusle;//[Offset: 0x520, Size: 0x4]
	float BulletImpusleRate;//[Offset: 0x524, Size: 0x4]
	float OpenDoorImpusleMin;//[Offset: 0x528, Size: 0x4]
	void NetMulticastApplyImpusleEx(Vector Impusle, int Sequence);// 0x79fc0a4
	void NetMulticastApplyImpusle(Vector Impusle, int Sequence);// 0x79fc1e4

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	ApexDoor* TriggeredDoor;//[Offset: 0x100, Size: 0x8]
	BinActor* TriggeredBin;//[Offset: 0x110, Size: 0x8]
	HarvesterActor* TriggerHarvester;//[Offset: 0x138, Size: 0x8]
	Workbench* TriggerWorkbench;//[Offset: 0x140, Size: 0x8]
	int TriggerWorkbenchSide;//[Offset: 0x148, Size: 0x4]
	StageSwitchActor* TriggerStageSwitch;//[Offset: 0x160, Size: 0x8]
	GravityElevator* TriggeredGE;//[Offset: 0x178, Size: 0x8]
	void UIClickReplicatorUse();// 0xa10f6b8
	void UIClickReplicatorOutUse();// 0xa10f69c
	void UIClickOpenExtract();// 0xa10f6d4
	void UIClickOpenBin();// 0xa10f6f0
	void UIClick(bool bIsOpen);// 0x7b76dd4
	void ServerUseReplicator(Workbench* WorkbenchActor, int UseSide);// 0x7b76948
	void ServerStageSwitch(StageSwitchActor* StageSwitchActor);// 0x7b766a0
	void ServerOutUseReplicator(Workbench* WorkbenchActor);// 0x7b7685c
	void ServerOpenBin(BinActor* BinActor);// 0x7b76ba0
	void ServerExtract(HarvesterActor* HarvesterActor);// 0x7b76ab4
	FString GetModuleName();// 0x7b7678c
	void DoorRequireRPC(ApexDoor* actionDoor, bool bIsOpen);// 0x7b76ea0
	void ClientStartOpeningProgress(bool bShow, float TotalTime);// 0x7b76c8c
	void BP_ShowTreasureDoorOpeningProgress(bool bShow, float TotalTime);// 0x433fc7c
	void BP_ShowExtractBtn(bool bShow);// 0x433fc7c
	void BP_ShowDoorBtn(bool bShow, bool bOpen, bool bHasAuto, int DoorType);// 0x433fc7c

--------------------------------
Class: StageSwitchActor.Actor.Object
	int SwitchStageID;//[Offset: 0x278, Size: 0x4]
	float InteractiveDistance;//[Offset: 0x27c, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x280, Size: 0x10]
	bool IsHaveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	float ErrorTime;//[Offset: 0x294, Size: 0x4]
	float ErrorCD;//[Offset: 0x298, Size: 0x4]
	float ErrorRate;//[Offset: 0x29c, Size: 0x4]
	enum SwitchState;//[Offset: 0x2a0, Size: 0x1]
	TimerHandle ErrorCDTimerHandle;//[Offset: 0x2a8, Size: 0x8]
	TimerHandle ErrorTimerHandle;//[Offset: 0x2b0, Size: 0x8]
	void OnStageStateChange(int InStageID, bool Inactive);// 0x7e7b0bc
	void OnStageStageChangeEvent(enum State);// 0xa1d39f8
	void On_RepSwitchState();// 0x7e7b0a8

--------------------------------
Class: CarePackage.Actor.Object
	enum[] ForbiddenPawnState;//[Offset: 0x2f8, Size: 0x10]
	int ID;//[Offset: 0x308, Size: 0x4]
	int Level;//[Offset: 0x30c, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x310, Size: 0x8]
	ActivityDynamicMaterialComponent* DynamicMaterialComp;//[Offset: 0x318, Size: 0x8]
	enum CarePackageLootType;//[Offset: 0x320, Size: 0x1]
	CarePackageItemSocketDataAsset* CarePackageItemSocketDataAsset;//[Offset: 0x328, Size: 0x8]
	CarePackageLootPerSide[] LootZoneTypeInfos;//[Offset: 0x330, Size: 0x10]
	FString[] LootZoneTypeInfoAEs;//[Offset: 0x340, Size: 0x10]
	<int,CarePackageItemIDGroupData> ItemIDGroupDataMap;//[Offset: 0x350, Size: 0x50]
	bool bEnableLootConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	bool bEnableLootAEConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]
	<int,CarePackage_PickupInfo> DropList1;//[Offset: 0x3a8, Size: 0x50]
	<int,CarePackage_PickupInfo> DropList2;//[Offset: 0x3f8, Size: 0x50]
	<int,CarePackage_PickupInfo> DropList3;//[Offset: 0x448, Size: 0x50]
	float LootRange;//[Offset: 0x498, Size: 0x4]
	float NotOpenLootOffset;//[Offset: 0x49c, Size: 0x4]
	bool bHasLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	bool bHasOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1]
	ApexCharacter*[] PlayerInRange;//[Offset: 0x4a8, Size: 0x10]
	int CreateTime;//[Offset: 0x4c4, Size: 0x4]
	<int,int> ReportDropItemInfo;//[Offset: 0x4c8, Size: 0x50]
	Controller* OpenPackageController;//[Offset: 0x518, Size: 0x8]
	bool bEnableTickTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	bool bTriggerFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1]
	float CarePackageTickTime;//[Offset: 0x524, Size: 0x4]
	int TickTriggerIndex;//[Offset: 0x528, Size: 0x4]
	int PreTickTriggerIndex;//[Offset: 0x52c, Size: 0x4]
	CarePackageTickTriggerData[] TickTriggerDataArray;//[Offset: 0x530, Size: 0x10]
	CarePackageCustomDoor[] LifelineCustomDoorList;//[Offset: 0x540, Size: 0x10]
	CarePackageDoorEvolutionInfos[] LifelineDoorEvolutionList;//[Offset: 0x550, Size: 0x10]
	PickUpWrapperActor*[] CarePackagePickUpList;//[Offset: 0x560, Size: 0x10]
	void SetLootZoneTypeInfos(out const LootZoneTypeInfo[] InLootZoneTypeInfos);// 0x7b4a548
	void SetLifelineDoorEvolution(CarePackageDoorEvolutionInfos[] TmpList);// 0x7b49c08
	void SetLifelineCustomDoor(CarePackageCustomDoor[] TmpList);// 0x7b49da4
	void SetCarePackageLootType(enum InCarePackageLootType);// 0x7b4a470
	void ReportCarePackageFlow();// 0x7b4a24c
	void ReportCarePackageDropFlow();// 0x7b4a238
	void OnTickTriggerEvent(int TriggerIndex);// 0xa1087e4
	void OnServerOpened();// 0x7b4a774
	void OnServerLanded();// 0xa108abc
	void OnRep_HasOpened();// 0x5325cf4
	void OnRep_HasLanded();// 0x7b4a7b0
	void OnRep_Array();// 0x5143df0
	void OnPickUpBeenPicked(ApexCharacter* PickPlayer, int PickCount);// 0x7b4a0d8
	void OnDynamicChangeMaterial();// 0x7b4a758
	void OnCarePackageRealOpen();// 0x7b4a79c
	int GetSoundBankItemId();// 0xa1088bc
	enum GetItemSpawnReason();// 0xa108a80
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0xa1088f8
	void CreateDropItem();// 0x7b4a788
	void ClearItemIDGroupData();// 0x7b4a260
	void BP_OnSpawnItem(PickUpWrapperActor* dropItem1, PickUpWrapperActor* dropItem2, PickUpWrapperActor* dropItem3, FString socket1, FString socket2, FString socket3);// 0xa1d39f8
	void BP_OnOpenPackage();// 0xa1d39f8
	void BP_OnLandedPackage();// 0xa1d39f8
	void AddItemIDGroupData(int SlotIndex, int[] ItemIDGroup);// 0x7b4a274

--------------------------------
Class: CarePackageDoorEvolutionInfos
	CarePackageEvolutionInfo[] EvolutionInfos;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CarePackageEvolutionInfo
	int Level;//[Offset: 0x0, Size: 0x4]
	float Percent;//[Offset: 0x4, Size: 0x4]
	FString BackUpTableName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CarePackageCustomDoor
	enum DoorType;//[Offset: 0x0, Size: 0x1]
	FString TargetTableName;//[Offset: 0x8, Size: 0x10]
	FString BackUpTableName;//[Offset: 0x18, Size: 0x10]
	FString OtherTableName0;//[Offset: 0x28, Size: 0x10]
	FString OtherTableName1;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: CarePackageLootPerSide
	CarePackageLootTypeInfo[] LootItemsPerSide;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CarePackageLootTypeInfo
	int RandomCount;//[Offset: 0x0, Size: 0x4]
	float ChosenProbability;//[Offset: 0x4, Size: 0x4]
	LootZoneTypeInfo[] LootItems;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CarePackageItemIDGroupData
	int[] ItemIDGroup;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CarePackage_PickupInfo
	float Weight;//[Offset: 0x0, Size: 0x4]
	FString SocketName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CarePackageTickTriggerData
	float TriggerTime;//[Offset: 0x0, Size: 0x4]
	int TriggerIndex;//[Offset: 0x4, Size: 0x4]
	FName TriggerName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ApexAITeamController.AIController.Controller.Actor.Object
	enum[] NoLeaderPhase;//[Offset: 0x3e0, Size: 0x10]
	void UpdateLeader();// 0x7974f8c
	void ReceiveTeamLeaderChanged(ApexAIController* NewLeader);// 0xa1d39f8
	ApexAIController*[] GetTeammateControllers(ApexAIController* Except);// 0x7974fa0
	ApexAIController* GetTeamLeaderController();// 0x79750f0

--------------------------------
Class: MetaAIController.AIController.Controller.Actor.Object
	AIJumpScheduleComponent* JumpScheduler;//[Offset: 0x478, Size: 0x8]
	float TickInterval;//[Offset: 0x4d0, Size: 0x4]
	<FName,int> CounterLimit;//[Offset: 0x4d8, Size: 0x50]
	void RemoveConcurrency(FName CounterTag, Object* Controller, Object* VictimObject);// 0x7d2d998
	void OnTakeDamage(Controller* Damaged, float DamageAmount, Controller* DamageInstigator, Actor* Causer);// 0x7d2d228
	void OnServiceTick(AIController* BotController, out const MetaAICounterWatchItem[] CounterWatches, Object* VictimObject);// 0xa1d39f8
	void OnPlayerTakeDamage(Controller* AttackerPlayerController, Controller* VictimController);// 0xa1d39f8
	void OnJumpSchedule(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] AIControllers, out const ParachutePoint*[] ParachutePoints);// 0xa1d39f8
	void OnEndOverload(out const FName[] CounterTags, Object* VictimObject);// 0xa1d39f8
	void OnBotLeaveSubtree(out const FName[] CounterTags, AIController* BotController, Object* VictimObject);// 0xa1d39f8
	void OnBotEnterSubtree(out const FName[] CounterTags, AIController* BotController, Object* VictimObject);// 0xa1d39f8
	void OnBeginOverload(out const FName[] CounterTags, Object* VictimObject);// 0xa1d39f8
	bool HasPlayerInConcurrency(FName CounterTag, Object* VictimObject);// 0x7d2d454
	<Object*> GetOverloadedSet(FName CounterTag, Object* VictimObject);// 0x7d2de44
	Object*[] GetConcurrency(FName CounterTag, Object* VictimObject);// 0x7d2d5a0
	void DelayedRemoveConcurrency(FName CounterTag, Object* Controller, Object* VictimObject, float Delay);// 0x7d2d76c
	bool CanAddConcurrency(FName CounterTag, Object* VictimObject);// 0x7d2dcf8
	void AddConcurrency(FName CounterTag, Object* Controller, Object* VictimObject);// 0x7d2db48

--------------------------------
Class: AIJumpScheduleComponent.ActorComponent.Object
	<ApexAIController*,ParachutePoint*> JumpPlan;//[Offset: 0xf8, Size: 0x50]
	static <ApexAIController*,ParachutePoint*> SimpleRandomScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float ExtraDistance, float MaxDistance);// 0x7961d0c
	static <ApexAIController*,ParachutePoint*> SafeCircleBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float MaxDistance);// 0x79610a8
	void FinishJumpSchedule(out const <ApexAIController*,ParachutePoint*> Result);// 0x7962158
	static <ApexAIController*,ParachutePoint*> ChannelTeamMateBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float MaxDistance);// 0x7960c48
	static <ApexAIController*,ParachutePoint*> ChannelBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float MaxDistance);// 0x7961470
	static <ApexAIController*,ParachutePoint*> AreaBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float ExtraDistance, float MaxDistance, int MaxUses);// 0x7961838

--------------------------------
Class: ParachutePoint.TargetPoint.Actor.Object
	int Channel;//[Offset: 0x270, Size: 0x4]
	int ChannelMaxUses;//[Offset: 0x274, Size: 0x4]
	int ChannelMaxWeight;//[Offset: 0x278, Size: 0x4]
	int TeammateTag;//[Offset: 0x27c, Size: 0x4]

--------------------------------
Class: MetaAICounterWatchItem
	FName CounterTag;//[Offset: 0x0, Size: 0x8]
	BlackboardKeySelector OutValue;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xf8, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0x100, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0x110, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0x120, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x9cbbd14
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x9cbbe1c
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x9cbbc0c
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x9cbbc90

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0xa3bd300
	void Finish(byte WithResult);// 0x9cbaeec
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x9cbaf70

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x104, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0x108, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x118, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0x138, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x148, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x158, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x9b887d0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x9b88508

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x528c270
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xa1d39f8
	void EndTask();// 0x9b86b64

--------------------------------
Class: EnemyInfo

--------------------------------
Class: DynamicDmgCurve
	bool EnableAILevelAI2AI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve AILevelDamage;//[Offset: 0x8, Size: 0x88]
	RuntimeFloatCurve AILevelHit;//[Offset: 0x90, Size: 0x88]
	RuntimeFloatCurve AI2PlayerDamage;//[Offset: 0x118, Size: 0x88]
	RuntimeFloatCurve AI2PlayerHit;//[Offset: 0x1a0, Size: 0x88]
	RuntimeFloatCurve AI2AIDamage;//[Offset: 0x228, Size: 0x88]
	RuntimeFloatCurve AI2AIHit;//[Offset: 0x2b0, Size: 0x88]
	RuntimeFloatCurve AIVelocityFixHit;//[Offset: 0x338, Size: 0x88]
	RuntimeFloatCurve AIDistanceFixHit;//[Offset: 0x3c0, Size: 0x88]
	RuntimeFloatCurve AI2TeammateAIHit;//[Offset: 0x448, Size: 0x88]
	RuntimeFloatCurve AI2TeammateAIDamage;//[Offset: 0x4d0, Size: 0x88]

--------------------------------
Class: HitPositionConfig
	enum Position;//[Offset: 0x0, Size: 0x1]
	float Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SVONNavigationComponent.ActorComponent.Object
	bool DebugPrintCurrentPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool DebugPrintMortonCodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool DebugDrawOpenNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	bool UseUnitCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 0x1]
	float UnitCost;//[Offset: 0xfc, Size: 0x4]
	float EstimateWeight;//[Offset: 0x100, Size: 0x4]
	float NodeSizeCompensation;//[Offset: 0x104, Size: 0x4]
	enum PathCostType;//[Offset: 0x108, Size: 0x1]
	int SmoothingIterations;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: PickupTipActor.Actor.Object
	PickupTipWidgetComponent* TipWidgetComp;//[Offset: 0x270, Size: 0x8]
	ParticleSystemComponent* TipParticleSystemComp;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PS1;//[Offset: 0x280, Size: 0x8]
	ParticleSysParam ParticleSysParam1;//[Offset: 0x290, Size: 0x80]
	ParticleSysParam ParticleSysParam2;//[Offset: 0x310, Size: 0x80]
	ParticleSysParam ParticleSysParam3;//[Offset: 0x390, Size: 0x80]
	ParticleSysParam ParticleSysParam4;//[Offset: 0x410, Size: 0x80]
	ParticleSysParam ParticleSysParam5;//[Offset: 0x490, Size: 0x80]
	Vector AutonomousPickupTipOffset;//[Offset: 0x510, Size: 0xc]
	Vector SimulatedPickupTipOffset;//[Offset: 0x51c, Size: 0xc]
	float PlayPickupTipTimes;//[Offset: 0x528, Size: 0x4]
	float PlayPickupTipInterval;//[Offset: 0x52c, Size: 0x4]
	bool bSwitchRollPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	bool bSwitchRollYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1]
	bool bSwitchPitchYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 0x1]
	bool bUseRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x533, Size: 0x1]
	bool bUsePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	bool bUseYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]
	bool bUseCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x536, Size: 0x1]
	Rotator ExtraRotation;//[Offset: 0x538, Size: 0xc]
	Rotator CorrectRotation;//[Offset: 0x544, Size: 0xc]
	ApexCharacter* pOwner;//[Offset: 0x550, Size: 0x8]
	void PickupTipPlayEnd();// 0x7dc5468
	void PickupTipIntervalEnd();// 0x7dc5454

--------------------------------
Class: PickupTipWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PickupTipInfo
	byte UniqueID;//[Offset: 0x0, Size: 0x1]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int DriverID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: EnmityEntity.ActorComponent.Object
	SyncEnmityInfo[] SynEnmityList;//[Offset: 0xf8, Size: 0x10]
	<Actor*,EnmityRealTimeInfo> m_EnmityMap;//[Offset: 0x128, Size: 0x50]
	void SyncTestClient();// 0xa11b030
	void OnRep_EnmityList();// 0x48ac5d8
	float GetLeaveBattleStateTime();// 0xa11aff8
	void EnableServerLog(bool bEnableServerLog);// 0x7be84b8
	void EnableClientLog(bool bEnableClientLog);// 0x7be8584
	void ClientLeaveBattle();// 0xa11b014
	void ClientEnterBattle(const SyncEnmityInfo SyncEnmityInfo);// 0x7be83f0

--------------------------------
Class: SyncEnmityInfo
	int64 ID;//[Offset: 0x0, Size: 0x8]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	float EnmityValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: EnmityRealTimeInfo
	EnmityInfo EnmityInfo;//[Offset: 0x0, Size: 0x20]
	EnmityTableInfo EnmityTableInfo;//[Offset: 0x20, Size: 0x20]
	float EnmityValue;//[Offset: 0x40, Size: 0x4]
	float ElpaseTime;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: EnmityInfo
	int EEnmityType;//[Offset: 0x0, Size: 0x4]
	int SubID;//[Offset: 0x4, Size: 0x4]
	bool Initiative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Actor* Target;//[Offset: 0xc, Size: 0x8]
	float Distance;//[Offset: 0x14, Size: 0x4]
	float DamageNumber;//[Offset: 0x18, Size: 0x4]
	bool bShootNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: EnmityTableInfo
	int64 ID;//[Offset: 0x0, Size: 0x8]
	int EEnmityType;//[Offset: 0x8, Size: 0x4]
	int SubID;//[Offset: 0xc, Size: 0x4]
	bool Initiative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float SrourceCoefficient;//[Offset: 0x14, Size: 0x4]
	float ClosePickupList_Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RecoverPropComponent.ActorComponent.Object
	<int,BaseRecoverPropItem*> RecoverPropItemMap;//[Offset: 0x100, Size: 0x50]
	RecoverPropSyncInfo RecoverPropSyncInfo;//[Offset: 0x150, Size: 0x10]
	bool UseItem(int ItemID);// 0x7e0a1a0
	void RPCServerRecoverProp(int InGUID, int ItemID, float StartTimestamp, enum ERecoverPropUseType, bool bContinuous);// 0x7e097c0
	void RPCServerEnableLog(bool bEnableLog);// 0x7e0a0c0
	void RPCServer_RemoveBuff(RecoverPropBuffInfo BuffInfo);// 0x7e09dc8
	void RPCServer_AddBuff(RecoverPropBuffInfo BuffInfo);// 0x7e09f44
	void RPCClientEndRecoverProp(int InGUID, int ItemID, enum ERecoverPropUseType, bool bCancel, bool bCanContinue, const enum[] ErrorCodeList);// 0x7e09448
	void RemoveBuff(out const RecoverPropBuffInfo BuffInfo);// 0x7e09bc0
	void OnRep_RecoverPropUpdate();// 0x52cdb60
	void OnItemNumberChanaged(ItemDefineID DefineID, int State);// 0x7e09a78
	void OnHealthInfoChange(uint32 PlayerKey, enum SyncType, ApexCharacter* Character, ApexPlayerState* PlayerState, bool NeedFadeHealthIn);// 0x46d1840
	void OnAppEnterForeground();// 0x546f5e0
	void InterruptRecoverProp();// 0x7e0a18c
	void ClientStartFailed(const enum[] ErrorCodeList);// 0x7e09354
	void Cancel();// 0x5c4d190
	bool BP_IsRecoveringProp();// 0x56cbe90
	void AddBuff(out const RecoverPropBuffInfo BuffInfo);// 0x7e09cc4

--------------------------------
Class: RecoverPropBuffInfo
	FString Tag;//[Offset: 0x0, Size: 0x10]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	enum eBuffType;//[Offset: 0x14, Size: 0x1]
	float Value;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BaseRecoverPropItem.RecoverPropCommonBase.Object
	FString Desc;//[Offset: 0x28, Size: 0x10]
	bool CanContinueUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum RecoverPropPawnState;//[Offset: 0x39, Size: 0x1]
	BaseRecoverPropPhase*[] PhaseList;//[Offset: 0x40, Size: 0x10]
	BaseRecoverPropPhase* CancelPhase;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: RecoverPropCommonBase.Object

--------------------------------
Class: BaseRecoverPropPhase.RecoverPropCommonBase.Object
	float PhaseDuringTime;//[Offset: 0x28, Size: 0x4]
	BaseRecoverPropCondition*[] ConditionList;//[Offset: 0x30, Size: 0x10]
	BaseRecoverPropAction*[] ActionList;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BaseRecoverPropCondition.RecoverPropCommonBase.Object
	bool IsNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum[] ErrorCodeList;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: BaseRecoverPropAction.RecoverPropCommonBase.Object
	enum ERecoverPropExecuteEnd;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: RecoverPropSyncInfo
	int UniqueID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	float StartTimestamp;//[Offset: 0x8, Size: 0x4]
	enum ERecoverPropUseType;//[Offset: 0xc, Size: 0x1]
	bool bContinuous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: ActionFilterComponent.ActorComponent.Object
	SyncActionFilterInfo SyncFilterItem;//[Offset: 0xf8, Size: 0x18]
	void RPCFilterIDChanged(const int InID, FName InTag, bool bAdd);// 0x79470b4
	void RPCClear();// 0xa0c3a5c
	void RemoveFilterID(const int InID, FName InTag, bool bExecuteOnlyLocal);// 0x794755c
	void OnRep_ActionFilterInfo();// 0x55783c0
	bool IsAllowByPawnState(const enum EPawnState, const enum eOverrideState);// 0x7947354
	bool IsAllowByActionType(const enum EPawnActionFilterType);// 0x7947278
	void Clear(bool bExecuteOnlyLocal);// 0x7947498
	void AddFilterID(const int InID, FName InTag, bool bExecuteOnlyLocal);// 0x7947718

--------------------------------
Class: DeathTotem.SkillActorBase.DynamicMovementActor.Actor.Object
	float InitialHealth;//[Offset: 0x578, Size: 0x4]
	float CurrentHealth;//[Offset: 0x57c, Size: 0x4]
	bool InteractionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1]
	bool AutonomousPlayerCanShowProtectBtn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x580, Size: 0x1]
	bool ProtectionEffectCleared;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x580, Size: 0x1]
	float ProtectionDuration;//[Offset: 0x584, Size: 0x4]
	bool EnableRangeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	float RangeCheckRadius;//[Offset: 0x58c, Size: 0x4]
	float RangeCheckBuffKeepPeriod;//[Offset: 0x590, Size: 0x4]
	float InteractRangeRadius;//[Offset: 0x594, Size: 0x4]
	ApexSkillInteractiveParam* ApexSkillInteractiveParam;//[Offset: 0x598, Size: 0x8]
	ApexCharacterReviveInfo[] ReviveList;//[Offset: 0x648, Size: 0x10]
	int BackCount;//[Offset: 0x658, Size: 0x4]
	float BackHealthTotal;//[Offset: 0x65c, Size: 0x4]
	int TeammateEnableCount;//[Offset: 0x660, Size: 0x4]
	int EnemyEnableCount;//[Offset: 0x664, Size: 0x4]
	void SuggestProtectionForLocalPlayer(ApexCharacter* Player, bool SuggestEnable);// 0x7bb9938
	void ServerSwitchTotemProtection(ApexCharacter* Player, bool EnableProtection);// 0x7bb9a78
	void ReportDeathTotem();// 0x7bb9778
	void OnRep_CharacterReviveList();// 0x5f650d8
	void OnDeathTotemOffProtectionByDamage(float RecordedHealth);// 0x7bb96bc
	bool InPlayerSight(ApexCharacter* Player);// 0x7bb978c
	bool HasEverProtected(const ApexCharacter* Player);// 0x7bb985c
	void ClearProtectionEffect();// 0x7bb9924
	void BP_OnFinish();// 0xa1d39f8
	void BP_OnDisconnectPlayer(ApexCharacter* Player);// 0xa1d39f8
	void BP_OnConnectPlayer(ApexCharacter* Player);// 0xa1d39f8
	void BP_OnCharacterReviveListUpdate();// 0xa1d39f8
	void BP_OnBeingDamaged(int DamageType, Pawn* Attacker, bool IsFatal);// 0xa1d39f8

--------------------------------
Class: ApexSkillInteractiveParam.SkillEventParam.Object
	bool bCheckBlocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	byte CheckBlockingChannel;//[Offset: 0x61, Size: 0x1]
	class Object[] CheckBlockingIgnoreClass;//[Offset: 0x68, Size: 0x10]
	enum[] InvalidPawnStateArray;//[Offset: 0x78, Size: 0x10]
	bool bCheckHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float MaxHeightDiffFPP;//[Offset: 0x8c, Size: 0x4]
	float MaxHeightDiffTPP;//[Offset: 0x90, Size: 0x4]
	bool bCheckDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float MaxDistanceFPP;//[Offset: 0x98, Size: 0x4]
	float MaxDistanceTPP;//[Offset: 0x9c, Size: 0x4]
	bool bMaxDistanceIgnoreZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bCheckFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	bool bCheckFacingNoPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]
	float MaxInteractiveAngleFPP;//[Offset: 0xa4, Size: 0x4]
	float MaxInteractiveAngleTPP;//[Offset: 0xa8, Size: 0x4]
	Vector TargetInteractiveOffset;//[Offset: 0xac, Size: 0xc]
	Vector TargetInteractiveOffsetOnCrouch;//[Offset: 0xb8, Size: 0xc]
	bool bUseMeshRotationWhenTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool ShouldStartInteractive(ApexCharacter* Character, Actor* PassiveActor);// 0x7a458bc

--------------------------------
Class: ApexCharacterReviveInfo
	ApexCharacter* RevivePlayer;//[Offset: 0x0, Size: 0x8]
	DeathTotem* DeathTotem;//[Offset: 0x8, Size: 0x8]
	bool ReviveInfoValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool RecordedIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	float ReviveInfoValidEndTime;//[Offset: 0x14, Size: 0x4]
	float RecordedHealth;//[Offset: 0x18, Size: 0x4]
	float RecordedSpeed;//[Offset: 0x1c, Size: 0x4]
	Vector ReviveLocation;//[Offset: 0x20, Size: 0xc]
	Quat ReviveQuatRotation;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ReplicateInputInfo
	float ForwardInput;//[Offset: 0x0, Size: 0x4]
	float RightInput;//[Offset: 0x4, Size: 0x4]
	bool AimToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: VoidDoorActor.SkillActorPlacedBase.SkillActorBase.DynamicMovementActor.Actor.Object
	float MaxRiftPoint;//[Offset: 0x560, Size: 0x4]
	float RiftPointPerMeter;//[Offset: 0x564, Size: 0x4]
	float EffectiveSquaredDistance;//[Offset: 0x568, Size: 0x4]
	float PathMaxDistance;//[Offset: 0x56c, Size: 0x4]
	float RecordInterval;//[Offset: 0x570, Size: 0x4]
	float EfficientDelay;//[Offset: 0x574, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x578, Size: 0x4]
	float StandCapsuleHalfHeight;//[Offset: 0x57c, Size: 0x4]
	float CrouchCapsuleHalfHeight;//[Offset: 0x580, Size: 0x4]
	Vector StandCapsuleOffset;//[Offset: 0x584, Size: 0xc]
	Vector CrouchCapsuleOffset;//[Offset: 0x590, Size: 0xc]
	float RemainRiftPoint;//[Offset: 0x5a0, Size: 0x4]
	enum RecordStatus;//[Offset: 0x5a4, Size: 0x1]
	bool bHasValidPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 0x1]
	float PathMoveTime;//[Offset: 0x5a8, Size: 0x4]
	RecordPathNodeData[] PathList;//[Offset: 0x5b0, Size: 0x10]
	RecordPathNodeData[] TempPathList;//[Offset: 0x5c0, Size: 0x10]
	CapsuleComponent* StartRift;//[Offset: 0x5d0, Size: 0x8]
	CapsuleComponent* EndRift;//[Offset: 0x5d8, Size: 0x8]
	float EfficientDelayTime;//[Offset: 0x5e0, Size: 0x4]
	ApexCharacter* OwnerCharacter;//[Offset: 0x5e8, Size: 0x8]
	ApexCharacterMovementComponent* OwnerCMC;//[Offset: 0x5f0, Size: 0x8]
	SkillModifierInfo OverrideStateSkillModifier;//[Offset: 0x5f8, Size: 0x28]
	CapsuleComponent* OwnerCapsuleComp;//[Offset: 0x658, Size: 0x8]
	VoidMover*[] EnteredMovers_Server;//[Offset: 0x660, Size: 0x10]
	float EnterInterval;//[Offset: 0x6c0, Size: 0x4]
	float EnterSameInterval;//[Offset: 0x6c4, Size: 0x4]
	float MinMoveDuration;//[Offset: 0x6c8, Size: 0x4]
	float MaxMoveDuration;//[Offset: 0x6cc, Size: 0x4]
	float MoveSpeed;//[Offset: 0x6d0, Size: 0x4]
	float DirUpdateInterval;//[Offset: 0x6d4, Size: 0x4]
	class VoidMover* VoidMoverTemplate;//[Offset: 0x6d8, Size: 0x8]
	float LifeDuration;//[Offset: 0x6e4, Size: 0x4]
	float OutBlueCircleLifeDuration;//[Offset: 0x6e8, Size: 0x4]
	RadiationCircleStateComponent* CurCircleStateComp;//[Offset: 0x6f0, Size: 0x8]
	float BornDuration;//[Offset: 0x6f8, Size: 0x4]
	float OutBlueCircleDuration;//[Offset: 0x6fc, Size: 0x4]
	bool InBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	void StartRecordPath();// 0x7f2c04c
	void SetRemainRiftPoint(float inRemainRiftPoint);// 0xa191328
	void SetRecordStatus(enum inRecordStatus);// 0xa191234
	void SetPathMoveTime(float inPathMoveTime);// 0xa191044
	void SetHasValidPoint(bool inHasValidPoint);// 0xa191138
	void Rep_RemainRiftPoint();// 0xa19100c
	void Rep_RecordStatus();// 0x5dea108
	void RecordComplete();// 0x7f2bfb0
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x7f2ba7c
	void OnRiftEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x7f2b464
	void OnRiftBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7f2b6d4
	void OnRep_PathMoveTime();// 0xa190fec
	void OnRep_PathList();// 0x58e444c
	bool HasValidPoint();// 0xa191218
	RecordPathNodeData[] GetValidPath(RecordPathNodeData[] List);// 0x7f2bdb8
	float GetRemainRiftPoint();// 0xa191400
	enum GetRecordStatus();// 0xa19130c
	float GetPathMoveTime();// 0xa19111c
	RecordPathNodeData[] GetPathList();// 0x7f2bfc4
	void CheckRecordStateCompleted();// 0xa19141c
	bool CheckPointValid(Vector StartPoint, Vector EndPoint);// 0x7f2bc1c
	void BP_SetRiftEffect(CapsuleComponent* Rift, const RecordPathNodeData NodeData);// 0xa1d39f8
	void BP_RecordSuccess();// 0xa1d39f8
	void BP_RecordFailure();// 0xa1d39f8
	void BP_OnBlueCircleStateChanged(bool InBlue);// 0xa1d39f8

--------------------------------
Class: SkillActorPlacedBase.SkillActorBase.DynamicMovementActor.Actor.Object
	void SetPreLocation(out const SkillLocPickInfo PickInfo);// 0x7e57e8c

--------------------------------
Class: RecordPathNodeData
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	bool WasCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: VoidMover.VoidActor.SkillActorBase.DynamicMovementActor.Actor.Object
	float SwitchModeLerpInTime;//[Offset: 0x5c0, Size: 0x4]
	float SwitchModeLerpOutTime;//[Offset: 0x5c4, Size: 0x4]
	float BlockCollisionRadiusScale;//[Offset: 0x5c8, Size: 0x4]
	float BlockCollisionStandHalfHeightScale;//[Offset: 0x5cc, Size: 0x4]
	float BlockCollisionCrouchHalfHeightScale;//[Offset: 0x5d0, Size: 0x4]
	Vector BlockCollisionRHeightOffset;//[Offset: 0x5d4, Size: 0xc]
	float RotateFactor;//[Offset: 0x5e0, Size: 0x4]
	bool BacktrackIfBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]
	int[] PawnProxyParticleIDs;//[Offset: 0x5e8, Size: 0x10]
	MovePathData MovePathData;//[Offset: 0x600, Size: 0x30]
	bool bWaitTickMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 0x1]
	Actor*[] ActorsToIgnore;//[Offset: 0x6d8, Size: 0x10]
	void ServerUpdateCharacterLocation(const VoidMoveSynData SynData);// 0x7f2dfa4
	void OnTargetCharacterBeDestroyed();// 0x7f2e05c
	void OnRep_WaitTickMove(bool bLastState);// 0x5c367c8
	void OnRep_MovePathData();// 0x52f4ad8
	void OnOverridePawnStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x584971c
	void AddTrackerValue(VoidDoorActor* OwnerDoor, ApexCharacter* EnterCharacter);// 0xa1d39f8

--------------------------------
Class: VoidActor.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bDoActionAtAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]
	FName PostProcessTemplate;//[Offset: 0x554, Size: 0x8]
	enum PostProcessSource;//[Offset: 0x55c, Size: 0x1]
	class Actor* GhostingSpawnerTemplate;//[Offset: 0x560, Size: 0x8]
	bool bLimitEnterInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	Actor* GhostingSpawner;//[Offset: 0x570, Size: 0x8]
	EnteredVoidInfo EnteredVoidInfo;//[Offset: 0x57c, Size: 0xc]
	bool bAutoSetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	bool bCanSeeOtherInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 0x1]
	bool bCanSeeOtherVoidInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5be, Size: 0x1]
	bool bClearComponentOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bf, Size: 0x1]
	void OnRep_EnteredVoidInfo();// 0x7f2ad00
	void ExitVoid(ApexCharacter* Character);// 0xa190dbc
	void EnterVoid(ApexCharacter* Character);// 0xa190e94
	void DoClientCharacterMesh(ApexCharacter* Character, SkeletalMeshComponent* CharacterMesh, bool IsEnter);// 0xa1908dc
	void DoClientCameraEffect(ApexCharacter* Character, CameraComponent* CameraComponent, bool IsEnter);// 0xa1906dc
	void DoClientAction(ApexCharacter* Character, bool IsEnter);// 0xa190c4c
	void BP_DoClientAction(ApexCharacter* Character, bool IsEnter);// 0xa190adc
	void AddTrackerForEnterTime(ApexCharacter* Character, float Time);// 0x7f2aba0

--------------------------------
Class: VoidMoveSynData
	int CurPointIndex;//[Offset: 0x0, Size: 0x4]
	int NextPointIndex;//[Offset: 0x4, Size: 0x4]
	bool bArrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector BlockLocation;//[Offset: 0xc, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovePathData
	ApexCharacter* TargetCharacter;//[Offset: 0x0, Size: 0x8]
	RecordPathNodeData[] MovePathList;//[Offset: 0x8, Size: 0x10]
	VoidDoorActor* OwnerDoor;//[Offset: 0x18, Size: 0x8]
	float PathMoveTime;//[Offset: 0x20, Size: 0x4]
	bool bReversal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float MinMoveDuration;//[Offset: 0x28, Size: 0x4]
	float DirUpdateInterval;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: EnteredVoidInfo
	ApexCharacter* Character;//[Offset: 0x0, Size: 0x8]
	bool IsEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PropsWeaponFadeOutParams
	enum FadeOutReason;//[Offset: 0x0, Size: 0x1]
	float FadeOutTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BroadcastMsgData
	enum BroadcastMsgType;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x258, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x25c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x268, Size: 0xc]
	float ProbeSize;//[Offset: 0x274, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x278, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x279, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x279, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x279, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x279, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x279, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x279, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x279, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x279, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27a, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x27c, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x280, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x284, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x288, Size: 0x4]
	bool IsCollisionFixApplied();// 0x99b6dcc
	Vector GetUnfixedCameraPosition();// 0x99b6e0c
	Rotator GetTargetRotation();// 0x99b6e54

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	ParachuteStartInfo ParachuteStartInfo;//[Offset: 0x128, Size: 0x20]
	enum DesireParachuteReason;//[Offset: 0x148, Size: 0x1]
	ApexCharacterBase*[] ParachuteTeamCharacterBases;//[Offset: 0x150, Size: 0x10]
	float ServerPredictPercent;//[Offset: 0x190, Size: 0x4]
	byte CurParachuteState;//[Offset: 0x194, Size: 0x1]
	FString LastParachuteTriggerObjectIDName;//[Offset: 0x198, Size: 0x10]
	bool IsParachuteRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	ParachuteInputInfo ReplicatedParachuteInputInfo;//[Offset: 0x1ac, Size: 0xc]
	ReplicatedMoveState ReplicatedMoveState;//[Offset: 0x1c4, Size: 0x2c]
	float MoveForwardInputValue;//[Offset: 0x1f4, Size: 0x4]
	float MoveRightInputValue;//[Offset: 0x1f8, Size: 0x4]
	ParachuteOverrideConfig CurParachuteConf;//[Offset: 0x1fc, Size: 0x10]
	Actor*[] TempFollowers;//[Offset: 0x218, Size: 0x10]
	ParticleEffectSetCfg CurActiveParachuteEffectIDSet;//[Offset: 0x228, Size: 0x50]
	int JumpTailID;//[Offset: 0x2ac, Size: 0x4]
	int[] JumpExpressionID;//[Offset: 0x2b0, Size: 0x10]
	delegate EventOnChangeParachuteState;//[Offset: 0x2d0, Size: 0x10]
	bool bUseDRSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float DRLerpTime;//[Offset: 0x33c, Size: 0x4]
	float DRSimulateTime;//[Offset: 0x340, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x344, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x348, Size: 0x4]
	float MaxSmoothNetUpdateDist;//[Offset: 0x34c, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x350, Size: 0x4]
	ApexCharacterBase* OwnerCharacterBase;//[Offset: 0x360, Size: 0x8]
	ApexPlayerState* OwnerPlayerState;//[Offset: 0x368, Size: 0x8]
	static bool WillTeamParachutingByParachuteReason(const ApexPlayerState* TargetPS, out const enum Reason);// 0x7b64fc0
	void UploadParachuteMoveState(float DeltaTime);// 0x7b63d64
	void UpdateParachuteTransform(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x7b640dc
	void UpdateAttachmentInfoAtDS();// 0x7b634f0
	void UpdateAttachedCharacterMovement();// 0x7b63504
	void TryNotifyFollowerStopParachuteAtDS();// 0x7b64954
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput);// 0x7b65610
	void StopParachuteAtDS();// 0x7b6497c
	void StopParachuteAtClient();// 0x7b64968
	void StopDoExpressionDelay(float DelayTime);// 0x7b62d30
	void StopDoExpression();// 0x7b62d1c
	void SetupCharacterMovement(enum NewState);// 0x7b64898
	void SetSingleParachuteStatusAtDS(bool NewSingleParachuteStatus);// 0x7b64608
	void SetParachuteState(enum NewState);// 0x7b63808
	void SetParachuteInfo(bool bIsStartOrStop, enum TriggerReason);// 0x7b64bf0
	void SetJumpTailID(int NewJumpTailID);// 0x7b6318c
	void SetDesireParachuteReason(enum NewReason);// 0x7b6510c
	void ServerUpdateParachuteInputInfo(float InThrottleInput, float InSteeringInput, byte State);// 0x7b63ba8
	void ServerStopParachute(Vector ClientLandLocation);// 0x7b64990
	void ServerStartParachute(enum TriggerReason);// 0x7b64a54
	void ServerSetSingleParachuteStatus(bool NewSingleParachuteStatus);// 0x7b6453c
	void ServerReportParachuteSecurityData(const SecJumpFlow ClientJumpFlow);// 0x7b63248
	void ServerDoExpression(int ID);// 0x7b62dec
	void Server_OverrideParachuteConfig(const ParachuteOverrideConfig Conf);// 0x7b63518
	void SendClientMoveToServerUnreliaby(float Timestamp, const Vector Position, const Vector WorldVelocity);// 0x7b639f4
	bool SendClientMoveToServerInternal(float Timestamp, out const Vector Position, out const Vector WorldVelocity);// 0x7b63efc
	void ResetClientPositionOnParachute(Vector NewLocation);// 0x7b63930
	static void ReqLeaveParachuteTeam(const Object* WorldContext);// 0x7b643c0
	static void ReqJoinParachuteTeam(const Object* WorldContext);// 0x7b64314
	void ReportParachuteFlowData();// 0x7b6333c
	void ReportParachuteData();// 0x7b63350
	void RefreshParachuteTeamIndexAtDS(bool UpdateAttachment);// 0x7b64b18
	void RefreshParachuteStateAtClient();// 0x7b64bdc
	void RefreshFollowInfoAtDS();// 0x7b634dc
	void PostParachute();// 0x7b64884
	void OverrideParachuteConfig(out const ParachuteOverrideConfig Conf);// 0x6004e1c
	void OnRep_ReplicatedMoveState();// 0x4af51b4
	void OnRep_ParachuteState(byte LastState);// 0x4e86564
	void OnRep_ParachuteStartInfo();// 0x4e9e294
	void OnParachuteStateChanged(enum LastState, enum NewState);// 0x7b636d0
	void OnLeaveParachuteState();// 0x7b655e8
	void OnEnterParachuteState();// 0x7b655fc
	void LookAtTargetPoint(Vector TargetPoint);// 0x7b63364
	bool IsTeamParachuting();// 0xa10d8c4
	bool IsParachuting();// 0xa10d81c
	bool IsParachuteExpression();// 0xa10d7b0
	static bool IsLocalPlayerIsSingleParachute(const Object* WorldContext);// 0x7b64704
	static bool IsLocalPlayerIsCommander(const Object* WorldContext);// 0x7b647c4
	bool IsFollowParachuting();// 0x7b64d94
	bool IsAuthorityParachuting();// 0x7b64dd8
	bool IsAloneParachuting();// 0xa10d898
	Vector2D GetSpeedRange();// 0x7b638c4
	int GetSafeJumpTailID();// 0x7b63158
	Vector GetParachuteWorldVelocity();// 0x7b638f8
	float GetParachuteSpeedLength();// 0xa10d800
	enum GetDesireParachuteReason();// 0xa10d8f0
	ApexCharacter* GetDesireParachuteLeaderByParachuteReason(out const enum Reason);// 0x7b64eec
	int GetCurrentParachuteTeamSize();// 0xa10d874
	int GetCurrentParachuteTeamIndex();// 0x7b64eb8
	enum GetCurrentParachuteReason();// 0xa10d90c
	ApexPlayerState* GetCurrentParachuteLeaderPS();// 0x7b64e84
	int GetCurrentParachuteLeaderPlayerKey();// 0xa10d838
	ApexCharacter* GetCurrentParachuteLeader();// 0x7b64e50
	ApexCharacter* GetCurrentParachuteAttachParent();// 0x7b64e1c
	enum GetCurrentOrDesireParachuteReason();// 0x7b651c4
	void EndAutoParachute();// 0xa10d7e8
	bool EnableSwitchSingleParachuteStatus(bool NewSingleParachuteStatus);// 0x7b6446c
	void ClientMulticastStartParachuteEmote_ForRealPlayer(int EmoteID);// 0x7b62eb0
	void ClientMulticastStartParachuteEmote(int EmoteID);// 0x7b62c58
	void Client_OverrideParachuteConfig(const ParachuteOverrideConfig Conf);// 0x7b635f4
	bool CheckClientPosition(out const Vector Position);// 0x7b63e20
	bool CanUseJumpEmoteWithID(int InJumpTailID);// 0x7b62f74
	bool CanUseJumpEmote();// 0x7b6303c
	bool CanReJoinPlaneParachuteTeam();// 0x7b646cc
	bool CanParachuting();// 0x7b64d30
	static bool CanLocalCharacterUseJumpEmote(const Object* WorldContext);// 0x7b63098
	void BeginAutoParachute(Vector TargetPoint);// 0x7b63420
	void ApplyParachuteCompData(CharacterParachuteComponent* Other);// 0x7b657c0
	static void ApexStopParachute(ApexCharacterBase* TargetCharacter);// 0x7b65214
	static void ApexStartParachute(ApexCharacterBase* TargetCharacter, enum TriggerReason, ApexCharacterBase* LeaderCharacter, byte ParachuteIndex, bool IsForceJump, Vector DesireLocation);// 0x7b652c0

--------------------------------
Class: ParachuteStartInfo
	bool bIsStartOrStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	int[] ParachuteTeamPlayerKeys;//[Offset: 0x8, Size: 0x10]
	enum ParachuteReason;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: SecJumpFlow
	FString SecReportData;//[Offset: 0x0, Size: 0x10]
	int PlayerSpeedMax1;//[Offset: 0x10, Size: 0x4]
	int PlayerSpeedMax2;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ParachuteOverrideConfig
	bool bForceHorizontalRotationAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ParachuteNoControlTimeSinceStart;//[Offset: 0x4, Size: 0x4]
	float InitSpeedLength;//[Offset: 0x8, Size: 0x4]
	float InitResapwnSpeedLength;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ParachuteInputInfo
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]
	float SteerInput;//[Offset: 0x4, Size: 0x4]
	byte ParachuteState;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ReplicatedMoveState
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector WorldVelocity;//[Offset: 0x18, Size: 0xc]
	float SpeedLength;//[Offset: 0x24, Size: 0x4]
	float SimulateServerTimeStamp;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleEffectSetCfg
	<enum,ParticleSystem*> ParachuteEffects;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: CharacterConfigDataAsset.DataAsset.Object
	bool bKinematicBonesUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	byte FoldGunLineTraceChannel;//[Offset: 0x31, Size: 0x1]
	byte ForbiddenZoneActionFilterId;//[Offset: 0x32, Size: 0x1]
	byte CfgRespawnTimeoutSec;//[Offset: 0x33, Size: 0x1]
	byte CfgRespawnTeammateTimeSec;//[Offset: 0x34, Size: 0x1]
	float DeathFadeOutTime;//[Offset: 0x38, Size: 0x4]
	float ForbidEmojiAnimationTime;//[Offset: 0x3c, Size: 0x4]
	bool EmojiAnimationTickNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float CfgDrugVoiceCDTime;//[Offset: 0x44, Size: 0x4]
	float CheckInsideHeatShieldFrequency;//[Offset: 0x48, Size: 0x4]
	float CfgTotemRecallHealthMax;//[Offset: 0x4c, Size: 0x4]
	float DeathDestroyTime;//[Offset: 0x50, Size: 0x4]
	float OffScreenDistance;//[Offset: 0x54, Size: 0x4]
	float OffScreenInnerRadius;//[Offset: 0x58, Size: 0x4]
	float CfgDefaultHealthMax;//[Offset: 0x5c, Size: 0x4]
	float CfgDyingHealthMax;//[Offset: 0x60, Size: 0x4]
	float CfgDyingInvincible;//[Offset: 0x64, Size: 0x4]
	float CfgRescuingTimeSec;//[Offset: 0x68, Size: 0x4]
	float CfgRescueSelfTimeSec;//[Offset: 0x6c, Size: 0x4]
	float KillAudioCd;//[Offset: 0x70, Size: 0x4]
	float KnockdownShieldOnSpeedScale;//[Offset: 0x74, Size: 0x4]
	float InspectHandsAnim1Weight;//[Offset: 0x78, Size: 0x4]
	float InspectHandsAnim2Weight;//[Offset: 0x7c, Size: 0x4]
	float IgnoreBlockHiddenDistance;//[Offset: 0x80, Size: 0x4]
	float IgnoreBlockCheckRate;//[Offset: 0x84, Size: 0x4]
	float IgnoreBlockCollectRate;//[Offset: 0x88, Size: 0x4]
	bool bEnableIgnoreBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float DefaultCapsuleRadius;//[Offset: 0x90, Size: 0x4]
	float StandCapsuleHalfHeight;//[Offset: 0x94, Size: 0x4]
	float CrouchCapsuleHalfHeight;//[Offset: 0x98, Size: 0x4]
	float DyingCapsuleHalfHeight;//[Offset: 0x9c, Size: 0x4]
	float DyingFPPOffsetZ;//[Offset: 0xa0, Size: 0x4]
	CurveFloat* DeathFadeOutCurve;//[Offset: 0xa8, Size: 0x8]
	class PlayerTombBox* TombBoxClass;//[Offset: 0xb0, Size: 0x8]
	AnimSequence* SimulateMoveNotifySequence;//[Offset: 0xb8, Size: 0x8]
	FString KnockdownInstigatorAudio;//[Offset: 0xc0, Size: 0x10]
	FString KnockdownVictimAudio;//[Offset: 0xd0, Size: 0x10]
	FString DeathInstigatorAudio;//[Offset: 0xe0, Size: 0x10]
	FString DeathVictimAudio;//[Offset: 0xf0, Size: 0x10]
	FString InstigatorKillAudio;//[Offset: 0x100, Size: 0x10]
	FString BodyFallHumanAudio;//[Offset: 0x110, Size: 0x10]
	FString BodyFallAndroidAudio;//[Offset: 0x120, Size: 0x10]
	FString EnemyTeamKillAudio;//[Offset: 0x130, Size: 0x10]
	FString TeamKillAudio;//[Offset: 0x140, Size: 0x10]
	uint16[] CfgDyingTimeoutSec;//[Offset: 0x150, Size: 0x10]
	<byte,FString> DyingCloseEyeDefine;//[Offset: 0x160, Size: 0x50]
	FName[] MaterialParameterNames;//[Offset: 0x1b0, Size: 0x10]
	DeathRagDollParams DeathRagDollParams;//[Offset: 0x1c0, Size: 0x18]
	<enum,bool> AndroidDefine;//[Offset: 0x1d8, Size: 0x50]
	<enum,float> RescueAlongNormalOffset;//[Offset: 0x228, Size: 0x50]
	float RescueAlongNormalSlope;//[Offset: 0x278, Size: 0x4]
	RescueCameraParams RescueCameraParams;//[Offset: 0x27c, Size: 0x1c]
	FName RescueSelfItemSocket;//[Offset: 0x298, Size: 0x8]
	AnimationBudgetParameters AnimationBudgetParameters;//[Offset: 0x2a0, Size: 0x14]
	AnimationBudgetParameters AnimationBudgetParametersLow;//[Offset: 0x2b4, Size: 0x14]
	<int,bool> BodyHitDamageTypeEffectIgnore;//[Offset: 0x2c8, Size: 0x50]
	<int,bool> ShieldHitDamageTypeEffectIgnore;//[Offset: 0x318, Size: 0x50]
	<enum,UseReplicatorAnimMontageData> UseRelicatorLegendConfig;//[Offset: 0x368, Size: 0x50]
	UseReplicatorAnimMontageData DefaultUseRelicatorLegendConfig;//[Offset: 0x3b8, Size: 0x50]
	FName IdleMontageSectionName;//[Offset: 0x408, Size: 0x8]
	float FPPBlendOutTime;//[Offset: 0x410, Size: 0x4]
	float TPPBlendOutTime;//[Offset: 0x414, Size: 0x4]
	float StartOperateLength;//[Offset: 0x418, Size: 0x4]
	int FilterID;//[Offset: 0x41c, Size: 0x4]
	float InterpToPostionTime;//[Offset: 0x420, Size: 0x4]
	int UpGradeExp;//[Offset: 0x424, Size: 0x4]
	AkAudioEvent* UseReplicatorSound1P;//[Offset: 0x428, Size: 0x8]
	AkAudioEvent* UseReplicatorSound3P;//[Offset: 0x430, Size: 0x8]
	int UseReplicatorEventID;//[Offset: 0x438, Size: 0x4]
	PhysicalSurfaceAddBuff[] PhysicalSurfaceAddBuffs;//[Offset: 0x440, Size: 0x10]
	FString AudioID_Cure_Start_1P;//[Offset: 0x450, Size: 0x10]
	FString AudioID_Cure_Start_3P;//[Offset: 0x460, Size: 0x10]
	FString AudioID_Cure_End_1P;//[Offset: 0x470, Size: 0x10]
	FString AudioID_Cure_End_3P;//[Offset: 0x480, Size: 0x10]
	ParticleSystem* RepairEffectFor1P;//[Offset: 0x490, Size: 0x28]
	FName RepairShieldInPEvent;//[Offset: 0x4b8, Size: 0x8]
	FName RepairShieldLoopEvent;//[Offset: 0x4c0, Size: 0x8]
	FName RepairShieldOutPEvent;//[Offset: 0x4c8, Size: 0x8]
	FName RepairShieldCompletedPEvent;//[Offset: 0x4d0, Size: 0x8]
	FName RepairShieldColorName;//[Offset: 0x4d8, Size: 0x8]
	int TPPCureParticleEffectID;//[Offset: 0x4e0, Size: 0x4]
	FString TipsString;//[Offset: 0x4e8, Size: 0x10]
	FString TipsLocalizationKey;//[Offset: 0x4f8, Size: 0x10]
	Color TipsColor;//[Offset: 0x508, Size: 0x4]
	float ForwardMoveSpeed;//[Offset: 0x50c, Size: 0x4]
	float RightMoveSpeed;//[Offset: 0x510, Size: 0x4]
	float RightAcceleRate;//[Offset: 0x514, Size: 0x4]
	float MaxRiseZSpeed;//[Offset: 0x518, Size: 0x4]
	float RiseAcceleration;//[Offset: 0x51c, Size: 0x4]
	bool bUseConstDownHeihtMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	float ConstDownHeight;//[Offset: 0x524, Size: 0x4]
	float RiseHitTopMinHeight;//[Offset: 0x528, Size: 0x4]
	float RiseHitTopMaxAngle;//[Offset: 0x52c, Size: 0x4]
	float MagmaRiseDelayTime;//[Offset: 0x530, Size: 0x4]
	int MagmaRiseFilterID;//[Offset: 0x534, Size: 0x4]
	enum[] DisableMagmaPawnStates;//[Offset: 0x538, Size: 0x10]
	MagmaRiseStateCameraEffectCfg StartCameraEffectCfg;//[Offset: 0x548, Size: 0x40]
	MagmaRiseStateCameraEffectCfg EndCameraEffectCfg;//[Offset: 0x588, Size: 0x40]
	MagmaRiseCameraSpringArmCfg FirstEnterMagmaRiseCameraCfg;//[Offset: 0x5c8, Size: 0x14]
	class CameraShake* FirstEnterMagmaRiseCameraShake;//[Offset: 0x5e0, Size: 0x8]
	float FirstEnterMagmaRiseDurationOffset;//[Offset: 0x5e8, Size: 0x4]
	ParticleEffectSetCfg ParticleEffectSetCfg;//[Offset: 0x5f0, Size: 0x50]
	FName[] StartAudioEffectCfg;//[Offset: 0x640, Size: 0x10]
	FName[] StopAudioEffectCfg;//[Offset: 0x650, Size: 0x10]
	FName HuntingBuff;//[Offset: 0x660, Size: 0x8]
	FName HuntingBreatheVoiceBuff;//[Offset: 0x668, Size: 0x8]
	FName HuntingFOVBuff;//[Offset: 0x670, Size: 0x8]
	FName BeingHuntBuff;//[Offset: 0x678, Size: 0x8]
	float BloodHoundHuntingFOVFadeTime;//[Offset: 0x680, Size: 0x4]
	float BloodHoundHuntingProlongTime;//[Offset: 0x684, Size: 0x4]

--------------------------------
Class: DeathRagDollParams
	float MassInKg;//[Offset: 0x0, Size: 0x4]
	float LinearSpeed;//[Offset: 0x4, Size: 0x4]
	float MaxLinearSpeed;//[Offset: 0x8, Size: 0x4]
	float AngularSpeed;//[Offset: 0xc, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x10, Size: 0x4]
	float GravityAlpha;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: RescueCameraParams
	float LerpTime;//[Offset: 0x0, Size: 0x4]
	Vector FPPTargetValue;//[Offset: 0x4, Size: 0xc]
	Vector TPPTargetValue;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: AnimationBudgetParameters
	float BudgetInMs;//[Offset: 0x0, Size: 0x4]
	float MinQuality;//[Offset: 0x4, Size: 0x4]
	int MaxTickRate;//[Offset: 0x8, Size: 0x4]
	int InterpolationMaxRate;//[Offset: 0xc, Size: 0x4]
	int MaxTickedOffsreenComponents;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UseReplicatorAnimMontageData
	AnimMontage* AnimMontage_FPP;//[Offset: 0x0, Size: 0x28]
	AnimMontage* AnimMontage_TPP;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: PhysicalSurfaceAddBuff
	byte SurfaceType;//[Offset: 0x0, Size: 0x1]
	FName AddBuffName;//[Offset: 0x4, Size: 0x8]
	bool IsDelayBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MagmaRiseStateCameraEffectCfg
	MagmaRiseCameraSpringArmCfg Normal;//[Offset: 0x0, Size: 0x14]
	MagmaRiseCameraSpringArmCfg Acc;//[Offset: 0x14, Size: 0x14]
	class CameraShake* MagmaRiseCameraShake;//[Offset: 0x28, Size: 0x8]
	bool EnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x34, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: MagmaRiseCameraSpringArmCfg
	float TargetArmLength;//[Offset: 0x0, Size: 0x4]
	bool bLerpFormCurArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float StartArmLength;//[Offset: 0x8, Size: 0x4]
	float ArmLengthLerpDuration;//[Offset: 0xc, Size: 0x4]
	float NearClippingPlane;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NotifyAudioComponent.ApexSoundSpeakerComponent.ActorComponent.Object
	CharacterSoundMap* SoundMap;//[Offset: 0x108, Size: 0x8]
	float StateCheckTime;//[Offset: 0x110, Size: 0x4]
	<class ApexAnimNotifySound,ApexAnimNotifySound*> AnimNotifyMap;//[Offset: 0x118, Size: 0x50]
	ApexPlayerController* FirstPC;//[Offset: 0x180, Size: 0x8]
	ApexCharacterBase* ApexCharacter;//[Offset: 0x188, Size: 0x8]
	ApexCharacterMovementComponent* MovementComponent;//[Offset: 0x190, Size: 0x8]
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x7d6ba14
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x7d6bbd4
	void OnPoseStateChanged(enum NewState, enum PrevState);// 0x7d6b8b4
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode, byte MovementMode, byte CustomMovementMode);// 0x4ae3994

--------------------------------
Class: CharacterSoundMap.DataAsset.Object
	<enum,StateAudioMap> SoundSetting;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: StateAudioMap
	FName SoundName;//[Offset: 0x0, Size: 0x8]
	class ApexAnimNotifySound* AnimNotifyClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SubObjectsReplicationConfig
	float MinDistance;//[Offset: 0x0, Size: 0x4]
	float MaxDistance;//[Offset: 0x4, Size: 0x4]
	float MinProbability;//[Offset: 0x8, Size: 0x4]
	float MaxProbability;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GravityElevatorUseFlow
	int ElevatorUID;//[Offset: 0x0, Size: 0x4]
	Vector EnterElevatorPos;//[Offset: 0x4, Size: 0xc]
	Vector LeaveElevatorPos;//[Offset: 0x10, Size: 0xc]
	double StartFlyTime;//[Offset: 0x20, Size: 0x8]
	Vector EndFlyPos;//[Offset: 0x28, Size: 0xc]
	float FlyingTime;//[Offset: 0x34, Size: 0x4]
	float FlyingDistance;//[Offset: 0x38, Size: 0x4]
	float RiseUpDistance;//[Offset: 0x3c, Size: 0x4]
	double EnterElevatorTime;//[Offset: 0x40, Size: 0x8]
	bool IsSkillSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ZiplineMagnetic.Actor.Object
	ApexCharacterBase* OwnerCharacter;//[Offset: 0x270, Size: 0x8]
	bool bIsRidingZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bIsVerticalZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	float CenterRotation;//[Offset: 0x27c, Size: 0x4]
	void RefreshShow();// 0x7f8548c
	void BP_SetMagneticYawAndPitch(float Yaw);// 0xa1d39f8
	void BP_SetIsRidingZipline(bool bIsRiding);// 0xa1d39f8
	void BP_ChangeShow(bool bIsVisible);// 0xa1d39f8

--------------------------------
Class: FSM.Object
	EdGraph* GraphView;//[Offset: 0x28, Size: 0x8]
	FName EntryState;//[Offset: 0x30, Size: 0x8]
	FSMData StateMachine;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8]
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10]
	int NodePosX;//[Offset: 0x48, Size: 0x4]
	int NodePosY;//[Offset: 0x4c, Size: 0x4]
	int NodeWidth;//[Offset: 0x50, Size: 0x4]
	int NodeHeight;//[Offset: 0x54, Size: 0x4]
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1]
	enum EnabledState;//[Offset: 0x59, Size: 0x1]
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1]
	FString NodeComment;//[Offset: 0x60, Size: 0x10]
	int ErrorType;//[Offset: 0x70, Size: 0x4]
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10]
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10]
	FString PinToolTip;//[Offset: 0x38, Size: 0x10]
	byte Direction;//[Offset: 0x48, Size: 0x1]
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58]
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10]
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10]
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8]
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18]
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10]
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8]
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20]
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c]
	enum ContainerType;//[Offset: 0x54, Size: 0x1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8]
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: FSMData
	<FName,TransRule> CurrState_Mapping_TransRule;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TransRule
	<FName,enum> Keyword_mapping_TargetState;//[Offset: 0x0, Size: 0x50]
	FName FromState;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: CharacterInputComponent.ActorComponent.Object
	delegate OnJoyStickInteruptDelegate;//[Offset: 0xf8, Size: 0x10]
	Vector CurInputVector;//[Offset: 0x108, Size: 0xc]
	float LeftRightDegree;//[Offset: 0x114, Size: 0x4]
	ApexCharacterBase* Character;//[Offset: 0x128, Size: 0x8]
	void SetPreOverDrag(bool NewOverDrag);// 0x7b612f4
	void SetOverDrag(bool NewOverDrag);// 0x7b613b4
	void SetInvokeSprint(bool Value);// 0x7b61234
	void ServerSetMoveInputDir(enum InputDir);// 0x7b61474
	void ServerEnableAutoForward(bool NewAutoForward);// 0x7b61168
	void MoveRight(float Rate);// 0x7b61538
	void MoveForward(float Rate);// 0x7b615f4
	bool IsPreOverDrag();// 0xa10d64c
	bool IsOverDrag();// 0xa10d684
	bool IsAutoForward();// 0xa10d668
	float GetRawRightInputRate();// 0xa10d5fc
	float GetRawForwardInputRate();// 0xa10d618
	void EnableAutoForward(bool NewAutoForward);// 0x5c86748

--------------------------------
Class: AuraComponent.ActorComponent.Object
	<FName,AuraInfo> AuraInfos;//[Offset: 0xf8, Size: 0x50]
	void SetAuraLegendID(FName AuraName, int LegendIDIn);// 0x7acdd38
	void RemoveAuraData(out const AuraInfo[] AuraInfoArray);// 0x7ace25c
	void OneAuraForTarget(FName AuraName, delegate ForTargetDynamicDelegate, bool IsIgnoreActive);// 0x7ace010
	bool DeactiveOneAura(FName AuraName);// 0x7acddf0
	bool CheckTargetInAura(ApexCharacterBase* TargetCharacter, FName AuraName, bool IsIgnoreActive);// 0x7acdf00
	void AuraForTarget(delegate ForTargetDynamicDelegate, bool IsIgnoreActive);// 0x7ace154
	void AddAuraData(out const AuraInfo[] AuraInfoArray);// 0x7ace2f0
	bool ActiveOneAura(FName AuraName);// 0x7acde78

--------------------------------
Class: AuraInfo
	FName AuraName;//[Offset: 0x0, Size: 0x8]
	AuraShape* AuraShape;//[Offset: 0x8, Size: 0x8]
	bool IsEvaluateBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	byte BlockChannel;//[Offset: 0x11, Size: 0x1]
	<FName> BuffNameArray;//[Offset: 0x18, Size: 0x50]
	enum TargetType;//[Offset: 0x68, Size: 0x1]
	AuraTargetLimitInfo TargetLimitInfo;//[Offset: 0x6c, Size: 0x8]
	bool bNeedSimulateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	FName[] RejectedByBuffs;//[Offset: 0x78, Size: 0x10]
	bool RejectedInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool CleanBuffOnRemoveAura;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	int LegendID;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AuraShape.Object

--------------------------------
Class: AuraTargetLimitInfo
	enum LimitType;//[Offset: 0x0, Size: 0x1]
	bool IgnoreDecoyNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	int MaxNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RepRevenantSilence
	float RevenantSilenceEffectEndTime;//[Offset: 0x0, Size: 0x4]
	float RevenantSilenceLastDuration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RepDeathTotemProtection
	bool HasProtectionOfDeathTotem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool LeaveByConsumption;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float TotemProtectionLeftSeconds;//[Offset: 0x4, Size: 0x4]
	Vector DeathTotemPosition;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: RepDeathTotemRangeTest
	bool IsOutOfValidRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float OutOfRangeTestEndTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: APAttributeSet.AttributeSet.Object
	GameplayAttributeData SpeedScale;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxWalkSpeedLimit;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData DisableSprint;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData KnockdownSpeedScale;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData ReloadSpeedScale;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData SkillDamageScale;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData AIDamageScale;//[Offset: 0x90, Size: 0x10]
	GameplayAttributeData MeleeAttackDamageScale;//[Offset: 0xa0, Size: 0x10]
	GameplayAttributeData MeleeAttackBeatSpeedScale;//[Offset: 0xb0, Size: 0x10]
	GameplayAttributeData ViewScrollSpeedScale;//[Offset: 0xc0, Size: 0x10]
	GameplayAttributeData SpreadScale;//[Offset: 0xd0, Size: 0x10]
	GameplayAttributeData RescueMultiplier;//[Offset: 0xe0, Size: 0x10]
	GameplayAttributeData RescueSelfMultiplier;//[Offset: 0xf0, Size: 0x10]
	GameplayAttributeData RescuePropScale;//[Offset: 0x100, Size: 0x10]
	GameplayAttributeData IsIndiviRescue;//[Offset: 0x110, Size: 0x10]
	GameplayAttributeData MoveShowDistanceScale;//[Offset: 0x120, Size: 0x10]
	GameplayAttributeData FireShowDistanceScale;//[Offset: 0x130, Size: 0x10]
	GameplayAttributeData SmallMoveShowDistanceScale;//[Offset: 0x140, Size: 0x10]
	GameplayAttributeData VisualSoundTriggerFactor;//[Offset: 0x150, Size: 0x10]
	GameplayAttributeData EnableVisualSound;//[Offset: 0x160, Size: 0x10]
	GameplayAttributeData EnableImmuneHitSlowly;//[Offset: 0x170, Size: 0x10]
	GameplayAttributeData EnableImmuneAirborne;//[Offset: 0x180, Size: 0x10]
	GameplayAttributeData TacticsSkillCDScale;//[Offset: 0x190, Size: 0x10]
	GameplayAttributeData UltimateSkillCDScale;//[Offset: 0x1a0, Size: 0x10]
	GameplayAttributeData PassiveSkillCDScale;//[Offset: 0x1b0, Size: 0x10]
	GameplayAttributeData TacticsSkillCDThresholdScale;//[Offset: 0x1c0, Size: 0x10]
	GameplayAttributeData UltimateSkillCDThresholdScale;//[Offset: 0x1d0, Size: 0x10]
	GameplayAttributeData TacticsSkillCDCastScale;//[Offset: 0x1e0, Size: 0x10]
	GameplayAttributeData UltimateSkillCDCastScale;//[Offset: 0x1f0, Size: 0x10]
	GameplayAttributeData PathfinderGrappleSpeedScale;//[Offset: 0x200, Size: 0x10]
	GameplayAttributeData JumpHeightScale;//[Offset: 0x210, Size: 0x10]
	GameplayAttributeData JumpHeightScaleVariatefactor;//[Offset: 0x220, Size: 0x10]
	GameplayAttributeData SyringeRate;//[Offset: 0x230, Size: 0x10]
	void OnRep_VisualSoundTriggerFactor(out const GameplayAttributeData OldValue);// 0x7969258
	void OnRep_ViewScrollSpeedScale(out const GameplayAttributeData OldValue);// 0x7969a14
	void OnRep_UltimateSkillCDThresholdScale(out const GameplayAttributeData OldValue);// 0x7968b78
	void OnRep_UltimateSkillCDScale(out const GameplayAttributeData OldValue);// 0x7968e0c
	void OnRep_UltimateSkillCDCastScale(out const GameplayAttributeData OldValue);// 0x79689c0
	void OnRep_TacticsSkillCDThresholdScale(out const GameplayAttributeData OldValue);// 0x7968c54
	void OnRep_TacticsSkillCDScale(out const GameplayAttributeData OldValue);// 0x7968ee8
	void OnRep_TacticsSkillCDCastScale(out const GameplayAttributeData OldValue);// 0x7968a9c
	void OnRep_SyringeRate(out const GameplayAttributeData OldValue);// 0x7968650
	void OnRep_SpreadScale(out const GameplayAttributeData OldValue);// 0x7969938
	void OnRep_SpeedScale(out const GameplayAttributeData OldValue);// 0x796a1d0
	void OnRep_SmallMoveShowDistanceScale(out const GameplayAttributeData OldValue);// 0x7969334
	void OnRep_SkillDamageScale(out const GameplayAttributeData OldValue);// 0x7969d84
	void OnRep_RescueSelfMultiplier(out const GameplayAttributeData OldValue);// 0x7969780
	void OnRep_RescuePropScale(out const GameplayAttributeData OldValue);// 0x79696a4
	void OnRep_RescueMultiplier(out const GameplayAttributeData OldValue);// 0x796985c
	void OnRep_ReloadSpeedScale(out const GameplayAttributeData OldValue);// 0x7969e60
	void OnRep_PathfinderGrappleSpeedScale(out const GameplayAttributeData OldValue);// 0x79688e4
	void OnRep_PassiveSkillCDScale(out const GameplayAttributeData OldValue);// 0x7968d30
	void OnRep_MoveShowDistanceScale(out const GameplayAttributeData OldValue);// 0x79694ec
	void OnRep_MeleeAttackDamageScale(out const GameplayAttributeData OldValue);// 0x7969bcc
	void OnRep_MeleeAttackBeatSpeedScale(out const GameplayAttributeData OldValue);// 0x7969af0
	void OnRep_MaxWalkSpeedLimit(out const GameplayAttributeData OldValue);// 0x796a0f4
	void OnRep_KnockdownSpeedScale(out const GameplayAttributeData OldValue);// 0x7969f3c
	void OnRep_JumpHeightScaleVariatefactor(out const GameplayAttributeData OldValue);// 0x796872c
	void OnRep_JumpHeightScale(out const GameplayAttributeData OldValue);// 0x7968808
	void OnRep_IsIndiviRescue(out const GameplayAttributeData OldValue);// 0x79695c8
	void OnRep_FireShowDistanceScale(out const GameplayAttributeData OldValue);// 0x7969410
	void OnRep_EnableVisualSound(out const GameplayAttributeData OldValue);// 0x796917c
	void OnRep_EnableImmuneHitSlowly(out const GameplayAttributeData OldValue);// 0x79690a0
	void OnRep_EnableImmuneAirborne(out const GameplayAttributeData OldValue);// 0x7968fc4
	void OnRep_DisableSprint(out const GameplayAttributeData OldValue);// 0x796a018
	void OnRep_AIDamageScale(out const GameplayAttributeData OldValue);// 0x7969ca8

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	<FName,byte> PlayerStateAttr;//[Offset: 0xf8, Size: 0x50]
	ActiveModifyContainer ActiveModifyContainer;//[Offset: 0x150, Size: 0x2b0]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x400, Size: 0x10]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	delegate OnAttrModified;//[Offset: 0x428, Size: 0x10]
	bool bIsResBunchModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x450, Size: 0x10]
	byte[] AttrModifyStateList;//[Offset: 0x460, Size: 0x10]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x470, Size: 0x10]
	AttrModifyItem[] DynamicModifierList;//[Offset: 0x480, Size: 0x10]
	AttrModifyItem[] DynamicModifierClientList;//[Offset: 0x490, Size: 0x10]
	bool UpdateDynamicModifierByFormula(out FormulaProxyAttrModifyItem AttrModifyItem, const float dt);// 0x7ac3650
	bool UpdateDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x7ac3888
	void SetValueToAttribute(FString AttrName, float Value);// 0x7ac31b0
	bool ReplaceModifyAbleAttr(out const AttrRegisterItem AttrRegistItem);// 0x7ac4008
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x7ac4144
	void OnRep_DynamicModifierList();// 0xa0faea0
	void OnRep_AttrModifyStateList();// 0xa0faebc
	void OnBatchResLoaded__DelegateSignature(int ReqID);// 0xa1d39f8
	void OnAttrModifiedEvent__DelegateSignature(out const FString[] AffectedAttrS);// 0xa1d39f8
	bool HasDynamicModifier(FString AttrModifyId);// 0x7ac3380
	AttrModifyItem[] GetDynamicModifierRepList_Mutable();// 0x7ac2d20
	AttrModifyItem[] GetDynamicModifierRepList();// 0x7ac2e60
	bool GetAttrModifyItemByItemName(FString AttrModifyItemName, out AttrModifyItem OutItem);// 0x7ac2e80
	float GetAttributeValueMax(FString AttrName);// 0x7ac3038
	float GetAttributeValue(FString AttrName);// 0x7ac30f4
	void EnableStaticModifiers(out const FString[] AttrModifyItemNames, FString ModifierSuffix);// 0x7ac3dd0
	bool EnableStaticModifier(FString AttrModifyItemName);// 0x7ac3f48
	bool EnableDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x7ac39d8
	bool EnableAllStaticModifier();// 0x7ac3b60
	void DisableStaticModifiers(out const FString[] AttrModifyItemNames, FString ModifierSuffix);// 0x7ac3b98
	bool DisableStaticModifier(FString AttrModifyItemName);// 0x7ac3d10
	bool DisableDynamicModifierById(FString AttrModifyId);// 0x7ac3590
	bool DisableDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x7ac3440
	bool DisableAllStaticModifier();// 0x7ac3b28
	void AddValueToAttribute(FString AttrName, float Value);// 0x7ac3298

--------------------------------
Class: FormulaProxyAttrModifyItem.AttrModifyItem
	bool bEnableModifyLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float MinModifyValue;//[Offset: 0x64, Size: 0x4]
	float MaxModifyValue;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: AttrModifyItem
	float FinalAddValue;//[Offset: 0x0, Size: 0x4]
	FString AttrModifyItemName;//[Offset: 0x8, Size: 0x10]
	enum AttrType;//[Offset: 0x18, Size: 0x1]
	FString AttrName;//[Offset: 0x20, Size: 0x10]
	enum ModifierOp;//[Offset: 0x30, Size: 0x1]
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float ModifierValue;//[Offset: 0x34, Size: 0x4]
	SoftObjectPath ModifierResValue;//[Offset: 0x38, Size: 0x18]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool LinearChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	float ChangingDuration;//[Offset: 0x54, Size: 0x4]
	float LinearProgressTime;//[Offset: 0x58, Size: 0x4]
	float OriModifierValue;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	enum AttrVariableType;//[Offset: 0x10, Size: 0x1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Object* OriginalRes;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ActiveModifyContainer.FastArraySerializer
	ActiveModify[] ActiveModifies_Internal;//[Offset: 0x270, Size: 0x10]
	ActiveModify[] ActiveModifies_ForPrediction;//[Offset: 0x280, Size: 0x10]

--------------------------------
Class: ActiveModify.FastArraySerializerItem
	AttributeModifierSpec Spec;//[Offset: 0x18, Size: 0x110]
	PredictionKey PredictionKey;//[Offset: 0x128, Size: 0x10]
	float StartServerWorldTime;//[Offset: 0x138, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x13c, Size: 0x4]
	float StartWorldTime;//[Offset: 0x140, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]

--------------------------------
Class: CharacterDeathInfo
	bool bIsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MurderWeaponSkinId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DispatchingActionCollection
	DispatchableActionBase*[] Actions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DispatchableActionBase.Object
	bool bIsCoexistWithOtherActionForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	enum DefaultActionCompatibleType;//[Offset: 0x29, Size: 0x1]
	DispatchableActionBase* GeneratedByTemplate;//[Offset: 0x30, Size: 0x8]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	DispatchableActionReplicationActor* ReplicationActor;//[Offset: 0x40, Size: 0x8]
	bool bIsCachedAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1]
	bool bTickable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1]
	void SetActionReplicatedTargets(Actor* NetOwner, out const Actor*[] RelevantTargets, bool ReplicateDispatcher, float RelevantDistance);// 0x637bee4
	void ReceiveWhenTick(float DeltaSeconds);// 0xa1d39f8
	void ReceiveWhenResetAction();// 0xa1d39f8
	void ReceiveWhenBroadcastDeactived();// 0xa1d39f8
	void ReceiveWhenBroadcastActived();// 0xa1d39f8
	void ReceiveWhenActionReactived();// 0x9f1f07c
	void ReceiveWhenActionDeactived();// 0xa1d39f8
	void ReceiveWhenActionConstruct();// 0xa1d39f8
	void ReceiveWhenActionActived();// 0xa1d39f8
	void ReceiveWhenActionAborted(enum AbortState);// 0x637bd80
	bool ReceiveCheckActionDispatchable();// 0x9f1f03c
	bool IsLocalControlled();// 0x5347e80
	bool IsEvaluateBound(out const EvaluateDispatchableActionParameter Evaluator);// 0x637bc5c
	bool HasAuthority();// 0x637c068
	DispatchableActionReplicationActor* GetNetOwner();// 0x637c0a0
	void FinishAction(out const DispatchableActionFinishEvent FinishEvent);// 0x637be18
	void FinishAbort();// 0x637be04
	bool ExecuteEvaluate(out const EvaluateDispatchableActionParameter Evaluator);// 0x637bb08
	void CreateAssignOrResetActionFromTemplate(Object* Outer, out DispatchableActionBase* InstanceRef);// 0x637c184
	DispatchableActionBase* CreateActionFromTemplate(Object* Outer);// 0x637c24c
	void ConstructAndActiveAction();// 0x637c2d0

--------------------------------
Class: DispatchableActionReplicationActor.Actor.Object
	Actor*[] NetRelevantTargets;//[Offset: 0x270, Size: 0x10]
	DispatchableActionBase* RealAction;//[Offset: 0x280, Size: 0x8]
	EntityDispatcherBase* EntityDispatcher;//[Offset: 0x288, Size: 0x8]
	DispatchableActionBase* RPC_ProxyAction;//[Offset: 0x290, Size: 0x8]
	void OnRep_ProxyAction();// 0x41140a8

--------------------------------
Class: EntityDispatcherBase.Object
	bool DummyVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	DispatchableActionBase*[] ActivedActions;//[Offset: 0x30, Size: 0x10]
	FName CachedFinishTag;//[Offset: 0x58, Size: 0x8]
	delegate OnDispatcherFinishedDelegate;//[Offset: 0x60, Size: 0x10]
	delegate OnDispatcherAbortedDelegate;//[Offset: 0x88, Size: 0x10]
	DispatchableActionBase*[] AbortingActions;//[Offset: 0xb0, Size: 0x10]
	DispatchableActionBase*[] ReactivableActions;//[Offset: 0xc0, Size: 0x10]
	DispatchableActionBase*[] InvalidActions;//[Offset: 0xd0, Size: 0x10]
	bool TriggerActionCheckPass(FName InTriggerEventName);// 0x637deb8
	void StartByDefaultEntry();// 0x637e044
	void ReceiveWhenDeactived();// 0xa1d39f8
	void ReceiveWhenActived();// 0xa1d39f8
	void OnDispatcherFinishedDelegate__DelegateSignature(out const FName Tag);// 0xa1d39f8
	void OnDispatcherAbortedDelegate__DelegateSignature();// 0xa1d39f8
	bool IsAnyActionActived(out const DispatchableActionBase*[] CheckedByTemplates);// 0x637dd20
	EntityDispatcherBase* GetMainDispatcher();// 0x637de5c
	void FinishDispatch(FName InFinishTag);// 0x637df40
	void DefaultDispatchStart();// 0xa1d39f8
	bool CanActiveAction_ByTemplate(DispatchableActionBase* CheckedByTemplate);// 0x637dc98
	bool CanActiveAction_ByInstance(DispatchableActionBase* CheckedInstance);// 0x637dc10
	void BP_AbortDispatcher();// 0x637de90
	bool ActiveDispatcherCheckPass(FName EntryPointName);// 0x637dfbc

--------------------------------
Class: EvaluateDispatchableActionParameter

--------------------------------
Class: DispatchableActionFinishEvent
	delegate OnDispatchableActionFinished;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Apex_NPC_Component.ActorComponent.Object
	TurnMontageSet NoEquipTurnSet;//[Offset: 0xf8, Size: 0x140]
	TurnMontageSet EquipTurnSet;//[Offset: 0x238, Size: 0x140]
	bool bEnableNpcSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	ApexNpcSettings NpcSettings;//[Offset: 0x380, Size: 0x1a8]
	ApexSentence* SpeakingSentence;//[Offset: 0x528, Size: 0x8]
	AnimMontage* EmotionMontage;//[Offset: 0x540, Size: 0x8]
	void StopDispatchableSentence_NetMulticast();// 0xa0c7cf0
	void StopDispatchableSentence();// 0x796fabc
	void SpeakSentence_NetMulticast(int SentenceId, AnimSequenceBase* Emotion);// 0x796f978
	void PlayDispatchableSentence_NetMulticast(ApexSentence* Sentence);// 0x796fa38
	void PlayDispatchableSentence(ApexSentence* Sentence);// 0x796fad0
	void PlayBornAnim(AnimationAsset* Anim);// 0x796f8f4

--------------------------------
Class: TurnMontageSet
	AnimMontage* TurnLeft45_Montage;//[Offset: 0x0, Size: 0x28]
	AnimMontage* TurnLeft90_Montage;//[Offset: 0x28, Size: 0x28]
	AnimMontage* TurnLeft135_Montage;//[Offset: 0x50, Size: 0x28]
	AnimMontage* TurnLeft180_Montage;//[Offset: 0x78, Size: 0x28]
	AnimMontage* TurnRight45_Montage;//[Offset: 0xa0, Size: 0x28]
	AnimMontage* TurnRight90_Montage;//[Offset: 0xc8, Size: 0x28]
	AnimMontage* TurnRight135_Montage;//[Offset: 0xf0, Size: 0x28]
	AnimMontage* TurnRight180_Montage;//[Offset: 0x118, Size: 0x28]

--------------------------------
Class: ApexNpcSettings
	<FName,float> AttrSettings;//[Offset: 0x0, Size: 0x50]
	PlayerLoadoutConfig LoadoutConfig;//[Offset: 0x50, Size: 0xd8]
	<int,int> TombBoxItems;//[Offset: 0x128, Size: 0x50]
	FText Name;//[Offset: 0x178, Size: 0x18]
	LinearColor Color;//[Offset: 0x190, Size: 0x10]
	int TeamID;//[Offset: 0x1a0, Size: 0x4]

--------------------------------
Class: PlayerLoadoutConfig
	int LoadoutID;//[Offset: 0xc, Size: 0x4]
	PlayerLoadoutWeapon MainWeapon;//[Offset: 0x10, Size: 0x38]
	PlayerLoadoutWeapon SubWeapon;//[Offset: 0x48, Size: 0x38]
	PlayerLoadoutItem[] Drug;//[Offset: 0x80, Size: 0x10]
	PlayerLoadoutItem[] Shield;//[Offset: 0x90, Size: 0x10]
	PlayerLoadoutItem FallingShield;//[Offset: 0xa0, Size: 0x8]
	PlayerLoadoutItem Helmet;//[Offset: 0xa8, Size: 0x8]
	PlayerLoadoutItem Armor;//[Offset: 0xb0, Size: 0x8]
	PlayerLoadoutItem Backpack;//[Offset: 0xb8, Size: 0x8]
	PlayerLoadoutItem[] Grenade;//[Offset: 0xc0, Size: 0x10]
	bool bForceLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: PlayerLoadoutWeapon
	int ID;//[Offset: 0x0, Size: 0x4]
	int Set;//[Offset: 0x4, Size: 0x4]
	int Level;//[Offset: 0x8, Size: 0x4]
	bool SpecialWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int WeaponID;//[Offset: 0x10, Size: 0x4]
	int BulletID;//[Offset: 0x14, Size: 0x4]
	int BulletNum;//[Offset: 0x18, Size: 0x4]
	PlayerLoadoutItem[] WeaponFittings;//[Offset: 0x20, Size: 0x10]
	bool bIsWholeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: PlayerLoadoutItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApexSentence.Object
	AkAudioEvent* WwiseEvent;//[Offset: 0x28, Size: 0x8]
	FText Subtitle;//[Offset: 0x30, Size: 0x18]
	AnimSequenceBase* Emotion;//[Offset: 0x48, Size: 0x8]
	float DurationFixedTime;//[Offset: 0x50, Size: 0x4]
	bool bEnableCustomDurationTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	float CustomDurationTime;//[Offset: 0x58, Size: 0x4]
	float NextSentenceTime;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: BasePropsWeaponAttrModifier.Object
	MovementModifyConfig MovementModifyConfig;//[Offset: 0x28, Size: 0x50]
	void SetAttrModifierEnable(out const FName AttrModifierID, bool bEnable, Actor* InCharacter);// 0x7b0a730
	void ClearAttrModifier(Actor* InCharacter);// 0x7b0a674

--------------------------------
Class: ActorListInfo
	Actor*[] ActorList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: KnockdownShieldReplicate
	byte Level;//[Offset: 0x0, Size: 0x1]
	bool CanRescueSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool CanUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	int ShieldValue;//[Offset: 0x4, Size: 0x4]
	KnockdownShieldItemHandle* Handle;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: KnockdownShieldItemHandle.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	byte Level;//[Offset: 0x2d9, Size: 0x1]
	int ShieldValue;//[Offset: 0x2dc, Size: 0x4]
	bool CanRescueSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool HandleUse_Implementation(BattleItemUseTarget Target, enum Reason);// 0x7ce70d4
	bool HandleDisuse_Implementation(enum Reason);// 0x7ce7004

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	UAESkillManagerComponent* SkillManagerComponent;//[Offset: 0x288, Size: 0x8]
	enum SlotID;//[Offset: 0x298, Size: 0x1]
	int Durability;//[Offset: 0x29c, Size: 0x4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x2a8, Size: 0x30]
	enum subSlot;//[Offset: 0x2d8, Size: 0x1]
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x7addf3c

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 0x18]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0x18, Size: 0x10]
	class ModifyAttributeData* ModifyAttributeDataClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ApexKnockdownShield.Actor.Object
	ParticleSystem* ImpactPS;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* TPPShieldPS;//[Offset: 0x280, Size: 0x8]
	ParticleSystem* FPPShieldPS;//[Offset: 0x288, Size: 0x8]
	AkAudioEvent* BeginAudio1P;//[Offset: 0x290, Size: 0x8]
	AkAudioEvent* BeginAudio3P;//[Offset: 0x298, Size: 0x8]
	AkAudioEvent* EndAudio1P;//[Offset: 0x2a0, Size: 0x8]
	AkAudioEvent* EndAudio3P;//[Offset: 0x2a8, Size: 0x8]
	AkAudioEvent* BreakAudio;//[Offset: 0x2b0, Size: 0x8]
	float AddKnockdownSpeedScale;//[Offset: 0x2b8, Size: 0x4]
	<byte,ColorBlindnessQuality> ColorBlindnessGroup;//[Offset: 0x2c0, Size: 0x50]
	bool bCurrentTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bPersonViewChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	byte MeshVisibility;//[Offset: 0x312, Size: 0x1]
	ParticleSystemComponent* ShieldPSC;//[Offset: 0x318, Size: 0x8]
	bool bIsAgent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	int OwnerPlayerKey;//[Offset: 0x32c, Size: 0x4]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x79fdab8
	bool StuckInto(Actor* InActor);// 0x79fd620
	void ShieldStart();// 0x79fdd28
	void SetColor();// 0x79fdd14
	void PlaySound(out AkAudioEvent* Audio);// 0x79fd7c0
	void OnClientTakeDamage(int DamageTypeId, Actor* DamageCauser, int CauserPlayerKey);// 0x79fd88c
	int GetLevel();// 0x79fda48
	ParticleSystem* GetImpactPS();// 0x79fda7c
	bool CanStuckInto(Actor* InActor);// 0x79fd6f0

--------------------------------
Class: ColorBlindnessQuality
	LinearColor[] QualityColorArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MainHandComponent.ActorComponent.Object
	HandStateData[] MainHandStack;//[Offset: 0xf8, Size: 0x10]
	HandStateData[] LastOperationStack;//[Offset: 0x108, Size: 0x10]
	void SyncToServerHandStateListRPC(const SyncToServerMainHandInfo[] MsgList);// 0x7d1f22c
	void SyncToClientHandStateListRPC(const SyncMainHandInfo[] MsgList);// 0x7d1f488
	void SyncStackToClient(const HandStateData[] HandStateDatas);// 0x7d1ef48
	void ServerRecoverConnected();// 0x7d1ed30
	void ServerPopOperation(const HandStateData MainHandInfo);// 0x7d1f6e4
	void RPCToClientRejectOperator(const int[] RejectIDList);// 0x7d1f138
	void RecvServerStackMsgOK();// 0xa145b30
	void ProcessConnectLostForServer();// 0x7d1ed44
	void OnRep_MainHandStackChanged();// 0x4b5e1b4
	void OnApexCharacterPossessedEventCallback(Controller* pPreController, Controller* pNewController);// 0x7d1fbec
	void OnAIHostingEventCallback(ApexAIController* pController, bool bHost);// 0x7d1faac
	void NotifyReconnect();// 0xa145b14
	void GM_SetEnableLog(bool InEnableLog);// 0x7d1fd20
	void ForceSyncStackInfoToServer();// 0x7d1fa98
	void FirstRPCStackToClient(const HandStateData[] HandStateDatas);// 0x7d1ed58
	void ClientPushOperation(const HandStateData MainHandInfo);// 0x7d1f95c
	void ClientPopOperation(const HandStateData MainHandInfo);// 0x7d1f820

--------------------------------
Class: SyncToServerMainHandInfo
	uint32 UniqueID;//[Offset: 0x0, Size: 0x4]
	bool bReject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum EMainHandActionType;//[Offset: 0x5, Size: 0x1]
	int Index;//[Offset: 0x8, Size: 0x4]
	HandStateData MainHandInfo;//[Offset: 0x10, Size: 0x40]

--------------------------------
Class: SyncMainHandInfo
	enum EMainHandActionType;//[Offset: 0x0, Size: 0x1]
	int Index;//[Offset: 0x4, Size: 0x4]
	HandStateData MainHandInfo;//[Offset: 0x8, Size: 0x40]

--------------------------------
Class: CharacterBuffManager.ActorComponent.Object
	InstancedBuffItem[] InstancedBuffItems;//[Offset: 0xf8, Size: 0x10]
	EffectViewManager* OwnerEffectViewMgr;//[Offset: 0x158, Size: 0x8]
	class BuffConfigCenter* BuffConfigCenterClass;//[Offset: 0x160, Size: 0x8]
	void RemoveBuff(int BuffID, int InstancedBuffIndex);// 0x7b5b630
	void OnRep_InstancedBuffItems();// 0x7b5b340
	float GetEarliestBuffRemainTime(int BuffID);// 0x7b5b558
	void ClearAllBuff();// 0x7b5b61c
	void BroadcastClearAllBuff();// 0xa10c7c0
	void BroadcastBuffRemoved(int BuffID, int InstancedBuffIndex);// 0x7b5b354
	void BroadcastBuffAdded(int BuffID);// 0x7b5b494
	void AddBuff(int BuffID);// 0x7b5b768

--------------------------------
Class: InstancedBuffItem
	int BuffID;//[Offset: 0x0, Size: 0x4]
	float[] BuffAddTimes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: EffectViewManager.ActorComponent.Object
	ApexCharacter* OwnerCharacter;//[Offset: 0xf8, Size: 0x8]
	<int,EffectViewItemList*> MapInstancedID2EffectViewItemList;//[Offset: 0x108, Size: 0x50]
	<int,InstancedEffectViewItemList> MapEffectViewID2InstancedIDs;//[Offset: 0x158, Size: 0x50]
	class EffectViewConfigCenter* ConfigCenterClass;//[Offset: 0x1a8, Size: 0x8]
	bool RemoveEffectView(int InstancedID, int EffectViewID);// 0x7bdb74c
	void ClearAllEffectView();// 0x7bdb738
	int AddEffectView(int EffectViewID, float SampleTime);// 0x7bdb88c

--------------------------------
Class: EffectViewItemList.Object
	int EffectViewID;//[Offset: 0x28, Size: 0x4]
	EffectViewItemBase*[] EffectViewItems;//[Offset: 0x30, Size: 0x10]
	ApexCharacter* Owner;//[Offset: 0x40, Size: 0x8]
	uint32 InstancedID;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: EffectViewItemBase.Object
	bool bTakeEffectOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bTakeEffectOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	ApexCharacter* OwnerCharacter;//[Offset: 0x30, Size: 0x8]
	void StopEffectInner();// 0xa118194
	void StopEffect();// 0x7bd8eb0
	void PlayEffectInner(float SampleTime);// 0xa1181b0
	void PlayEffect(float SampleTime);// 0x7bd8ec4

--------------------------------
Class: InstancedEffectViewItemList
	int[] InstancedIDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: EffectViewConfigCenter.InGameSingletonObject.Object
	<int,class EffectViewItemList> MapID2EffectViewItemList;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: BuffConfigCenter.InGameSingletonObject.Object
	<int,BuffConfigItem> MapBuffID2BuffConfigItem;//[Offset: 0x28, Size: 0x50]
	BuffConfigItem GetBuffConfigByBuffID(int BuffID);// 0x7b5ae68

--------------------------------
Class: BuffConfigItem
	float Duration;//[Offset: 0x0, Size: 0x4]
	int[] EffectViewIDs;//[Offset: 0x8, Size: 0x10]
	enum BuffOverlapType;//[Offset: 0x18, Size: 0x1]
	FName BuffName;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: ApexMirageManagerComponent.ActorComponent.Object
	ApexMirageCharacter*[] MirageDecoyList;//[Offset: 0xf8, Size: 0x10]
	bool bEnableTeammateSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int TeammateSkinMinCount;//[Offset: 0x13c, Size: 0x4]
	int TeammateSkinMaxCount;//[Offset: 0x140, Size: 0x4]
	<enum> DecoyListenPawnState;//[Offset: 0x148, Size: 0x50]
	Vector MoveTargetFromIndicator;//[Offset: 0x198, Size: 0xc]
	GameplayTask_InvisibleEffectWithDither* SelfInvisibleTask;//[Offset: 0x1a8, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* OtherInvisibleTask;//[Offset: 0x1b0, Size: 0x8]
	GameplayTask_InvisibleEffectWithDither* FlashInvisibleTask;//[Offset: 0x1b8, Size: 0x8]
	float MaxRescueRealTimeSec;//[Offset: 0x1c0, Size: 0x4]
	float CurrentRescueRealTimeSec;//[Offset: 0x1c4, Size: 0x4]
	ApexCharacter* BeRescuePlayer;//[Offset: 0x1c8, Size: 0x8]
	ApexCharacter* rescuePlayer;//[Offset: 0x1d0, Size: 0x8]
	enum InvisibleType;//[Offset: 0x1d8, Size: 0x1]
	bool bBeCryptoDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	bool bIsTeammateWithCryptoDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 0x1]
	bool bNeedPrintLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db, Size: 0x1]
	bool bIsShowHandLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	float ShowHandLightEffectDistance;//[Offset: 0x1e0, Size: 0x4]
	void UnPossessMirageDocoyByType(enum Type);// 0x7a0958c
	void SyncMoveTargetFromIndicator(Vector MoveTarget);// 0xa0e1e3c
	void StopFlash();// 0xa1d39f8
	void SetInvisibleByParam(ApexCharacter* InCharacter, const bool Invisible, const Vector InMaxTimeAndMaxValue, CurveFloat* InCurve);// 0x7a09314
	void SetInvisible(ApexCharacter* InCharacter, const bool Invisible, enum InSkillEvent, SkillEventParam* InParam);// 0x56817b0
	void RemoveDecoyByType(enum Type, bool bDestroy);// 0x7a09740
	void RemoveAllDecoy();// 0x7a0972c
	void PushMirageDecoy(ApexMirageCharacter* MirageCharacter);// 0x7a09de8
	void PossessMirageDocoyByType(enum Type);// 0x7a0965c
	void PopMirageDecoy(ApexMirageCharacter* MirageCharacter);// 0x7a09d18
	void OnTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x7a08cb8
	void OnStopSkill(int SkillIndex, enum StopReason, int SkillHandleID);// 0x7a08fc0
	void OnShowLightEffectInHand(bool bShow);// 0xa1d39f8
	void OnSetInvisibleByParam(ApexCharacter* InCharacter, const bool Invisible, const Vector InMaxTimeAndMaxValue, CurveFloat* InCurve);// 0xa1d39f8
	void OnSetInvisible(ApexCharacter* InCharacter, const bool Invisible, enum InSkillEvent, SkillEventParam* InParam);// 0xa1d39f8
	void OnRespawnFinished();// 0xa1d39f8
	void OnRescueFinished();// 0xa1d39f8
	void OnRescueBegin();// 0xa1d39f8
	void OnRemovePawnState(enum State, enum Reason, enum InterruptedBy);// 0x4ce90a0
	void OnRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x573eccc
	void OnReceiveSkillEvent(int InSkillID, enum SkillEvent, SkillEventParam* InParam);// 0x589b79c
	void OnReceivePassiveEventInBlueprint(enum SkillEvent, SkillEventParam* InParam);// 0xa1d39f8
	void OnKeyDown(UTSkillManagerComponent* SkillManagerComponent, byte TriggerEventType);// 0x5ccf940
	void OnInvisibleChange(ApexCharacter* InCharacter, const bool Invisible);// 0x7a091ac
	void OnEnterUltimateInvisible(SkillEventParam* InParam);// 0xa1d39f8
	void OnCharacterRescueFinished();// 0x5f31548
	void OnCharacterRescue(ApexCharacter* InRescuePlayer);// 0x5f3b174
	void OnCharacterDying();// 0x7a08fac
	void OnCharacterBeRescue(ApexCharacter* InRescuer);// 0x614c19c
	void OnBeRescuePlayerTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x7a089c4
	void OnAddPawnState(enum State, enum OverrideState);// 0x4c9f470
	void OnAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x54b00f0
	void MulticastFlash(const bool bFlashSelf, const bool bLoop);// 0xa0e1c98
	bool IsInvisibleNeedChangeMaterial();// 0x53ff52c
	bool HasAuthority();// 0xa0e1e10
	ApexCharacter*[] GetUtlDecoySkinParents();// 0x7a09eb8
	ApexMirageCharacter*[] GetPossesedDecoy(bool bPossesed);// 0x7a09978
	ApexMirageCharacter*[] GetDecoyListByType(enum Type);// 0x7a09ae4
	ApexMirageCharacter*[] GetDecoyList();// 0x7a09c48
	ApexMirageCharacter* GetCurrentTacticsDecoy();// 0x7a098a0
	void Flash(ApexCharacter* FlashCharacter, bool bLoop);// 0xa1d39f8
	void DealReconnectedInServer();// 0x7a089b0

--------------------------------
Class: ApexMirageCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	bool bPossessByOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc08, Size: 0x1]
	int FlashBuffCount;//[Offset: 0xc0c, Size: 0x4]
	byte CurParachuteState;//[Offset: 0xc10, Size: 0x1]
	bool bMoveToTargetComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc11, Size: 0x1]
	enum DecoySourceType;//[Offset: 0xc12, Size: 0x1]
	float DeltaYawBetweenOwner;//[Offset: 0xc14, Size: 0x4]
	bool bIsDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 0x1]
	PawnStateManager* StateManagerComponent;//[Offset: 0xc48, Size: 0x8]
	CharacterInputComponent* CharacterInputComponent;//[Offset: 0xc58, Size: 0x8]
	ApexCharacter* SkinParent;//[Offset: 0xc60, Size: 0x8]
	bool bArmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 0x1]
	bool bIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc69, Size: 0x1]
	bool bExposeHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6a, Size: 0x1]
	BlendSpace* ArmedCharacterStand;//[Offset: 0xc70, Size: 0x8]
	BlendSpace* UnarmedCharacterStand;//[Offset: 0xc78, Size: 0x8]
	BlendSpace* ArmedCharacterCrouch;//[Offset: 0xc80, Size: 0x8]
	BlendSpace* UnarmedCharacterCrouch;//[Offset: 0xc88, Size: 0x8]
	BlendSpace* ADSCharacterCrouch;//[Offset: 0xc90, Size: 0x8]
	BlendSpace* ADSCharacterStand;//[Offset: 0xc98, Size: 0x8]
	BlendSpace1D* UnarmedCharacterSprint;//[Offset: 0xca0, Size: 0x8]
	BlendSpace1D* ArmedCharacterSprint;//[Offset: 0xca8, Size: 0x8]
	AnimMontage* SlideMelee;//[Offset: 0xcb0, Size: 0x8]
	AnimMontage* StandMelee;//[Offset: 0xcb8, Size: 0x8]
	AnimMontage* CrouchMelee;//[Offset: 0xcc0, Size: 0x8]
	AnimMontage* SprintMelee;//[Offset: 0xcc8, Size: 0x8]
	AnimMontage* JumpMelee;//[Offset: 0xcd0, Size: 0x8]
	AnimMontage* DoorMelee;//[Offset: 0xcd8, Size: 0x8]
	AnimMontage* PassiveMontage;//[Offset: 0xcf0, Size: 0x8]
	bool bIsPlayingPassiveMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 0x1]
	enum UsingWeaponSlot;//[Offset: 0xcf9, Size: 0x1]
	<int,SceneComponent*> WeaponMeshMap;//[Offset: 0xd00, Size: 0x50]
	PrimitiveComponent*[] WeaponMeshArray;//[Offset: 0xd50, Size: 0x10]
	bool bLockOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 0x1]
	bool bNeedEnableOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd61, Size: 0x1]
	GameplayTask_InvisibleEffectWithDither* InvisibleTask;//[Offset: 0xd68, Size: 0x8]
	<FName> FlashBuffs;//[Offset: 0xd78, Size: 0x50]
	PhysicalSurfaceAddBuff[] PhysicalSurfaceAddBuffs;//[Offset: 0xdc8, Size: 0x10]
	bool bIsOwnerFinisherOrEmoji;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 0x1]
	bool bHasPlayingFinisherOrEmojiMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd9, Size: 0x1]
	AnimMontage* FinisherOrEmojiAnimMontage;//[Offset: 0xde0, Size: 0x8]
	ParticleEffectSetCfg CurActiveParachuteEffectIDSet;//[Offset: 0xde8, Size: 0x50]
	int[] InstancedParachuteEffects;//[Offset: 0xe38, Size: 0x10]
	float ForceLandingHeight;//[Offset: 0xe48, Size: 0x4]
	float PawnHeight2Ground;//[Offset: 0xe4c, Size: 0x4]
	float ParchuteFlySpeedRate;//[Offset: 0xe58, Size: 0x4]
	float DecoyAutoSlideScale;//[Offset: 0xe5c, Size: 0x4]
	float DecoyJumpZSpeed;//[Offset: 0xe60, Size: 0x4]
	bool bEnableVisualSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe64, Size: 0x1]
	float StuckAdjustHeightValue;//[Offset: 0xe68, Size: 0x4]
	float controlTime;//[Offset: 0xe7c, Size: 0x4]
	enum DecoyEndType;//[Offset: 0xe80, Size: 0x1]
	byte[] CheckBeStuckObjectTypes;//[Offset: 0xe88, Size: 0x10]
	float HpCurrent;//[Offset: 0xe98, Size: 0x4]
	float HpMax;//[Offset: 0xe9c, Size: 0x4]
	float StuckTimeToDestroy;//[Offset: 0xea0, Size: 0x4]
	float DoorImpuseForceScale;//[Offset: 0xea4, Size: 0x4]
	bool bIsInitWithOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 0x1]
	<enum> DecoyListenPawnState;//[Offset: 0xeb8, Size: 0x50]
	Actor*[] BePingEnemys;//[Offset: 0xf08, Size: 0x10]
	GameplayTag PerkPingEnemyTag;//[Offset: 0xf18, Size: 0x8]
	float PingInterval;//[Offset: 0xf20, Size: 0x4]
	float CurrentPingTime;//[Offset: 0xf24, Size: 0x4]
	float PingRange;//[Offset: 0xf28, Size: 0x4]
	bool CanPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2c, Size: 0x1]
	bool bIsFightInMainTown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 0x1]
	float NameHightOffset;//[Offset: 0xf54, Size: 0x4]
	void UpdateAnimationInfo();// 0x7a050b4
	void UnPossesDecoyToPlayerController();// 0x7a03af0
	void TryPlayPassiveMontage();// 0x7a04e6c
	void SwitchWeaponSocket();// 0x7a04e30
	void SwitchPossesState(bool bPosses);// 0x7a0546c
	void SwitchCrouch();// 0xa0e118c
	void StopParachute();// 0x7a0581c
	void StartParachute();// 0x7a05830
	void SilencedByRevenantComplete();// 0x7a04454
	void SetWeaponMeshVisible(const bool bVisible);// 0x7a04d58
	void SetSkinParent(ApexCharacter* InSkinParent);// 0xa0e1654
	void SetMoveToTargetComplete(bool InbMoveToTargetComplete);// 0xa0e186c
	void SetMirageDecoyAutonomousProxy();// 0x7a03b04
	void SetDecoySourceType(enum InDecoySourceType);// 0x7a05744
	void ServerUpdateCharacterVelocity(Vector InVelocity);// 0xa0e0804
	void ServerTriggerJump();// 0xa0e1814
	void ReportDecoyDestroy(ApexCharacter* OwnerCharacter);// 0x54f2344
	void PingEnemy(const float DeltaTime);// 0x7a037ec
	void OnSwitchPossesState(bool bPossesed);// 0xa1d39f8
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0xa0e0b10
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0xa0e0d08
	void OnSourceCharacterDynamicSkinChange(Character* TargetCharacter, bool Success, FName SkinID);// 0x7a050f0
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x7a04f10
	void OnShootHit(out const HitEffectInstanceData ImpactResult);// 0x7a052f0
	void OnRepPossedByOwnerFromServer();// 0xa1d39f8
	void OnRepDecoySourceTypeFromServer();// 0xa1d39f8
	void OnRep_SkinParent();// 0x7a050dc
	void OnRep_ParachuteState();// 0x6139db0
	void OnRep_FlashBuffCount();// 0x54c0b34
	void OnRep_DecoySourceType();// 0x506b070
	void OnRep_bPossessByOwner();// 0x4f598e0
	void OnRep_bIsDied();// 0xa0e08dc
	void OnRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x5b27188
	void OnPutOnWeaponEndDelegate();// 0x527e828
	void OnPutOnWeaponBeginDelegate(int WeaponID);// 0x53d73b4
	void OnPutOffEndDelegate(int WeaponID);// 0x51c91ec
	void OnPutOffBeginDelegate();// 0x7a03d30
	void OnParachuteStateChanged();// 0x7a03d08
	void OnOwnerRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x7a03d9c
	void OnOwnerEnterFinisherOrEmoji();// 0x7a03d1c
	void OnOwnerCharacterRescueFinished();// 0x5a44be8
	void OnOwnerAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x7a040a0
	void OnOverrideStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0xa0e0920
	void OnMirageRemovePawnState(enum State, enum Reason, enum InterruptedBy);// 0x4cb5fe0
	void OnMirageOverrideStateChange(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x7a038f4
	void OnMirageCharacterOnRep_Owner();// 0xa1d39f8
	void OnMirageAddPawnState(enum State, enum OverrideState);// 0x4c23b5c
	void OnMeleeAttackFromClient(Vector hitLoc, Vector Dir, float Speed, float Time, bool IsTeammate);// 0xa0e0e70
	void OnMainTownControllerUpdateOutlineOverrideId();// 0x7a037c4
	void OnInitComplete();// 0x7a05844
	void OnHitByShootWeaponSpawnEffect(Vector ImpactPoint, Vector ImportNormal, bool IsTeammate);// 0xa1d39f8
	void OnDoorPushActor(Vector ImpactNormal);// 0xa1d39f8
	void OnDie(enum DieReason);// 0xa1d39f8
	void OnChangeFlashBuffCount();// 0x7a04440
	void OnAttackTarget(int TypeID, byte PoseType);// 0x5c2ea54
	void OnAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0xa0e11a8
	void LockOutline(const bool bLock);// 0xa0e156c
	void LeaveServerState_Inner(enum State);// 0x7a05644
	bool IsAutonomousOrTeammate();// 0x7a03d64
	void InitWithOwner();// 0x7a03adc
	void InitSkinAndAnimation(ApexCharacter* Parent);// 0x5280648
	void InitAnimationInstanceData();// 0x7a050a0
	bool HasPerkPingEnemyTag();// 0x60aa3bc
	ApexCharacter* GetSkinParent();// 0xa0e1720
	PawnStateManager* GetPawnStateManager();// 0xa0e1830
	bool GetIsPossessByOwner();// 0xa0e1940
	bool GetIsDied();// 0xa0e0904
	void Flash(bool bLoop);// 0xa1d39f8
	void EventRelease();// 0xa1d39f8
	void EventInit();// 0xa1d39f8
	void EnterSimulatedState(enum State);// 0xa0e173c
	void EnterServerState_Inner(enum State);// 0x7a05544
	void EndPingEnemy();// 0x7a037d8
	void Die(enum DieReason);// 0x7a03b18
	void DestroyWeapon();// 0x7a04e44
	void DealPossesState(bool bPossesed, bool bCanJump);// 0x5e210e4
	SceneComponent* CreateWeaponMeshByWeaponASImpl(SceneComponent* WeaponMesh, out const <int,ApgameWeaponAttachmentCosmeticData> Attachments);// 0x7a04730
	void CreateWeaponMeshByWeaponAS(int Slot, ApgameCommonWeaponAS* WeaponAS, Weapon* InWeapon);// 0x7a04988
	SceneComponent* CreateWeaponMesh(Weapon* Weapon, SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x7a04b6c
	void CreateWeapon();// 0x7a04e58
	SceneComponent* CreateStaticWeaponMesh(SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x7a045cc
	SceneComponent* CreateSkeletalWeaponMesh(SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x7a04468
	int CreatDecoyHeadWidget();// 0x54bd350
	bool CheckBeStuck();// 0x7a03be8
	void ChangeMaterialByOwner();// 0x7a050c8
	bool CanPingEnemy();// 0x7a038bc
	void CancelTaskExternal(GameplayTask* InTask);// 0x7a03c20
	void BP_UpdateDecoyHeadUI();// 0xa1d39f8
	void BP_OnMainTownControllerUpdateOutlineOverrideId(bool bEnter);// 0xa1d39f8
	void BP_DuplicatedDecoyInfoServer(enum decoyType, enum InitialSkillEvent, float LiftTime, float HP);// 0xa1d39f8

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	bool ChooseCorrectIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: GameplayTask_InvisibleEffectWithDither.GameplayTask.Object
	float MaxTime;//[Offset: 0x60, Size: 0x4]
	float CurrentTime;//[Offset: 0x64, Size: 0x4]
	CurveFloat* VisibleCurve;//[Offset: 0x68, Size: 0x8]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bKeepLastValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	int CustomID;//[Offset: 0x74, Size: 0x4]
	delegate OnFinishCallback;//[Offset: 0x78, Size: 0x10]
	float LastDitherValue;//[Offset: 0x88, Size: 0x4]
	float LastMeshDitherSpeed;//[Offset: 0x8c, Size: 0x4]
	float MaxValue;//[Offset: 0x90, Size: 0x4]
	ApexCharacterBase* UpdateCharacter;//[Offset: 0x98, Size: 0x8]
	void TaskDelayDelegate__DelegateSignature();// 0xa1d39f8
	void SetProgress(const float Value, const bool ForceSet);// 0x5b8b310
	static GameplayTask_InvisibleEffectWithDither* InvisibleEffectWithDither(interface classNone TaskOwner, ApexCharacterBase* InUpdateCharacter, int ResourceSetID, const float InvisibleTime, const float InMaxValue, CurveFloat* InVisibleCurve, const byte Priority);// 0x540667c
	void CancelTaskDoNotTriggerOnFinishEvent();// 0x601022c

--------------------------------
Class: HitEffectInstanceData
	bool bHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShooterIsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bHitKnockdownShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bFatalHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	enum CurShieldLevel;//[Offset: 0x7, Size: 0x1]
	int DamageType;//[Offset: 0x8, Size: 0x4]
	bool bIsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Transform InstanceTransform;//[Offset: 0x10, Size: 0x30]
	Quat QuaternionToMuzzle;//[Offset: 0x40, Size: 0x10]
	BulletHitInfoReplicateData SurfaceHit;//[Offset: 0x50, Size: 0x78]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	Vector DecalScale;//[Offset: 0xcc, Size: 0xc]
	SceneComponent* TargetImpactComp;//[Offset: 0xd8, Size: 0x8]
	bool bFXOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bAttackerIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bVictimIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	int KnockDownShieldLevel;//[Offset: 0xe4, Size: 0x4]
	Actor* Attacker;//[Offset: 0xe8, Size: 0x8]
	bool bUseEffectOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: ApgameWeaponAttachmentCosmeticData
	MeshComponent* FppMesh;//[Offset: 0x10, Size: 0x8]
	MeshComponent* TppMesh;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ApgameCommonWeaponAS.ApgameWeaponAttributeSet.Object
	int16 AttributeSetRepIndex;//[Offset: 0x340, Size: 0x2]
	bool bDirtyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x342, Size: 0x1]
	bool bDirtyBodyMeshVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x342, Size: 0x1]
	bool bDirtyAnyAttachmentMeshVisible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x342, Size: 0x1]
	bool bIsOnBack;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x342, Size: 0x1]
	bool bFirstPick;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x342, Size: 0x1]
	bool bAntiCheatOn_Runtime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x342, Size: 0x1]
	bool bEquipped;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x342, Size: 0x1]
	bool bDetachedWhenEquipped;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x342, Size: 0x1]
	bool bFppDetachedWhenEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x343, Size: 0x1]
	bool bTppDetachedWhenEquipped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x343, Size: 0x1]
	bool bAttachedWhenUnequipped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x343, Size: 0x1]
	bool bUseHighFppModels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x343, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x343, Size: 0x1]
	bool bFppMeshVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x343, Size: 0x1]
	bool bTppMeshVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x343, Size: 0x1]
	bool bFppAttachedToHand;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x343, Size: 0x1]
	bool bTppAttachedToHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool bBodyMeshFollow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	bool bAttachmentMeshFollow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x344, Size: 0x1]
	bool bInvisibleInEquipping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x344, Size: 0x1]
	bool bCustomAnimInstTicking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x344, Size: 0x1]
	byte CumulativeKillStage;//[Offset: 0x34c, Size: 0x1]
	enum WeaponType;//[Offset: 0x34d, Size: 0x1]
	enum BackSocketPos;//[Offset: 0x34e, Size: 0x1]
	enum CameraAimType;//[Offset: 0x34f, Size: 0x1]
	enum CurrentState;//[Offset: 0x350, Size: 0x1]
	float RaiseWeaponTimeRunTime;//[Offset: 0x368, Size: 0x4]
	float LowerWeaponTimeRunTime;//[Offset: 0x36c, Size: 0x4]
	float PutOnWeaponTimeRuntime;//[Offset: 0x370, Size: 0x4]
	float PutOffWeaponTimeRuntime;//[Offset: 0x374, Size: 0x4]
	float FirstPickupToIdleTimeRuntime;//[Offset: 0x378, Size: 0x4]
	float EquipAttachmentTimeRuntime;//[Offset: 0x37c, Size: 0x4]
	int SkinID;//[Offset: 0x380, Size: 0x4]
	uint32 SkinOwnerKey;//[Offset: 0x384, Size: 0x4]
	ItemDefineID[] EquipedIDSync;//[Offset: 0x388, Size: 0x10]
	WeaponImportStateData[] ImportStateSync;//[Offset: 0x398, Size: 0x10]
	WeaponImportStateData RemoteStateData;//[Offset: 0x3a8, Size: 0x8]
	SceneComponent* CurAttachComponent;//[Offset: 0x3b0, Size: 0x8]
	float QuickDrawEquipWeaponFactor;//[Offset: 0x3b8, Size: 0x4]
	float QuickDrawUnEquipWeaponFactor;//[Offset: 0x3bc, Size: 0x4]
	float QuickDrawBeginAimFactor;//[Offset: 0x3c0, Size: 0x4]
	float QuickDrawEndAimFactor;//[Offset: 0x3c4, Size: 0x4]
	Vector2D QuickDrawShootRotFactor;//[Offset: 0x3c8, Size: 0x8]
	ApgameWeaponMeshInfo PrimaryMeshInfo;//[Offset: 0x3d0, Size: 0x38]
	ApgameWeaponMeshInfo SecondaryMeshInfo;//[Offset: 0x408, Size: 0x38]
	ApgameWeaponAttachmentInfo[] AttachmentDataList;//[Offset: 0x440, Size: 0x10]
	int[] EquippedAttachmentIdList;//[Offset: 0x450, Size: 0x10]
	int CharmID;//[Offset: 0x460, Size: 0x4]
	ApgameWeaponAttachmentCosmeticInfo[] AttachmentCosmeticDataList;//[Offset: 0x4b8, Size: 0x10]
	void OnRep_SkinOwnerKey();// 0x5aa5704
	void OnRep_SkinId(out const int InOldValue);// 0x5067f38
	void OnRep_RemoteStateData(out const WeaponImportStateData InOldValue);// 0x4a77098
	void OnRep_ImportStateSync();// 0x4a9e804
	void OnRep_EquipedIDSync();// 0x4f93464
	void OnRep_CumulativeKillStage();// 0x7a7a2b8
	void OnRep_AttributeSetRepIndex();// 0x4ce7ab4
	static ApgameCommonWeaponAS* K2_FindCommonWeaponAS(ApgameWeaponCoreComponent* InCoreComp);// 0x7a7a1e8

--------------------------------
Class: WeaponImportStateData
	enum StateType;//[Offset: 0x0, Size: 0x1]
	int StateIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApgameWeaponMeshInfo
	ApgameWeaponMeshCompViews CompViews;//[Offset: 0x0, Size: 0x10]
	ApgameWeaponMeshCompViews CharmViews;//[Offset: 0x10, Size: 0x10]
	WeaponFrameEffectData* EffectDataAsset;//[Offset: 0x20, Size: 0x8]
	SkeletalMesh* NormalFppModelCache;//[Offset: 0x28, Size: 0x8]
	SkeletalMesh* HighFppModelCache;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ApgameWeaponMeshCompViews
	SkeletalMeshComponent* Fpp;//[Offset: 0x0, Size: 0x8]
	SkeletalMeshComponent* Tpp;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WeaponFrameEffectData.DataAsset.Object
	int SkinID;//[Offset: 0x30, Size: 0x4]
	MainBoneMaterialEffect[] MainMaterialEffects;//[Offset: 0x38, Size: 0x10]
	<enum,FrameMeshEffectEventContent> MainMeshEventContents;//[Offset: 0x48, Size: 0x50]
	FrameStaticEffect[] StaticEffects;//[Offset: 0x98, Size: 0x10]
	FrameParticleEffect[] ParticleEffects;//[Offset: 0xa8, Size: 0x10]
	FrameAudioEffect[] AudioEffects;//[Offset: 0xb8, Size: 0x10]
	void PackStaticEffect(out SoftObjectPath[] Paths, bool isTwo);// 0x7f4ecec
	void PackParticleEffect(out SoftObjectPath[] Paths, bool isTwo);// 0x7f4ea40

--------------------------------
Class: MainBoneMaterialEffect
	FString EffectName;//[Offset: 0x0, Size: 0x10]
	FName MaterialParam;//[Offset: 0x10, Size: 0x8]
	enum MainEvent;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: FrameMeshEffectEventContent
	FName[] DynamicMaterialParameterNames;//[Offset: 0x0, Size: 0x10]
	FrameMeshEffect[] StaticMaterialParameters;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: FrameMeshEffect
	<FName,float> StaticScalarMaterialParameters;//[Offset: 0x0, Size: 0x50]
	<FName,Vector> StaticVectorMaterialParameters;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: FrameStaticEffect
	FString EffectName;//[Offset: 0x0, Size: 0x10]
	StaticMesh* StaticMeshPathFPP;//[Offset: 0x10, Size: 0x28]
	StaticMesh* StaticMeshPathTPP;//[Offset: 0x38, Size: 0x28]
	FName AttachSocket;//[Offset: 0x60, Size: 0x8]
	FName[] MaterialValues;//[Offset: 0x68, Size: 0x10]
	enum EffectEvent;//[Offset: 0x78, Size: 0x1]
	<enum,FrameMeshEffectEventContent> EventContents;//[Offset: 0x80, Size: 0x50]
	MaterialInterface*[] OverrideMaterialsFPP;//[Offset: 0xd0, Size: 0x10]
	MaterialInterface*[] OverrideMaterialsTPP;//[Offset: 0xe0, Size: 0x10]
	bool HideWhenEventLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: FrameAudioEffect
	enum TriggerEvent;//[Offset: 0x0, Size: 0x1]
	enum EffectType;//[Offset: 0x1, Size: 0x1]
	<FName,FString> Param2Detail;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: ApgameWeaponAttachmentInfo
	enum Type;//[Offset: 0x0, Size: 0x1]
	AttachmentData Data;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: AttachmentData
	bool bDefaultAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum SocketType;//[Offset: 0x1, Size: 0x1]
	BackpackWeaponAttachHandleBase* ItemConfig;//[Offset: 0x8, Size: 0x8]
	ItemDefineID ItemDefineID;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: BackpackWeaponAttachHandleBase.BattleItemHandleBase.ItemHandleBase.Object
	BackpackWeaponHandleBase* CurrentEqupingWeaponHandle;//[Offset: 0x288, Size: 0x8]
	ShootWeapon* CurrentEquipingWeapon;//[Offset: 0x290, Size: 0x8]
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x2a8, Size: 0xa0]
	bool HandleEquipAttachment(BackpackWeaponHandleBase* WeaponHandle);// 0x7b03bf0
	void GetOwnerWeaponHandleList(out BackpackWeaponHandleBase*[] OutWeaponHandleList);// 0x7b04590
	void FindBestGivenWeaponHandleToEquipWith(BackpackWeaponHandleBase*[] WeaponHadnleList, bool bConsiderAttachmentWeight, out bool EquipSuccessed, out BattleItemUseTarget OutItemTarget, out BackpackWeaponHandleBase* OutWeapHandle, out Weapon* OutWeapActor);// 0x7b03cb8
	bool EquipOrUnEquipAttachment(ShootWeapon* InWeapon, bool IsEquip, enum UseReason, enum DisuseReason);// 0x7b04344
	void ApplyAttrModify(ShootWeapon* InWeapon, bool IsEquip, enum UseReason, enum DisuseReason);// 0x7b040fc

--------------------------------
Class: BackpackWeaponHandleBase.BattleItemHandleBase.ItemHandleBase.Object
	WeaponManagerComponent* WeaponManager;//[Offset: 0x2a0, Size: 0x8]
	ShootWeapon* ShootWeapon;//[Offset: 0x2a8, Size: 0x8]
	WeaponMeshCfg MeshPackage;//[Offset: 0x2b0, Size: 0x90]
	int Additional_ExtraBulletNum;//[Offset: 0x340, Size: 0x4]
	int Additional_SpecialBulletNum;//[Offset: 0x344, Size: 0x4]
	bool Additional_bUseSpecialBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	uint32 Additional_SkinOwnerKey;//[Offset: 0x34c, Size: 0x4]
	int Additional_CumulativeKill;//[Offset: 0x350, Size: 0x4]
	int[] AttachList;//[Offset: 0x358, Size: 0x10]
	<enum,BackpackWeaponAttachHandleBase*> EquipedWeaponAttachments;//[Offset: 0x368, Size: 0x50]
	ContainerData WrapperPickInfo;//[Offset: 0x3b8, Size: 0x70]
	void UpdateEquipedAttachments(enum AttachSocketType, BackpackWeaponAttachHandleBase* WeaponAttachmentHandle, bool IsEuqip);// 0x7b05094
	bool LocalHandleUse(out const BattleItemUseTarget InTarget, enum InReason);// 0x7b04b14
	enum LocalGetAvailableWeaponSlot(out bool bOutNeedPutDownOldWeapon);// 0x7b04c7c
	void LocalAutoEquipAttachments();// 0x7b04e18
	void IsSupportGivenAttachment(BackpackWeaponAttachHandleBase* AttachmentHandle, out bool OutCanEquip, out bool OutHasOcupied, out bool OutHighWeight);// 0x7b04e2c
	ShootWeapon* GetWeaponRef();// 0xa100408
	enum GetSpawnSource();// 0xa1003ec
	bool GetInitialBulletNum();// 0xa100424
	bool DropAllAssociation(enum Reason);// 0x7b04d50

--------------------------------
Class: WeaponMeshCfg
	SkeletalMesh* skMesh;//[Offset: 0x0, Size: 0x28]
	SkeletalMesh* skMeshLod;//[Offset: 0x28, Size: 0x28]
	class Weapon3DUIActor* Weapon3DUI;//[Offset: 0x50, Size: 0x28]
	Weapon3DUIActorIdPair[] SpecialWeapon3DUI;//[Offset: 0x78, Size: 0x10]
	FName SocketName;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: Weapon3DUIActorIdPair
	int WeaponID;//[Offset: 0x0, Size: 0x4]
	class Weapon3DUIActor* Special3DUI;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: WeaponAttachmentConfig
	enum AttachmentSocketType;//[Offset: 0x0, Size: 0x1]
	enum subSlot;//[Offset: 0x1, Size: 0x1]
	bool bCanZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum ZoomSlot;//[Offset: 0x3, Size: 0x1]
	WeaponMeshCfg MeshPackage;//[Offset: 0x8, Size: 0x90]
	AkAudioEvent* UseAudioEvent;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: ApgameWeaponAttachmentCosmeticInfo
	enum Type;//[Offset: 0x0, Size: 0x1]
	ApgameWeaponAttachmentCosmeticData Data;//[Offset: 0x8, Size: 0xb0]

--------------------------------
Class: VehicleComponent.ActorComponent.Object
	bool bShowGetOnOrOffLocationTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	float ShowGetOnOrOffLocationTraceTime;//[Offset: 0xfc, Size: 0x4]
	AnimMontage* m_CurrentPlayingMontage;//[Offset: 0x108, Size: 0x8]
	CharacterVehicleInfo CharacterVehicleInfo;//[Offset: 0x118, Size: 0x10]
	void RPCServer_PlayAudioSummonTeammates();// 0xa18f164
	void RPCServer_GetOffVehicle(bool bDirectly);// 0x7f24264
	void RPCServer_BoardingVehicle(ApexVehicleActor* VehicleTarget, int SeatIndex, bool bDirectly);// 0x7f243ec
	void RPCClient_GetOnResult(bool bCanGetOn, ApexVehicleActor* VehicleTarget, int SeatIndex, bool bDirectly, enum InVehicleGetOnResultType, FString Reason);// 0x7f245ac
	void RPCClient_GetOffVehicleFailed();// 0xa18f180
	void RPCClient_BoardFailed();// 0xa18f19c
	void OnRep_OnCharacterVehicleInfoChanged();// 0x7f24250
	void BombStopRise(ApexCharacter* pCharacter);// 0x7f24330

--------------------------------
Class: CharacterVehicleInfo
	ApexVehicleActor* RideVehicle;//[Offset: 0x0, Size: 0x8]
	int SeatIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexVehicleActor.DynamicMovementActor.Actor.Object
	OutlineAndFillComponent* OutlineAndFillComp;//[Offset: 0x2f8, Size: 0x8]
	VehicleSeatInfo[] PassengerInfos;//[Offset: 0x308, Size: 0x10]
	PlayAudioSummonTeammate PlayAudioSummonTeammate;//[Offset: 0x328, Size: 0x8]
	float m_VehicleShield;//[Offset: 0x34c, Size: 0x4]
	float m_MaxVehicleShield;//[Offset: 0x350, Size: 0x4]
	float m_VehicleShieldHealing;//[Offset: 0x354, Size: 0x4]
	VehicleConfigBase* CacheVehicleConfig;//[Offset: 0x370, Size: 0x8]
	SkeletalMeshComponent* VehicleMeshComponent;//[Offset: 0x380, Size: 0x8]
	VehicleSpringArmComponent* VehicleSpringArmComponent;//[Offset: 0x390, Size: 0x8]
	CameraComponent* VehicleCameraComponent;//[Offset: 0x398, Size: 0x8]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7a54788
	void SpeedUp();// 0xa0f1608
	void RPCServer_Bomb();// 0xa0f1574
	void OnTppDefaultFovChange();// 0x7a54760
	void OnRep_PlayAudioSummonTeammate();// 0x7a54a38
	void OnRep_OnShieldHealingChanged();// 0x7a549e4
	void OnRep_OnShieldChanged();// 0x7a54a14
	void OnRep_OnPassengerChanged();// 0x7a54a4c
	void OnRep_OnMaxShieldChanged();// 0x7a549fc
	void OnCharacterCameraModeChange();// 0x7a54774
	bool IsVehicleAvailabled();// 0xa0f1590
	void EngineStart();// 0xa0f15ec
	void EngineStall();// 0xa0f15d0
	void Brake(bool bEnable);// 0x7a54b54
	void Boost();// 0xa0f1624
	void Bomb_NetMulticast(const ApexCharacter*[] PassengersWithBomb);// 0x7a54a60

--------------------------------
Class: VehicleSeatInfo
	ApexCharacter* Person;//[Offset: 0x0, Size: 0x8]
	enum CharacterOnVehicleStage;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PlayAudioSummonTeammate
	ApexCharacter* Person;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: VehicleConfigBase.DataAsset.Object
	float DetectionDistance;//[Offset: 0x30, Size: 0x4]
	float BoardingTime;//[Offset: 0x34, Size: 0x4]
	CurveFloat* Speed2FovFactorTPP;//[Offset: 0x38, Size: 0x8]
	CurveFloat* Speed2FovFactorFPP;//[Offset: 0x40, Size: 0x8]
	CurveVector* CameraShakeCurve;//[Offset: 0x48, Size: 0x8]
	float MinShowOutlineDistance;//[Offset: 0x50, Size: 0x4]
	float MaxShowOutlineDistance;//[Offset: 0x54, Size: 0x4]
	int OutlineConfigID;//[Offset: 0x58, Size: 0x4]
	int EmptyVehiclePingID;//[Offset: 0x5c, Size: 0x4]
	int EnemyVehiclePingID;//[Offset: 0x60, Size: 0x4]
	int TeammateVehiclePingID;//[Offset: 0x64, Size: 0x4]
	ParticleSystem* BombParticle;//[Offset: 0x68, Size: 0x8]
	FName BombAttachPointName;//[Offset: 0x70, Size: 0x8]
	float MaxShieldValue;//[Offset: 0x78, Size: 0x4]
	float NotHitTimeThenRecoverShield;//[Offset: 0x7c, Size: 0x4]
	float RecoverShieldValueEveryTime;//[Offset: 0x80, Size: 0x4]
	float RecoverShieldIntervalTime;//[Offset: 0x84, Size: 0x4]
	float DamagePercent;//[Offset: 0x88, Size: 0x4]
	VehiclePassengerSetting[] PassengerSetting;//[Offset: 0x90, Size: 0x10]
	FString SummonTeammate;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: VehiclePassengerSetting
	FString Desc;//[Offset: 0x0, Size: 0x10]
	enum CharacterOnVehicleType;//[Offset: 0x10, Size: 0x1]
	Vector FPPCameraRootOffset;//[Offset: 0x14, Size: 0xc]
	Vector4 VehicleTPPRotationLimit;//[Offset: 0x20, Size: 0x10]
	Vector4 VehicleFPPRotationLimit;//[Offset: 0x30, Size: 0x10]
	CurveVector* Speed2TPPCameraRootOffset;//[Offset: 0x40, Size: 0x8]
	CurveFloat* Fov2TPPCameraSpringArmLengthCurve;//[Offset: 0x48, Size: 0x8]
	FName SeatSocketName;//[Offset: 0x50, Size: 0x8]
	GetOnVehicleInfo[] FPPGetOnAnimInfoList;//[Offset: 0x58, Size: 0x10]
	GetOnVehicleInfo[] TPPGetOnAnimInfoList;//[Offset: 0x68, Size: 0x10]
	GetOffVehicleInfo FPPGetOffAnimInfo;//[Offset: 0x78, Size: 0x20]
	GetOffVehicleInfo TPPGetOffAnimInfo;//[Offset: 0x98, Size: 0x20]
	AkAudioEvent* TPPGetOnAudio;//[Offset: 0xb8, Size: 0x28]
	AkAudioEvent* TPPGetOffAudio;//[Offset: 0xe0, Size: 0x28]
	AkAudioEvent* FPPGetOnAudio;//[Offset: 0x108, Size: 0x28]
	AkAudioEvent* FPPGetOffAudio;//[Offset: 0x130, Size: 0x28]
	float BombPopupHeight;//[Offset: 0x158, Size: 0x4]

--------------------------------
Class: GetOnVehicleInfo
	float MinAngle;//[Offset: 0x0, Size: 0x4]
	float MaxAngle;//[Offset: 0x4, Size: 0x4]
	AnimMontage* GetOnAnim;//[Offset: 0x8, Size: 0x8]
	float GetOnLogicTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GetOffVehicleInfo
	Vector[] RelativeLocationList;//[Offset: 0x0, Size: 0x10]
	AnimMontage* GetOffAnim;//[Offset: 0x10, Size: 0x8]
	float GetOffLogicTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: CharacterFinisherComponent.ActorComponent.Object
	class GameActionFinisherInstanceBase* DefaultFinisherAction;//[Offset: 0xf8, Size: 0x8]
	bool UpdateBeFinisherLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bUseLobbyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bPreLoadLobbyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	float LobbyMeshLight;//[Offset: 0x104, Size: 0x4]
	float DetectInterval;//[Offset: 0x108, Size: 0x4]
	float InnerPreloadSquaredRange;//[Offset: 0x10c, Size: 0x4]
	float OuterUnloadSquaredRange;//[Offset: 0x110, Size: 0x4]
	bool bEnableForceCleanOnTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	int FinisherGuideID;//[Offset: 0x118, Size: 0x4]
	enum WeaponSlot;//[Offset: 0x150, Size: 0x1]
	bool bDrawDirector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bDrawMoveLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	bool bDrawMoveLineTraceForSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1]
	bool bDrawMoveLineTraceForTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1]
	int FinisherActionID;//[Offset: 0x174, Size: 0x4]
	ApexCharacter* TargetCharacter;//[Offset: 0x178, Size: 0x8]
	GameActionFinisherInstanceBase* FinisherActionInstance;//[Offset: 0x180, Size: 0x8]
	Actor* FinisherDirectorActor;//[Offset: 0x188, Size: 0x8]
	bool bInFinisher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	SceneComponent* SourceParent;//[Offset: 0x198, Size: 0x8]
	SceneComponent* TargetParent;//[Offset: 0x1a0, Size: 0x8]
	TimerHandle CancelFinisherTimer;//[Offset: 0x1a8, Size: 0x8]
	enum CameraMode;//[Offset: 0x1b0, Size: 0x1]
	TimerHandle SyncTargetLocationOnFinisherEnd;//[Offset: 0x1b8, Size: 0x8]
	Vector FinisherTargetActorLocation;//[Offset: 0x1c0, Size: 0xc]
	Vector FinisherSourceActorLocation;//[Offset: 0x1cc, Size: 0xc]
	SkeletalMesh* LobbySkeletalMesh;//[Offset: 0x1d8, Size: 0x8]
	MaterialInterface*[] LobbyMaterials;//[Offset: 0x1e0, Size: 0x10]
	SceneComponent* SourceCameraEffectNodeParent;//[Offset: 0x1f0, Size: 0x8]
	Transform SourceCameraEffectTransform;//[Offset: 0x200, Size: 0x30]
	SceneComponent* TargetCameraEffectNodeParent;//[Offset: 0x230, Size: 0x8]
	Transform TargetCameraEffectTransform;//[Offset: 0x240, Size: 0x30]
	Rotator BaseRotationInFinisher;//[Offset: 0x270, Size: 0xc]
	Rotator BaseMeshRotationInFinisher;//[Offset: 0x27c, Size: 0xc]
	byte CapsuleCollisionResponse;//[Offset: 0x288, Size: 0x1]
	byte MeshCollisionResponse;//[Offset: 0x289, Size: 0x1]
	byte OwnerCapsuleCollisionResponse;//[Offset: 0x28a, Size: 0x1]
	byte OwnerMeshCollisionResponse;//[Offset: 0x28b, Size: 0x1]
	float NextDetectTime;//[Offset: 0x28c, Size: 0x4]
	ApexCharacter*[] TargetList;//[Offset: 0x298, Size: 0x10]
	void UpdateLocalPlayerDetector();// 0x7b5c5d0
	void SyncLocationToServer(const Vector SourceLocation, const Vector TargetLocation);// 0x7b5d514
	void ShowWhiteLightScreenEffect(bool bIsShow);// 0x7b5ca54
	void ShowScreenEffectOnFinisherComplete();// 0x7b5cb18
	void ShowCancelButtonTimer();// 0x7b5c5bc
	void ResetLobbyMesh();// 0x7b5d2e4
	void RemoveGameAction();// 0x7b5c5e4
	void RemoveCancelButtonTimer();// 0x7b5c5a8
	Vector RebaseLocalOriginOntoZero(Vector Location);// 0x7b5cb2c
	void PrePlayAction(ApexCharacter* Target);// 0x7b5d730
	void Play(ApexCharacter* Target);// 0x7b5daa0
	void OnWeaponPutOffEnd(int WeaponID);// 0x4dccef4
	void OnSourceOrTargetDeath();// 0x7b5d64c
	void OnRep_FinisherActionID();// 0x5401aa8
	void OnRemoveFinisherState(enum State, enum Reason, enum InterruptedBy);// 0x7b5c3e0
	void OnPlayAction(GameActionFinisherInstanceBase* InFinisherAction, ApexCharacter* Target);// 0x7b5d96c
	void OnLoadGameActionForSimulatedProxyComplete(out const SoftObjectPath[] InPaths, out const Object*[] InLoadAssets);// 0x7b5c60c
	void OnLoadGameActionClassComplete(SoftObjectPath Loader);// 0x7b5c8dc
	void OnFinisherEnd(enum Reason);// 0x7b5d674
	void OnAsyncPreLoadLobbyMeshComplete(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets);// 0x7b5cd44
	void OnAsyncLoadLobbyMeshComplete(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets);// 0x7b5d014
	void LoadLobbyMesh(const bool bIsPreLoad);// 0x7b5d2f8
	void LoadGameActionClass();// 0x7b5ca40
	void InitFinisherActionInstanceClass();// 0x7b5d660
	void HideCancelButton();// 0x7b5c594
	void CleanStateOnFinisherEnd(enum Reason);// 0x7b5d7f4
	Vector CheckClientLocationValid(ApexCharacter* Character, out const Vector Location);// 0x7b5d3bc
	bool CanUseLobbyMesh();// 0x7b5cbfc
	void AddGameAction();// 0x7b5c5f8
	void Abort(enum AbortReason);// 0x7b5d8b0

--------------------------------
Class: GameActionFinisherInstanceBase.GameActionInstanceBase.Object
	int MotionMoveID;//[Offset: 0x8c, Size: 0x4]
	ApexCharacter* FinisherTarget;//[Offset: 0x90, Size: 0x8]
	Actor* Director;//[Offset: 0x98, Size: 0x8]
	enum EndReason;//[Offset: 0xa0, Size: 0x1]
	bool bIsSwitchCameraByFinisherRole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	void OnRep_FinisherTarget();// 0x5386b14
	void OnRep_EndReason();// 0x7c01920
	void OnPreActive();// 0xa1d39f8
	void NetSetFinisherTarget(ApexCharacter* InFinisherTarget);// 0x7c01bc0
	void NetSetEndReasonTarget(const enum Reason);// 0x7c01a3c
	void __SetFinisherTargetToServer(ApexCharacter* InFinisherTarget);// 0x7c01b3c
	void __SetFinisherTargetToClient(ApexCharacter* InFinisherTarget);// 0x7c01ab8
	void __SetEndReasonToServer(const enum Reason);// 0x7c019b8
	void __SetEndReasonToClient(const enum Reason);// 0x7c01934

--------------------------------
Class: GameActionInstanceBase.Object
	GameActionComponent* OwningComponent;//[Offset: 0x28, Size: 0x8]
	GameActionEntry DefaultEntry;//[Offset: 0x30, Size: 0x10]
	bool bSharePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	GameActionSequencePlayer* SequencePlayer;//[Offset: 0x48, Size: 0x8]
	float SubStepDuration;//[Offset: 0x50, Size: 0x4]
	GameActionSegmentBase* ActivedSegment;//[Offset: 0x58, Size: 0x8]
	Actor*[] InstanceManagedSpawnables;//[Offset: 0x78, Size: 0x10]
	bool TryStartEntry(out const GameActionEntry Entry);// 0x63e9de0
	bool TryStartDefaultEntry();// 0x63e9da8
	bool TryEventTransition(FName EventName);// 0x63e9d0c
	void TransformActorData(out const GameActionPossessableActorData ActorData, out Vector WorldLocation, out Rotator WorldRotation);// 0x63e9b80
	void ReceiveWhenDestruct();// 0xa1d39f8
	void ReceiveWhenDeactived();// 0xa1d39f8
	void ReceiveWhenConstruct();// 0xa1d39f8
	void ReceiveWhenActived();// 0xa1d39f8
	void ReceiveWhenAborted();// 0x9f25aa0
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void PushEnableSubStepMode();// 0x63e9eec
	void PopEnableSubStepMode();// 0x63e9eb0
	void OnRep_OwningComponent();// 0x525faf4
	void OnRep_ActivedSegment(GameActionSegmentBase* PreActivedSegment);// 0x5857178
	bool IsLocalControlled();// 0x63e9f5c
	bool IsActived();// 0x9f25abc
	void InvokeTransitionToServer(GameActionSegmentBase* FromSegment, GameActionSegmentBase* ToSegment, const FName ServerCheckFunctionName);// 0x63e9a84
	bool HasAuthority();// 0x63e9f24
	Character* GetOwner();// 0x63e9f94
	Transform GetOriginTransform();// 0x63e9ca0
	void FinishInstanceToServer();// 0x9f25a84
	void CancelActionToClient(GameActionSegmentBase* Segment);// 0x63e9a00
	void AbortInstanceToServer();// 0x9f25a68
	void AbortInstanceNetMulticast();// 0x9f25a4c
	void AbortGameAction();// 0x63e9d94

--------------------------------
Class: GameActionEntry
	GameActionEntryTransition[] Transitions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GameActionEntryTransition.GameActionTransitionBase

--------------------------------
Class: GameActionTransitionBase
	delegate Condition;//[Offset: 0x0, Size: 0x10]
	GameActionSegmentBase* TransitionToSegment;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GameActionSegmentBase.Object
	delegate OnActionActivedEvent;//[Offset: 0x28, Size: 0x10]
	delegate OnActionAbortedEvent;//[Offset: 0x38, Size: 0x10]
	delegate OnActionDeactivedEvent;//[Offset: 0x48, Size: 0x10]
	delegate OnActionTickEvent;//[Offset: 0x58, Size: 0x10]
	delegate OnActionTransitionFailed;//[Offset: 0x68, Size: 0x10]
	delegate EvaluateExposedInputsEvent;//[Offset: 0x78, Size: 0x10]
	GameActionTickTransition[] TickTransitions;//[Offset: 0x88, Size: 0x10]
	GameActionEventTransition[] EventTransitions;//[Offset: 0x98, Size: 0x10]
	void ReceiveWhenTransitionFailed(GameActionSegmentBase* TransitionFailedSegment);// 0x63eae2c
	void ReceiveWhenActionTick(float DeltaSeconds);// 0xa1d39f8
	void ReceiveWhenActionDeactived();// 0xa1d39f8
	void ReceiveWhenActionActived();// 0xa1d39f8
	void ReceiveWhenActionAborted();// 0x9f25b5c
	void EvaluateExposedInputsEvent__DelegateSignature();// 0xa1d39f8
	void DefaultTransitionFailedToClient();// 0x9f25b40

--------------------------------
Class: GameActionTickTransition.GameActionTransitionBase

--------------------------------
Class: GameActionEventTransition.GameActionTransitionBase
	FName EventName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameActionPossessableActorData
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GameActionComponent.ActorComponent.Object
	<class GameActionInstanceBase> DefaultActions;//[Offset: 0xf8, Size: 0x50]
	<GameActionInstanceBase*> PreActionInstances;//[Offset: 0x148, Size: 0x50]
	GameActionInstanceBase*[] ActionInstances;//[Offset: 0x198, Size: 0x10]
	GameActionSequencePlayer* SharedPlayer;//[Offset: 0x1a8, Size: 0x8]
	bool TryPlayCreatedGameAction(GameActionInstanceBase* Instance, out const GameActionEntry Entry);// 0x63e6bdc
	void RemoveGameAction(class GameActionInstanceBase Action);// 0x63e6f30
	void PlayGameActionToServer(class GameActionInstanceBase Action, FName EntryName);// 0x63e6a98
	void PlayGameAction(class GameActionInstanceBase Action, FName EntryName);// 0x63e6d6c
	void OnRep_ActionInstances();// 0x58e4eec
	bool IsSharedPlayerPlaying();// 0x63e6a4c
	bool IsAnyActionActived();// 0x63e6b54
	GameActionInstanceBase* GetSharedPlayerActiveAction();// 0x63e69b8
	GameActionInstanceBase* FindGameAction(class GameActionInstanceBase Action);// 0x63e6eac
	GameActionInstanceBase* CreateGameActionToPlay(class GameActionInstanceBase Action);// 0x63e6ce8
	bool ContainGameAction(class GameActionInstanceBase Action);// 0x63e6e20
	GameActionInstanceBase* AddGameAction(class GameActionInstanceBase Action);// 0x63e6fac
	void AbortSharedPlayerActiveAction();// 0x63e69a4

--------------------------------
Class: GameActionSequencePlayer.Object
	FrameNumber StartTime;//[Offset: 0x498, Size: 0x4]
	int DurationFrames;//[Offset: 0x49c, Size: 0x4]
	GameActionSequence* ServerPlayedSequence;//[Offset: 0x4a0, Size: 0x8]
	GameActionSequence* Sequence;//[Offset: 0x4a8, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4b0, Size: 0x300]
	byte Status;//[Offset: 0x81c, Size: 0x1]
	int CurrentNumLoops;//[Offset: 0x820, Size: 0x4]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x824, Size: 0x10]
	GameActionInstanceBase* GameAction;//[Offset: 0x858, Size: 0x8]
	Character* CameraUpdateActor;//[Offset: 0x868, Size: 0x8]
	PlayerController* CameraUpdateController;//[Offset: 0x870, Size: 0x8]

--------------------------------
Class: GameActionSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	Guid OwnerGuid;//[Offset: 0x350, Size: 0x10]
	<Guid,FName> PossessableActors;//[Offset: 0x360, Size: 0x50]
	<Guid,GameActionSequenceSubobjectBinding> BindingSubobjects;//[Offset: 0x3b0, Size: 0x50]

--------------------------------
Class: GameActionSequenceSubobjectBinding
	FName OwnerPropertyName;//[Offset: 0x0, Size: 0x8]
	FString PathToSubobject;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ApgameInspectWeaponLogic.Object
	AnimMontage* TargetPawnMontage;//[Offset: 0x60, Size: 0x8]
	void OnEventUsingWeaponSlotChange(enum InOld, enum InNew);// 0x7a85298

--------------------------------
Class: ZiplinePlayerFlowData
	ZiplineComponent* RideZipline;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: CanHelingSelfData
	bool CanHealingSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool CanShowDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CureRepData
	bool IsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float RecoverCD;//[Offset: 0x4, Size: 0x4]
	bool IsBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: QueryPlayerInfo
	FString GameModeID;//[Offset: 0x0, Size: 0x10]
	float PlayTime;//[Offset: 0x10, Size: 0x4]
	Vector Position;//[Offset: 0x14, Size: 0xc]
	int LegendID;//[Offset: 0x20, Size: 0x4]
	FString CurrSkillIdsStr;//[Offset: 0x28, Size: 0x10]
	FString CurrPawnStatesStr;//[Offset: 0x38, Size: 0x10]
	FString CurrBuffIdsStr;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MirageActor.Actor.Object
	AnimSequence* NormalSeqPtr;//[Offset: 0x278, Size: 0x28]
	AnimSequence* PartySeqPtr;//[Offset: 0x2a0, Size: 0x28]
	SkeletalMesh* HighSKeletalMesh;//[Offset: 0x2e8, Size: 0x28]
	SkeletalMesh* LowSKeletalMesh;//[Offset: 0x310, Size: 0x28]
	AnimSequence* NormalSeq;//[Offset: 0x338, Size: 0x8]
	AnimSequence* PartySeq;//[Offset: 0x340, Size: 0x8]
	enum MirageState;//[Offset: 0x349, Size: 0x1]
	float DefaultHealth;//[Offset: 0x34c, Size: 0x4]
	float Health;//[Offset: 0x350, Size: 0x4]
	float FadeOutTime;//[Offset: 0x354, Size: 0x4]
	float FadeInTime;//[Offset: 0x358, Size: 0x4]
	BoxComponent* DamageAreaComp;//[Offset: 0x360, Size: 0x8]
	SkeletalMeshComponent* SkeletonMeshComp;//[Offset: 0x368, Size: 0x8]
	bool bCanBeKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	float ReviveCD;//[Offset: 0x374, Size: 0x4]
	MirageActor* AddtionalMirageActor;//[Offset: 0x378, Size: 0x8]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x3a0, Size: 0x8]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7d4aad0
	void SwitchCollision(bool bEnableCollision);// 0xa1d39f8
	void SwitchAnimation();// 0x7d4b96c
	void SetVisibilityAndCollision(bool bNewVisibility);// 0x7d4b858
	void SetSkeletonMaterials(MaterialInterface*[] InMaterials);// 0x7d4b15c
	void SetOutlineValue(float Ratio, float OriginalInnerColorA, float OriginalOutlineThickness);// 0x7d4b348
	void Revive();// 0x7d4b91c
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0x7d4a30c
	void PlaySurvive();// 0xa1d39f8
	void PlayDead();// 0xa1d39f8
	void PlayDamageEffect(Vector Location, Vector Normal);// 0xa1d39f8
	void OnRevival();// 0x7d4a8a4
	void Onrep_MirageState();// 0x7d4b944
	void OnRep_Health();// 0x7d4b930
	void OnReceivedPointDamage(Vector HitPoint, Vector HitNormal);// 0x7d4a8b8
	void OnDetectAreaBeginOverLap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7d4b4f8
	void OnClassLoaded();// 0x7d4b958
	void OnBeKilled();// 0x7d4a9f8
	void KillMirage(bool bAutoRevive);// 0x7d4aa0c
	bool IsSameTeam(Actor* Other, bool bCheckHostile);// 0x7d4a054
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x7d4a1b0
	void CreateEffect(ParticleSystem* EmitterTemplate, out const FName AttachPointName, out const Vector Location, ParticleSystemAsync* SourceValue);// 0x7d4adf0
	void ChangeState(enum TargetState);// 0x7d4ad2c
	void ChangeMirageState(out const ChapterParams Params);// 0x7d4b980
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor, float InValidityTimeScale);// 0x7d4a5e0

--------------------------------
Class: ValkyrieSkywardDiveLauncherActor.SkillActorBase.DynamicMovementActor.Actor.Object
	ValkyrieSkywardDiveConfig* ConfigData;//[Offset: 0x560, Size: 0x8]
	ApexCharacter* Captain;//[Offset: 0x568, Size: 0x8]
	TeamMemberInfo[] TeamMembers;//[Offset: 0x570, Size: 0x10]
	bool StartLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	bool ReachTopTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1]
	int LaunchPhase;//[Offset: 0x584, Size: 0x4]
	SphereComponent* OverlapComp;//[Offset: 0x588, Size: 0x8]
	UAESkillManagerComponent* UAESkillManager;//[Offset: 0x590, Size: 0x8]
	Rotator CaptainRotator;//[Offset: 0x598, Size: 0xc]
	Rotator ReplicateCaptainRotator;//[Offset: 0x5a4, Size: 0xc]
	ValkyrieSkywardDiveConfig* ConfigSoftPath;//[Offset: 0x5b0, Size: 0x28]
	TimerHandle ValkyrieGetReadyMoveUpdateTimerHandle;//[Offset: 0x5d8, Size: 0x8]
	float LaunchDistPhase1Square;//[Offset: 0x5f0, Size: 0x4]
	float LaunchDistSquare;//[Offset: 0x5f4, Size: 0x4]
	float DurationFinalPhase;//[Offset: 0x5f8, Size: 0x4]
	Vector LaunchLocation;//[Offset: 0x5fc, Size: 0xc]
	float CurrentRotationLerpTime;//[Offset: 0x608, Size: 0x4]
	Actor*[] ActorsToIgnore;//[Offset: 0x610, Size: 0x10]
	void UploadCaptainRotator(Rotator CaptainRotatorLocalControl);// 0x7f21104
	void TickTeammateCollision();// 0xa18e718
	void TickLaunch(float DeltaSeconds);// 0x7f2128c
	void TickHUDInfo();// 0xa18e750
	void TickCaptainMovement(float DeltaSeconds);// 0x7f211c8
	void TickCaptainCollision();// 0xa18e734
	void StopAllIdleAudio();// 0xa18e7e4
	bool StartSkywardDive();// 0xa18e81c
	void SkywardDiveTeamParachute();// 0xa18e7c8
	void SetMainHandState(ApexCharacter* Character, bool IsJoinTeam);// 0x7f20218
	void SendSkywardDiveReadyMsgAtDS();// 0x7f20358
	void ReportData(const ApexCharacterBase* OwnerCharacter, FString ReportKey, float ReportData);// 0x7f1ffc0
	void ReplaceCaptainFX(ParticleConfigSkywardDiveStruct ReplaceFXCfg);// 0x7f21980
	void RemoveCharacterJetFX(out TeamMemberInfo TeammateInfo);// 0x7f2036c
	void RemoveAllJetFX();// 0xa18e800
	void RemoveAllCharacterJetFX();// 0xa18e6fc
	void OnValkyrieTakeAnyDamageDs(float Damage, int DamageType, enum DamagePos, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x7f20cc8
	void OnValkyrieLanding(ApexCharacterBase* TargetCharacter, bool NewIsStart);// 0x5fa2040
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0x7f20b88
	void OnSkillInit(int SkillIndex, UTSkill* Skill);// 0x7f21638
	void OnRep_CaptainRotator();// 0xa18e6e4
	void OnPlayerDying(ApexCharacter* DyingPlayer);// 0x7f20acc
	void OnLeaveScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x7f2047c
	void OnEnterScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7f206b0
	void OnCharacterDestory(Actor* Actor);// 0x7f20a10
	void MoveSkywardDiveTeam(Vector Velocity, float DeltaSeconds);// 0x7f21840
	Quat LerpCaptainRotation(float DeltaSeconds);// 0x7f1feec
	void LeaveSkywardDiveTeam_Multicast(ApexCharacter* Teammate);// 0x7f21bd8
	void LeaveSkywardDiveTeam(out TeamMemberInfo TeammateInfo);// 0x7f21350
	bool IsStartLaunch();// 0xa18e7ac
	int[] GetSkywardDivePlayerKeys();// 0x7f21770
	bool CheckTeammateCanJoinSkywardDive(ApexCharacter* Teammate);// 0x7f21d60
	bool CaptainGetReadyForSkywardDive();// 0xa18e76c
	void AddSkywardDiveTeam_Multicast(ApexCharacter* Teammate);// 0x7f21c9c
	bool AddSkywardDiveTeam(ApexCharacter* ApexChar, bool bTeammate, int idx);// 0x7f21460

--------------------------------
Class: ValkyrieSkywardDiveConfig.DataAsset.Object
	float ValkyrieGetReadyOffset;//[Offset: 0x30, Size: 0x4]
	Vector ValkyrieGetReadyVelocity;//[Offset: 0x34, Size: 0xc]
	float SkywardDiveClearHeight;//[Offset: 0x40, Size: 0x4]
	Vector TeammateOffset;//[Offset: 0x44, Size: 0xc]
	float RatePhase1;//[Offset: 0x50, Size: 0x4]
	float VelocityPhase1;//[Offset: 0x54, Size: 0x4]
	float VelocityPhase2;//[Offset: 0x58, Size: 0x4]
	float GetReadyTickDuration;//[Offset: 0x5c, Size: 0x4]
	GameplayTag ValkyrieSkywardDiveTag;//[Offset: 0x60, Size: 0x8]
	GameplayTag[] CanBreakValkyrieSkywardDiveTags;//[Offset: 0x68, Size: 0x10]
	float FuelingTime;//[Offset: 0x78, Size: 0x4]
	float DRLerpTime;//[Offset: 0x7c, Size: 0x4]
	float AutoJoinHalfAngle;//[Offset: 0x80, Size: 0x4]
	FName StartSectionName;//[Offset: 0x84, Size: 0x8]
	float FinalVal;//[Offset: 0x8c, Size: 0x4]
	AnimMontage* CaptionGetReadyPoseMontage;//[Offset: 0x90, Size: 0x8]
	AnimMontage* TeammateGetReadyeMontage;//[Offset: 0x98, Size: 0x8]
	FName BackToGroundSectionName;//[Offset: 0xa0, Size: 0x8]
	float BackToGroundFinalVal;//[Offset: 0xa8, Size: 0x4]
	AnimMontage* CaptionBackToGroundMontage;//[Offset: 0xb0, Size: 0x8]
	AnimMontage* TeammateBackToGroundMontage;//[Offset: 0xb8, Size: 0x8]
	ParticleConfigSkywardDiveStruct[] CaptainJetFXCfg;//[Offset: 0xc0, Size: 0x10]
	ParticleConfigSkywardDiveStruct[] TeammateJetFXCfg;//[Offset: 0xd0, Size: 0x10]
	FString ShootBtnTexPathFinishFueling;//[Offset: 0xe0, Size: 0x10]
	AkAudioEvent* FuelingAudio;//[Offset: 0xf0, Size: 0x28]
	AkAudioEvent* FuelingFinishAudio;//[Offset: 0x118, Size: 0x28]
	AkAudioEvent* ValkyrieGetReadyIdleAudio_1P;//[Offset: 0x140, Size: 0x28]
	AkAudioEvent* ValkyrieGetReadyIdleAudio_3P;//[Offset: 0x168, Size: 0x28]
	AkAudioEvent* ValkyrieSkywardDiveCancelAudio_1P;//[Offset: 0x190, Size: 0x28]
	AkAudioEvent* ValkyrieSkywardDiveCancelAudio_3P;//[Offset: 0x1b8, Size: 0x28]
	AkAudioEvent* SquadmateJoinIdleAudio_1P;//[Offset: 0x1e0, Size: 0x28]
	AkAudioEvent* SquadmateJoinIdleAudio_3P;//[Offset: 0x208, Size: 0x28]
	AkAudioEvent* SquadmateLeftAudio_1P;//[Offset: 0x230, Size: 0x28]
	AkAudioEvent* SquadmateLeftAudio_3P;//[Offset: 0x258, Size: 0x28]
	Vector UltimateSpringArmSocketOffset;//[Offset: 0x280, Size: 0xc]
	float UltimateSpringArmLength;//[Offset: 0x28c, Size: 0x4]
	float UltimateFov;//[Offset: 0x290, Size: 0x4]
	float UltimateCameraLerpDelay;//[Offset: 0x294, Size: 0x4]
	float UltimateCameraLerpDuration;//[Offset: 0x298, Size: 0x4]
	FName SkywardDiveIsReadyFMT;//[Offset: 0x29c, Size: 0x8]
	FName SkywardDiveIsReadyReplyFMT;//[Offset: 0x2a4, Size: 0x8]
	float PlayerRadius;//[Offset: 0x2ac, Size: 0x4]
	float PlayerHalfHet;//[Offset: 0x2b0, Size: 0x4]
	float PlayerCapsuleOffset;//[Offset: 0x2b4, Size: 0x4]
	byte CheckGroundChannel;//[Offset: 0x2b8, Size: 0x1]
	bool bShowCapsuleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	float ReturnLerp;//[Offset: 0x2bc, Size: 0x4]
	int ParachuteAcceleratePerkID;//[Offset: 0x2c0, Size: 0x4]
	FName ParachuteInitSpeedDataKey;//[Offset: 0x2c4, Size: 0x8]
	FName NoControlTimeDataKey;//[Offset: 0x2cc, Size: 0x8]
	CommonReportDataInfo SkywardDiveReportData;//[Offset: 0x2d8, Size: 0x58]
	FString UltimateSkillTakeFriendCount;//[Offset: 0x330, Size: 0x10]
	FString UltimateSkillBrokenCount;//[Offset: 0x340, Size: 0x10]

--------------------------------
Class: ParticleConfigSkywardDiveStruct
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x0, Size: 0x28]
	FName AttachSocketName;//[Offset: 0x28, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x31, Size: 0x1]
	enum RenderPass;//[Offset: 0x32, Size: 0x1]
	Vector OffsetLocation;//[Offset: 0x34, Size: 0xc]
	Rotator OffsetRotation;//[Offset: 0x40, Size: 0xc]
	byte AttachLocation;//[Offset: 0x4c, Size: 0x1]
	bool bApplyParentFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bApplyUIFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bApplyParentDither;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bNotCreateForLowGrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: TeamMemberInfo
	ApexCharacter* TeammateChar;//[Offset: 0x0, Size: 0x8]
	ApexPlayerController* Controller;//[Offset: 0x8, Size: 0x8]
	bool IsCaptain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int PositionIdx;//[Offset: 0x14, Size: 0x4]
	ParticleSystemAsync*[] JetFxPSAsyncs;//[Offset: 0x18, Size: 0x10]
	AudioEventAsync* IdleAudioAsyncs;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WeaponFrameEffectParticleComp
	ParticleSystemComponent* ParticleSysCompFpp;//[Offset: 0x0, Size: 0x8]
	ParticleSystemComponent* ParticleSysCompTpp;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WeaponStateManagerLogicObject.ApgameWeaponLogicObject.Object
	int ChangeCounts;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: CommonReportDataInfoDataAsset.DataAsset.Object
	<enum,CommonReportDataKeyInfo> CommonReportDataKeyInfo;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: CommonReportDataKeyInfo
	FString[] CommonReportDataKeys;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: OBCacheData.SecBasic
	FString WatchRoleID;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SkillSingleMatchData
	StatisticDataItemBase*[] StatisticDataArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: StatisticDataItemBase.Object

--------------------------------
Class: UpgradeArmorFlowData
	FString RoleID;//[Offset: 0x0, Size: 0x10]
	FString OpenId;//[Offset: 0x10, Size: 0x10]
	FString dtEventTime;//[Offset: 0x20, Size: 0x10]
	int OldLevel;//[Offset: 0x30, Size: 0x4]
	int OldExp;//[Offset: 0x34, Size: 0x4]
	int NewLevel;//[Offset: 0x38, Size: 0x4]
	int NewExp;//[Offset: 0x3c, Size: 0x4]
	int ChangeType;//[Offset: 0x40, Size: 0x4]
	int DamageType;//[Offset: 0x44, Size: 0x4]
	int ExpFromTrueRole;//[Offset: 0x48, Size: 0x4]
	int ExpFromAI;//[Offset: 0x4c, Size: 0x4]
	int ExpFromNPC;//[Offset: 0x50, Size: 0x4]
	int ExpFromPerk;//[Offset: 0x54, Size: 0x4]
	int CircleCount;//[Offset: 0x58, Size: 0x4]
	int TeamNum;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SecCircleFlow.SecBasic
	int GameStartTime;//[Offset: 0x40, Size: 0x4]
	int NewCircleBornTime;//[Offset: 0x44, Size: 0x4]
	int NewCircleCount;//[Offset: 0x48, Size: 0x4]
	int OldCircleMoveTime;//[Offset: 0x4c, Size: 0x4]
	int OldCircleMoveEndTime;//[Offset: 0x50, Size: 0x4]
	int PlayerOutTime;//[Offset: 0x54, Size: 0x4]
	float NewCirclePositionX;//[Offset: 0x58, Size: 0x4]
	float NewCirclePositionY;//[Offset: 0x5c, Size: 0x4]
	float NewCirclePositionRadius;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: UIStateMgr.ActorComponent.Object
	enum CurrentUIState;//[Offset: 0x100, Size: 0x1]
	<enum,byte> Type2Priorities;//[Offset: 0x108, Size: 0x50]
	<enum,UIStateList> ConfigStateMap;//[Offset: 0x1a8, Size: 0x50]
	DataTable* UIStateConfig;//[Offset: 0x1f8, Size: 0x8]
	<FName,ApexUIStateBaseInfo> WaitToChangeMap;//[Offset: 0x220, Size: 0x50]
	void PostUIStateChange_Lua(const enum UIState, const enum PreUIState);// 0x433fc7c
	void PostUIStateChange(const enum UIState, bool bIsEnter, bool bForce);// 0x7f13d58
	void HandleNextTickFunc();// 0x7f1394c
	void GetNodeWidget(FName NodeName, out Widget*[] FindList);// 0x7f13960
	FString GetModuleName();// 0x7f13f24
	void ForcePostUIStateChange(const enum UIState, bool bIsEnter);// 0x7f13c18
	void BeginPlay_Lua();// 0x433fc7c

--------------------------------
Class: UIStateList
	ApexUIStateBaseInfo[] StateList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ApexUIStateBaseInfo
	FName BlueprintNodeName;//[Offset: 0x0, Size: 0x8]
	FName FuncName;//[Offset: 0x8, Size: 0x8]
	bool IgnoreExistState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString[] IgnoreSimpleModeIDList;//[Offset: 0x18, Size: 0x10]
	bool bInnerEnterShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FName StateKey;//[Offset: 0x2c, Size: 0x8]
	bool FinalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ApLUTComponent.ActorComponent.Object
	LutDataAsset* LutData;//[Offset: 0xf8, Size: 0x8]
	<FName,Actor*> HighLevelEndLUTs;//[Offset: 0x100, Size: 0x50]
	void UseLutByName(FName ID, float Speed, float PlayTime, enum Source, bool IsFromCallback);// 0x7a9ec40
	void StopLutByName(FName ID, enum Source);// 0x7a9eb58
	void ClearAllLut();// 0x7a9eb44

--------------------------------
Class: LutDataAsset.DataAsset.Object
	<FName,ApLUTCommands> LutCommands;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ApLUTCommands
	int Priority;//[Offset: 0x0, Size: 0x4]
	int HeroID;//[Offset: 0x4, Size: 0x4]
	FString[] LutCommands;//[Offset: 0x8, Size: 0x10]
	class Actor* HighLevelEndLut_Ptr;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x394, Size: 0x4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x39c, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x3a0, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x3a4, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x3b0, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x3b4, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x3b8, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x3bc, Size: 0x4]
	bool bEnableCSMOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	float OverrideCSMNear;//[Offset: 0x3c4, Size: 0x4]
	float OverrideCSMFar;//[Offset: 0x3c8, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x3cc, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x3d0, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x3d4, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x3dc, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x3e0, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x3e4, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x3e8, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x3ec, Size: 0x4]
	float TraceDistance;//[Offset: 0x3f0, Size: 0x4]
	Texture* CloudMaskTexture;//[Offset: 0x3f8, Size: 0x8]
	Vector4 CloudRelOffset_U;//[Offset: 0x400, Size: 0x10]
	Vector4 CloudRelOffset_V;//[Offset: 0x410, Size: 0x10]
	LinearColor TintAndMonochrome;//[Offset: 0x420, Size: 0x10]
	float DynamicLightScalarDirectional;//[Offset: 0x430, Size: 0x4]
	float DynamicLightScalarEnvironment;//[Offset: 0x434, Size: 0x4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x438, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x44c, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1]
	bool bUseCustomShadowBound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 0x1]
	float ShadowCasterBoundRadius;//[Offset: 0x454, Size: 0x4]
	void SetTintAndMonochrome(LinearColor NewValue);// 0x9851164
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x985090c
	void SetOverrideCSMNear(float NewValue);// 0x9850a98
	void SetOverrideCSMFar(float NewValue);// 0x98509c8
	void SetOcclusionMaskDarkness(float NewValue);// 0x985078c
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x98506d0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x9850848
	void SetEnableCSMOverride(bool bNewValue);// 0x9850b68
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x9850e60
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x9850f30
	void SetDynamicShadowCascades(int NewValue);// 0x9850da4
	void SetDynamicLightScalarEnvironment(float NewValue);// 0x9850fec
	void SetDynamicLightScalarDirectional(float NewValue);// 0x98510a8
	void SetCloudRelOffset_V(Vector4 NewValue);// 0x9851220
	void SetCloudRelOffset_U(Vector4 NewValue);// 0x98512e8
	void SetCloudMaskTexture(Texture* NewValue);// 0x98513b0
	void SetCascadeTransitionFraction(float NewValue);// 0x9850c2c
	void SetCascadeDistributionExponent(float NewValue);// 0x9850ce8

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x284, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x288, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x28c, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x294, Size: 0x4]
	float MinRoughness;//[Offset: 0x29c, Size: 0x4]
	float SpecularScale;//[Offset: 0x2a0, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x2a4, Size: 0x4]
	int LightPriority;//[Offset: 0x2a8, Size: 0x4]
	float ShadowBias;//[Offset: 0x2ac, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x2b0, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x2b4, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x2b8, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bc, Size: 0x1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bc, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bc, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bc, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bc, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2bd, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2c0, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x2c8, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x2d8, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x2e4, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x2e8, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x2ec, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	float BloomScale;//[Offset: 0x2f4, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2f8, Size: 0x4]
	Color BloomTint;//[Offset: 0x2fc, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x304, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x9909e28
	void SetUseIESBrightness(bool bNewValue);// 0x990913c
	void SetTransmission(bool bNewValue);// 0x9909628
	void SetTemperature(float NewTemperature);// 0x9909bf0
	void SetSpecularScale(float NewValue);// 0x9908d48
	void SetShadowSlopeBias(float NewValue);// 0x9908e54
	void SetShadowBias(float NewValue);// 0x9908f60
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x9909a50
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x9909b20
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x9909980
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x99098b0
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x9909cc0
	void SetIntensity(float NewIntensity);// 0x9909fc8
	void SetIndirectLightingIntensity(float NewIntensity);// 0x9909ef8
	void SetIESTexture(TextureLightProfile* NewValue);// 0x9909214
	void SetIESBrightnessScale(float NewValue);// 0x990906c
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x9908c70
	void SetEnableLightShaftBloom(bool bNewValue);// 0x9909550
	void SetBloomTint(Color NewValue);// 0x99092e4
	void SetBloomThreshold(float NewValue);// 0x99093b0
	void SetBloomScale(float NewValue);// 0x9909480
	void SetAffectTranslucentLighting(bool bNewValue);// 0x9909700
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x99097d8

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x258, Size: 0x10]
	float Brightness;//[Offset: 0x268, Size: 0x4]
	float Intensity;//[Offset: 0x26c, Size: 0x4]
	Color LightColor;//[Offset: 0x270, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x274, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x274, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x274, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x275, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x275, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x278, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x27c, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x280, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x990a894
	void SetCastVolumetricShadow(bool bNewValue);// 0x990abec
	void SetCastShadows(bool bNewValue);// 0x990ad38
	void SetCastRaytracedShadow(bool bNewValue);// 0x990a964
	void SetAffectReflection(bool bNewValue);// 0x990ab14
	void SetAffectGlobalIllumination(bool bNewValue);// 0x990aa3c
	LinearColor GetLightColor();// 0x990acc4

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x108, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ViewAssistComponent.ActorComponent.Object
	FName[] CharacterSnappingBones;//[Offset: 0xf8, Size: 0x10]
	ViewAssistInfo[] ReadyInfos;//[Offset: 0x108, Size: 0x10]
	<uint32,float> Weapon2LastQuickSnappingTime;//[Offset: 0x118, Size: 0x50]
	<uint32,float> Weapon2LastAimSnappingTime;//[Offset: 0x168, Size: 0x50]
	<uint32,float> Weapon2LastFireSnappingTime;//[Offset: 0x1b8, Size: 0x50]
	<uint32,float> Weapon2LastEdgePushingTime;//[Offset: 0x208, Size: 0x50]
	ApexViewModule* ViewModuleCache;//[Offset: 0x258, Size: 0x8]
	void StopWeaponSnappingByType(ShootWeapon* CurrentShootWeapon, enum Type2Stop);// 0x7f27510
	void StopWeaponAimSnapping(ShootWeapon* CurrentShootWeapon);// 0x7f27294
	void StopProjectileAimSnapping();// 0x7f26b80
	void SetCurrentWeaponSnappingSpeed(float NewSpeed);// 0x7f26ac4
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x5a54df4
	void AddWeaponTickSnapping(ShootWeapon* CurrentShootWeapon, bool Add);// 0x7f26f84
	void AddWeaponQuickSnapping(ShootWeapon* CurrentShootWeapon, bool IsAiming, bool IsFire);// 0x7f270c8
	void AddWeaponFireSnapping(ShootWeapon* CurrentShootWeapon);// 0x7f27454
	void AddWeaponEdgePushing(ShootWeapon* CurrentShootWeapon);// 0x7f26ec8
	void AddWeaponAimSnapping(ShootWeapon* CurrentShootWeapon);// 0x7f27398
	void AddProjectileAimSnapping(const AimSnappingConfigAsset* AimSnappingConfig, float ProjectileSpeedValue, float GravityAcceleration, out const Vector InLaunchLocation, float TPPPitchOffset, float TPPYawOffset);// 0x7f26b94

--------------------------------
Class: ViewAssistInfo
	ShootWeapon* TriggerWeapon;//[Offset: 0x0, Size: 0x8]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0x30, Size: 0x8]
	CurveFloat* Distance2SpeedFactorCurve;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AimSnappingConfigAsset.DataAsset.Object
	enum SnappingType;//[Offset: 0x30, Size: 0x1]
	float SnappingSpeed;//[Offset: 0x34, Size: 0x4]
	float SnappingTime;//[Offset: 0x38, Size: 0x4]
	float SnappingMaxDistance2Reticle;//[Offset: 0x3c, Size: 0x4]
	float MaxSnappingDistance;//[Offset: 0x40, Size: 0x4]
	FName[] CharacterSnappingBones;//[Offset: 0x48, Size: 0x10]
	CurveFloat* SnappingDistanceFactor;//[Offset: 0x58, Size: 0x8]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0x60, Size: 0x8]
	bool KeepSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool EnablePitchSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool EnableViewAssistDebug;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: ApexViewModule.ApexTickableWorldSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bGmViewTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	delegate DragBeginCallback;//[Offset: 0x98, Size: 0x10]
	delegate DragMovingCallback;//[Offset: 0xa8, Size: 0x10]
	delegate DragEndCallback;//[Offset: 0xb8, Size: 0x10]
	delegate OnTouchRotateCamera;//[Offset: 0xc8, Size: 0x10]
	delegate OnMeshModeSwitched;//[Offset: 0xd8, Size: 0x10]
	delegate OnCharacterMeshModeSwitched;//[Offset: 0x100, Size: 0x10]
	delegate OnCharacterCameraModeChanged;//[Offset: 0x110, Size: 0x10]
	delegate OnViewTargetInfoChanged;//[Offset: 0x120, Size: 0x10]
	delegate OnAimChangeDelegate;//[Offset: 0x130, Size: 0x10]
	delegate OnCharacterAimEndDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnFovLerpFinish;//[Offset: 0x150, Size: 0x10]
	ApexNormalViewConfig* ApexNormalViewConfig;//[Offset: 0x1a8, Size: 0x8]
	<enum,ApexViewInfo> CameraInfoMap;//[Offset: 0x1e8, Size: 0x50]
	<byte,CameraLerpBaseInfo> LerpLocations;//[Offset: 0x250, Size: 0x50]
	<byte,CameraLerpBaseInfo> LerpRotations;//[Offset: 0x2a0, Size: 0x50]
	<byte,CameraLerpBaseInfo> LerpFOVs;//[Offset: 0x2f0, Size: 0x50]
	<byte,CameraLerpBaseInfo> SpringArmLerpLocations;//[Offset: 0x340, Size: 0x50]
	<byte,CameraLerpBaseInfo> SpringArmLerpLengths;//[Offset: 0x390, Size: 0x50]
	<byte,CameraLerpBaseInfo> LerpSeparateFovs;//[Offset: 0x3e0, Size: 0x50]
	SkeletalMeshComponent* CurrentClientMainCharacterFPPMesh;//[Offset: 0x5d0, Size: 0x8]
	SceneComponent* CurrentClientMainCharacterUIEffect;//[Offset: 0x5d8, Size: 0x8]
	<enum,SceneComponent*> MainCharacterNodeComponentMap;//[Offset: 0x5e0, Size: 0x50]
	<enum,SpringArmComponent*> MainCharacterSpringArmComponentMap;//[Offset: 0x630, Size: 0x50]
	ApexCharacter* CurrentNearestEnemy;//[Offset: 0x808, Size: 0x8]
	int MaxViewDataCacheNumber;//[Offset: 0x850, Size: 0x4]
	float CustomYawSensibility;//[Offset: 0x890, Size: 0x4]
	float CustomPitchSensibility;//[Offset: 0x894, Size: 0x4]
	TimerHandle DelayResetLodTransmitFovTimer;//[Offset: 0xb20, Size: 0x8]
	float MeshDitherSpeed;//[Offset: 0xb2c, Size: 0x4]
	bool EnableInGameNearClipCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1]
	float InGameNearClipCheckInterval;//[Offset: 0xcf4, Size: 0x4]
	float DefaultInGameNearClipTargetValue;//[Offset: 0xcf8, Size: 0x4]
	float DefaultHitInGameNearClipTargetValue;//[Offset: 0xcfc, Size: 0x4]
	float InGameNearClipCheckRadius;//[Offset: 0xd00, Size: 0x4]
	bool EnableCheckCameraOverWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd94, Size: 0x1]
	static void UseLodTransmitFOV(const Object* WorldContext, enum Source, bool NewUse);// 0x7a570d8
	void UpdateTPPSpringArmDesiredLocation(float DeltaTime);// 0x7a57880
	void UpdateNearestTarget();// 0x7a5976c
	static void UpdateGameStateCacheCameraMode(const ApexCharacterBase* TargetCharacterBase, enum NewMainCameraMode);// 0x7a57f04
	void UpdateFPPSpringArmDesiredLocation(float DeltaTime);// 0x7a577b0
	Vector TPPSpringArmBlendLocations(out const Vector DesiredArmLocation, out const Vector TraceHitLocation, bool bHitSomething, float DeltaTime, out const Vector CurrentRealWorldLoc, out const Vector SafeOrigin);// 0x7a573a4
	void TickViewModuleAfterTickInput(float DeltaTime);// 0x7a5ddb0
	void TickViewModuleAfterMainCharacterTick(ApexCharacter* TargetCharacter, float DeltaTime);// 0x7a5dc4c
	void TickViewModule(float DeltaTime);// 0x7a5de84
	void TickGamePadInput();// 0x7a5a054
	static void SwitchBloodHoundHunting(ApexCharacter* TargetCharacter, bool IsHunting);// 0x7a5c208
	void StopReturnFromSmallEye(ApexCharacter* TargetCharacter);// 0x7a59134
	static bool ShouldSwitchFPPAtAds(ApexCharacterBase* TargetCharacter);// 0x7a5d874
	static void SetUseLeftSideTPPCam(ApexCharacter* TargetCharacter, bool NewUse);// 0x7a5b790
	static void SetUseFreeCamera(ApexCharacter* TargetCharacter, enum Source, bool Use);// 0x7a5947c
	void SetTPPSpringArmLength(out const float NewLength, bool Immediately);// 0x7a57950
	static void SetTPPSpringArmInGameLocation(ApexCharacterBase* TargetCharacter, Vector TPPLoc);// 0x7a5b8e8
	void SetTPPSpringArmActorSpaceSocketOffset(out const Vector NewActorSpaceSocketOffset, bool AutoFixAimPoint);// 0x7a57d58
	static void SetTouchingAimingBtnFlag(const Object* WorldContext, bool InValue);// 0x5490854
	void SetSmallEyeVisibleFromPickUp(bool IsShow);// 0x7a58e78
	void SetMeshDitherSpeed(PrimitiveComponent* TargetComp, const float DitherSpeed);// 0x7a56d44
	void SetMeshDither(PrimitiveComponent* TargetComp, const float DitherValue);// 0x7a56ea4
	static void SetFPPMeshKeepLocation(ApexCharacter* TargetCharacter, enum Source, bool Use, bool ResetMeshRot2Forward);// 0x7a59204
	static void SetEnableViewInput(const Object* WorldContext, bool NewEnable);// 0x7a5abf8
	static void SetEnableOrientationControl(ApexPlayerController* TargetController, bool NewEnable);// 0x7a5ad50
	static void SetEnableAutoHideMesh(ApexCharacterBase* TargetCharacterBase, bool bEnable);// 0x7a56b14
	static void SetDefaultSpringArmLocation(ApexCharacter* TargetCharacter, Vector FPPLoc, Vector TPPLoc);// 0x7a5ba38
	static void ResetAllInputDistanceStart(const Object* WorldContext);// 0x7a5b148
	void ReCalcTouchCacheWeight();// 0x7a5a804
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x5a71a30
	static void OnPhoneTilt(ApexPlayerController* TargetController, Vector NewTilt);// 0x7a5aff8
	static void OnPhoneRotateRate(ApexPlayerController* TargetController, Vector NewRotationRate);// 0x7a5aea8
	static bool IsTouchingAimingBtn(const Object* WorldContext);// 0x7a5db78
	static bool IsRecentlyHasGamePadInput(const Object* WorldContext, float RecentTime);// 0x7a5a068
	static bool IsEnableViewAssist(const Object* WorldContext);// 0x7a56a40
	bool IsCDValidForTPPSpringArmDistanceRecover(out const float curTime);// 0x7a572b8
	static bool IsBloodHoundHuntingFadingOut(ApexCharacter* TargetCharacter);// 0x7a5c134
	static bool IsAimmingLerping(ApexCharacterBase* TargetCharacter);// 0x7a5d070
	static void InputTouchMove(ApexPlayerController* TargetController, byte FingerIndex, Vector Location);// 0x7a5b208
	static void InputTouchEnd(ApexPlayerController* TargetController, byte FingerIndex, Vector Location);// 0x7a5b3e0
	static void InputTouchBegin(ApexPlayerController* TargetController, byte FingerIndex, Vector Location);// 0x7a5b5b8
	static void InputSmallEye(ApexCharacter* TargetCharacter, Vector2D DeltaPosition, int State);// 0x7a58f50
	static void InnerRefreshUseLodTransmitFOV(const Object* WorldContext);// 0x7a57018
	Vector2D InnerHandleBaseInput(enum InputType, out const Vector WeightTouchMove, out const Vector AverageTouchSpeed);// 0x7a59850
	void InitFreeCameraUI();// 0x7a58e64
	static bool HasSideScreenTouch(const Object* WorldContext, enum TargetSide);// 0x7a5a818
	static bool HasRightScreenTouch(const Object* WorldContext);// 0x7a5a97c
	static bool HasLeftScreenTouch(const Object* WorldContext);// 0x7a5aa50
	void HandleRealInput(Vector InputYawPitch, enum InputType);// 0x7a59bcc
	void HandleNearestTarget(enum InputType);// 0x7a59780
	static Vector2D GetWeaponSensibility(const Object* WorldContext, enum InputType);// 0x7a58ad0
	static ApexNormalViewConfig* GetViewNormalConfig(const Object* WorldContext);// 0x7a5e0b4
	static ApexViewLegendConfig* GetViewLegendConfig(const Object* WorldContext, enum TargetLegendType);// 0x7a5df54
	static Vector GetTPPViewLocationInMeshSpace(const ApexCharacterBase* TargetCharacterBase);// 0x7a582f0
	static Vector GetTPPViewLocation(const ApexCharacterBase* TargetCharacterBase, bool ContainActorSocketOffset, bool UseNewActorSpaceLoc, Vector NewActorSpaceLoc);// 0x7a583c4
	Rotator GetTPPSpringArmTraceRotation();// 0x7a57778
	Vector GetTPPSpringArmTraceOrigin();// 0x7a57ac8
	Vector GetTPPSpringArmSocketOffset(out const Rotator ControlRot, out const Vector LocalSocketOffset, out const Vector ActorSocketOffset);// 0x7a57b38
	Vector GetTPPSpringArmShoulderDelta();// 0x7a5d038
	Vector GetTPPSpringArmOrigin();// 0x7a57b00
	static SpringArmComponent* GetSpringArmComp(const ApexCharacterBase* TargetCharacter, enum CameraMode);// 0x7a5be54
	static Vector2D GetSkillSensibility(const Object* WorldContext, enum InputType);// 0x7a58970
	static Rotator GetSensibilityRate(const Object* WorldContext, enum InputType);// 0x7a58d00
	static Vector GetRecentViewMoveDataAll(const Object* WorldContext, float StartTime, enum InputReason);// 0x7a5a3ac
	static Vector[] GetRecentViewMoveData(const Object* WorldContext, float StartTime, enum InputReason);// 0x7a5a598
	Vector2D GetRealGamepadInput(Vector2D RawInput);// 0x7a59f80
	static Vector2D GetPhoneOrientationInputSensibility(const Object* WorldContext);// 0x7a58c30
	static SceneComponent* GetNodeComponent(const ApexCharacterBase* TargetCharacter, enum Tag);// 0x7a5bcf4
	float GetNearestCharacterReticleDistanceSqu();// 0xa0f195c
	float GetNearestCharacterDistanceSqu();// 0xa0f1978
	float GetMeshDitherSpeed(PrimitiveComponent* TargetComp);// 0x7a56c6c
	Vector GetFPPSpringArmTraceOrigin();// 0x7a57ecc
	static SkeletalMeshComponent* GetFPPMesh(const ApexCharacter* TargetCharacter);// 0x7a5bc10
	static float GetFovFactor(ApexCharacterBase* TargetCharacter);// 0x7a5d948
	static bool GetEnableViewInput(const Object* WorldContext);// 0x7a5ab24
	static float GetDefaultFOV(const Object* WorldContext, enum DesireMode);// 0x7a5d644
	ApexCharacter* GetCurrentNearestEnemy();// 0x7a59738
	static float GetCurrentFOV(ApexCharacterBase* TargetCharacter, bool Aggressive);// 0x7a5d4dc
	static float GetCurrentChangeFOVTime(ApexCharacterBase* TargetCharacter, bool IsAiming, bool IsChangeZoom);// 0x7a5d214
	static float GetCurrentChangeFOVDelay(ApexCharacterBase* TargetCharacter);// 0x7a5d144
	static Rotator GetControlRotationFromTarget(const ApexCharacterBase* TargetCharacterBase, out const Vector TargetLocation, const bool NewParentIsFPP, out const Vector NewActorSpaceSocketOffset);// 0x7a58054
	static SceneComponent* GetCameraEffectNode(const Object* WorldContext);// 0x4bfdf4c
	static void GetAPCharacterCameraViewPoint(const ApexCharacterBase* TargetCharacterBase, out Vector Location, out Rotator Rotation, bool IsFPP, bool UseCameraLocationAtClient);// 0x7a58650
	static float GetADSWeaponTargetFOV_Value(ApexCharacterBase* TargetCharacter);// 0x4ef36a0
	static float GetADSWeaponTargetFOV(ApexCharacterBase* TargetCharacter);// 0x7a5d40c
	static float GetADSTargetFOV(ApexCharacterBase* TargetCharacter);// 0x7a5d7a4
	void DoTouchInput(TouchInfo TouchInfo, byte FingerIndex, Vector Location);// 0x7a59d2c
	void DoRotateCamera(out const Rotator DeltaRotator);// 0x7a5965c
	static void DoGamepadInput(const Object* WorldContext, float AxisValue, bool IsXInput);// 0x7a5a1cc
	void DelayResetLodTransmitFov();// 0x7a57004
	static void ChangeCameraParent(ApexCharacter* TargetCharacter, float Time, float Delay, SceneComponent* NewParent, FName SocketName, enum NewMeshMode);// 0x7a5c360
	static void ChangeAiming(ApexCharacter* TargetCharacter, bool NewIsAiming);// 0x7a5da18
	void CalcRotateTarget(out const Vector TouchDelta, enum InputType);// 0x7a59a60
	static void BloodHoundLeaveHunting(ApexCharacter* TargetCharacter);// 0x7a5bfb4
	static void BloodHoundEnterHunting(ApexCharacter* TargetCharacter);// 0x7a5c074
	static void AddLerpItem(ApexCharacterBase* TargetCharacter, enum LerpType, byte UID, Vector FPPTargetValue, Vector TPPTargetValue, byte Priority, enum ModifyType, float DelayTime, float LerpTime, float StartTime, CurveVector* LerpCurve, Vector CurveScale, bool AutoFixLerpTime, bool ImmediatelyUpdate, Vector FPPCurveScale, CurveFloat* TPPFadeCurve, CurveFloat* FPPFadeCurve);// 0x7a5c6c8

--------------------------------
Class: ApexTickableWorldSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	<FName> CreateFrontendStates;//[Offset: 0x40, Size: 0x50]

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: ApexNormalViewConfig.DataAsset.Object
	ApexViewLegendConfig* ApexLegendDefaultViewConfig;//[Offset: 0x30, Size: 0x8]
	<enum,ApexViewLegendConfig*> ApexViewLegendConfig;//[Offset: 0x38, Size: 0x50]
	<enum,float> DefaultInputSensibility;//[Offset: 0x88, Size: 0x50]
	int TouchMoveDefaultNumToIgnore;//[Offset: 0xd8, Size: 0x4]
	int[] TouchCacheWeightSetting;//[Offset: 0xe0, Size: 0x10]
	enum ViewControlType;//[Offset: 0xf0, Size: 0x1]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseYMoveSpeed;//[Offset: 0x100, Size: 0x8]
	CurveFloat* Distance2CameraMoveSpeed;//[Offset: 0x108, Size: 0x8]
	CurveFloat* Distance2CameraMoveSpeedY;//[Offset: 0x110, Size: 0x8]
	bool ResetTouchDistanceWhenHitEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	CurveFloat* JoyStickLikeInputCurve;//[Offset: 0x120, Size: 0x8]
	float MaxDeltaPicthRotate;//[Offset: 0x128, Size: 0x4]
	float MaxDeltaYawRotate;//[Offset: 0x12c, Size: 0x4]
	float ComfortableSwipeAddition;//[Offset: 0x130, Size: 0x4]
	float Mobile_CameraMoveRateX;//[Offset: 0x134, Size: 0x4]
	float Mobile_CameraMoveRateY;//[Offset: 0x138, Size: 0x4]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x13c, Size: 0x4]
	float SpecialDeviceRate;//[Offset: 0x140, Size: 0x4]
	float FreeCameraBaseSensitivity;//[Offset: 0x144, Size: 0x4]
	Vector2D PhoneOrientationInputSensibility;//[Offset: 0x148, Size: 0x8]
	bool DisableEnterFPPFreeCameraInTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	Rotator SmallEyeReturnSpeed;//[Offset: 0x154, Size: 0xc]
	bool ContainDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float DyingSizeFactor;//[Offset: 0x164, Size: 0x4]
	float CrouchSizeFactor;//[Offset: 0x168, Size: 0x4]
	bool OnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	bool OnlyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	float ViewAssistDisableRadius;//[Offset: 0x170, Size: 0x4]
	float ViewAssistMaxDistanceSqu;//[Offset: 0x174, Size: 0x4]
	float ViewAssistMaxReticleDistanceSqu;//[Offset: 0x178, Size: 0x4]
	float SnappingMinDeltaTime;//[Offset: 0x17c, Size: 0x4]
	float UpdateNearestEnemyTimeInterval;//[Offset: 0x180, Size: 0x4]
	Vector4 DefaultRotationLimit;//[Offset: 0x190, Size: 0x10]
	Vector4 ClimbingRotationLimit;//[Offset: 0x1a0, Size: 0x10]
	Vector4 FPPFreeCameraRotationLimit;//[Offset: 0x1b0, Size: 0x10]
	Vector4 HangingRotationLimit;//[Offset: 0x1c0, Size: 0x10]
	Vector4 ClimbOverLimit;//[Offset: 0x1d0, Size: 0x10]
	Vector2D RollLimit;//[Offset: 0x1e0, Size: 0x8]
	float GamePadValidTimeForViewAssist;//[Offset: 0x1e8, Size: 0x4]
	float VehicleSpringArmOffsetLerpSpeed;//[Offset: 0x1ec, Size: 0x4]
	float VehicleFOVLerpSpeed;//[Offset: 0x1f0, Size: 0x4]
	float CameraRelativeRotationLerpSpeed;//[Offset: 0x1f4, Size: 0x4]
	float CameraOffsetTimeFactor;//[Offset: 0x1f8, Size: 0x4]
	Vector TPPSpringArmShoulderOffset;//[Offset: 0x1fc, Size: 0xc]
	FName TppSpringArmAdsConfigTable;//[Offset: 0x208, Size: 0x8]
	CurveFloat* ShoulderAimingAngle2MinLength;//[Offset: 0x210, Size: 0x8]
	float GlobalWeaponFOV;//[Offset: 0x218, Size: 0x4]
	float FPPFixedADSFOV;//[Offset: 0x21c, Size: 0x4]
	float TPPFixedADSFOV;//[Offset: 0x220, Size: 0x4]
	bool AutoFixReticleAfterSwitchCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	CurveFloat* FixReticleAngle2MinLength;//[Offset: 0x228, Size: 0x8]
	float AutoFixReticleMaxDeltaYaw;//[Offset: 0x230, Size: 0x4]
	float CameraLocationLerpSpeed;//[Offset: 0x234, Size: 0x4]
	float CameraRotationLerpSpeed;//[Offset: 0x238, Size: 0x4]
	float SpringArmLocationLerpSpeed;//[Offset: 0x23c, Size: 0x4]
	float SpringArmLengthLerpSpeed;//[Offset: 0x240, Size: 0x4]
	float FovLerpSpeed;//[Offset: 0x244, Size: 0x4]
	FName CameraSocketName;//[Offset: 0x248, Size: 0x8]
	byte TPPSpringArmCollisionChannel;//[Offset: 0x250, Size: 0x1]
	float DefaultTPPSpringArmLength;//[Offset: 0x254, Size: 0x4]
	float DefaultFlySpringArmLength;//[Offset: 0x258, Size: 0x4]
	Vector DefaultFlySpringArmSocketOffset;//[Offset: 0x25c, Size: 0xc]
	Vector DefaultFlyOpenSpringArmSocketOffset;//[Offset: 0x268, Size: 0xc]
	FName TPPSpringArmSocketName;//[Offset: 0x274, Size: 0x8]
	float TPPSpringArmLengthTraceStartFixFactor;//[Offset: 0x27c, Size: 0x4]
	float TPPSafeOriginTestRadius;//[Offset: 0x280, Size: 0x4]
	FName TPPSafeOriginTestProfile;//[Offset: 0x284, Size: 0x8]
	float FPPSafeOriginTestRadius;//[Offset: 0x28c, Size: 0x4]
	FName FPPSafeOriginTestProfile;//[Offset: 0x290, Size: 0x8]
	float ProbeRadius;//[Offset: 0x298, Size: 0x4]
	float ArmLengthRecoverSpeed;//[Offset: 0x29c, Size: 0x4]
	<enum,float> State2RecoverSpeeds;//[Offset: 0x2a0, Size: 0x50]
	float ArmLengthRecoverCD;//[Offset: 0x2f0, Size: 0x4]
	float RollSpeed;//[Offset: 0x2f4, Size: 0x4]
	float NoEffectRollSpeed;//[Offset: 0x2f8, Size: 0x4]
	float SlideRollAngle;//[Offset: 0x2fc, Size: 0x4]
	float RecoveryRollAngle;//[Offset: 0x300, Size: 0x4]
	float ClimbYawSpeed;//[Offset: 0x304, Size: 0x4]
	float ClimbCameraLerpInSpringArmLength;//[Offset: 0x308, Size: 0x4]
	float ClimbCameraLerpInTime;//[Offset: 0x30c, Size: 0x4]
	float ClimbCameraLerpOutTime;//[Offset: 0x310, Size: 0x4]
	float ClimbBigJumpYawSpeed;//[Offset: 0x314, Size: 0x4]
	bool BindingFOV2GameViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool BindingFOV2PlayerViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]
	bool FPPHangingUseSceneFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 0x1]
	bool bEnableLODTransmitFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 0x1]
	enum HiddenMeshVisibilityAnimTickOption;//[Offset: 0x31c, Size: 0x1]
	CurveVector* JumpCurve;//[Offset: 0x320, Size: 0x8]
	CurveVector* AimJumpCurve;//[Offset: 0x328, Size: 0x8]
	CurveVector* LandCurve;//[Offset: 0x330, Size: 0x8]
	CurveVector* AimLandCurve;//[Offset: 0x338, Size: 0x8]
	CurveFloat* LandSpeed2StrengthCurve;//[Offset: 0x340, Size: 0x8]
	ForbidSwitchCameraState ForbidSwitchCameraState;//[Offset: 0x348, Size: 0x18]
	<enum,StateLerpArrayInfos> StateInLerpInfo;//[Offset: 0x360, Size: 0x50]
	<enum,StateLerpArrayInfos> StateOutLerpInfo;//[Offset: 0x3b0, Size: 0x50]
	float EmojiAnimationFadeInTime;//[Offset: 0x400, Size: 0x4]
	float EmojiAnimationFadeOutTime;//[Offset: 0x404, Size: 0x4]
	int MaxEmojiCheckVisibleNumber;//[Offset: 0x408, Size: 0x4]
	bool UseSphereEmojiAnimationHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	float EmojiAnimationHitTestDistance;//[Offset: 0x410, Size: 0x4]
	float EmojiAnimationSphereHitTestHeight;//[Offset: 0x414, Size: 0x4]
	byte[] TestObjectType;//[Offset: 0x418, Size: 0x10]
	byte DebugType;//[Offset: 0x428, Size: 0x1]
	FName EmojiAnimationSlotName;//[Offset: 0x42c, Size: 0x8]
	Vector Emoji3DLaunchLocationFPP;//[Offset: 0x434, Size: 0xc]
	Rotator Emoji3DLaunchRotationFPP;//[Offset: 0x440, Size: 0xc]
	Vector Emoji3DLaunchLocationTPP;//[Offset: 0x44c, Size: 0xc]
	Rotator Emoji3DLaunchRotationTPP;//[Offset: 0x458, Size: 0xc]
	float Emoji3DLaunchSpeed;//[Offset: 0x464, Size: 0x4]
	enum[] Emoji3DForbidStates;//[Offset: 0x468, Size: 0x10]
	<enum,enum> EnterPawnState2TGPAValue;//[Offset: 0x478, Size: 0x50]
	<enum,enum> EndPawnState2TGPAValue;//[Offset: 0x4c8, Size: 0x50]
	<enum,enum> Aiming2TGPAValue;//[Offset: 0x518, Size: 0x50]
	float ViewAntiCheatInterval;//[Offset: 0x568, Size: 0x4]
	int ViewAntiCheatReportCount;//[Offset: 0x56c, Size: 0x4]
	ApexViewLegendConfig* GetViewLegendConfig(enum TargetLegendType);// 0xa0e20a0

--------------------------------
Class: ApexViewLegendConfig.DataAsset.Object
	CurveVector* SprintCameraShakeCurve;//[Offset: 0x30, Size: 0x8]
	float FPPCrouchCameraOffset;//[Offset: 0x38, Size: 0x4]
	float TPPCrouchCameraOffset;//[Offset: 0x3c, Size: 0x4]
	float FPPCrouchCameraOffsetInAir;//[Offset: 0x40, Size: 0x4]
	float TPPCrouchCameraOffsetInAir;//[Offset: 0x44, Size: 0x4]
	Vector DefaultFPPArmLocation;//[Offset: 0x48, Size: 0xc]
	Vector DefaultTPPArmLocation;//[Offset: 0x54, Size: 0xc]
	bool UseDither;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float DitherAsHideThreshold;//[Offset: 0x64, Size: 0x4]
	float TPPMeshAutoHideDistance;//[Offset: 0x68, Size: 0x4]
	float TPPMeshAutoTop;//[Offset: 0x6c, Size: 0x4]
	float TPPMeshAutoMaxPitch;//[Offset: 0x70, Size: 0x4]
	float TPPMeshAutoMinPitch;//[Offset: 0x74, Size: 0x4]
	float TPPMeshAutoDitherStartDistance;//[Offset: 0x78, Size: 0x4]
	float TPPMeshAutoDitherStopDistance;//[Offset: 0x7c, Size: 0x4]
	float ParachuteMeshAutoDitherStartDistance;//[Offset: 0x80, Size: 0x4]
	float ParachuteMeshAutoDitherStopDistance;//[Offset: 0x84, Size: 0x4]
	float TPPMeshAutoRecoverTime;//[Offset: 0x88, Size: 0x4]
	<enum,float> TPPMeshAutoHideDistanceFactor;//[Offset: 0x90, Size: 0x50]
	FName ViewAssistBone;//[Offset: 0xe0, Size: 0x8]
	float ViewAssistDownDistance;//[Offset: 0xe8, Size: 0x4]
	float ViewAssistUpDistance;//[Offset: 0xec, Size: 0x4]
	CurveFloat* TPPToStandCameraLerpCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* TPPToCrouchCameraLerpCurve;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* TPPToSlideCameraLerpCurve;//[Offset: 0x100, Size: 0x8]
	CurveFloat* TPPCrouchAir2LandCameraLerpCurve;//[Offset: 0x108, Size: 0x8]
	CurveFloat* FPPToStandCameraLerpCurve;//[Offset: 0x110, Size: 0x8]
	CurveFloat* FPPToCrouchCameraLerpCurve;//[Offset: 0x118, Size: 0x8]
	CurveFloat* FPPToSlideCameraLerpCurve;//[Offset: 0x120, Size: 0x8]
	CurveFloat* FPPCrouchAir2LandCameraLerpCurve;//[Offset: 0x128, Size: 0x8]
	float TPPToStandCameraLerpTime;//[Offset: 0x130, Size: 0x4]
	float TPPToCrouchCameraLerpTime;//[Offset: 0x134, Size: 0x4]
	float TPPToSlideCameraLerpTime;//[Offset: 0x138, Size: 0x4]
	float InAirTPPToStandCameraLerpTime;//[Offset: 0x13c, Size: 0x4]
	float InAirTPPToCrouchCameraLerpTime;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: ForbidSwitchCameraState
	enum[] ForbidStates;//[Offset: 0x0, Size: 0x10]
	uint64 ForbidStatesMask;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ApexViewInfo
	CameraComponent* CurrentCamera;//[Offset: 0x8, Size: 0x8]
	SpringArmComponent* CurrentSpringArm;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CameraLerpBaseInfo
	Vector TargetFPPValue;//[Offset: 0x0, Size: 0xc]
	Vector TargetTPPValue;//[Offset: 0xc, Size: 0xc]
	Vector TargetFPPOverrideValue;//[Offset: 0x18, Size: 0xc]
	Vector TargetTPPOverrideValue;//[Offset: 0x24, Size: 0xc]
	float StartTime;//[Offset: 0x30, Size: 0x4]
	float EndTime;//[Offset: 0x34, Size: 0x4]
	CurveVector* LerpCurve;//[Offset: 0x38, Size: 0x8]
	Vector CurveScale;//[Offset: 0x40, Size: 0xc]
	Vector FPPCurveScale;//[Offset: 0x4c, Size: 0xc]
	enum ValueType;//[Offset: 0x58, Size: 0x1]
	CurveFloat* TPPFadeCurve;//[Offset: 0x60, Size: 0x8]
	CurveFloat* FPPFadeCurve;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: TouchInfo
	Vector StartLocation;//[Offset: 0x4, Size: 0xc]
	Vector DistanceCalcStartLocation;//[Offset: 0x10, Size: 0xc]
	Vector Location;//[Offset: 0x1c, Size: 0xc]
	enum ViewSide;//[Offset: 0x28, Size: 0x1]
	TouchTakeOverInfo TakeOverInfo;//[Offset: 0x30, Size: 0x20]

--------------------------------
Class: TouchTakeOverInfo
	TouchTakeOverConfig TakeOverCofing;//[Offset: 0x0, Size: 0x3]
	Vector2D ButtonPosition;//[Offset: 0x4, Size: 0x8]
	Vector2D ButtonSize;//[Offset: 0xc, Size: 0x8]
	int Priority;//[Offset: 0x14, Size: 0x4]
	FName WeakWidgetName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PlayerNetStaticComponent.ActorComponent.Object
	bool bNetStaticActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	byte CollectGap;//[Offset: 0x109, Size: 0x1]
	PlayerNetStats NetStats;//[Offset: 0x128, Size: 0x80]
	int MinPing;//[Offset: 0x1a8, Size: 0x4]
	int MaxPing;//[Offset: 0x1ac, Size: 0x4]
	bool SerializeToFile(FString InFilename);// 0x7ded960
	int GetRuntimeFps();// 0xa165d9c
	int GetPingAverage();// 0x7ded8c0
	int GetPing();// 0x7ded8f4
	void DumpFpsStaticsData();// 0x7ded870
	void DebugPrintReportData();// 0x7ded884
	void DebugPrint();// 0x7ded94c
	void CountPingAverage();// 0x7ded8ac
	void CheckSlagDataCount();// 0x7ded898

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 0x10]
	FString LocalAddr;//[Offset: 0x10, Size: 0x10]
	float AvgPing;//[Offset: 0x20, Size: 0x4]
	float MaxPing;//[Offset: 0x24, Size: 0x4]
	float HighPingPercent;//[Offset: 0x28, Size: 0x4]
	float InBytesPerSecond;//[Offset: 0x68, Size: 0x4]
	float OutBytesPerSecond;//[Offset: 0x6c, Size: 0x4]
	float InPacketLostRate;//[Offset: 0x70, Size: 0x4]
	float OutPacketLostRate;//[Offset: 0x74, Size: 0x4]
	float OutSaturationRate;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	float ServerCheckInterval;//[Offset: 0xf8, Size: 0x4]
	float ServerCheckDelay;//[Offset: 0xfc, Size: 0x4]
	float MaxAllowWait;//[Offset: 0x100, Size: 0x4]
	bool IsClientUseHardwareTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float IosTimeJumpSize;//[Offset: 0x108, Size: 0x4]
	void RPC_ServerSyncTimeLine(double InSrvSendTime, double InClientRecvTime, double InClientSendTime);// 0x7ea0164
	void RPC_ServerReportInfo(int RporetedId);// 0x7ea00a0
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x7ea031c
	void OnServerAboutToReconnect();// 0x7ea008c
	void CheckTimeLine();// 0x7ea03e0

--------------------------------
Class: InGameRecoverItemGuidInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	enum eInGameRecoverItemGuidType;//[Offset: 0x4, Size: 0x1]
	float MinPercentValue;//[Offset: 0x8, Size: 0x4]
	float MaxPercentValue;//[Offset: 0xc, Size: 0x4]
	float DurationTime;//[Offset: 0x10, Size: 0x4]
	int ItemID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InGameRecoverPropGuid.ActorComponent.Object

--------------------------------
Class: CrossHairDampingComponent.ActorComponent.Object
	CrossHairDampingConfig* CrossHairDampingConfig;//[Offset: 0xf8, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x100, Size: 0x8]
	ApexCharacter* PlayerPawn;//[Offset: 0x108, Size: 0x8]
	HitCrossHairConfig_Common* HitCrossHairConfig_Runtime;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: CrossHairDampingConfig.DataAsset.Object
	FName[] Bones;//[Offset: 0x30, Size: 0x10]
	float NoShootRate;//[Offset: 0x40, Size: 0x4]
	float ShootRate;//[Offset: 0x44, Size: 0x4]
	Vector2D EffectDistanceRange;//[Offset: 0x48, Size: 0x8]
	IntPoint MaxDampingSize;//[Offset: 0x50, Size: 0x8]
	IntPoint MinDampingSize;//[Offset: 0x58, Size: 0x8]
	HitCrossHairConfig_Common* HitCrossHairConfig;//[Offset: 0x60, Size: 0x8]
	bool bShowInvincibleCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float HitCrossHairMaxShowTime;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: HitCrossHairConfig_Common.DataAsset.Object
	WeaponCrossHairHitPerformData HitCrossHairData;//[Offset: 0x30, Size: 0xb8]
	InvincibleHitPerformData InvincibleHitData;//[Offset: 0xe8, Size: 0x78]

--------------------------------
Class: WeaponCrossHairHitPerformData.WeaponCrossHairPerformData
	float DefaultShowTime;//[Offset: 0x70, Size: 0x4]
	float QuickShootInterval;//[Offset: 0x74, Size: 0x4]
	float QuickShowTime;//[Offset: 0x78, Size: 0x4]
	float DamageStartScale;//[Offset: 0x7c, Size: 0x4]
	float DamageEndScale;//[Offset: 0x80, Size: 0x4]
	float DamageMiddleScale;//[Offset: 0x84, Size: 0x4]
	LinearColor HeadShootColor;//[Offset: 0x88, Size: 0x10]
	LinearColor KillColor;//[Offset: 0x98, Size: 0x10]
	float ShowHitCrosshairLeftTime;//[Offset: 0xa8, Size: 0x4]
	float LastHitLeftTime;//[Offset: 0xac, Size: 0x4]
	float CurDamageScale;//[Offset: 0xb0, Size: 0x4]
	bool bQuickShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bHeadShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bFatalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]

--------------------------------
Class: InvincibleHitPerformData.WeaponCrossHairPerformData
	float ShowTime;//[Offset: 0x70, Size: 0x4]
	float LastHitLeftTime;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: LODManagerComponent.ActorComponent.Object
	bool bEnableLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bEnableDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bIngorePerformanceAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	enum DebugEditorDeviceGrade;//[Offset: 0xfb, Size: 0x1]
	float LODTickInterval;//[Offset: 0xfc, Size: 0x4]
	PlayerLODConfig[] MeshLODCofig;//[Offset: 0x100, Size: 0x10]
	PlayerLODConfig CurrentDevicePlayerLODConfig;//[Offset: 0x114, Size: 0xc]
	PlayerLODConfig CurrentUsingPlayerLODConfig;//[Offset: 0x120, Size: 0xc]
	PlayerLODData[] PlayerLODDataArray;//[Offset: 0x138, Size: 0x10]
	ApexPlayerController* APPC;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: PlayerLODConfig
	enum Grade;//[Offset: 0x0, Size: 0x1]
	byte ExceedPlayerNumWhenUseLOD;//[Offset: 0x1, Size: 0x1]
	int ForceMeshLODLv;//[Offset: 0x4, Size: 0x4]
	float MaxDistanceLOD;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PlayerLODData
	ApexCharacterBase* PlayerPtr;//[Offset: 0x0, Size: 0x8]
	float SquareDistance;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MiniMapStaticItemVisibleInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SimpleBattleResultData
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	FString ModeType;//[Offset: 0x8, Size: 0x10]
	enum ResultType;//[Offset: 0x18, Size: 0x1]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	FString Reason;//[Offset: 0x20, Size: 0x10]
	int TotalPlayerCount;//[Offset: 0x30, Size: 0x4]
	int TotalTeamCount;//[Offset: 0x34, Size: 0x4]
	int TeamID;//[Offset: 0x38, Size: 0x4]
	SimpleBattleResultTeamData TeamData;//[Offset: 0x40, Size: 0x18]
	RatingScoreResultData RatingData;//[Offset: 0x58, Size: 0x14]
	WinModeInfo[] WinModeInfos;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: SimpleBattleResultTeamData
	int TeamRank;//[Offset: 0x0, Size: 0x4]
	BattleResultTeammate[] members;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: RatingScoreResultData
	int KillAssistScore;//[Offset: 0x0, Size: 0x4]
	int MatchPlacementScore;//[Offset: 0x4, Size: 0x4]
	int SegmentLevel;//[Offset: 0x8, Size: 0x4]
	int Rating;//[Offset: 0xc, Size: 0x4]
	int DailyWinTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DamageTipComponent.ActorComponent.Object
	float HitTips2DLifeTime;//[Offset: 0x104, Size: 0x4]
	class HitTip3D* HitTip3DClass;//[Offset: 0x108, Size: 0x8]
	<HitTip3D*> Cache3DHitTips;//[Offset: 0x110, Size: 0x50]
	static void IndicatorShowGotHit(out const Vector causerLocation, int DamageType, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken, bool HasEquippedShield, int PenetrateShieldLevel, float ArrowTipsScale, bool ShowHitEffectUI);// 0x7bb0828
	void Indicator3DShowGotHit(out const Vector causerLocation, float ArrowTipsScale);// 0x7bb06dc

--------------------------------
Class: HitTip3D.Actor.Object
	float CrossHairSafePercent;//[Offset: 0x274, Size: 0x4]
	float ScreenSafePercent;//[Offset: 0x278, Size: 0x4]
	CurveFloat* ScaleCurve;//[Offset: 0x280, Size: 0x8]
	CurveFloat* FOVScaleCurve;//[Offset: 0x288, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0x290, Size: 0x8]
	CurveFloat* ZCurve;//[Offset: 0x298, Size: 0x8]
	float TipDistance;//[Offset: 0x2a0, Size: 0x4]
	float ActorLifeTime;//[Offset: 0x2a4, Size: 0x4]
	PlayerCameraManager* CamManager;//[Offset: 0x2b0, Size: 0x8]
	StaticMeshComponent* TipMesh;//[Offset: 0x2b8, Size: 0x8]
	Vector AttackerLocation;//[Offset: 0x2c0, Size: 0xc]
	Rotator GetFinalRotation(out const Vector LocalTipDir, out const Vector2D ScreenPercent);// 0x7cadcf8
	Vector GetFinalRelaLoc(out const Vector DeproDir);// 0x7cadc14
	PlayerCameraManager* GetCamera();// 0x7cade64
	void FadeOut();// 0xa1384a4

--------------------------------
Class: CharacterAvatar_WearInfo
	CharacterAvatar_EquipSkinInfo[] EquipedSkinList;//[Offset: 0x0, Size: 0x10]
	CharacterAvatar_PendantInfo[] EquipedPendantList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CharacterAvatar_EquipSkinInfo
	int ReplacedItemID;//[Offset: 0x0, Size: 0x4]
	CharacterAvatar_WearItemMetaInfo SkinMetaInfo;//[Offset: 0x4, Size: 0x14]

--------------------------------
Class: CharacterAvatar_WearItemMetaInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemType;//[Offset: 0x4, Size: 0x4]
	int ItemSubType;//[Offset: 0x8, Size: 0x4]
	int ItemLevel;//[Offset: 0xc, Size: 0x4]
	bool ValidInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CharacterAvatar_PendantInfo
	int PendantItemID;//[Offset: 0x0, Size: 0x4]
	CharacterAvatar_WearItemMetaInfo AttachedItemMetaInfo;//[Offset: 0x4, Size: 0x14]

--------------------------------
Class: ScreenOperateModeInfo
	enum LeftOperateMode;//[Offset: 0x0, Size: 0x1]
	enum RightOperateMode;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: HitEffectComponent.ActorComponent.Object
	DataTable* ConfigTable;//[Offset: 0xf8, Size: 0x8]
	FName ConfigTablePath;//[Offset: 0x100, Size: 0x8]
	FName ConfigRow;//[Offset: 0x108, Size: 0x8]
	bool bDebugHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	MaterialParameterCollection* BloodParameterCollection;//[Offset: 0x120, Size: 0x8]
	FName BloodColorRowName;//[Offset: 0x128, Size: 0x8]
	CurveFloat* DistanceFOVFixCurve;//[Offset: 0x130, Size: 0x8]
	<FString,CountryBloodColorKey> CountryBloodColorMap;//[Offset: 0x138, Size: 0x50]
	FName ScreenHurtTagName;//[Offset: 0x188, Size: 0x8]
	LinearColor ScreenHurtLinearColor;//[Offset: 0x190, Size: 0x10]
	<enum,LinearColor> HurtShieldColor;//[Offset: 0x1a0, Size: 0x50]
	LinearColor BreakShieldColor;//[Offset: 0x1f0, Size: 0x10]
	<byte,FName> DamageType2Tag;//[Offset: 0x200, Size: 0x50]
	int AutonomousHitEffectCacheLimit;//[Offset: 0x250, Size: 0x4]
	int SimulatedHitEffectCacheLimit;//[Offset: 0x254, Size: 0x4]
	int BulletHitAudioDistance;//[Offset: 0x258, Size: 0x4]
	int BulletFlyAudioDistance;//[Offset: 0x25c, Size: 0x4]
	HitEffectDataAsset* DefaultHitEffect;//[Offset: 0x260, Size: 0x8]
	<FName,HitEffectDataAsset*> ExtraEffect;//[Offset: 0x268, Size: 0x50]
	Rotator FxRotation;//[Offset: 0x2b8, Size: 0xc]
	float FxDeviation;//[Offset: 0x2c4, Size: 0x4]
	float DecalReverseDistance;//[Offset: 0x2c8, Size: 0x4]
	float EffectMaxDistance;//[Offset: 0x2cc, Size: 0x4]
	HitEffectCachedData[] AutonomousHitEffectList;//[Offset: 0x2d0, Size: 0x10]
	HitEffectCachedData[] SimulatedHitEffectList;//[Offset: 0x2e0, Size: 0x10]
	Vector HitEffectCachedPoolLocation;//[Offset: 0x2f0, Size: 0xc]
	<FName,HitEffectCachedDataList> AutonomousHitEffectListMap;//[Offset: 0x300, Size: 0x50]
	<FName,HitEffectCachedDataList> SimulatedHitEffectListMap;//[Offset: 0x350, Size: 0x50]
	void SetBloodColorStyle(FName NewRowName);// 0x7cad2a4
	void OnTableReady();// 0x7cad360
	bool NeedPlayLensAudio(out const HitEffectInstanceData InstanceData);// 0x7cad120
	void HandlePlayerStopFire(Weapon* Weapon);// 0x612f2a8

--------------------------------
Class: CountryBloodColorKey
	FName ColorKey;//[Offset: 0x0, Size: 0x8]
	FName Des;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: HitEffectCachedData
	DecalComponent* HitDecalComp;//[Offset: 0x0, Size: 0x8]
	ParticleSystemComponent* HitParticleComp;//[Offset: 0x8, Size: 0x8]
	AkComponent* AKComp;//[Offset: 0x10, Size: 0x8]
	AkComponent* BulletFlyAkComp;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x258, Size: 0x8]
	int SortOrder;//[Offset: 0x260, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x264, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x268, Size: 0x4]
	float FadeDuration;//[Offset: 0x26c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x270, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x274, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	Vector DecalSize;//[Offset: 0x27c, Size: 0xc]
	void SetSortOrder(int Value);// 0x984b2a0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x984b334
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x984b4a4
	void SetFadeIn(float StartDelay, float Duaration);// 0x984b3c8
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x984b20c
	float GetFadeStartDelay();// 0x984b690
	float GetFadeInStartDelay();// 0x984b618
	float GetFadeInDuration();// 0x984b5dc
	float GetFadeDuration();// 0x984b654
	MaterialInterface* GetDecalMaterial();// 0x984b1d8
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xa32d344

--------------------------------
Class: HitEffectCachedDataList
	HitEffectCachedData[] DataArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkSoundBankMgr.ActorComponent.Object
	bool IsLobbyController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	FName SoundBankConfigRowName;//[Offset: 0xfc, Size: 0x8]
	FName DefaultLobbyRowName;//[Offset: 0x104, Size: 0x8]
	FName DefaultBattleRowName;//[Offset: 0x10c, Size: 0x8]
	SoundBankDataAsset* BankData;//[Offset: 0x118, Size: 0x8]
	<int> Required13PItemIDs;//[Offset: 0x178, Size: 0x50]
	<int> Required1PItemIDs;//[Offset: 0x1c8, Size: 0x50]
	<int> Required3PItemIDs;//[Offset: 0x218, Size: 0x50]
	<int,bool> ItemIDsLoadFlag13P;//[Offset: 0x268, Size: 0x50]
	<int,bool> ItemIDsLoadFlag1P;//[Offset: 0x2b8, Size: 0x50]
	<int,bool> ItemIDsLoadFlag3P;//[Offset: 0x308, Size: 0x50]
	void TestUnload(bool IsAsync);// 0x7966484

--------------------------------
Class: SoundBankDataAsset.DataAsset.Object
	BankArray BanksToPreLoad;//[Offset: 0x30, Size: 0x10]
	BankArray BanksToDestroyUnload;//[Offset: 0x40, Size: 0x10]
	<class Actor,float> Class2Distance;//[Offset: 0x50, Size: 0x50]
	<int,BankArray> DefineIdAndBankNames;//[Offset: 0xa0, Size: 0x50]
	<int,BankArray> DefineIdAndBankNames1P;//[Offset: 0xf0, Size: 0x50]
	<int,BankArray> DefineIdAndBankNames3P;//[Offset: 0x140, Size: 0x50]
	float ItemRefreshInterval;//[Offset: 0x190, Size: 0x4]
	<int,BankArray> LegendIdAndBankNames;//[Offset: 0x198, Size: 0x50]
	<int,BankArray> LegendIdAndBankNames1P;//[Offset: 0x1e8, Size: 0x50]
	<int,BankArray> LegendIdAndBankNames3P;//[Offset: 0x238, Size: 0x50]
	float CharacterRefreshInterval;//[Offset: 0x288, Size: 0x4]
	<int,BankArray> ID2Banks13P;//[Offset: 0x290, Size: 0x50]
	<int,BankArray> ID2Banks1P;//[Offset: 0x2e0, Size: 0x50]
	<int,BankArray> ID2Banks3P;//[Offset: 0x330, Size: 0x50]

--------------------------------
Class: BankArray
	AkAudioBank*[] Banks;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RespawnOperateComponent.ActorComponent.Object
	ApexRespawnBeacon* CapturedBeaconWeakPtr;//[Offset: 0xf8, Size: 0x8]
	Vector2D CurScreenSize;//[Offset: 0x100, Size: 0x8]
	int8 Cooldown;//[Offset: 0x108, Size: 0x1]
	class Pawn* AirRespawnCamera;//[Offset: 0x110, Size: 0x8]
	float TombDis;//[Offset: 0x118, Size: 0x4]
	float WaitRespawnTime;//[Offset: 0x11c, Size: 0x4]
	float ForceRespawnTime;//[Offset: 0x120, Size: 0x4]
	float ForceRespawnShowTime;//[Offset: 0x124, Size: 0x4]
	float RespawnEffectsShowTime;//[Offset: 0x128, Size: 0x4]
	float RespawnTime;//[Offset: 0x12c, Size: 0x4]
	bool IsNextLifeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	float ParachuteRadius;//[Offset: 0x134, Size: 0x4]
	float ParachuteHeight;//[Offset: 0x138, Size: 0x4]
	Vector TombLoaction;//[Offset: 0x150, Size: 0xc]
	float AIHasNextLife;//[Offset: 0x15c, Size: 0x4]
	float AIRespawnTime;//[Offset: 0x160, Size: 0x4]
	Pawn* RespawnCameraActor;//[Offset: 0x168, Size: 0x8]
	void TeamStartAirRespawn(out Vector LocalVector);// 0x7e130cc
	void TeamDelayAirRespawn(float DelayTime, Vector TeamTombLoaction);// 0x7e12f94
	void StopSweepBeacon();// 0x7e12f5c
	void StartSweepBeacon();// 0x7e12f70
	void StartAirRespawn(out Vector LocalVector);// 0x7e12dc4
	void SetAIRespawnTime(float Time);// 0x7e12c60
	void ServerImmediatelyRespawn();// 0x7e12d40
	void RespawnCharacter();// 0x7e12db0
	void OperateBreakCheck();// 0x7e12e8c
	void OnRep_RespawnTime();// 0x7e12d18
	void LeaveBeaconZone(ApexRespawnBeacon* Beacon);// 0x7e12ea0
	float GetRespawnRespawnTime();// 0xa16b64c
	float GetRandTime();// 0xa16b5f4
	bool GetIsNextLifeMode();// 0xa16b630
	void EnterOB();// 0x7e12d9c
	void EnterBeaconZone(ApexRespawnBeacon* Beacon);// 0x5c525bc
	void DelayAirRespawn();// 0x7e12d2c
	bool AICanHasNextLife();// 0xa16b5b4

--------------------------------
Class: PlayerEventFlowManager.EventFlowManager.ActorComponent.Object
	UserWidget* EventFlowDebugPanel;//[Offset: 0x1e0, Size: 0x8]

--------------------------------
Class: PlayerLoadoutComponent.ControllerComponentBase.ActorComponent.Object
	FName PlayerLoadoutTable;//[Offset: 0xf8, Size: 0x8]
	FName LoadoutWeaponTable;//[Offset: 0x100, Size: 0x8]
	bool bEnableAsyncLoadLoadoutConfig_Client;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	PlayerLoadoutConfig LoadoutConfig;//[Offset: 0x110, Size: 0xd8]
	enum LoadoutStatus;//[Offset: 0x1e8, Size: 0x1]
	int LoadoutID;//[Offset: 0x1f8, Size: 0x4]
	int MainWeaponLoadoutID;//[Offset: 0x1fc, Size: 0x4]
	int SubWeaponLoadoutID;//[Offset: 0x200, Size: 0x4]
	int[] ChooseLoadoutWeaponList;//[Offset: 0x208, Size: 0x10]
	void SetPlayerLoadout(out const PlayerLoadoutConfig InLoadoutConfig, bool bIsGenerate, bool bIsReset);// 0x7dea920
	void SetLoadoutID(int InLoadoutID);// 0x7dea62c
	void RpcServerStartChooseLoadoutWeapon(const int[] InChooseWeaponLoadoutList);// 0x7dea260
	void RpcServerSetSubWeaponConfig(const SelectLoadoutConfig SelectLoadoutConfig);// 0x7dea41c
	void RpcServerSetMainWeaponConfig(const SelectLoadoutConfig SelectLoadoutConfig);// 0x7dea4a0
	void RpcServerLoadoutWeaponChooseOver();// 0xa16390c
	void RpcServerConfirmPlayerLoadoutWeapon(int InChooseWeaponLoadoutID);// 0x7dea314
	void RpcServerConfirmPlayerLoadoutID(int InChooseLoadoutID);// 0x7dea398
	void RpcServerChoosePlayerLoadoutWeapon(int InChooseWeaponLoadoutID);// 0x7dea524
	void RpcServerChoosePlayerLoadoutID(int InChooseLoadoutID);// 0x7dea5a8
	void OnRep_WeaponLoadoutID();// 0x58737b0
	void OnRep_PlayerLoadoutID();// 0x5a99084
	void OnRep_LoadoutTable();// 0x5513b14
	void OnRep_ChooseLoadoutWeaponList();// 0x7dea1c8
	bool IsCanChooseNewLoadoutWeapon();// 0xa163928
	void InitPlayerLoadout(bool bIsGenerate, bool bIsReset);// 0x7deab88
	int GetSubWeaponLoadoutID();// 0xa16394c
	PlayerLoadoutConfig GetPlayerLoadoutConfig();// 0x7dea87c
	int GetMainWeaponLoadoutID();// 0xa163968
	int GetLoadoutID();// 0xa163984
	PlayerLoadoutItem[] GetItemListWithoutWeapon();// 0x7dea7a8
	int[] GetChooseLoadoutWeaponList();// 0x7dea6a8
	void GeneratePlayerLoadout(bool bReset);// 0x7dea89c
	void ClientShowSelectLoadoutUI(float EndTime);// 0x7dea1dc

--------------------------------
Class: SelectLoadoutConfig
	int LoadoutID;//[Offset: 0x0, Size: 0x4]
	int WeaponFittingID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ControllerCheatHelper.ActorComponent.Object
	class Actor* FreeCameraClass;//[Offset: 0x108, Size: 0x8]
	class Object* FreeCameraUIClass;//[Offset: 0x110, Size: 0x8]
	UserWidget* WidgetInstanceWeak;//[Offset: 0x118, Size: 0x8]
	FreeCameActor* CurFreeCam;//[Offset: 0x120, Size: 0x8]
	ApexCharacter* CurControlledCharacter;//[Offset: 0x130, Size: 0x8]
	Vector PingPointOffset;//[Offset: 0x138, Size: 0xc]
	Vector2D MapZRange;//[Offset: 0x144, Size: 0x8]
	AnimationAsset*[] AllAnimArray;//[Offset: 0x150, Size: 0x10]
	MaterialInterface* NoDither;//[Offset: 0x168, Size: 0x8]
	MaterialInterface* DitherWithMask;//[Offset: 0x170, Size: 0x8]
	MaterialInterface* DitherWithoutMask;//[Offset: 0x178, Size: 0x8]
	Texture* DitherMaskApplyTexture;//[Offset: 0x180, Size: 0x8]
	void ViewCacheWeight(FString NewWeight);// 0x7b8d33c
	void VictoryRevive();// 0x7b8e940
	void UseRespawnBeaconAndPos(int Index, int RespawnPos);// 0x7b8eec0
	void UseRespawnBeacon(int Index);// 0x7b8f0bc
	void UsePropsWeapon(int ItemID);// 0x7b8e484
	void UnHiddenCharacter();// 0x7b91990
	void TriggerNewScript(int ScriptID);// 0x7b86a84
	void ToggleShowAILoc();// 0xa111030
	void ToggleMirageTutorial();// 0xa110f18
	void ToggleDebugPoint();// 0xa110fdc
	void TestSubModel(int ModelId);// 0x7b904c0
	void TestRepeatEntryPawnState();// 0x7b8cf80
	void TestOnelink(int LinkID);// 0x7b8882c
	void TestNavlink(int NavlinkType, int TestAINum);// 0x7b88b98
	void TestNaviGuide(int IsShow, int X, int Y, int Z);// 0x7b87a0c
	void TestLog();// 0x7b8cf94
	void TestLinkLoc(FString Str);// 0x7b881bc
	void TestFPPAISkill(int LegendID, int SkillType, float Dis, float Interval, float Height);// 0x7b892dc
	void TestCloseConnection(int Reason, FString ErrorMessage);// 0x7b8c704
	void TestAllowState(enum TestState);// 0x7b9057c
	void TestAISkill(int LegendID, int SkillType, float Dis, int Num, int SpaceBetween, int Teammate);// 0x7b89580
	void TestAIRumble(int TeamNum, FString HeroLists);// 0x7b88cd0
	void TestAIFight(int LegendID, int Num, int ModeType, Vector Loc, int TeamID);// 0x7b888e8
	void TeleportAITo(int AIIndex, Vector Loc);// 0x7b8a244
	void TeamForceDamage(bool bEnable);// 0x7b8cb1c
	void TDMPTGod();// 0xa110efc
	void TDMPTFireMode();// 0xa110ee0
	void SwitchCharacterOBViewMode(bool Auto, bool ToFPP);// 0x7b8cfa8
	void StopProfiler();// 0x7b870d0
	void STNS();// 0x7b91618
	void StartFlight();// 0x5f65084
	void SpawnTombBox();// 0x7b8f88c
	void SpawnDeliverAIImpl();// 0xa110f6c
	void SpawnDeliverAI();// 0x7b875f4
	void SpawnDeathBox(float LocX, float LocY, float LocZ);// 0x7b8f964
	void SpawnAIWithSkin(int LegendID, int LegendSkin);// 0x7b8c43c
	void SpawnAIToPingPoint(int AINum, int AIType, int AITeam, int AICamp);// 0x7b8a448
	void SpawnAICharacters(int AINum, int AIType, int AITeam, int AICamp, Vector Location, int LegendID, int AILevel, int SkinID);// 0x7b8c020
	void SleepAICharacters(float Range, int Switch);// 0x7b8be1c
	void ShowPositiveFeedback(int Type);// 0x7b8cdb8
	void ShowLongSmokeID();// 0x7b90c08
	void ShowLevelsChanged(bool bEnable);// 0x7b8cce0
	void ShowKillMsg();// 0x7b8ce9c
	void ShowKillLeader(int Type);// 0x7b8ceb0
	void ShowKDER();// 0x7b8751c
	void ShowFeedbackWaitWidgetStatus();// 0x7b8ce74
	void ShowBattleFieldMsg();// 0x7b8ce88
	void ShowAISpawn();// 0xa110ff8
	void ShowAIMove(int Index);// 0x7b8ad84
	void ShowAILoc(int AIType, int Index, Vector Loc, Rotator Rot, bool IsFreeze);// 0x7b89964
	void ShowAIIndex();// 0xa11104c
	void SetVelocityOffset(float Speed);// 0x7b86e8c
	void SetUploadRotation(bool NewEnable);// 0x7b8d698
	void SetTTOColosseumStartStage();// 0xa110fc0
	void SetTTOColosseumRoundNum(int Num);// 0x7b884a0
	void SetTTOColosseumRewardStage();// 0xa110fa4
	void SetTTOColosseumCurStageTime(int Seconds);// 0x7b88318
	void SetTPPShoulderAimingOffset(float NewX, float NewY, float NewZ);// 0x7b91220
	void SetTouchIgnoreNum(int NewNum);// 0x7b8d5d8
	void SetSelectTime(int NewDuration);// 0x7b8f3dc
	void SetPlayerRebasePos(FString VecStr);// 0x7b8ffa0
	void SetPlayerRealPos(FString VecStr);// 0x7b8fe44
	void SetPlayerPosByTag(FName Tag);// 0x7b8fd60
	void SetPlayerPosByRandomLootDrones();// 0x7b8fe30
	void SetPlayerPosByRandomCreeps();// 0x7b8fe1c
	void SetPlayerPosByPingPoint();// 0x5c8ed3c
	void SetPlayerPosByDrawInfo(FString numStr);// 0x7b8fc00
	void SetPlayerPos2D(FString Vec2DStr);// 0x7b90258
	void SetPlayerPos(FString VecStr);// 0x7b900fc
	void SetPlaneFlowData(float PlaneSpeed, float PlaneHeight, float CanJumpFromPlaneCountDown);// 0x7b9064c
	void SetParachuteTraceLineMaxCacheNum(int Num);// 0x7b903b4
	void SetLongTimeNoReceiveThreshold(float Threshold);// 0x7b8c648
	void SetDebugAIState(int Type, int Can);// 0x7b88eac
	void SetDebugAINum(int AINum);// 0x7b88fec
	void SetCurrentWeaponSnappingSpeed(out const float NewSpeed);// 0x7b8d270
	void SetControlledCharacter(int Index);// 0x7b91810
	void SetBloodEffectStyle(FName NewRow);// 0x7b8d0f0
	void SetBinActivitySpawnItem(int ItemID);// 0x7b88564
	void SetBinActivityItemRepeatCount(int count);// 0x7b88628
	void SetBattleResultTime(int NewDuration);// 0x7b8f498
	void SetAllAIHp(int HP);// 0x7b87c40
	void SetAIState(int Index, int State);// 0x7b8a888
	void SetAIReplicate(int Index, int Flag);// 0x7b876c4
	void SetAINum(int Num);// 0x7b86b48
	void SetAILevelImpl(int Level);// 0x7b87530
	void SetAILevel(int Level);// 0x7b87608
	void SetAIHp(int Index, int HP);// 0x7b8ab80
	void SetAICanSkill(int Can);// 0x7b89164
	void SetAICanMove(int Can);// 0x7b890a8
	void SetAICanAttack(int Can);// 0x7b89220
	void SetAIBaseLine();// 0x7b8c574
	void ServerVictoryRevive();// 0xa111148
	void ServerUseRespawnBeaconAndPos(int Index, int RespawnPos);// 0x7b8ed80
	void ServerUseRespawnBeacon(int Index);// 0x7b8eff8
	void ServerTeamForceDamage(bool bEnable);// 0x7b8ca50
	void ServerStartFlight();// 0xa111244
	void ServerSpawnTombBox();// 0xa11119c
	void ServerSpawnDeathBox(Vector Loc);// 0x7b8f8a0
	void ServerSetSelectTime(int NewDuration);// 0x7b8f318
	void ServerSetPlayerRot(Rotator Rot);// 0x7b8f6f0
	void ServerSetPlayerPos(Vector Pos3D);// 0x7b8f7b4
	void ServerSelectToNextState();// 0xa111298
	void ServerRespawnInAir();// 0xa11112c
	void ServerRespawnAtLocation(float X, float Y, float Z);// 0x7b8e954
	void ServerRemoveBuff(int BuffID);// 0x7b8dde8
	void ServerPickBanner();// 0xa11120c
	void ServerNavMeshPoint(Vector Loc);// 0x7b8fb28
	void ServerMaxKillZ();// 0xa111180
	void ServerLoadoutWeapon(int WeaponID, int AttchmentId);// 0x7b8e540
	void ServerGotoDying();// 0xa111228
	void ServerFirePropsWeapon();// 0xa1111d4
	void ServerFallDeathBox();// 0xa1111b8
	void ServerEquipPropsWeapon();// 0xa1111f0
	void ServerEndCircle();// 0xa11127c
	void ServerEnableCirclePoison(bool enable);// 0x7b90e6c
	void ServerDeleteMirageActor();// 0xa111164
	void ServerDebugGameFlow(uint32 PlayerKey, FName PlayerType);// 0x7b90f38
	void ServerCMD_RPC(FString Cmd);// 0x7b919e0
	void ServerCMD(FString Cmd);// 0x7b91ad4
	void ServerCloseForbiddenZone();// 0xa111260
	void ServerClearAllBuff();// 0xa111110
	void ServerChooseLegendSkin(int SkinID);// 0x7b91498
	void ServerChangeState(FName NewState);// 0x7b918cc
	void ServerBeginCircle(float CircleTimeScale);// 0x7b90994
	void ServerBecomeDefender(int bOwner);// 0x7b8f554
	void ServerAddBuff(int BuffID);// 0x7b8deac
	void RpcServer_EncomyAddCurrency(int Num);// 0x7b86f50
	void RespawnViewTest(bool bTestView);// 0x7b8ecbc
	void RespawnInAir();// 0x7b8e92c
	void RespawnAtLocation(float X, float Y, float Z);// 0x7b8eb0c
	void ResetAISkill(int Index);// 0x7b8a67c
	void RescueSelf();// 0x7b8cda4
	void ReqDSChangedListenPort(int NewPort);// 0x7b8dce0
	void RemoveParticleEffect(int InstancedID);// 0x7b8f178
	void RemoveEffectView(int InstancedID);// 0x7b8e110
	void RemoveBuff(int BuffID);// 0x7b8df84
	void RemoveAILoc(int AIIndex);// 0x7b898a0
	void RecreateSocket();// 0x7b8ddd4
	void PutNavMeshObstacle(Vector Pos);// 0x7b8b950
	void PurgeAICharacters(float Range);// 0x7b8bf5c
	void PullAIHere(float Range);// 0x7b8bc94
	void PrintSprint();// 0x7b8d75c
	void PrintHidden();// 0x7b8d770
	void PrintDither();// 0x7b8c8e0
	void PlayerLookAtPingPoint();// 0x7b8f6dc
	void PickMeAsDeliverTarget();// 0xa111068
	void PickBanner();// 0x7b90498
	void OnLevelsChanged();// 0x7b8cccc
	void OBSomeone(bool bRobot, bool Enter);// 0x7b8c8f4
	void NavMeshPoint();// 0x7b8fbec
	void MaxKillZ();// 0x7b8f878
	void LogAimingInfo(bool NewEnable);// 0x7b913d0
	void LoadoutWeapon(int WeaponID, int AttchmentId);// 0x7b8e680
	void LoadAllAnim();// 0x7b8e918
	void LeaveFreeCamera();// 0x7b919b8
	void JumpPlane(float X, float Y, float Z);// 0x7b90a58
	void InitEnv(int AINum, int LegendID);// 0x7b87238
	void HiddenCharacter();// 0x7b919a4
	void GotoDying();// 0x7b90638
	void GMTO(float Time);// 0x7b9108c
	void GMTimeout(float Time);// 0x7b91148
	void GMNS();// 0x7b917fc
	void GMNextStage();// 0xa111340
	void GMNextChapter();// 0xa111324
	void GMNextBout();// 0xa111308
	void GMGoToFightingStage();// 0xa1112ec
	void GMFS();// 0x7b9120c
	void GetCloseToAI(float Range);// 0x7b8bd58
	void FreezeAI(int Index, bool OnlyStopTree);// 0x7b8a740
	void ForceSwitchParachuteCMDer(int TeamID, int NextCMDerIndex);// 0x7b8e348
	void FollowMeJumpServer();// 0xa110f34
	void FollowMeJump();// 0x7b87370
	void FlagBanner();// 0x7b904ac
	void FirePropsWeapon();// 0x7b90470
	void FallDeathBox();// 0x7b8fb14
	void ExecuteServerGM(FString Cmd);// 0x7b87384
	void EquipPropsWeapon();// 0x7b90484
	void EnterFreeCamera();// 0x7b919cc
	void EndCircle();// 0x5a7d6d4
	void EncomyAddCurrency(int Num);// 0x7b87014
	void EnableVisualSoundWidget(bool NewEnable);// 0x7b8d514
	void EnableFixedPlaneRouteByPoint(FString Target);// 0x7b90810
	void EnableFixedPlaneRoute();// 0x7b9096c
	void EnableDither(bool NewEnable, bool EnableMask);// 0x7b8d904
	void EnableCirclePoison(bool enable);// 0x60fd314
	void EnableAutoParachute2PingPoint(bool enable);// 0x7b8f618
	void EnableAutoFixReticle(bool NewEnbale);// 0x7b8d1ac
	void DumpNaviPath(int CmdId);// 0x7b87950
	void DumpAnimRef();// 0x7b8e8f0
	void DumpAnimation();// 0x7b8e904
	void DSChangedListenPort(int NewPort);// 0x7b8dc24
	void DragATeamAIImpl();// 0xa110f50
	void DragATeamAI();// 0x525faa0
	void DragAINum(int Num);// 0x7b8b04c
	void DragAIHere(int Index);// 0x7b8b250
	void DisableFixedPlaneRoute();// 0x7b907fc
	void DeliverMeBot();// 0xa111084
	void DeleteMirageActor_Local();// 0x7b8f304
	void DeleteMirageActor();// 0x7b8f2f0
	void DebugShadowMirage();// 0x7b881a8
	void DebugNavMeshServer(int Function, int Param);// 0x7b8b810
	void DebugNavMeshClient(int Function, int Param);// 0x7b8b548
	void DebugLootPoint();// 0xa1110f4
	void DebugGameFlow();// 0x7b91078
	void DebugELOScore(int Score);// 0x7b8b74c
	void DebugCmd_HandleGrapplingHookState(int State);// 0x7b8e288
	void DebugAISkill(int Index);// 0x7b8a384
	void DebugAIShoot(int Param1, int Param2, int Param3, int Param4);// 0x7b8b314
	void DebugAIReplicate(int Index, int Flag);// 0x7b87818
	void DebugAILoot(int Index);// 0x7b8af88
	void DebugAIHost(int Function, int Param1);// 0x7b8ae48
	void DebugAICell(int Type);// 0x7b8b688
	void CSRT(float RemainingTime);// 0x7b9162c
	void CResume();// 0x7b917ac
	void CPause();// 0x7b917c0
	void CloseForbiddenZone();// 0x7b90980
	void CloseCurrentScript(int RequestID);// 0x7b869c0
	void CloseConnectionManually();// 0x7b8ddc0
	void ClientFindPathResult(const Vector[] PathPoints);// 0x7b87d04
	void ClientFindPath(const Vector FeetLocation, const Vector Destination);// 0x7b87df8
	void ClientChangedRemoteURL(FString IP, int Port);// 0x7b8da4c
	void ClearAllEffectView();// 0x7b8e0fc
	void ClearAllBuff();// 0x7b8df70
	void ClearAIItem(int Index);// 0x7b8acc0
	void CleanEnv();// 0x7b87224
	void CircleMeshHide(bool ShowMesh);// 0x6123a60
	void ChooseLegendSkin(int SkinID);// 0x7b9155c
	void CheatBulletHit();// 0x7b8cf6c
	void CheatAddBullet(int BulletNumber);// 0x7b8c588
	void ChapterResume();// 0xa1112b4
	void ChapterPause();// 0xa1112d0
	void ChangeTestAIMode(ApexCharacter* AI, int BTType);// 0x7b89c1c
	void ChangeCurrentChapterRemainingLength(float RemainingTime);// 0x7b916e8
	void ChangeAIWeapon(int Index, int ItemID);// 0x7b86d4c
	void ChangeAISkin(int Index, int SkinID);// 0x7b8b110
	void ChangeAIHero(int Index, int LegendID);// 0x7b86c0c
	void CGMNC();// 0x7b917e8
	void CGMNB();// 0x7b917d4
	void BTGM();// 0x7b8ca3c
	void BotRideZipline();// 0xa1110bc
	void BotDropAllItems(float Range);// 0x7b8ba14
	void BeginProfiler(float ProfilerTime, bool TestUltimate);// 0x7b870e4
	void BeginCircle(float CircleTimeScale);// 0x7b90db0
	void BecomeSpecialCollector();// 0x7b874f4
	void BecomeNormalCollector();// 0x7b87508
	void BecomeDefender(int bOwner);// 0x6121be8
	void APSendPkg(FString Cmd);// 0x7b8d428
	void AnimTrackTest(int Type, int ClusterIndex);// 0x7b8e7b8
	void AllServerPlayerExecCMD(FString Cmd);// 0x7b8cbe0
	void AllDitherValue(float InDitherValue);// 0x7b8d848
	void AllDitherMask(bool NewEnable);// 0x7b8d784
	void AIInteractDoor();// 0xa1110a0
	void AIIgnoreMe();// 0xa111014
	void AIGotoDying();// 0xa1110d8
	void AIDebugNameImpl();// 0xa110f88
	void AIDebugName();// 0x7b87804
	void AheadCircleFlowServer(bool NotExecuteCircleFlowFunc);// 0x7b90c20
	void AheadCircleFlow(bool NotExecuteCircleFlowFunc);// 0x7b90cec
	void AddTTOColosseumKillNum(int Num);// 0x7b883dc
	void AddTestBot(Vector Loc, int BTType, int AILevel, FString Items, int Num, int LegendID, int TeamID, bool IsInvincible, bool IsNeedOffset);// 0x7b89d5c
	void AddParticleEffect(int ParticleEffectID);// 0x7b8f234
	void AddItemToBot(int ItemID, int ItemNum, float Range);// 0x7b8bad8
	void AddEffectView(int EffectViewID);// 0x7b8e1cc
	void AddCollectPointActor();// 0x7b874e0
	void AddBuff(int BuffID);// 0x7b8e040
	void AddBotWithHeroAndIndexImpl(int LegendID, int Index);// 0x7b87f30
	void AddBotWithHeroAndIndex(int LegendID, int Index);// 0x7b88070
	void AddAIItem(int Index, int ItemID, int count);// 0x7b8a9c8
	void AddActivityConfigToAI(int ItemID, int count);// 0x7b886ec

--------------------------------
Class: FreeCameActor.ApexSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	CineCameraComponent* CameraComponent;//[Offset: 0x308, Size: 0x8]
	void SetMoveSpeed(float NewSpeed);// 0x7c00098

--------------------------------
Class: ApexSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	float UpSpeed;//[Offset: 0x300, Size: 0x4]
	float GetUpSpeed();// 0xa0f08ec

--------------------------------
Class: OBManagerNoReplay.OBManager.ActorComponent.Object
	bool ShowExitBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bCanOBCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	RepMiniMapPlayerInfo[] OBPlayerInfos;//[Offset: 0x2a8, Size: 0x10]
	void ServerStopObAndExit();// 0x7d71c80
	void ServerObPlayerByKey(int TargetPlayerKey);// 0x7d7175c
	void ServerObNextOrPreTeammate(bool Next);// 0x7d71b88
	void ServerObNextOrPreActor(bool Next, float BlendTime);// 0x7d71a10
	void ServerObNext();// 0x7d71848
	void ServerObCameraByIdx(int idx, float BlendTime);// 0x7d718a4
	void ServerLeaveOBMode();// 0x7d71cdc
	void ServerEnterOBMode(enum EnterObReason);// 0x7d71d38
	void OnTrainStateChanged(enum StateType);// 0x7d71678
	void OnRep_RepOBPlayerInfos();// 0x7d71734
	void OnReconnected();// 0x7d71748

--------------------------------
Class: OBManager.ActorComponent.Object
	delegate OnCharacterOBTargetSwitched_BP;//[Offset: 0x1e8, Size: 0x10]
	float SmoothSpeed;//[Offset: 0x1f8, Size: 0x4]
	bool DebugShowWorldObj;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 0x1]
	ApexOBInfo CurOBData;//[Offset: 0x200, Size: 0x28]
	Controller* OBViewTargetRelevantControllerCache;//[Offset: 0x228, Size: 0x8]
	Controller*[] MyObservers;//[Offset: 0x240, Size: 0x10]
	TimerHandle AutoNextTimer;//[Offset: 0x250, Size: 0x8]
	float AutoNextDelay;//[Offset: 0x258, Size: 0x4]
	float OBTargetLostAutoNextDelay;//[Offset: 0x25c, Size: 0x4]
	bool bDisableOBTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool bForceUpdatePlayStateUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	Actor*[] AliveTeammates;//[Offset: 0x268, Size: 0x10]
	Actor*[] AllAlivePlayers;//[Offset: 0x278, Size: 0x10]
	Actor*[] WorldOBObject;//[Offset: 0x288, Size: 0x10]
	int CanOBNum;//[Offset: 0x298, Size: 0x4]
	int OBCameraIdx;//[Offset: 0x29c, Size: 0x4]
	void SwitchCharacterOBViewMode(bool Auto, bool ToFPP);// 0x7d70048
	bool SetViewTarget(Actor* NewViewTargetPC, Controller* RelevantController, float BlendTime);// 0x7d70190
	Actor* SelectOBTeammateChar(out Controller* InOutRelevantController, bool Next);// 0x7d6fb70
	Actor* SelectOBChar(out Controller* InOutRelevantController, bool Next, enum EnterObReason);// 0x7d6fcd8
	void OnStopObOtherAtClient(Actor* Target, ApexCharacter* LastTargetRelevantCharacter, bool bLeaveOBMode);// 0x7d6f844
	void OnRep_CurOBData(out const ApexOBInfo LastInfo);// 0x5f6bf70
	void OnRep_CanOBNum();// 0x7d6f6b8
	void OnPlayerIconClicked(int IconPlayerKey);// 0x7d70458
	void OnPlayerExit();// 0x7d7051c
	void OnObOtherAtClient(Actor* Target, ApexCharacter* NewTargetRelevantCharacter);// 0x7d6fa00
	void OnOBedStop(Controller* ObserveCharController);// 0x7d6f6cc
	void OnOBedPlayerLost();// 0x7d70374
	void OnOBedPlayerForceExit();// 0x7d70388
	void OnObedCharStateAdd(enum NewState, enum EnteredOverrideState);// 0x61397d4
	void OnOBedCharDying();// 0x7d70360
	void OnOBedCharDeath();// 0x7d7039c
	void OnOBedByOther(Controller* ObserveController);// 0x7d6f788
	void OnMyCharacterDeath();// 0x7d703b0
	bool OBViewTargetIsCharacter();// 0x7d7040c
	void LeaveOBModeAtServer();// 0x7d70444
	bool IsObingOther();// 0xa14f660
	bool IsObedByOther();// 0xa14f63c
	bool IsCurrentObChracter(int PlayerKey);// 0x7d6fec4
	int GetVTArrayNum();// 0x7d703d8
	Actor* GetOBViewTarget();// 0xa14f6b8
	int GetOBTeamID();// 0xa14f680
	ApexCharacter* GetOBRelevantCharacter();// 0xa14f5a8
	int GetOBPlayerKey();// 0xa14f69c
	static OBManager* GetOBComponent(Object* WorldObject);// 0x7d70820
	static int GetOBCameraNum(Object* WorldObject);// 0x5c19138
	static int GetOBCameraIdx(Object* WorldObject);// 0x7d70530
	static Actor* GetCurrentOBViewTarget(Object* WorldObject);// 0x7d70764
	static int GetCurrentOBTeamID(Object* WorldObject);// 0x7d705ec
	static ApexCharacter* GetCurrentOBRelevantCharacter(Object* WorldObject);// 0x5a2136c
	static int GetCurrentOBPlayerKey(Object* WorldObject);// 0x7d706a8
	enum GetCurrentOBCameraMode();// 0x7d6ff8c
	int GetCanOBCameraNum();// 0x7d6fb34
	void AutoSetViewTarget();// 0x7d703c4

--------------------------------
Class: ApexOBInfo
	Actor* OBViewTarget;//[Offset: 0x0, Size: 0x8]
	ApexCharacter* RelevantCharacter;//[Offset: 0x8, Size: 0x8]
	ApexPlayerState* RelevantCharacterPlayerState;//[Offset: 0x10, Size: 0x8]
	int CurrentOBTeamId;//[Offset: 0x18, Size: 0x4]
	int CurrentOBPlayerKey;//[Offset: 0x1c, Size: 0x4]
	bool HasRelevantCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool InOBMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LineTrace.Object

--------------------------------
Class: ProxySyncComponent.ActorComponent.Object
	<uint32,ProxySyncData*> ProxySyncDataMap;//[Offset: 0xf8, Size: 0x50]
	<uint32,Actor*> ProxyActorMap;//[Offset: 0x148, Size: 0x50]
	bool bClientCreateProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool bRemoteWeaponSoundCallBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	bool bRemoteWeaponSoundUpdatePos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 0x1]
	bool bRemoteWeaponSoundLimitPlayNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb, Size: 0x1]
	int RemoteWeaponSoundPlayNum;//[Offset: 0x1ec, Size: 0x4]
	float RemoteWeaponSoundTickTime;//[Offset: 0x1f0, Size: 0x4]
	float RemoteWeaponSoundVaildTime;//[Offset: 0x1f4, Size: 0x4]
	float RemoteWeaponSoundCheckTime;//[Offset: 0x1f8, Size: 0x4]
	float RemoteWeaponSoundOutTime;//[Offset: 0x1fc, Size: 0x4]
	RemoteWeaponSoundData[] RemoteWeaponSoundSyncList;//[Offset: 0x210, Size: 0x10]
	<uint32,RemoteWeaponSoundPlay> RemoteWeaponSoundPlayMap;//[Offset: 0x270, Size: 0x50]
	AudioRegionMgrComponent* RemoteAudioRegionMgr;//[Offset: 0x2c0, Size: 0x8]
	void RPC_ClientRemoteWeaponSound(const RemoteWeaponSoundData[] SoundData);// 0x7dfcc04
	void OnRemoteWeaponSoundEventCallBack(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x4ef6e78

--------------------------------
Class: RemoteWeaponSoundData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int WeaponID;//[Offset: 0x4, Size: 0x4]
	Vector SoundPos;//[Offset: 0x8, Size: 0xc]
	float SoundTime;//[Offset: 0x14, Size: 0x4]
	int SoundAction;//[Offset: 0x18, Size: 0x4]
	bool bEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: RemoteWeaponSoundPlay
	AkComponent* AKComp;//[Offset: 0x0, Size: 0x8]
	ApexSoundSpeakerComponent* Speaker;//[Offset: 0x8, Size: 0x8]
	ApexSoundCallback SoundCallback;//[Offset: 0x10, Size: 0x28]
	float PlayTime;//[Offset: 0x38, Size: 0x4]
	int SoundSeq;//[Offset: 0x3c, Size: 0x4]
	Vector SoundPos;//[Offset: 0x40, Size: 0xc]
	bool bSetPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InGameChatContainer.ActorComponent.Object
	int MaxChatNum;//[Offset: 0xf8, Size: 0x4]
	int MaxQuickChatNum;//[Offset: 0xfc, Size: 0x4]
	float MaxQuickChatShowTime;//[Offset: 0x100, Size: 0x4]
	delegate ChatMsgNewCallback;//[Offset: 0x108, Size: 0x10]
	InGameChatInfo[] AllChatInfoList;//[Offset: 0x118, Size: 0x10]
	InGameChatInfo[] SelectLegendChatList;//[Offset: 0x128, Size: 0x10]
	void SetContentFilterComplete(const int Index, FString Content, const int FromType);// 0x6065e7c
	void SetChatMsgIsExpired(int Index);// 0x7cbe284
	void Server_SendMsgToChatFullInfo(InGameChatInfo Info);// 0x7cbd444
	void RPCServerSendChatMsg(InGameChatInfo Info);// 0x7cbd028
	void RPCServerReportUnfoldAppointData(const int Cnt);// 0x7cbc78c
	void RPCClientReceiveChatMsg_Self(FString ContentKey, FString SelfName);// 0x7cbc850
	void RPCClientReceiveChatMsg(InGameChatInfo Info);// 0x7cbcbec
	void RPCClientNotifyBanTips(int ResonID);// 0x7cbcb28
	void RPCClientClearMsgNotify(uint64 UID, uint64 ClearTime);// 0x7cbc9ec
	InGameChatInfo[] GetQuickMsgList();// 0x7cbe008
	void ClientReportUnfoldAppointData();// 0x5bee4f8
	void Client_SendMsgToChatFullInfo(const InGameChatInfo Info);// 0x7cbd858
	void Client_SendMsgToChatForQuickMsg(const int QuickMsgID);// 0x612fd50
	void Client_SendMsgToChatForPing(int PingIndex, int PingType, int DingType, int ItemID, int64 ItemUUID, int ItemDeriveID, int ReservePlayerKey);// 0x7cbdc6c
	void Client_SendMsgToChatForGetItem(out FString LocalizeKey, int ParamNum1, int ParamNum2);// 0x61630cc
	void Client_SendMsgToChat(FString Content, enum SendType, enum FromType);// 0x618cf70
	void AddToChatList(out const InGameChatInfo Info);// 0x7cbe378

--------------------------------
Class: InGameChatInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	uint64 UID;//[Offset: 0x8, Size: 0x8]
	uint32 PostPlayerKey;//[Offset: 0x10, Size: 0x4]
	FString PostPlayerName;//[Offset: 0x18, Size: 0x10]
	FString ContentStr;//[Offset: 0x28, Size: 0x10]
	FString ContentStr2;//[Offset: 0x38, Size: 0x10]
	int TeamIdx;//[Offset: 0x48, Size: 0x4]
	int TeamID;//[Offset: 0x4c, Size: 0x4]
	int CampID;//[Offset: 0x50, Size: 0x4]
	float CreateTime;//[Offset: 0x54, Size: 0x4]
	FString SelfName;//[Offset: 0x58, Size: 0x10]
	int SendType;//[Offset: 0x68, Size: 0x4]
	int FromType;//[Offset: 0x6c, Size: 0x4]
	FString GenerateStr;//[Offset: 0x70, Size: 0x10]
	InGameChatPingInfo PingInfo;//[Offset: 0x80, Size: 0x38]
	int QuickMsgID;//[Offset: 0xb8, Size: 0x4]
	FString[] ChatParams;//[Offset: 0xc0, Size: 0x10]
	InGameChatRequireInfo RequireInfo;//[Offset: 0xd0, Size: 0x18]

--------------------------------
Class: InGameChatPingInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x8, Size: 0x8]
	Vector SourcePosition;//[Offset: 0x10, Size: 0xc]
	int PingType;//[Offset: 0x1c, Size: 0x4]
	int DingType;//[Offset: 0x20, Size: 0x4]
	int PingIndex;//[Offset: 0x24, Size: 0x4]
	int ReservePlayerKey;//[Offset: 0x28, Size: 0x4]
	bool IsExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int ItemDeriveID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InGameChatRequireInfo
	FString LocalizeKey;//[Offset: 0x0, Size: 0x10]
	int ParamNum1;//[Offset: 0x10, Size: 0x4]
	int ParamNum2;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: DSPingComponent.ActorComponent.Object
	void RPCServerSendClientInfo(FString ClientIP, int ping, int inTotal, int inTotalLost, int inOutOrder, int outTotal, int outTotalLost, int outOutOrder);// 0x7bcc604
	void RPCServerReportPing(float ping);// 0x7bcc854
	void GetPlayerNetInfo(out int AvgPing, out int MaxPing, out int MinPing, out int ServerPingRecvCount, out int ServerPingDropCount, out int InLossRate, out int OutLossRate, out int AvgJitter);// 0x7bcc8d8

--------------------------------
Class: TrackerManager.ActorComponent.Object
	SimpleTrackerData[] WearTrackerDataList;//[Offset: 0xf8, Size: 0x10]
	void UpdateClientTrackerData(int Data, int TrackerID);// 0x7ea834c
	bool SetTrackerValue(TrackerData Data, int PlayerKey);// 0x7ea8874
	void OnRep_TrackerWearInit();// 0x7ea81c0
	void OnPlayerJoin(PlayerController* Controller);// 0x7ea8104
	SimpleTrackerData GetTrackerValue(int LegendID, int ID);// 0x7ea8484
	void DoPlayerJoin(ApexPlayerState* PlayerState);// 0x7ea8048
	bool DeleteTrackerValue(TrackerData Data, int PlayerKey);// 0x7ea85c4
	void BroadcastInitPlayer(int PlayerKey, out const SimpleTrackerData[] TrackerData);// 0x7ea81d4
	bool AddTrackerValue(TrackerData Data, int PlayerKey);// 0x7ea871c

--------------------------------
Class: TrackerData
	float Value;//[Offset: 0x0, Size: 0x4]
	int TrackerType;//[Offset: 0x4, Size: 0x4]
	int LegendID;//[Offset: 0x8, Size: 0x4]
	int TrackerParam1;//[Offset: 0xc, Size: 0x4]
	int TrackerParam2;//[Offset: 0x10, Size: 0x4]
	int TrackerID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ApexDebugAIComponent.ActorComponent.Object

--------------------------------
Class: InGameGuideComponent.ActorComponent.Object
	<int,InGameGuideItemBase*> GuideItemList;//[Offset: 0xf8, Size: 0x50]
	bool IsInGameGuideOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	<int,CurrentGuideInfo> CurrentGuideInfoMap;//[Offset: 0x150, Size: 0x50]
	int InGameGuideCfgIndex;//[Offset: 0x1a0, Size: 0x4]
	FName InGameGuideCirclePath;//[Offset: 0x1a4, Size: 0x8]
	SoftObjectPath[] InGameGuideUIBP;//[Offset: 0x1b0, Size: 0x10]
	InGameGuideReporter* DataReporter;//[Offset: 0x238, Size: 0x8]
	SoftObjectPath[] ItemsToStream;//[Offset: 0x290, Size: 0x10]
	bool bIsDataInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	int[] WaitDataLoadList;//[Offset: 0x2a8, Size: 0x10]
	<FName,int> GuidePathToIDMap;//[Offset: 0x2d8, Size: 0x50]
	static bool StartInGameGuide(const Object* WorldContext, int GuideID);// 0x7cc5c80
	bool StartGuideWithActor(int GuideID, Actor* TargetActor);// 0x7cc57c0
	bool StartGuide(int GuideID);// 0x7cc592c
	Actor* SpawnInGameGuideLightCircle(const int GuideID, const Vector WorldPosition, Vector Scale, float ArrowHeight);// 0x7cc4558
	void SetInGameGuideOpenSwither();// 0xa13b50c
	void SetGuideProgress(int GuideID, int Progress, const bool IsLua);// 0x54e8b10
	void SetGuideComplete(const int GuideID);// 0x7cc50dc
	void SetCurrentLegendLevel(const int Level);// 0x561efc4
	void SetActorHighlight(const int GuideID, Actor* Actor);// 0x7cc43f8
	void RPCServerSyncGuideProgress(int GuideID, int Progress);// 0xa13b3b0
	void RPCServerGuideReport(const int GuideID, const int TriggerNum, const int TriggerState, const int FinishDuration);// 0xa13b13c
	void RPCServerExecPointGuide(Vector TargetPos);// 0xa13b048
	void RPCClientResetDataWhenPawnChange();// 0xa13b120
	static void ResetStepInfoTips(Object* WorldContext, const int GuideID, const int StepIndex, const FString NewTips);// 0x7cc4dcc
	void OnPawnChanged();// 0x577d6cc
	void OnLuaGameDataLoadFinished();// 0x7cc424c
	void OnLuaGameDataLoad();// 0x7cc4260
	Actor* OnInGameGuideCircleLoadComplete(SoftClassPath SoftPath, int GuideID, Vector WorldPosition, Vector Scale, float ArrowHeight);// 0x7cc3e98
	void OnGameDataLoaded();// 0x7cc4274
	bool IsGuidePreCheck(out const InGameGuideBaseInfo BaseInfo, out enum FailReason);// 0x7cc5450
	bool IsGuideComplete(int GuideID);// 0x7cc48a8
	void GuideCoollingTimerComplete();// 0x7cc4238
	void GuideContinue(int GuideID);// 0x7cc56f0
	static FString GetStepInfoTips(Object* WorldContext, const int GuideID, const int StepIndex);// 0x7cc4b64
	Actor* GetInGameGuideActor(const int GuideID, const bool bIsCircle);// 0x7cc4288
	void GetGuideBaseInfoByGuideID(int GuideID, out InGameGuideBaseInfo BaseInfo);// 0x7cc51ac
	int GetCurStep(int GuideID);// 0x7cc4a8c
	int GetCurrentMaxLayer(Widget* Widget);// 0x7cc47d0
	static void EndInGameGuide(const Object* WorldContext, int GuideID, bool IsForceComplete, bool bCheckNext);// 0x7cc5a08
	void EndGuide(int GuideID, bool IsForceComplete, bool bCheckNext);// 0x52e62ec
	bool CheckCanExec(int GuideID);// 0x7cc5614

--------------------------------
Class: InGameGuideItemBase.Object
	InGameGuideBaseInfo BaseInfo;//[Offset: 0x28, Size: 0x3c]
	InGameGuideStepInfo[] StepList;//[Offset: 0x68, Size: 0x10]
	int CurrentStep;//[Offset: 0x78, Size: 0x4]
	InGameGuideStepInfo CurStepInfo;//[Offset: 0x80, Size: 0x108]
	<int,InGameGuideEffectInfo> StepGuideEffectMap;//[Offset: 0x198, Size: 0x50]
	void StartGuide();// 0x7cc9594
	void GuideNextStep(bool IsTimeout);// 0x7cc94d0
	void EndGuide(bool bForceComplete);// 0x7cc940c

--------------------------------
Class: InGameGuideBaseInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	int GuidePriority;//[Offset: 0x4, Size: 0x4]
	int SameGuideArgs;//[Offset: 0x8, Size: 0x4]
	int GuideWeight;//[Offset: 0xc, Size: 0x4]
	bool NeedReback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool IsForSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	int MaxNum;//[Offset: 0x14, Size: 0x4]
	int MaxGameNum;//[Offset: 0x18, Size: 0x4]
	int EachGameCountLimit;//[Offset: 0x1c, Size: 0x4]
	int PlayerLevelLimit;//[Offset: 0x20, Size: 0x4]
	int GuideStartGameNum;//[Offset: 0x24, Size: 0x4]
	int GuideEndGameNum;//[Offset: 0x28, Size: 0x4]
	bool bIsClearWhenCharacterEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	float GuideCD;//[Offset: 0x30, Size: 0x4]
	enum HUDLayer;//[Offset: 0x34, Size: 0x1]
	int ForceNextGuideID;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: InGameGuideEffectInfo
	Actor* GuideCircle;//[Offset: 0x0, Size: 0x8]
	Actor* GuideHighLight;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CurrentGuideInfo

--------------------------------
Class: InGameGuideReporter.Object

--------------------------------
Class: AIHostComponent.ActorComponent.Object
	delegate OnAIHostStatusDelegate;//[Offset: 0x100, Size: 0x10]
	void OnAIHostDamage(Controller* Causer, Controller* Victim, out const DamageEvent DamageEvent, float BodyDamage, float ShieldDamage, byte ResultStatus);// 0x795f7a0

--------------------------------
Class: ShadowMirageTutorialComponent.ActorComponent.Object
	<ApexShadowMirageCharacter*,MirageTutorialRunningData> Mirages;//[Offset: 0x150, Size: 0x50]
	MirageTutorialComponent* TutorialCmp;//[Offset: 0x248, Size: 0x8]
	void ShowMirage(ApexShadowMirageCharacter* Character);// 0x7e33b30
	void ResetMovement(ApexShadowMirageCharacter* Character, Vector Loc, Rotator Rotator);// 0x7e338b0
	void ResetCollisionOnClient(ApexShadowMirageCharacter* Character);// 0x7e33a6c
	void OnCharacterParachuteStartOrStop(ApexCharacterBase* TargetCharacter, bool NewIsStart);// 0x7e33770
	void HideMirage(ApexShadowMirageCharacter* Character);// 0x7e33bf4
	void DrawDebugPoint(const Vector[] Points, float Duration);// 0x7e33600

--------------------------------
Class: ApexShadowMirageCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	CharacterInputComponent* CharacterInputComponent;//[Offset: 0xbe8, Size: 0x8]
	ApexCharacterAnimationComponent* AnimationComponent;//[Offset: 0xbf0, Size: 0x8]
	UAECharacterAnimListComponent* AnimationListComponent;//[Offset: 0xbf8, Size: 0x8]
	PawnStateManager* StateManagerComponent;//[Offset: 0xc08, Size: 0x8]
	CharacterParachuteComponent* CharacterParachuteComponent;//[Offset: 0xc10, Size: 0x8]
	void PlayMontage(AnimMontage* MontageToPlay);// 0x7e3321c
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x7e32f20
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x7e330dc

--------------------------------
Class: MirageTutorialRunningData

--------------------------------
Class: MirageTutorialComponent.ActorComponent.Object
	<enum,TutorialConfig> TutorialConfigMap;//[Offset: 0xf8, Size: 0x50]
	bool InAidTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	enum CurrentType;//[Offset: 0x149, Size: 0x1]
	ApexPlayerController* PlayerController;//[Offset: 0x150, Size: 0x8]
	Pawn* CharacterToNotify;//[Offset: 0x158, Size: 0x8]
	TutorialNotifyWidget* CurrentWidget;//[Offset: 0x160, Size: 0x8]
	Pawn* CharacterToAid;//[Offset: 0x168, Size: 0x8]
	TutorialNotifyWidget* AidWidget;//[Offset: 0x170, Size: 0x8]
	TimerHandle UIAnimationHandle;//[Offset: 0x180, Size: 0x8]
	TimerHandle AidAnimationHandle;//[Offset: 0x188, Size: 0x8]
	void TutorialStartOnServer(enum Type, Pawn* CharacterToNotifyIn);// 0x7d4fde0
	void TutorialStartOnClient(enum Type, Pawn* CharacterToNotifyIn);// 0x7d4fb20
	void TutorialStart(enum Type, Pawn* CharacterToNotifyIn);// 0x7d4ff20
	void TutorialEndOnServer(enum Type);// 0x7d4fc60
	void TutorialEnd(enum Type);// 0x7d4fd24
	void PlayTutorialVoice(enum Type);// 0x7d4fa64
	void OnRep_SetTutorialType();// 0x60f0c38
	void OnRep_InAidTutorial();// 0x7d4fa50

--------------------------------
Class: TutorialConfig
	enum TutorialType;//[Offset: 0x0, Size: 0x1]
	int VoiceEventID;//[Offset: 0x4, Size: 0x4]
	float TutorialRange;//[Offset: 0x8, Size: 0x4]
	class TutorialNotifyWidget* UIWidgetClass;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TutorialNotifyWidget.UserWidget.Widget.Visual.Object
	Image* Image_Notice;//[Offset: 0x248, Size: 0x8]
	Image* Image_Outline;//[Offset: 0x250, Size: 0x8]
	WidgetAnimation* Anim_in;//[Offset: 0x258, Size: 0x8]
	WidgetAnimation* Anim_loop;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Anim_out;//[Offset: 0x268, Size: 0x8]
	CanvasPanel* ItemRoot;//[Offset: 0x270, Size: 0x8]
	CurveFloat* SizeCurve;//[Offset: 0x278, Size: 0x8]
	void UpdateUISize(Pawn* Player, Pawn* Target);// 0x7eb8404

--------------------------------
Class: ApgamePlayerStateRollbackComponent.ActorComponent.Object
	void TrySnapshot();// 0x7a88b00
	void TryRollback(int InIndex);// 0x7a888b4
	void TryPartiallySnapshot(out const ApgameClientPlayerState InClientState, bool bInNeedShiftOrigin);// 0x7a88970
	void ServerSnapshot(const ApgameClientPlayerState InClientState);// 0x7a886a4
	void ServerRollback(int InIndex);// 0x7a88494
	void ServerPartiallySnapshot(const ApgameClientPlayerState InClientState);// 0x7a88580
	int GetCondensedSnapshotNum();// 0xa0f4490
	bool GetCondensedSnapshot(out ApgamePlayerStateCondensedSnapshot OutSnapshot, int InIndex);// 0x7a88b14
	void ClientSetViewType(enum InViewType);// 0x7a887c8
	void ClientSendCondensedHistory(const ApgamePlayerStateCondensedSnapshot[] InHistory);// 0x7a88378

--------------------------------
Class: ApgameClientPlayerState
	enum ViewType;//[Offset: 0x0, Size: 0x1]
	Vector PlayerLocation;//[Offset: 0x4, Size: 0xc]
	Vector CameraLocation;//[Offset: 0x10, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: ApgamePlayerStateCondensedSnapshot
	DateTime Time;//[Offset: 0x0, Size: 0x8]
	Vector PlayerLocation;//[Offset: 0x8, Size: 0xc]
	Vector CameraLocation;//[Offset: 0x14, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: DateTime

--------------------------------
Class: ApgameDeathRecallComponent.ActorComponent.Object
	float MaxTimeBeforeDeath;//[Offset: 0x100, Size: 0x4]
	float MaxMergeTime;//[Offset: 0x104, Size: 0x4]
	int MaxNum;//[Offset: 0x108, Size: 0x4]
	delegate EventOnReceiveClientRecordHistory;//[Offset: 0x110, Size: 0x10]
	uint32 CharacterSpawnTimePoint;//[Offset: 0x1d0, Size: 0x4]
	void ServerFetchRecordHistory();// 0xa0f25cc
	void PureServerFetchRecordHistory();// 0xa0f25e8
	void PureClientSendRecordHistory(const ApgameDeathRecallHistory InRecordHistory);// 0x7a7bb84
	void OnReceiveClientRecordHistoryEvent__DelegateSignature(ApgameDeathRecallComponent* InComp);// 0xa1d39f8
	void GetDeathRecordHistory(out ApgameDeathRecallHistory OutRecordHistory);// 0x6019cc0
	static ApgameDeathRecallComponent* FindDeathRecallComponent(PlayerController* InController);// 0x60bfd48
	bool FetchRecordHistory(bool bInForce);// 0x60e4e4c
	static void CopyRecordHistory(out ApgameDeathRecallHistory OutHistory, out const ApgameDeathRecallHistory InHistory);// 0x7a7c4bc
	static void CopyBannerData(out BannerData OutData, out const BannerData InData);// 0x7a7c02c
	void ClientSendRecordHistory(const ApgameDeathRecallHistory InRecordHistory, bool bInNonFightingStage);// 0x7a7b644
	void BeforeGameEnd();// 0x7a7b630

--------------------------------
Class: ApgameDeathRecallHistory
	BannerData[] BannerList;//[Offset: 0x0, Size: 0x10]
	ApgameDeathRecallRecord[] RecordList;//[Offset: 0x10, Size: 0x10]
	ApgameDeathRecallEvent[] EventList;//[Offset: 0x20, Size: 0x10]
	int OwnerPlayerKey;//[Offset: 0x30, Size: 0x4]
	int MeKillKillerCount;//[Offset: 0x34, Size: 0x4]
	int KillerKillMeCount;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ApgameDeathRecallRecord
	bool bAttacked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOtherIsAI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bKilledOrKnockedDown;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bFatalDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	enum DamageSourceType;//[Offset: 0x1, Size: 0x1]
	int OtherPlayerKey;//[Offset: 0x4, Size: 0x4]
	uint64 OtherPlayerUID;//[Offset: 0x8, Size: 0x8]
	FString OtherPlayerName;//[Offset: 0x10, Size: 0x10]
	int ItemID;//[Offset: 0x20, Size: 0x4]
	int SkillID;//[Offset: 0x24, Size: 0x4]
	int KillMsgSkinID;//[Offset: 0x28, Size: 0x4]
	int DamageWeaponSkinId;//[Offset: 0x2c, Size: 0x4]
	int FirstGunSkinId;//[Offset: 0x30, Size: 0x4]
	float DamageValue;//[Offset: 0x34, Size: 0x4]
	bool[] DamageFlows;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ApgameDeathRecallEvent
	enum EventType;//[Offset: 0x0, Size: 0x1]
	int WorldTimeSeconds;//[Offset: 0x4, Size: 0x4]
	FString EventString;//[Offset: 0x8, Size: 0x10]
	int EventId;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ApgamePickupFloatingManager.ActorComponent.Object
	byte MinPickupCacheNum;//[Offset: 0xf9, Size: 0x1]
	float FadeInTime;//[Offset: 0x100, Size: 0x4]
	float FadeOutTime;//[Offset: 0x104, Size: 0x4]
	float RenderedTimeForCulling;//[Offset: 0x108, Size: 0x4]
	ApgamePickupFloatingLogic* FloatingLogic;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: ApgamePickupFloatingLogic.Object
	void UpdateFloating(bool bInFloating);// 0x7a87128
	bool UpdateAnim(out ApgamePickupFloatingResult OutResult, float InDeltaTime, bool bInOutputResult);// 0x7a86f40
	void Clean();// 0xa0f440c

--------------------------------
Class: ApgamePickupFloatingResult
	float Height;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AutoNaviGuideComponent.CharacterNaviGuideComponent.ActorComponent.Object
	bool GMForceOpenAutoNavGuid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1]
	bool EnableTriggerTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 0x1]
	float TriggerTime;//[Offset: 0x268, Size: 0x4]
	bool EnableTriggerDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	float TriggerDisance;//[Offset: 0x270, Size: 0x4]
	bool EnableInvokeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	float InvokeTime;//[Offset: 0x278, Size: 0x4]
	bool EnableInvokeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	float InvokeDistance;//[Offset: 0x280, Size: 0x4]
	float NoInputInvokeTime;//[Offset: 0x284, Size: 0x4]
	float CoolDownTime;//[Offset: 0x288, Size: 0x4]
	bool EnableAbortTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float AbortTime;//[Offset: 0x290, Size: 0x4]
	bool EnableAbortDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	float AbortDistance;//[Offset: 0x298, Size: 0x4]
	float AbortTickForPath;//[Offset: 0x29c, Size: 0x4]
	Vector WaitForPathExtent;//[Offset: 0x2a0, Size: 0xc]
	SoftClassPath AutoPathFindNavFilter;//[Offset: 0x2b0, Size: 0x18]
	int LimitTimes;//[Offset: 0x2c8, Size: 0x4]
	bool UseSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	bool UsePawnState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	float ForceAbortWhiteRadius;//[Offset: 0x2d0, Size: 0x4]
	float ForceUseWhiteRadius;//[Offset: 0x2d4, Size: 0x4]
	Vector CheckInNavMeshExtent;//[Offset: 0x2d8, Size: 0xc]
	float RotationLerpSpeed;//[Offset: 0x2e4, Size: 0x4]
	enum PlayerRotateSetting;//[Offset: 0x2e8, Size: 0x1]
	float BlockTime;//[Offset: 0x2ec, Size: 0x4]
	int RepathOnBlockNum;//[Offset: 0x2f0, Size: 0x4]
	int RepathOnPartialNum;//[Offset: 0x2f4, Size: 0x4]
	bool InSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	delegate TickForPath;//[Offset: 0x300, Size: 0x10]
	void UpdatePathFollowing(const NavMeshPoint[] Path, bool Partial, const Vector ValidLoc);// 0x7b55c80
	void TickForValidPath();// 0xa10b088
	void ServerSetPathFindState(enum NewState);// 0xa10b0a4
	void ServerSetPathFindActivate(bool bNewAutoActivate);// 0xa10ace0
	void RequestNavigation();// 0xa10b2e8
	void RequestMoveTo(const Vector StartLoc, bool Repath);// 0xa10b17c
	void OnRep_ForceOpen();// 0x7b55ea4
	void OnReconnectToServer();// 0xa10ac54
	void OnPlayerKilled(Controller* KillerController, Controller* Victim, out const DamageEvent DmgEvent);// 0x7b55a80
	void OnAutoPathStart(const int StartType);// 0xa10afb0
	void OnAutoPathEnd(const int EndType, float MoveDis, float TotalDis);// 0xa10adc0

--------------------------------
Class: CharacterNaviGuideComponent.ActorComponent.Object
	float SwitchPointAngle;//[Offset: 0x104, Size: 0x4]
	float NaviLimitDist;//[Offset: 0x10c, Size: 0x4]
	float NaviInterval;//[Offset: 0x110, Size: 0x4]
	float EndDistance;//[Offset: 0x114, Size: 0x4]
	Vector NaviLocation;//[Offset: 0x11c, Size: 0xc]
	SoftClassPath DefaultNavigationFilterClass;//[Offset: 0x128, Size: 0x18]
	Vector Extent;//[Offset: 0x14c, Size: 0xc]
	int NumSegment;//[Offset: 0x190, Size: 0x4]
	float PerDistance;//[Offset: 0x19c, Size: 0x4]
	int NRetryFindNum;//[Offset: 0x1a0, Size: 0x4]
	float DealyHideTime;//[Offset: 0x1a4, Size: 0x4]
	float RefreshSplineDistance;//[Offset: 0x1b8, Size: 0x4]
	bool OpenMorePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	bool OpenReusePath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 0x1]
	StaticMesh* SoftStaticMesh;//[Offset: 0x1c0, Size: 0x28]
	MaterialInterface* SoftSplineStaticMeshMat;//[Offset: 0x1e8, Size: 0x28]
	StaticMesh* SplineStaticMesh;//[Offset: 0x210, Size: 0x8]
	MaterialInterface* SplineMaterialInterface;//[Offset: 0x218, Size: 0x8]
	byte ForwardAxis;//[Offset: 0x220, Size: 0x1]
	float MeshPerLen;//[Offset: 0x224, Size: 0x4]
	float PerSplineSegment;//[Offset: 0x228, Size: 0x4]
	int MaxDotNum;//[Offset: 0x22c, Size: 0x4]
	float MeshUp;//[Offset: 0x234, Size: 0x4]
	Vector2D LineScale;//[Offset: 0x238, Size: 0x8]
	bool bDebugDrawPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x244, Size: 0x4]
	bool bDebugShowSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float ScaleX;//[Offset: 0x25c, Size: 0x4]
	void SetInGameGuideLocation(Vector TargetLocation);// 0x7b62440
	void RPCSetInGameGuideLocation(Vector TargetLocation);// 0x7b6237c
	void ReqNaviGuidePathPoints(int MoveIdx);// 0x7b624fc
	void OnRep_NaviLocation();// 0xa10d740
	void OnGetNaviGuidePath(const ServerPoint[] OutPoints);// 0x7b62288
	void HideNaviGuide();// 0xa10d75c

--------------------------------
Class: NavMeshPoint
	Vector ServerLocation;//[Offset: 0x0, Size: 0xc]
	int LinkType;//[Offset: 0xc, Size: 0x4]
	Object* LinkObject;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ServerPoint
	bool bIsRayCastFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MonitorActor.Actor.Object
	bool bControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	float IntersectDistanceSquared;//[Offset: 0x27c, Size: 0x4]
	ApexCharacter* OverlapCharacter;//[Offset: 0x280, Size: 0x8]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	FString BtnText_LocalKey;//[Offset: 0x290, Size: 0x10]
	Object* BtnIcon;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystemComponent* StartEffectRootComp;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystemComponent* StopEffectRootComp;//[Offset: 0x2b0, Size: 0x8]
	BoxComponent* MonitorScreenComp;//[Offset: 0x2b8, Size: 0x8]
	WidgetComponent* TipUIComp;//[Offset: 0x2c0, Size: 0x8]
	void OnRep_ControlState();// 0x537456c
	void OnClickControlBtn();// 0xa14b390

--------------------------------
Class: MiragePhoneActor.MonitorActor.Actor.Object
	bool bPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	float AudioEffectRange;//[Offset: 0x2dc, Size: 0x4]
	<FString,AkAudioEvent*> Subtitle_AudioMap;//[Offset: 0x2e0, Size: 0x50]
	int EventId;//[Offset: 0x330, Size: 0x4]
	FString SubtitleName;//[Offset: 0x338, Size: 0x10]
	void ServerCall(int Index, ApexPlayerController* Controller);// 0x7d4f45c

--------------------------------
Class: InGameHandleActionActor.Actor.Object
	CommonPingComp* PingComp;//[Offset: 0x278, Size: 0x8]
	InGameHandleAsyncConfig[] AsyncConfigArray;//[Offset: 0x280, Size: 0x10]
	<FName,Object*> LoadFinishAssetMap;//[Offset: 0x290, Size: 0x50]
	<FName,class Object> LoadFinishClassMap;//[Offset: 0x2e0, Size: 0x50]
	<FName,InGameHandleActionConfig> ActionNameToHandleActionMap;//[Offset: 0x348, Size: 0x50]
	FName[] ServerActivateActionArray;//[Offset: 0x398, Size: 0x10]
	bool bIsEnableActionButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	FName HandleButtonName;//[Offset: 0x3fc, Size: 0x8]
	float ActionRadius;//[Offset: 0x404, Size: 0x4]
	bool bEnableOperateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool bEnableOperateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	bool bEnableForbiddenVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40a, Size: 0x1]
	bool bEnableForbiddenPawnState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40b, Size: 0x1]
	enum GamepadActionType;//[Offset: 0x40c, Size: 0x1]
	enum[] ForbiddenPawnState;//[Offset: 0x410, Size: 0x10]
	bool bIsOperated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	float ButtonOpacity;//[Offset: 0x424, Size: 0x4]
	bool bEnableMultUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	void UpdateActionButtonState(bool bInIsShow);// 0x7ccc31c
	void UpdateActionButtonRenderOpacity(float InOpacity);// 0x7ccc260
	void SetGamepadActionChanged(bool bIsShow);// 0x7ccc19c
	bool ServerOperateActionActor(Controller* Controller);// 0x7ccc6fc
	bool ServerCanOperateActionActor(Controller* Controller);// 0x7ccc4a4
	void PostServerOperateActionActor(Controller* Controller);// 0x7ccc3e0
	void PostOperateActionActorFromNetMulticast(int OperatePlayerKey, bool bIsFPP);// 0x7ccbf90
	void PostClientOperateActionActor(Controller* Controller);// 0x7ccc574
	void OperateActionActorFromLua(Controller* Controller);// 0x7ccc638
	void OnRep_ServerActivateActionArray();// 0x7cccacc
	void OnPostAsyncLoadFinishEditor();// 0xa13c6f4
	void OnAsyncLoadFinish();// 0xa13c710
	void NetMulticast_PostOperateActionActor(int OperatePlayerKey);// 0x7ccc0d8
	bool IsActiveRPCServerOpenHandleAction();// 0xa13c6b4
	void DeactivateActionImmediate(FName InName);// 0x7ccc7cc
	void DeactivateAction(FName InName);// 0x7ccc954
	bool ClientNeedShowActionButton();// 0xa13c674
	void ActivateActionImmediate(FName InName);// 0x7ccc890
	void ActivateAction(FName InName);// 0x7ccca10

--------------------------------
Class: CommonPingComp.ActorComponent.Object
	delegate OnPingDelegate;//[Offset: 0x160, Size: 0x10]
	int PingType;//[Offset: 0x170, Size: 0x4]
	bool bIsUsePingOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	Vector PingOffset;//[Offset: 0x178, Size: 0xc]
	bool bPingTypeByBp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool bNeedShowOutline_BP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	void ReceiveOnPing();// 0xa1d39f8
	bool IsUseActorLocation();// 0xa10fdb8
	bool IsNeedShowOutline();// 0xa10fdf8
	int GetPingType();// 0xa10fe38
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x7b7d774
	int BP_GetPingType();// 0xa1d39f8

--------------------------------
Class: InGameHandleAsyncConfig
	FName AssetName;//[Offset: 0x0, Size: 0x8]
	Object* LoadAsset;//[Offset: 0x8, Size: 0x28]
	class Object* LoadClass;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: InGameHandleActionConfig
	InGameHandleActionBase*[] ActionArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InGameHandleActionBase.Object
	bool bActivateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bActivateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: SyncUpdatableCoreData
	SyncUpdatableCoreDataInfo[] SyncUpdatableCoreDataList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SyncUpdatableCoreDataInfo
	int GroupID;//[Offset: 0x0, Size: 0x4]
	FString Param1;//[Offset: 0x8, Size: 0x10]
	FString Param2;//[Offset: 0x18, Size: 0x10]
	FString Param3;//[Offset: 0x28, Size: 0x10]
	FString Param4;//[Offset: 0x38, Size: 0x10]
	FString Param5;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameModeStateChangedParams
	enum GameModeStageType;//[Offset: 0x0, Size: 0x1]
	float GameModeStageDuration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ChapterType_TrackLink
	FString TrackName;//[Offset: 0x0, Size: 0x10]
	ChapterParams Params;//[Offset: 0x10, Size: 0x10]
	bool bOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bLuaTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: ApexPlayerCameraManager_BP_C.ApexPlayerCameraManager.PlayerCameraManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2cd0, Size: 0x8]
	float CameraOffset_FullScreen;//[Offset: 0x2cd8, Size: 0x4]
	float CurOffset;//[Offset: 0x2cdc, Size: 0x4]
	bool bOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce0, Size: 0x1]
	CameraActor* OffsetCamera_FullScreen;//[Offset: 0x2ce8, Size: 0x8]
	CameraActor* OffsetCamera_Bar;//[Offset: 0x2cf0, Size: 0x8]
	Vector OffsetCamera_Location;//[Offset: 0x2cf8, Size: 0xc]
	Rotator OffsetCamera_Rotation;//[Offset: 0x2d04, Size: 0xc]
	int OffsetType;//[Offset: 0x2d10, Size: 0x4]
	float CameraOffset_Bar;//[Offset: 0x2d14, Size: 0x4]
	bool IsNearCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d18, Size: 0x1]
	Transform SeqCameraEndTransform;//[Offset: 0x2d20, Size: 0x30]
	bool IsSeqCameraBlend2Normal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d50, Size: 0x1]
	Transform SeqCameraCurTransform;//[Offset: 0x2d60, Size: 0x30]
	void BP_StartSeqCameraToNormalBlend(Transform CallFunc_GetTransform_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0xa1d39f8
	void BP_SetSeqCameraEndTransform(Transform InTransform);// 0xa1d39f8
	void GetDefaultCameraOffset(float InDefaultValue, out float CameraOffset, float TempOffset, float CallFunc_Divide_FloatFloat_ReturnValue);// 0xa1d39f8
	void ResetCurOffset(bool K2Node_SwitchInteger_CmpSuccess);// 0xa1d39f8
	void BP_ClearCacheOffsetCamera();// 0xa1d39f8
	void BP_SetCameraNear(bool inIsNearCamera);// 0xa1d39f8
	void OffsetToDefaultValue(out CameraActor* CameraActor, out float InCurOffset, float DefaultCameraOffset, out Vector Location, out Rotator Rotation, out float FieldOfView, float CallFunc_GetDefaultCameraOffset_CameraOffset, float CallFunc_Lerp_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xa1d39f8
	Vector OffsetToNormal(out CameraActor* ViewTarget, out Vector Location, out Rotator Rotation, out Rotator ReturnValue2, out float FieldOfView, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue);// 0xa1d39f8
	Vector OffsetToCamera(out Actor* ViewTarget, out CameraActor* OffsetCamera, out Vector Location, out Rotator Rotation, float DefaultCameraOffset, out Rotator ReturnValue2, out float FieldOfView, Vector NewLocation, Rotator NewRotation, Rotator TargetRotation, float NewFOV, float CallFunc_GetDefaultCameraOffset_CameraOffset, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, CineCameraComponent* K2Node_DynamicCast_AsCine_Camera_Component, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_GetHorizontalFieldOfView_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue);// 0xa1d39f8
	void BP_CacheOffsetCamera_FullScreen(out CameraActor* OffsetCamera);// 0xa1d39f8
	void BP_CacheOffsetCamera_Bar(out CameraActor* OffsetCamera);// 0xa1d39f8
	void BP_StartOffset(int OffsetType, bool IsBlend);// 0xa1d39f8
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV, Rotator NewLocalVar, CameraActor* K2Node_DynamicCast_AsCamera_Actor, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, CameraActor* K2Node_DynamicCast_AsCamera_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_OffsetToNormal_ReturnValue, Rotator CallFunc_OffsetToNormal_ReturnValue2, float CallFunc_OffsetToNormal_FieldOfView, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView);// 0xa1d39f8
	void BP_ClearCacheSequenceCamera();// 0xa1d39f8
	void ExecuteUbergraph_ApexPlayerCameraManager_BP(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: ApexPlayerCameraManager.PlayerCameraManager.Actor.Object
	float LimitPitchSpeed;//[Offset: 0x2cc4, Size: 0x4]
	void BP_ClearCacheSequenceCamera();// 0xa1d39f8

--------------------------------
Class: ApexPlayerState_BP_C.ApexPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc88, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xc90, Size: 0x8]
	FString GetModuleName();// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_ApexPlayerState_BP(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: BRModeGameHUD_BP_C.ApexGameHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x638, Size: 0x8]
	BRGameFlowHUDMgr_BP_C* BRGameFlowHUDMgr_BP;//[Offset: 0x640, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x648, Size: 0x8]
	FString GetModuleName();// 0xa1d39f8
	void ReceiveBeginPlay();// 0x433fc7c
	void ExecuteUbergraph_BRModeGameHUD_BP(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: BRGameFlowHUDMgr_BP_C.GameFlowHUDMgr.ActorComponent.Object

--------------------------------
Class: BattleRoyaleGameState_BP_C.BattleRoyaleGameState.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	GameStateHarvesterSpawnComp* GameStateHarvesterSpawnComp;//[Offset: 0xa20, Size: 0x8]
	GameStateReplicatorComp_BP_C* GameStateReplicatorComp_BP;//[Offset: 0xa28, Size: 0x8]
	BRS_BR_C* BRS_BR;//[Offset: 0xa30, Size: 0x8]
	GameStateSelectLegendComp_BR_C* GameStateSelectLegendComp_BR;//[Offset: 0xa38, Size: 0x8]
	BattleBannerMgrComp* BattleBannerMgrComp_Right;//[Offset: 0xa40, Size: 0x8]
	BattleBannerMgrComp* BattleBannerMgrComp_Mid;//[Offset: 0xa48, Size: 0x8]
	BattleBannerMgrComp* BattleBannerMgrComp_Left;//[Offset: 0xa50, Size: 0x8]
	GameStateAirDropMgr* GameStateAirDropMgr;//[Offset: 0xa58, Size: 0x8]
	GameStateInGameChatComp_BP_C* GameStateInGameChatComp_BP;//[Offset: 0xa60, Size: 0x8]
	GameStateHotZoneMgr* GameStateHotZoneMgr;//[Offset: 0xa68, Size: 0x8]
	GameStateLootZoneNameMgr* GameStateLootZoneNameMgr;//[Offset: 0xa70, Size: 0x8]
	GameStateTeamInfoComp* GameStateTeamInfoComp;//[Offset: 0xa78, Size: 0x8]
	GameStatePlane_BP_C* GameStatePlane_BP;//[Offset: 0xa80, Size: 0x8]
	GameStateRadiationCircle_BP_C* GameStateRadiationCircle_BP;//[Offset: 0xa88, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xa90, Size: 0x8]
	FString GetModuleName();// 0xa1d39f8

--------------------------------
Class: BattleRoyaleGameState.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	GameStatePlaneComponent* PlaneState;//[Offset: 0xa10, Size: 0x8]
	TitleDataMgrComponent* TitleDataMgr;//[Offset: 0xa18, Size: 0x8]

--------------------------------
Class: TitleDataMgrComponent.ActorComponent.Object
	int[] GetTitleList(int PlayerKey);// 0x7ea0e00

--------------------------------
Class: GameStateHarvesterSpawnComp.ActorComponent.Object
	bool bWorkbenchActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	class Actor* MarkActor;//[Offset: 0x110, Size: 0x8]
	Actor*[] MarkArray;//[Offset: 0x118, Size: 0x10]
	int NormalAreaMinNum;//[Offset: 0x12c, Size: 0x4]
	int NormalAreaMaxNum;//[Offset: 0x130, Size: 0x4]
	int SpecialAreaNum;//[Offset: 0x134, Size: 0x4]
	<int,int> SpawnHarvesterRates;//[Offset: 0x138, Size: 0x50]
	Transform[] WorkbenchTransArray;//[Offset: 0x190, Size: 0x10]
	void ShowMarkActor();// 0x7c4edf8
	void OnRep_WorkbenchTrans();// 0x54ff228
	bool IsMarkBtnActive();// 0x7c4edc0

--------------------------------
Class: GameStateReplicatorComp_BP_C.GameStateReplicatorComponent.ActorComponent.Object

--------------------------------
Class: GameStateReplicatorComponent.ActorComponent.Object
	RepDaliyWeeklyData RepDaliyWeeklyData;//[Offset: 0xf8, Size: 0x10]
	float DaliyRoundHours;//[Offset: 0x108, Size: 0x4]
	float WeeklyRoundHours;//[Offset: 0x10c, Size: 0x4]
	FString[] BanItemsTableName;//[Offset: 0x110, Size: 0x10]
	int CurrentDaliyIndex;//[Offset: 0x130, Size: 0x4]
	int CurrentWeeklyIndex;//[Offset: 0x134, Size: 0x4]
	void OnRep_RepDailyWeeklyData();// 0x5ba3644

--------------------------------
Class: RepDaliyWeeklyData
	FName DaliyRowName;//[Offset: 0x0, Size: 0x8]
	FName WeeklyRowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BRS_BR_C.BattleResultStateMgrComp.ActorComponent.Object
	FString GetModuleName();// 0xa1d39f8

--------------------------------
Class: BattleResultStateMgrComp.ActorComponent.Object
	MPBattleResult MPResult;//[Offset: 0x100, Size: 0x50]
	bool bFromOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	bool bAlreadyExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	float ExitWaitTime;//[Offset: 0x17c, Size: 0x4]
	BattleAccountingInfo[] AccountingInfos;//[Offset: 0x180, Size: 0x10]
	BattleAccountingInfo[] OBAccountingInfos;//[Offset: 0x190, Size: 0x10]
	BattleAccountingInfo DeathConfig;//[Offset: 0x1a0, Size: 0x28]
	BattleAccountingInfo SecondLifeConfig;//[Offset: 0x1c8, Size: 0x28]
	FString WinModeShowLevel;//[Offset: 0x1f0, Size: 0x10]
	AkAudioEvent*[] WinBGMs;//[Offset: 0x200, Size: 0x10]
	AkAudioEvent*[] DrawBGMs;//[Offset: 0x210, Size: 0x10]
	AkAudioEvent*[] SingleDeadBGMs;//[Offset: 0x220, Size: 0x10]
	AkAudioEvent*[] FailedBGMs;//[Offset: 0x230, Size: 0x10]
	bool bCanEnterOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	int FilterID;//[Offset: 0x244, Size: 0x4]
	WinModeInfo[] ValidWinTeam;//[Offset: 0x248, Size: 0x10]
	void UnLoadBattleUI();// 0xa1d39f8
	WinModeInfo[] SortWinOccupation(out const WinModeInfo[] WinTeam);// 0x7b18934
	void ReturnToLobby();// 0xa1d39f8
	void ResetClientAccounting(Actor* OBTarget);// 0x5cac444
	void PreEnter(FString EndReason, bool bSkipToEnd);// 0x7b18e58
	void PopTopContinueTips();// 0xa1d39f8
	void OnResetClientAccounting();// 0xa1d39f8
	void OnReceiveWinTeamInfo(WinModeInfo[] WinTeams);// 0x7b1855c
	void OnEnterReplayBattleResult();// 0x7b19244
	void OnEnterPlayerDeath();// 0x5c630b0
	void OnEnsureEnterState(FString UIDefine);// 0xa1d39f8
	void OnClientExitGameBegin();// 0xa1d39f8
	void OnClientExitGame();// 0x5be1858
	void OnClassLoaded();// 0x7b19430
	void OnBeginBattleResult(enum ModuleName, WinModeInfo[] WinTeams, FString EndReason, byte ExitReason);// 0x5bef14c
	void LuaInstanceInit();// 0xa1d39f8
	void HoldClientAccounting(bool bHold);// 0x7b19444
	FString GetUIConfigKey(int Index);// 0x7b190f4
	MPBattleResult GetMPResult();// 0x5e46900
	BattleReusltStateWidget* GetCurrentWidget_Lua(FString UIDefine);// 0xa1d39f8
	SimpleBattleResultData GetBattleResultData();// 0x5962264
	void EnsureEnterNext(BattleReusltStateWidget* StateWidget);// 0x7b19038
	BattleReusltStateWidget* CreateUMG(FString UIDefine, FString EndReason);// 0xa1d39f8
	void CloseUMG(FString UIDefine);// 0xa1d39f8
	void CheckReturnToLobby(FString EndReason);// 0xa1d39f8
	void BeginClientAccounting(FString EndReason, byte ExitReason);// 0x7b19258

--------------------------------
Class: BattleAccountingInfo
	SoftClassPath ClassPath;//[Offset: 0x0, Size: 0x18]
	BattleStateInfo BattleStateInfo;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: BattleStateInfo
	AkAudioEvent*[] StateBGMs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BattleReusltStateWidget.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	BattleStateInfo Args;//[Offset: 0x580, Size: 0x10]
	FString EndResultType;//[Offset: 0x590, Size: 0x10]
	BattleResultStateMgrComp* DataCenter;//[Offset: 0x5a0, Size: 0x8]
	float Duration;//[Offset: 0x5a8, Size: 0x4]
	float Internal;//[Offset: 0x5ac, Size: 0x4]
	float PrewaitingTime;//[Offset: 0x5b0, Size: 0x4]
	float RemainingTime;//[Offset: 0x5b4, Size: 0x4]
	float RespawnRemainingTime;//[Offset: 0x5b8, Size: 0x4]
	bool bNeedRemoveBattleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	void PreEnterState(FString EndReason, BattleResultStateMgrComp* Mgr, out const BattleStateInfo Info);// 0x55fa128
	void PlayBGM(AkAudioEvent*[] BGMs);// 0x57b3ee8
	void OnTimerInternalUpdate();// 0xa1d39f8
	void OnTimerFinished();// 0xa1d39f8
	void OnPrepareFinish();// 0x53d368c
	void OnPrepare();// 0xa1d39f8
	void OnParentInternalUpdate();// 0x4f2e724
	void ExitStateFinish();// 0x5518f28
	void ExitState();// 0xa1d39f8
	void EnterStateFinish();// 0x5833f3c
	void EnterState();// 0xa1d39f8
	void ChangeToNextState(FString EndReason);// 0x5472974
	void ChangeToFinalState(FString EndReason);// 0x5df9a9c

--------------------------------
Class: GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	FString ModuleName;//[Offset: 0x518, Size: 0x10]
	bool bClipMarker_Max;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	bool bClipMarker_Min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1]
	FString LaunchLuaModule;//[Offset: 0x530, Size: 0x10]
	FString GameLuaModule;//[Offset: 0x540, Size: 0x10]
	FString GetModuleName();// 0x7c7aef4

--------------------------------
Class: GameStateSelectLegendComp_BR_C.GameStateSelectLegendComp.SelectLegendComponentBase.ActorComponent.Object
	FString GetModuleName();// 0xa1d39f8

--------------------------------
Class: GameStateSelectLegendComp.SelectLegendComponentBase.ActorComponent.Object
	TimerHandle TimerHandle;//[Offset: 0x108, Size: 0x8]
	GameModeStageSelectLegend* OwnGameStage;//[Offset: 0x110, Size: 0x8]
	class SelectStateManger* StateMgrClass;//[Offset: 0x118, Size: 0x8]
	class SelectStateManger* OBMgrClass;//[Offset: 0x120, Size: 0x8]
	SelectStageConfig[] StageConfigs;//[Offset: 0x128, Size: 0x10]
	bool bSetupCameraPOVToPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	FName SetupCameraPOVCameraTag;//[Offset: 0x13c, Size: 0x8]
	enum SelectLegendMode;//[Offset: 0x144, Size: 0x1]
	int LegendLimit;//[Offset: 0x148, Size: 0x4]
	<int,int> SubLegendLimits;//[Offset: 0x150, Size: 0x50]
	bool bIsCampLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	enum SelectLegendRandomMode;//[Offset: 0x1a1, Size: 0x1]
	class SelectScreenBase* SelectScreenClass;//[Offset: 0x1a8, Size: 0x28]
	SelectScreenBase* SelectScreenInstance;//[Offset: 0x1d0, Size: 0x8]
	class UIS_CurtainBase* FadeOutCurtainClass;//[Offset: 0x1d8, Size: 0x28]
	SelectStateManger* ClientStateMgr;//[Offset: 0x200, Size: 0x8]
	int CurStageIndex;//[Offset: 0x208, Size: 0x4]
	int MaxPlayerEachTeam;//[Offset: 0x20c, Size: 0x4]
	float CurStageStartTime;//[Offset: 0x210, Size: 0x4]
	int CurStageLeftTime;//[Offset: 0x214, Size: 0x4]
	float CurStageEndTime;//[Offset: 0x218, Size: 0x4]
	class Actor* SelectBoardClass;//[Offset: 0x220, Size: 0x28]
	Actor* SelectBoardActor;//[Offset: 0x248, Size: 0x8]
	float CurSelectStartTime;//[Offset: 0x250, Size: 0x4]
	float CurSelectLeftTime;//[Offset: 0x254, Size: 0x4]
	float CurSelectEndTime;//[Offset: 0x258, Size: 0x4]
	int CurSelectTeamIdx;//[Offset: 0x25c, Size: 0x4]
	void StageUpdatePerSecond();// 0x7c56870
	void OnSelectLegendTimeOut();// 0x7c56790
	void OnSelectingReconnected();// 0x7c56898
	void OnRep_CurStageStartTime();// 0xa1d39f8
	void OnRep_CurStageLeftTime();// 0xa1d39f8
	void OnRep_CurStageIndex();// 0x5541e98
	void OnRep_CurStageEndTime();// 0xa1d39f8
	void OnRep_CurSelectTeamIdx();// 0x5419454
	void OnRep_CurSelectStartTime();// 0xa1d39f8
	void OnRep_CurSelectLeftTime();// 0x4ee461c
	void OnRep_CurSelectEndTime();// 0xa1d39f8
	bool IsSelecting();// 0x5f2066c
	bool IsLegendAvailableFor(ApexPlayerState* PlayerState, int LegendID);// 0x7c567a4
	void BeginSelect();// 0x7c56884

--------------------------------
Class: GameModeStageSelectLegend.GameModeStage.Object
	enum LegendRandomMode;//[Offset: 0x49, Size: 0x1]
	GameStateSelectLegendComp* GameStateSelectLegendComp;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: GameModeStage.Object
	enum StageType;//[Offset: 0x28, Size: 0x1]
	float CurrentDuration;//[Offset: 0x2c, Size: 0x4]
	float StageDuration;//[Offset: 0x30, Size: 0x4]
	int EnterStageTimes;//[Offset: 0x34, Size: 0x4]
	float EnterStageTime;//[Offset: 0x38, Size: 0x4]
	ApexGameMode* OwningGameMode;//[Offset: 0x40, Size: 0x8]
	void SetLeftTime(int InLeftTime);// 0x7c2b930
	void OnTimeout();// 0xa127404
	void K2_OnPostLogin();// 0xa1d39f8
	void K2_OnExit();// 0xa1d39f8
	void K2_OnEnter();// 0xa1d39f8
	bool IsTimeout();// 0x7c2b9ac
	void GotoNextStage();// 0xa1273e8
	float GetRunningTime();// 0x7c2b8c8
	ApexGameMode* GetOwnerGameMode();// 0xa1273cc
	float GetLeftTime();// 0x7c2b8fc

--------------------------------
Class: ApexGameMode.GameMode.GameModeBase.Info.Actor.Object
	KillDropBase* KillDrop;//[Offset: 0x470, Size: 0x8]
	bool bTeamDeathContinueOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	int[] IgnoreInvincibleDamageType;//[Offset: 0x480, Size: 0x10]
	bool bIsAllLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	GameModeCommonInfo GameModeCommonInfo;//[Offset: 0x49c, Size: 0x18]
	GameModeStageMgr* GameModeStageMgr;//[Offset: 0x4b8, Size: 0x8]
	ChapterMgrComponent* ChapterMgr;//[Offset: 0x4c0, Size: 0x8]
	DynamicItemGenerator* DynamicItemGenerator;//[Offset: 0x4c8, Size: 0x8]
	PickupItemGeneratorComponent* PickupItemGeneratorComponent;//[Offset: 0x4d0, Size: 0x8]
	GameModeInGameActivityMgr* InGameActivityMgr;//[Offset: 0x4d8, Size: 0x8]
	PickupItemGeneratorComponent* PickupGenerator;//[Offset: 0x4e0, Size: 0x8]
	GameModeBattleResultComp* BattleResultComp;//[Offset: 0x4e8, Size: 0x8]
	BinManager* BinMgr;//[Offset: 0x4f0, Size: 0x8]
	SoftClassPath[] AIControllerClass;//[Offset: 0x520, Size: 0x10]
	SoftClassPath[] DeliverAIControllerClass;//[Offset: 0x530, Size: 0x10]
	SoftClassPath AITeamManagerClass;//[Offset: 0x540, Size: 0x18]
	SoftClassPath MetaAIManagerClass;//[Offset: 0x558, Size: 0x18]
	SoftClassPath AIHostControllerClass;//[Offset: 0x570, Size: 0x18]
	MetaAIController* MetaAIManager;//[Offset: 0x588, Size: 0x8]
	AIComponent* RegisterAIComponent;//[Offset: 0x590, Size: 0x8]
	DSControllerComponent* RegisterDSControllerComponent;//[Offset: 0x598, Size: 0x8]
	SelectLegendTLogComponent* SelectLegendTLogComponent;//[Offset: 0x5a0, Size: 0x8]
	GameModeTeamMgrComp* GameModeTeamMgrComponent;//[Offset: 0x5a8, Size: 0x8]
	<AIWorldVolume*> AIWorldVolumeSet;//[Offset: 0x5b0, Size: 0x50]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x618, Size: 0x8]
	Vector AISpawnLocation;//[Offset: 0x620, Size: 0xc]
	Vector AILandLocation;//[Offset: 0x62c, Size: 0xc]
	float FreefallVelocityFactor;//[Offset: 0x638, Size: 0x4]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 0x1]
	<enum> NeedDestroySpawnReasonSet;//[Offset: 0x640, Size: 0x50]
	bool bEnableTrainingModeImpactGroundLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	float TrainingModeImpactGroundLifeTime;//[Offset: 0x694, Size: 0x4]
	float TrainingModeDropLifeTime;//[Offset: 0x698, Size: 0x4]
	<int,float> QualityToDropLifeTime;//[Offset: 0x6a0, Size: 0x50]
	bool bEnableTrainingModeDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	ParticleSystem* TrainingModeDestroyEffect;//[Offset: 0x6f8, Size: 0x28]
	float CharacterNetCullDistanceSquared_Normal;//[Offset: 0x720, Size: 0x4]
	float CharacterNetCullDistanceSquared_InSky;//[Offset: 0x724, Size: 0x4]
	<int,float> CharacterNetCullDistanceSquared_ADS_Config;//[Offset: 0x728, Size: 0x50]
	class RespawnAircraftCharacter* RespawnAircraftCharacterBP;//[Offset: 0x798, Size: 0x8]
	MapEdgeVolume*[] MapEdgeVolumeArray;//[Offset: 0x7a0, Size: 0x10]
	MapEdgeVolume*[] MapCenterVolumeArray;//[Offset: 0x7b0, Size: 0x10]
	FName HeroConfigTable;//[Offset: 0x7c0, Size: 0x8]
	int TestBucketID;//[Offset: 0x7c8, Size: 0x4]
	ApexGameSettings GameSettings;//[Offset: 0x7d0, Size: 0x48]
	bool bRepAllPlayerStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	int VisualSoundMaxBucketIdx;//[Offset: 0x81c, Size: 0x4]
	bool CanOBWorldObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 0x1]
	bool CanObFinalKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x821, Size: 0x1]
	bool bAlwaysEnableOBAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x822, Size: 0x1]
	bool bUseGameModeDyingTimeCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x823, Size: 0x1]
	bool bAIUseGameModeDyingTimeCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 0x1]
	uint16[] CfgDyingTimeoutSec;//[Offset: 0x828, Size: 0x10]
	uint16[] CfgAIDyingTimeoutSec;//[Offset: 0x838, Size: 0x10]
	bool bUseGameModeRespawningTimeCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	uint16 CfgRespawningTimeoutSec;//[Offset: 0x84a, Size: 0x2]
	uint16 CfgShownRespawningTimeoutSec;//[Offset: 0x84c, Size: 0x2]
	Vector RespawnAircraftDefaultBornOffset;//[Offset: 0x850, Size: 0xc]
	byte CfgForbiddenZoneTime;//[Offset: 0x85c, Size: 0x1]
	bool bUpgradeableArmorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85d, Size: 0x1]
	bool bTestMidJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85e, Size: 0x1]
	EditorPlayerLoginInfo[] EditorPlayerLoginInfos;//[Offset: 0x868, Size: 0x10]
	bool bKeepBackpackWhenNoTome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 0x1]
	int LegendIdOverride;//[Offset: 0x880, Size: 0x4]
	bool bCreateArmorWhenNotEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 0x1]
	bool bMoveAntiCheatSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x885, Size: 0x1]
	bool bEnableTransferOrLeaveOrFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x886, Size: 0x1]
	bool bEnableGameModeOverrideJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x887, Size: 0x1]
	bool bAIIsJumpMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	bool bPlayerIsJumpMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 0x1]
	int SwitchJumpMasterTimes;//[Offset: 0x88c, Size: 0x4]
	float SwitchDelayTime;//[Offset: 0x890, Size: 0x4]
	float SwitchDelayTimeDeviation;//[Offset: 0x894, Size: 0x4]
	float JumpLocationLimitAngle;//[Offset: 0x898, Size: 0x4]
	float PlaneRatio;//[Offset: 0x89c, Size: 0x4]
	<int> TeammateParachuteTags;//[Offset: 0x8a0, Size: 0x50]
	CCSAISvrInfo AISvrInfo;//[Offset: 0x8f0, Size: 0x18]
	FString SccHost;//[Offset: 0x908, Size: 0x10]
	int SccPort;//[Offset: 0x918, Size: 0x4]
	bool bOpenSccAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 0x1]
	RespawnAircraftCharacter* SpawnRespawnAircraft(Transform SpawnTransform);// 0x79e79a0
	Actor* SpawnDynamicRespawnBeacon(Transform InTransform, Pawn* InInstigator);// 0x79e76d0
	Pawn* SpawnCustomPawnFor(Controller* NewPlayer, Actor* StartSpot, bool bAutonomous);// 0x79e96a4
	Pawn* SpawnCustomPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform, bool bAutonomous);// 0x79e9530
	bool ShouldPlayerLogin();// 0x79e849c
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x79e8a34
	bool QueryCanSelectLegend();// 0xa0df400
	void PostKilled(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent, out const GameModeKilledParam KilledParam);// 0x79e8ef4
	void OnMsg(FString Msg);// 0x79e87d4
	void OnLevelAddedToWorld(Level* Level, World* World);// 0x79e8720
	void OnGameEnterFinish();// 0xa0df32c
	void OnGameEnterFight();// 0xa0df348
	void NotifyRespawnBeaconActivate();// 0x79e7818
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDelayToDestroyPC, byte Reason);// 0x79e7f28
	void NotifyPlayerEnter(out const GameModePlayerParams PlayerParams);// 0x79e8070
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x79e7ae0
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x79e889c
	void LeaveOBModeAbnormal(Controller* EscapePlayer);// 0x79e8af0
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent, out const GameModeKilledParam KilledParam);// 0x79e90d4
	void KickOutPlayerById(uint64 UID, enum Reason, FString BanReasonText);// 0x79e7be0
	void KickOutPlayer(PlayerController* TargetController, enum Reason, FString BanReasonText);// 0x79e7d84
	bool IsTeamAlive(ApexPlayerState* PlayerState);// 0x79e838c
	bool IsPlayerAlive(ApexPlayerState* PlayerState);// 0x79e8414
	bool IsCampAliveByGameStatistics(ApexPlayerState* PlayerState);// 0x79e827c
	bool IsCampAlive(ApexPlayerState* PlayerState);// 0x79e8304
	bool IsAllLevelsLoaded();// 0x79e86e8
	void HeartBeat();// 0x79e8888
	void GotoDying(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent, bool bKillKnockDown, int KnockdownCombo);// 0x79e8d20
	FName GetOBCameraTag();// 0xa0df3c4
	MetaAIController* GetMetaAIManager();// 0x79e7aac
	GameModeStageMgr* GetGameModeStageMgr();// 0xa0df380
	GameModeCommonInfo GetGameModeCommonInfo();// 0xa0df39c
	class AIController GetDefaultAIControllerClass(int I);// 0x79e7b5c
	class Object GetCustomPawnClassForController(Controller* InController);// 0x79e94a4
	BinManager* GetBinManager();// 0xa0df364
	ApexPlayerState* FindPlayerStateByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x79e8620
	ApexPlayerController* FindPlayerControllerWithUID(uint64 UID);// 0x79e84d4
	ApexPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x79e8558
	void Escape(Controller* EscapePlayer, ApexPlayerState* EscapePawn, FString EndReason);// 0x79e8b74
	void ChangeLegendWithSkill(int HeroID, ApexPlayerController* Controller, int SkillBpIndex);// 0x79e92b4
	void ChangeLegend(int HeroID, ApexPlayerController* Controller, bool bNeedQuery);// 0x79e93a8
	bool CanEnterOBMode(ApexPlayerController* Target);// 0x79e7640
	void BestRespawnAircraftTransform(out const Vector StartLocation, out const Vector EndLocation, out Transform ResultTransform);// 0x79e782c

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x3d8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1]
	int NumSpectators;//[Offset: 0x3e4, Size: 0x4]
	int NumPlayers;//[Offset: 0x3e8, Size: 0x4]
	int NumBots;//[Offset: 0x3ec, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x3f0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x3f4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x3f8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x400, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x410, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x414, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	void StartMatch();// 0xa336ab4
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0xa336908
	void Say(FString Msg);// 0x9869428
	void RestartGame();// 0xa336a7c
	bool ReadyToStartMatch();// 0xa336a20
	bool ReadyToEndMatch();// 0xa3369e0
	void K2_OnSetMatchState(FName NewState);// 0xa1d39f8
	bool IsMatchInProgress();// 0xa336b10
	bool HasMatchEnded();// 0xa336ad0
	FName GetMatchState();// 0xa336b50
	void EndMatch();// 0xa336a98
	void AbortMatch();// 0xa336a60

--------------------------------
Class: RespawnAircraftCharacter.Pawn.Actor.Object
	enum CurrentState;//[Offset: 0x338, Size: 0x1]
	float ATiming;//[Offset: 0x33c, Size: 0x4]
	bool bLoadCharacters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	ApexCharacter* SyncRespawnCharacter1;//[Offset: 0x348, Size: 0x8]
	ApexCharacter* SyncRespawnCharacter2;//[Offset: 0x350, Size: 0x8]
	ApexCharacter* RespawnCharacterWeak1;//[Offset: 0x358, Size: 0x8]
	ApexCharacter* RespawnCharacterWeak2;//[Offset: 0x360, Size: 0x8]
	enum RespawnCharacterState1;//[Offset: 0x368, Size: 0x1]
	enum RespawnCharacterState2;//[Offset: 0x369, Size: 0x1]
	Controller* RespawnInstigater;//[Offset: 0x36c, Size: 0x8]
	Controller*[] ObserveControllers;//[Offset: 0x378, Size: 0x10]
	FName[] SocketArray;//[Offset: 0x388, Size: 0x10]
	AnimationAsset*[] ExitHatchAnimList;//[Offset: 0x398, Size: 0x10]
	float[] ExitHatchTime;//[Offset: 0x3a8, Size: 0x10]
	CameraAnim*[] ExitHatchCameraAnims;//[Offset: 0x3b8, Size: 0x10]
	float HoverTime;//[Offset: 0x3c8, Size: 0x4]
	float ExitTime;//[Offset: 0x3cc, Size: 0x4]
	float DestroyTime;//[Offset: 0x3d0, Size: 0x4]
	class Pawn* RespawnCameraBpClass;//[Offset: 0x3e0, Size: 0x8]
	void OnRep_RespawnCharacter2(ApexCharacter* PrevInfo);// 0x7e1220c
	void OnRep_RespawnCharacter1(ApexCharacter* PrevInfo);// 0x5f6706c
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x7e120ac

--------------------------------
Class: KillDropBase.Object

--------------------------------
Class: GameModeCommonInfo
	Vector MapCenter;//[Offset: 0x0, Size: 0xc]
	float ParachuteFreeFall2SlowDownDetectLength;//[Offset: 0xc, Size: 0x4]
	float ParachuteBack2FreeFallDetectOffset;//[Offset: 0x10, Size: 0x4]
	float ParachuteForceLandingHeight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: GameModeStageMgr.ActorComponent.Object
	GameModeStage* CurrentStage;//[Offset: 0x100, Size: 0x8]
	<enum,GameModeStage*> MapStageType2GameModeStage;//[Offset: 0x108, Size: 0x50]
	GameModeStageActive* GameModeStageActive;//[Offset: 0x158, Size: 0x8]
	GameModeStageSelectLegend* GameModeStageSelectLegend;//[Offset: 0x160, Size: 0x8]
	GameModeStageReady* GameModeStageReady;//[Offset: 0x168, Size: 0x8]
	GameModeStageFighting* GameModeStageFighting;//[Offset: 0x170, Size: 0x8]
	GameModeStageFinished* GameModeStageFinished;//[Offset: 0x178, Size: 0x8]
	void Step();// 0x7c2c538
	void Jump(enum NextStageType);// 0x7c2c4bc
	enum GetCurrentStateType();// 0x7c2c454
	GameModeStage* GetCurrentState();// 0x7c2c488
	void Finish();// 0x7c2c54c

--------------------------------
Class: GameModeStageActive.GameModeStage.Object
	float SyncDuration;//[Offset: 0x4c, Size: 0x4]
	bool bPreCreateController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: GameModeStageReady.GameModeStage.Object

--------------------------------
Class: GameModeStageFighting.GameModeStage.Object

--------------------------------
Class: GameModeStageFinished.GameModeStage.Object
	float StateTime;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ChapterMgrComponent.ActorComponent.Object
	ChapterBase*[] ActiveChapters;//[Offset: 0xf8, Size: 0x10]
	ChapterParams MgrParams;//[Offset: 0x108, Size: 0x10]
	Stage_ChapterLink[] Setting;//[Offset: 0x118, Size: 0x10]
	ChapterBase* CurrentChapter;//[Offset: 0x128, Size: 0x8]
	bool bApplyChapterMgr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	ApexGameMode* GM;//[Offset: 0x138, Size: 0x8]
	void OnStageChanged(out const GameModeStateChangedParams Params);// 0x7b53638
	void MoveChapter();// 0x7b53c20
	void InsertChapterToHead(ChapterBase* NewChapter);// 0x7b53b50
	ApexGameState* GetApexGameState();// 0x7b53598
	void CreateChapterDynamicAndInsertToQueHead(ChapterBase* Outer, class ChapterBase Class);// 0x7b5388c
	ChapterBase* CreateChapterDynamic(ChapterBase* Outer, class ChapterBase Class);// 0x7b539ec
	void CreateChapterArrAndInsertToQueTail(ChapterBase* Outer, out const ChapterBindItem[] Chapters);// 0x7b53714

--------------------------------
Class: ChapterBase.Object
	ChapterParams ChapterParams;//[Offset: 0x30, Size: 0x10]
	ChapterType_Tracks EnterTriggerBinds;//[Offset: 0x40, Size: 0x10]
	ChapterType_Tracks ExecuteTriggerBinds;//[Offset: 0x50, Size: 0x10]
	ChapterType_Tracks ExitTriggerBinds;//[Offset: 0x60, Size: 0x10]
	<FString,ChapterType_Tracks> OtherTriggerBindsMap;//[Offset: 0x70, Size: 0x50]
	enum GameStage;//[Offset: 0xc0, Size: 0x1]
	FString ChapterName;//[Offset: 0xc8, Size: 0x10]
	ChapterEndCheck* EndCondition;//[Offset: 0xd8, Size: 0x8]
	FString Describe;//[Offset: 0xe0, Size: 0x10]
	ChapterMgrComponent* Owner;//[Offset: 0xf0, Size: 0x8]
	void TriggerTrack(FString theTriggerType);// 0x7b528a0
	void Resume();// 0xa10aa00
	void Pause();// 0xa10aa1c
	void InitParam();// 0xa1d39f8
	void Exit();// 0xa10aa78
	void Execute(float DeltaSeconds);// 0xa10aa94
	void Enter();// 0xa10ab6c
	void ChangeRemainingTime(float DeltTime);// 0xa10a928
	void ChangeParam(FString TriggerType, FString TrackName, FString ParamName, out const enum ParamType, FString Value);// 0x7b52a10
	bool CanEnter();// 0xa10aa38

--------------------------------
Class: ChapterType_Tracks
	ChapterType_TrackLink[] TrackLinks;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ChapterEndCheck.Object
	bool Check();// 0xa10ab9c

--------------------------------
Class: Stage_ChapterLink
	enum GameStage;//[Offset: 0x0, Size: 0x1]
	ChapterBindItem[] ChapterArr;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ChapterBindItem
	class ChapterBase* ChapterClass;//[Offset: 0x0, Size: 0x8]
	<FString,ChapterType_Tracks> TrackBinds;//[Offset: 0x8, Size: 0x50]
	class ChapterEndCheck* EndCondition;//[Offset: 0x58, Size: 0x8]
	<FName,float> FloatArgs;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: DynamicItemGenerator.BaseGeneratorComponent.ActorComponent.Object
	DynamicItemSpawnDataAsset* DynamicItemSpawnDataAsset;//[Offset: 0x100, Size: 0x28]
	DynamicItemSpawnDataAsset*[] ItemSpawnDataAssetConfigs;//[Offset: 0x128, Size: 0x10]
	DynamicItemSpawnDataAsset*[] DynamicItemSpawnDataAssetArray;//[Offset: 0x138, Size: 0x10]
	DynamicItemSpawnerAbstract*[] SpawnInfos;//[Offset: 0x150, Size: 0x10]
	void ResetDynamicSpawnInfos();// 0x7bcff48

--------------------------------
Class: BaseGeneratorComponent.ActorComponent.Object
	int GenerateCountPerTick;//[Offset: 0xf8, Size: 0x4]

--------------------------------
Class: DynamicItemSpawnDataAsset.DataAsset.Object
	<enum,DynamicItemSpawnConfig> DynamicItemSpawnConfigMap;//[Offset: 0x30, Size: 0x50]
	void WinterWarfareDiamondCollect();// 0x7bd0674
	void WinterWarfareBinCollect();// 0x7bd0688
	void VIPBinCollect();// 0x7bd064c
	void SurveyBeaconCollect();// 0x7bd06ec
	void SporeCollect();// 0x7bd06b0
	void RowdyCollect();// 0x7bd0660
	void RespawnBeaconCollect();// 0x7bd0700
	void ReplicateHarvesterCollect();// 0x7bd069c
	void HalloweenBinCollect();// 0x7bd0624
	void GunRackCollect();// 0x7bd06d8
	void CureBeaconCollect();// 0x7bd06c4
	void ColosseumLauncherConsoleCollect();// 0x7bd0638

--------------------------------
Class: DynamicItemSpawnConfig
	enum ItemType;//[Offset: 0x0, Size: 0x1]
	class Actor* DynamicItemClass;//[Offset: 0x8, Size: 0x8]
	class Actor* EditorDynamicItemClass;//[Offset: 0x10, Size: 0x8]
	enum DynamicItemSpawnType;//[Offset: 0x18, Size: 0x1]
	DynamicItemSpawnFilterBase*[] SpawnFilterArray;//[Offset: 0x20, Size: 0x10]
	DynamicItemSpawnerAbstract*[] DynamicItemObjDataArray;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: DynamicItemSpawnFilterBase.Object

--------------------------------
Class: DynamicItemSpawnerAbstract.Object
	enum ItemType;//[Offset: 0x28, Size: 0x1]
	class Actor* ItemClass;//[Offset: 0x30, Size: 0x8]
	class Actor* EditorSpawnItemClass;//[Offset: 0x38, Size: 0x8]
	Transform Trans;//[Offset: 0x50, Size: 0x30]
	void ExecCollectConfig();// 0xa1160c4

--------------------------------
Class: PickupItemGeneratorComponent.BaseGeneratorComponent.ActorComponent.Object
	ApexGameMode* SavedGamemode;//[Offset: 0x118, Size: 0x8]
	PickupSpawner* Spawner;//[Offset: 0x120, Size: 0x8]
	UAEDataTable* MapItemControlTable;//[Offset: 0x128, Size: 0x8]
	FString GameModeID;//[Offset: 0x130, Size: 0x10]
	bool IsHaveAdditionalItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	float ChangePercent;//[Offset: 0x144, Size: 0x4]
	FString[] ChangeZoneIDs;//[Offset: 0x148, Size: 0x10]
	float[] ZoneChangePercents;//[Offset: 0x158, Size: 0x10]
	int[] AdditionalItemsIDs;//[Offset: 0x168, Size: 0x10]
	int[] AdditionalItemsNums;//[Offset: 0x178, Size: 0x10]
	int[] KeepItemsIDs;//[Offset: 0x188, Size: 0x10]
	int[] RemoveItemsIDs;//[Offset: 0x198, Size: 0x10]
	bool bIsLevelLoadFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool bIsGameModeItemInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	PickupItemDataReporter* PickupItemDataReporter;//[Offset: 0x250, Size: 0x8]
	bool bUseJsonConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	FString ModeItemJsonPath;//[Offset: 0x260, Size: 0x10]
	PickupItemGeneratorDataAsset* PickupItemDataAsset;//[Offset: 0x270, Size: 0x28]
	FString[] LootTables;//[Offset: 0x2a0, Size: 0x10]
	<FString,FString> LootTableConvertMap;//[Offset: 0x2b0, Size: 0x50]
	FString BinBpPath;//[Offset: 0x300, Size: 0x10]
	class BinActor* BinActorClass;//[Offset: 0x310, Size: 0x8]
	int BlandId;//[Offset: 0x318, Size: 0x4]
	int MinDis2Obstacle;//[Offset: 0x31c, Size: 0x4]
	int Dis2Ground;//[Offset: 0x320, Size: 0x4]
	<FName> FeatureFlagSet;//[Offset: 0x328, Size: 0x50]
	int BinSpawnItemRetryCount;//[Offset: 0x378, Size: 0x4]
	int BinMinItemCount;//[Offset: 0x37c, Size: 0x4]
	FString DynamicProbFormat;//[Offset: 0x380, Size: 0x10]
	<int,int> LimitCountItemIDToCount;//[Offset: 0x390, Size: 0x50]
	int DynamicProbIndex;//[Offset: 0x3e0, Size: 0x4]
	delegate OnPickupItemGeneratorInitConfigFinish;//[Offset: 0x3e8, Size: 0x10]
	<FName> ForceLogPosNames;//[Offset: 0x418, Size: 0x50]
	void ResetLootObjectInfo();// 0x7da31f0
	void PickupItemGeneratorInitConfigFinish__DelegateSignature();// 0xa1d39f8

--------------------------------
Class: PickupSpawner.ActorComponent.Object
	<FString,class Object> PathToClassCache;//[Offset: 0x150, Size: 0x50]
	<enum,SpawnItemHistory> SpawnItemHistoryMap;//[Offset: 0x1a0, Size: 0x50]

--------------------------------
Class: SpawnItemHistory

--------------------------------
Class: PickupItemDataReporter.Object

--------------------------------
Class: PickupItemGeneratorDataAsset.DataAsset.Object
	LootPointInfo[] LootPointInfoArray;//[Offset: 0x30, Size: 0x10]
	Actor*[] AllLootZoneArray;//[Offset: 0x48, Size: 0x10]
	void TravelJson();// 0x7da795c
	void RestoreLootPoint();// 0x7da7944
	void CollectPickUp();// 0x7da7974

--------------------------------
Class: LootPointInfo
	int PointID;//[Offset: 0x0, Size: 0x4]
	Vector Pos;//[Offset: 0x4, Size: 0xc]
	Rotator Rot;//[Offset: 0x10, Size: 0xc]
	Vector BoxPos;//[Offset: 0x1c, Size: 0xc]
	Rotator BoxRot;//[Offset: 0x28, Size: 0xc]
	uint32 GroupIdx;//[Offset: 0x34, Size: 0x4]
	float Radious;//[Offset: 0x38, Size: 0x4]
	enum BuildType;//[Offset: 0x3c, Size: 0x1]
	int BoxGroupID;//[Offset: 0x40, Size: 0x4]
	<int,int> FixedItemIDMap;//[Offset: 0x48, Size: 0x50]
	FString LootZoneType;//[Offset: 0x98, Size: 0x10]
	FString LootZoneID;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: GameModeInGameActivityMgr.ActorComponent.Object
	<int,UseActivityConfigData> UseActivityConfigMap;//[Offset: 0x100, Size: 0x50]
	<int,InGameActivityDataBase*> AllServerActivityDataMap;//[Offset: 0x150, Size: 0x50]
	bool IsActivityEnable(int InActivityType);// 0x7c243f4
	InGameActivityDataBase* GetActivityData(int InActivityType);// 0x7c2447c

--------------------------------
Class: UseActivityConfigData
	class InGameActivityDataBase* ActivityDataClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: InGameActivityDataBase.Object
	int ActivityType;//[Offset: 0x28, Size: 0x4]
	int64 StartTime;//[Offset: 0x30, Size: 0x8]
	int64 TimeOffset;//[Offset: 0x38, Size: 0x8]
	int Priority;//[Offset: 0x40, Size: 0x4]
	int64 EndTime;//[Offset: 0x48, Size: 0x8]
	FString[] ActivityParams;//[Offset: 0x50, Size: 0x10]
	int[] ActivityItemIDArray;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: GameModeBattleResultComp.ActorComponent.Object
	BattleResultDataGenerator* DataGenerator;//[Offset: 0xf8, Size: 0x8]
	GameStatisticsManager* StatisticsMgr;//[Offset: 0x100, Size: 0x8]
	ApexGameMode* OwningGameMode;//[Offset: 0x1b0, Size: 0x8]
	bool bCheckPlayerNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	<uint32,SimpleBattleResultData> SimpleResultDataMap;//[Offset: 0x1c0, Size: 0x50]
	UAEDataTable* ParameterIntegerDataTable;//[Offset: 0x210, Size: 0x8]
	void OnPlayerLogout(PlayerController* LogoutPC);// 0x7c14ed0
	bool IsFightingTimeout();// 0x7c15208
	void HandleGameFinished();// 0xa120fac
	void HandleBattleResult(ApexPlayerState* PlayerState, FString EndReason, bool bEscape, enum Type);// 0x7c14f54
	int[] GetAllCampIDs();// 0x7c15138
	bool CheckToHandleGameFinished();// 0xa121008
	bool CheckGameOver(ApexPlayerState* PlayerState);// 0x7c15240
	bool CheckGameFinished();// 0xa120fc8

--------------------------------
Class: BattleResultDataGenerator.Object
	GameStatisticsManager* StatisticsMgr;//[Offset: 0x28, Size: 0x8]
	GameModeBattleResultComp* LogicControl;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: BinManager.ActorComponent.Object
	float BlueBinRate;//[Offset: 0xf8, Size: 0x4]
	float BlueBinBanRadiusSquare;//[Offset: 0xfc, Size: 0x4]
	BlueBinGroupSet[] GroupSet;//[Offset: 0x100, Size: 0x10]
	SpatialBinConfig[] SpatialGroupSet;//[Offset: 0x110, Size: 0x10]
	void SetBin();// 0x7b2194c

--------------------------------
Class: BlueBinGroupSet
	int GroupID;//[Offset: 0x0, Size: 0x4]
	float GroupRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SpatialBinConfig
	FName Name;//[Offset: 0x0, Size: 0x8]
	int Num;//[Offset: 0x8, Size: 0x4]
	float GroupRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AIComponent.ActorComponent.Object
	int[] ScheduleTargetVec;//[Offset: 0xf8, Size: 0x10]
	Actor*[] ZoneLocs;//[Offset: 0x108, Size: 0x10]
	bool IsSkipCreateAICharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	<enum,enum> EditorTestABTags;//[Offset: 0x210, Size: 0x50]
	ApexGameMode* OwningGameMode;//[Offset: 0x260, Size: 0x8]
	bool IsOpenKDER;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	int TestIsRanking;//[Offset: 0x5ac, Size: 0x4]
	int TestBucketID;//[Offset: 0x5b0, Size: 0x4]
	int TestBonusMatch;//[Offset: 0x5b4, Size: 0x4]
	FString TestModeID;//[Offset: 0x5b8, Size: 0x10]
	bool IsKDEROverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	float TestKDERAvg;//[Offset: 0x5cc, Size: 0x4]
	float TestKDERNum;//[Offset: 0x5d0, Size: 0x4]
	bool IsReportKDERInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1]
	bool IsOnlyBRMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 0x1]
	int TestPlayerAILevel;//[Offset: 0x5d8, Size: 0x4]
	float CheckTraceDistance;//[Offset: 0x5dc, Size: 0x4]
	int StuckLogLimitNum;//[Offset: 0x5e0, Size: 0x4]
	float CollectRangeCheck;//[Offset: 0x5e8, Size: 0x4]
	float DuplicateLegendsCheckDis;//[Offset: 0x5ec, Size: 0x4]
	int TeamSize;//[Offset: 0x5f0, Size: 0x4]
	uint32 TestAINum;//[Offset: 0x5f4, Size: 0x4]
	Vector StoreLocation;//[Offset: 0x5f8, Size: 0xc]
	float RandomRadius;//[Offset: 0x604, Size: 0x4]
	bool bEnableSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	GMAIConfig[] SpawnAIConfig;//[Offset: 0x610, Size: 0x10]
	bool OpenSameWeaponGunCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]
	<enum,ItemTypeArray> AIItemMap;//[Offset: 0x628, Size: 0x50]
	Vector2D AddAmmoCount;//[Offset: 0x678, Size: 0x8]
	bool OpenDynamicAILevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	class ApexAIController* MirageController;//[Offset: 0xb88, Size: 0x28]
	class ApexShadowMirageCharacter* MirageCharacter;//[Offset: 0xbb0, Size: 0x28]
	AnimMontage* WaveHandMontage;//[Offset: 0xbd8, Size: 0x28]
	bool OpenShadowMirageTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 0x1]
	uint32 ShadowMirageParallelTrigger;//[Offset: 0xc04, Size: 0x4]
	float ShadowMirageClimbLinkZOffSet;//[Offset: 0xc08, Size: 0x4]
	float ClimbLinkVerticalAngle;//[Offset: 0xc0c, Size: 0x4]
	float AbortTutorialDistance;//[Offset: 0xc10, Size: 0x4]
	float StartSecondsAfterLand;//[Offset: 0xc14, Size: 0x4]
	float ShadowMirageCheckAroundEnemyDis;//[Offset: 0xc18, Size: 0x4]
	ShadowMirageTutorialConfig[] TutorialConfig;//[Offset: 0xc20, Size: 0x10]
	bool OpenPoisonGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 0x1]
	bool FreezeTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc31, Size: 0x1]
	<int,int> FreezeTransferItemMap;//[Offset: 0xc38, Size: 0x50]
	bool KillTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 0x1]
	<int,float> KillTransferItemID;//[Offset: 0xce0, Size: 0x50]
	<int,int> KillITransfertemMap;//[Offset: 0xd30, Size: 0x50]
	bool EnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 0x1]
	<int,int> ActivityItem;//[Offset: 0xd88, Size: 0x50]
	void SleepAI(Vector Origin, float Range, int Switch);// 0x795b344
	void OnStageFinished(out const GameModeStateChangedParams Params);// 0x795ae50
	void OnStageChanged(out const GameModeStateChangedParams Params);// 0x795af2c
	void OnPlayerRebirth(ApexPlayerState* PS);// 0x795ab80
	void OnPlayerRealKilled(Controller* RealKiller, Controller* VictimPlayer, out const DamageEvent DamageEvent);// 0x795ac50
	void OnPlayerKilled(Controller* Killer, Controller* Victim, out const DamageEvent DmgEvent);// 0x795b7fc
	void OnPlayerGotoDying(Controller* Killer, Controller* Victim, out const DamageEvent DmgEvent);// 0xa0c48a4
	void OnPlayerDamage(Controller* Causer, Controller* Victim, out const DamageEvent DamageEvent, float BodyDamage, float ShieldDamage, byte ResultStatus);// 0xa0c4aac
	int GetHybirdTeamNum();// 0x795ab4c
	static void GenerateAIItemBp(ApexAIController* AIC, int[] EquipIDs, int Time);// 0x795b0c8
	static void ClearAIItem(ApexAIController* AIC);// 0x795b008
	void AITombboxFilter(ApexAIController* AIC, out PickUpItemData[] Items);// 0x795b52c

--------------------------------
Class: GMAIConfig
	int AITeam;//[Offset: 0x0, Size: 0x4]
	int AICamp;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ItemTypeArray
	int[] Items;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ShadowMirageTutorialConfig
	enum Type;//[Offset: 0x0, Size: 0x1]
	float TriggerDistance;//[Offset: 0x4, Size: 0x4]
	float TriggerAngleInRadian;//[Offset: 0x8, Size: 0x4]
	int MaxCount;//[Offset: 0xc, Size: 0x4]
	float CD;//[Offset: 0x10, Size: 0x4]
	int LoopTime;//[Offset: 0x14, Size: 0x4]
	float TriggerInterval;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: DSControllerComponent.ActorComponent.Object

--------------------------------
Class: SelectLegendTLogComponent.ActorComponent.Object
	void ChooseFinish(ApexPlayerState* PlayerState);// 0x7e29bdc

--------------------------------
Class: GameModeTeamMgrComp.ActorComponent.Object
	int RealTeamNum;//[Offset: 0xfc, Size: 0x4]
	ApexGameMode* OwnerGameMode;//[Offset: 0x100, Size: 0x8]
	bool IsNeedShowAIDefenderTeamByLimitRank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	int ShowAIDefenderTeamLimitRank;//[Offset: 0x15c, Size: 0x4]
	<int,ApexTeamState*> TeamStateMap;//[Offset: 0x200, Size: 0x50]
	delegate OnTeamStateSpawned;//[Offset: 0x250, Size: 0x10]
	delegate OnTeamStateDestroyed;//[Offset: 0x260, Size: 0x10]
	void RemoveRecoverBanner(int TeamID, uint32 PlayerKey);// 0x7c3b490
	int RecoverBannerNum(int TeamID);// 0x7c3b05c
	void OnTeamStateSpawned__DelegateSignature(ApexTeamState* TeamState);// 0xa1d39f8
	void OnTeamStateDestroyed__DelegateSignature(ApexTeamState* TeamState);// 0xa1d39f8
	void OnPlayerEnterFightStage();// 0x7c3bb68
	bool HasRecoverBanner(int TeamID, uint32 PlayerKey);// 0x7c3b1c4
	ApexPlayerState*[] GetDefenderTeam();// 0x7c3ba98
	static ApexPlayerState*[] ConvertWeakPtrTeam(ApexPlayerState*[] WeakPtrTeam);// 0x7c3b8c0
	void ClearRecoverBanner(int TeamID);// 0x7c3b3d4
	void AddRecoverBanner(int TeamID, uint32 PlayerKey);// 0x7c3b788

--------------------------------
Class: AIWorldVolume.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x2a8, Size: 0x4]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	class Object[] CachedTagClasses;//[Offset: 0x2b0, Size: 0x10]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x338, Size: 0x50]
	ParachutePoint*[] ALLParachutePoint;//[Offset: 0x388, Size: 0x10]
	void SaveTagActors();// 0x796611c
	void OnActorSpawned(Actor* Actor);// 0x7966060
	static void GetTagActors(const Object* Context, class Object Class, FName Tag, out Actor*[] OutActors);// 0x7965df8
	static void GetCacheActors(const Object* Context, class Object Class, out Actor*[] OutActors);// 0x7965c08

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x270, Size: 0x4]
	int TeamID;//[Offset: 0x274, Size: 0x4]
	WayPointLink[] Links;//[Offset: 0x278, Size: 0x10]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x288, Size: 0x8]
	BillboardComponent* ShowSprite;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MapEdgeVolume.Volume.Brush.Actor.Object
	bool bIsMapCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]

--------------------------------
Class: EditorPlayerLoginInfo
	FString PlayerNameOption;//[Offset: 0x0, Size: 0x10]
	uint32 PlayerKeyOption;//[Offset: 0x10, Size: 0x4]
	FString NameOption;//[Offset: 0x18, Size: 0x10]
	int PlayerIndex;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CCSAISvrInfo
	FString SvrGameId;//[Offset: 0x0, Size: 0x10]
	bool bSyncAIState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameModeKilledParam
	Controller* RealKiller;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameModePlayerParams
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	FName PlayerType;//[Offset: 0x8, Size: 0x8]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	int PlayerKey;//[Offset: 0x20, Size: 0x4]
	FName PlayerStatus;//[Offset: 0x24, Size: 0x8]
	int TeamID;//[Offset: 0x2c, Size: 0x4]
	int CampID;//[Offset: 0x30, Size: 0x4]
	uint32 TeamNumber;//[Offset: 0x34, Size: 0x4]
	bool bIsCommander;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int[] ValidLegendArray;//[Offset: 0x40, Size: 0x10]
	int[] LimitValidLegendArray;//[Offset: 0x50, Size: 0x10]
	int[] ActivityTaskIDArray;//[Offset: 0x60, Size: 0x10]
	int[] MinGuaranteeLegends;//[Offset: 0x70, Size: 0x10]
	BannerData[] LegendBannerDataArray;//[Offset: 0x80, Size: 0x10]
	BannerData CurrentBannerData;//[Offset: 0x90, Size: 0x48]
	FString EndReason;//[Offset: 0xd8, Size: 0x10]
	uint32 LegendID;//[Offset: 0xe8, Size: 0x4]
	int LegendSkin;//[Offset: 0xec, Size: 0x4]
	bool bIsRobot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool IsFromDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool HasVIPTicket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	int DefaultEquipIndex;//[Offset: 0xf4, Size: 0x4]
	uint32 RoomPlayerCount;//[Offset: 0xf8, Size: 0x4]
	GameModePlayerBattleInfoGroup BattleInfoGroup;//[Offset: 0xfc, Size: 0x14]
	<int,int> DefaultLegendSkinMap;//[Offset: 0x110, Size: 0x50]
	PlayerEquipSkinInfo[] EquipSkinArray;//[Offset: 0x160, Size: 0x10]
	<int,LegendEmotePaintingInfo> EmotePaintData;//[Offset: 0x170, Size: 0x50]
	int GameNum;//[Offset: 0x1c0, Size: 0x4]
	int BRGameNum;//[Offset: 0x1c4, Size: 0x4]
	int sub_mode_group_game_num;//[Offset: 0x1c8, Size: 0x4]
	bool IsPureSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	int64 BanOBEndTime;//[Offset: 0x1d0, Size: 0x8]
	FString BanOBReasonText;//[Offset: 0x1d8, Size: 0x10]
	int64 BanChatEndTime;//[Offset: 0x1e8, Size: 0x8]
	int64 BanChatNoPerceptionEndTime;//[Offset: 0x1f0, Size: 0x8]
	int SavePoint;//[Offset: 0x1f8, Size: 0x4]
	int SegmentLevel;//[Offset: 0x1fc, Size: 0x4]
	int Rating;//[Offset: 0x200, Size: 0x4]
	int DailyWinTime;//[Offset: 0x204, Size: 0x4]
	<int,int> FinisherIDs;//[Offset: 0x208, Size: 0x50]
	int WarmScore;//[Offset: 0x258, Size: 0x4]
	int MatchScore;//[Offset: 0x25c, Size: 0x4]
	SimpleTrackerData[] TrackerDetailArray;//[Offset: 0x260, Size: 0x10]
	MpWeaponInfo MpWeaponInfo;//[Offset: 0x270, Size: 0x30]
	BrilliantInfo BrilliantInfo;//[Offset: 0x2a0, Size: 0x24]
	bool bSubJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	int ReplaceUID;//[Offset: 0x2c8, Size: 0x4]
	<int,int> JumpTailID;//[Offset: 0x2d0, Size: 0x50]
	<int,int> ActivitySingleLimitItems;//[Offset: 0x320, Size: 0x50]
	<int,JumpActionDataServer> JumpActionData;//[Offset: 0x370, Size: 0x50]
	int KDERAverage;//[Offset: 0x3c0, Size: 0x4]
	int KDERNum;//[Offset: 0x3c4, Size: 0x4]
	int AILevel;//[Offset: 0x3c8, Size: 0x4]
	GameCreditScore CreditScore;//[Offset: 0x3d0, Size: 0x10]
	FString OpenId;//[Offset: 0x3e0, Size: 0x10]
	int64 OriginalGameID;//[Offset: 0x3f0, Size: 0x8]
	InGameActivityPlayerData[] InGameActivityPlayerDataArray;//[Offset: 0x3f8, Size: 0x10]
	SkillAssistData[] SkillAssistArray;//[Offset: 0x408, Size: 0x10]
	LegendAssistData[] LegendAssistArray;//[Offset: 0x418, Size: 0x10]
	FString CorpsName;//[Offset: 0x428, Size: 0x10]
	FString CorpsNickName;//[Offset: 0x438, Size: 0x10]
	int Corps_Select_ID;//[Offset: 0x448, Size: 0x4]
	<int,LegendCustomPerksPlan> LegendCustomPerksMap;//[Offset: 0x450, Size: 0x50]
	<int,int> PutOnPerksIndexMap;//[Offset: 0x4a0, Size: 0x50]
	bool bIsPerkOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	FString IPCountry;//[Offset: 0x4f8, Size: 0x10]
	<FString,FString> MLTags;//[Offset: 0x508, Size: 0x50]
	DSPlayerGunAmuletInfo[] GunAmuletArray;//[Offset: 0x568, Size: 0x10]
	DSPlayerSignatureWeapon[] SignatureWeaponArray;//[Offset: 0x578, Size: 0x10]
	PlayerABTag[] PlayerABTags;//[Offset: 0x588, Size: 0x10]

--------------------------------
Class: JumpActionDataServer
	int[] List;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GameCreditScore
	float[] CreditScores;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DSPlayerSignatureWeapon
	int LegendID;//[Offset: 0x0, Size: 0x4]
	int WeaponID;//[Offset: 0x4, Size: 0x4]
	int Level;//[Offset: 0x8, Size: 0x4]
	int ModelIndex;//[Offset: 0xc, Size: 0x4]
	int[] FeatureIdList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SelectStateManger.Object
	bool bRepickImmediatelyChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	GameStateSelectLegendComp* DataCenterComp;//[Offset: 0x30, Size: 0x8]
	SelectStageConfig[] StateSeq;//[Offset: 0x38, Size: 0x10]
	SelectLegendWidgetBase* CurrentStage;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath[] PreLoadAssetPath;//[Offset: 0x60, Size: 0x10]
	Object*[] PreLoadAssetRef;//[Offset: 0x70, Size: 0x10]
	bool bHiddenHisUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	<enum,SoftClassPath> Stage_PathClassMap;//[Offset: 0x88, Size: 0x50]
	AkAudioEvent*[] BGMs;//[Offset: 0xd8, Size: 0x10]
	FString StateValue;//[Offset: 0xe8, Size: 0x10]
	bool bPreloadHeroHeadIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	<enum,SelectLegendWidgetBase*> Stage_WidgetInstanceMap;//[Offset: 0x100, Size: 0x50]
	float LoadingThreshold;//[Offset: 0x17c, Size: 0x4]
	void UnLoadBattleUI();// 0xa1d39f8
	void UIInit(SelectLegendWidgetBase* Widget);// 0xa1d39f8
	void SwitchLoading(bool bLoading);// 0xa1d39f8
	void ShowModeAtSlot();// 0xa1d39f8
	InGameDisplayCharacter* ShowLegendModel(FString Label, int legend_id, FName ani_name, int skin_id, bool with_effect, bool no_hide_pre_effect);// 0xa1d39f8
	void PreLoadLevel(SelectLegendWidgetBase* Widget);// 0x7e2b4e0
	Object* OpenSelectUI(FString Path);// 0xa1d39f8
	void OnInitSelectStage();// 0xa1d39f8
	void OnFinishSelectStage();// 0xa1d39f8
	void OnEnsureEnterState(FString UIDefine);// 0xa1d39f8
	void OnClientExitGame();// 0x55a6fb0
	void OnClassLoaded();// 0x7e2b59c
	void NetConnectCheck();// 0x7e2b5b0
	void LuaInstanceInit();// 0xa1d39f8
	void LoadDisplayCharacterAsset(ApexPlayerState* ThePlayerState);// 0x7e2b0d4
	void EnsureEnterNext(SelectLegendWidgetBase* StateWidget);// 0x7e2b424
	BattleReusltStateWidget* CreateUMG(FString UIDefine);// 0xa1d39f8
	void CloseUMG(FString UIDefine);// 0xa1d39f8
	void CloseSelectUI(FString Path);// 0xa1d39f8
	void ClearUnluaRegisterClass();// 0xa1d39f8
	bool ChangeTo(int CurrentIndex, SelectStageConfig StateConfig);// 0x7e2b190

--------------------------------
Class: SelectLegendWidgetBase.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	AkAudioEvent*[] StateBGMs;//[Offset: 0x570, Size: 0x10]
	SelectLegendWidgetBase* MainStateWidget;//[Offset: 0x580, Size: 0x8]
	SelectStageConfig Config;//[Offset: 0x588, Size: 0x28]
	GameStateSelectLegendComp* DataCenter;//[Offset: 0x5c0, Size: 0x8]
	SelectStateManger* SelectManager;//[Offset: 0x5c8, Size: 0x8]
	enum StageHandle;//[Offset: 0x5d0, Size: 0x1]
	bool bMainStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	FString LevelPath;//[Offset: 0x5d8, Size: 0x10]
	FName CameraTag;//[Offset: 0x5e8, Size: 0x8]
	void StateInit();// 0xa16e998
	void PreLoadLevel();// 0x55b68d8
	void PreEnterState(SelectStageConfig StateConfig, SelectLegendWidgetBase* InMainStateWidget);// 0x7e2a2f4
	void OnSyncTeamInfo(out const TeammateItemData[] TeammateDatas, byte TeamSyncType, int64 PlayerKey);// 0x7e2a01c
	void OnStateInit();// 0xa1d39f8
	void OnReceiveTeamInfo(out const TeammateItemData[] TeammateDatas, byte TeamSyncType, int64 PlayerKey);// 0x5234884
	void OnPrepareFinish();// 0x53f1d04
	void OnPrepare();// 0xa16e97c
	void ExitStateFinish();// 0x546edcc
	void ExitState();// 0xa16e944
	void EnterStateFinish();// 0x52d3adc
	void EnterState();// 0xa16e960

--------------------------------
Class: SelectStageConfig
	enum Stage;//[Offset: 0x0, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]
	SelecStateInfo Info;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: SelecStateInfo
	AkAudioEvent*[] StateBGMs;//[Offset: 0x0, Size: 0x10]
	float[] SubDevision;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TeammateItemData
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Health;//[Offset: 0x4, Size: 0x4]
	float MaxHealth;//[Offset: 0x8, Size: 0x4]
	float HealthHealing;//[Offset: 0xc, Size: 0x4]
	float ShieldHealing;//[Offset: 0x10, Size: 0x4]
	int ShieldQuality;//[Offset: 0x14, Size: 0x4]
	int HelmetQuality;//[Offset: 0x18, Size: 0x4]
	int GradableShieldExpRemain;//[Offset: 0x1c, Size: 0x4]
	int GradableShieldLevel;//[Offset: 0x20, Size: 0x4]
	int BackpackLevel;//[Offset: 0x24, Size: 0x4]
	int KnockDownShieldLevel;//[Offset: 0x28, Size: 0x4]
	float ShieldValue;//[Offset: 0x2c, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x30, Size: 0x4]
	FString PlayerName;//[Offset: 0x38, Size: 0x10]
	int LegendID;//[Offset: 0x48, Size: 0x4]
	int SkinID;//[Offset: 0x4c, Size: 0x4]
	int ChooseLegendID;//[Offset: 0x50, Size: 0x4]
	int ConfirmLegendID;//[Offset: 0x54, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x58, Size: 0x4]
	uint64 UID;//[Offset: 0x60, Size: 0x8]
	uint32 TeamIdx;//[Offset: 0x68, Size: 0x4]
	bool bIsCommander;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bIsNetLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool bIsShowNextLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]
	bool bIsSingleParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 0x1]
	bool bIsProtectedByTotem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	uint32 DyingCount;//[Offset: 0x74, Size: 0x4]
	byte DyingTimeoutSec;//[Offset: 0x78, Size: 0x1]
	byte RespawningTime;//[Offset: 0x79, Size: 0x1]
	int UseItemID;//[Offset: 0x7c, Size: 0x4]
	byte BatBeState;//[Offset: 0x80, Size: 0x1]
	byte BannerState;//[Offset: 0x81, Size: 0x1]
	byte CurrentNextLifeRespawnState;//[Offset: 0x82, Size: 0x1]
	uint32 FirstSlotBulletId;//[Offset: 0x84, Size: 0x4]
	uint32 SecondSlotBulletId;//[Offset: 0x88, Size: 0x4]
	uint32 SyncDyingRealTime;//[Offset: 0x8c, Size: 0x4]
	uint32 SyncRespawningRealTime;//[Offset: 0x90, Size: 0x4]
	uint32 SyncShownRespawningRealTime;//[Offset: 0x94, Size: 0x4]
	uint32 AIHostPlayerKey;//[Offset: 0x98, Size: 0x4]
	bool bAIHosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	int AIHostFunc1;//[Offset: 0xa0, Size: 0x4]
	int AIHostFunc2;//[Offset: 0xa4, Size: 0x4]
	int AIHostFunc3;//[Offset: 0xa8, Size: 0x4]
	int AIHostFunc4;//[Offset: 0xac, Size: 0x4]
	int AIHostFunc5;//[Offset: 0xb0, Size: 0x4]
	bool bUseSecIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: InGameDisplayCharacter.ApexDisplayCharacter.Character.Pawn.Actor.Object
	float ResetWaitingTime;//[Offset: 0x960, Size: 0x4]
	bool bWaitingSubModelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	Object*[] SubModels;//[Offset: 0x968, Size: 0x10]
	class AnimInstance* AnimClass;//[Offset: 0x998, Size: 0x8]
	delegate OnSkMeshLoaded;//[Offset: 0x9f0, Size: 0x10]
	delegate OnAniLoaded;//[Offset: 0xa00, Size: 0x10]
	delegate OnAniPlayFinished;//[Offset: 0xa10, Size: 0x10]
	FName PendingAnim;//[Offset: 0xa20, Size: 0x8]
	FString Tag;//[Offset: 0xa28, Size: 0x10]
	AnimSequence* IdleAni;//[Offset: 0xa38, Size: 0x8]
	AnimMontage* TargetAni;//[Offset: 0xa40, Size: 0x8]
	int FrameID;//[Offset: 0xa58, Size: 0x4]
	int PosID;//[Offset: 0xa5c, Size: 0x4]
	Vector2D RTSize;//[Offset: 0xa60, Size: 0x8]
	bool IsStaticPic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 0x1]
	float CharacterPosTime;//[Offset: 0xa6c, Size: 0x4]
	void UpdateCapture();// 0x7cc2cb4
	void SetDitherFactor(float NewDitherFactor, bool bPropagateToChildren);// 0xa13adbc
	void ReleaseSelf();// 0x7cc2ca0
	void RefreshAniBlueprint(AnimSequence* Ani);// 0xa1d39f8
	void PendingCapture(int TheFrameID, int ThePosID, Vector2D TheRTSize, bool TheIsStaticPic, float TheCharacterPosTime);// 0xa13aa98
	void OnTargetAniLoaded(SoftObjectPath AniPath);// 0x7cc3238
	void OnSubModelLoaded(SoftObjectPath[] theSubModelPaths);// 0x7cc2cc8
	void OnSKLoadFinished(FName UsingSkinId);// 0xa13af24
	void OnIdleAniLoaded(SoftObjectPath AniPath);// 0x7cc33b0
	void LoadIdle();// 0x546076c
	void EnableCharacter();// 0x7cc3528

--------------------------------
Class: ApexDisplayCharacter.Character.Pawn.Actor.Object
	SkeletalMeshComponent* TPPEffectMesh;//[Offset: 0x690, Size: 0x8]
	ApexDisplayWeapon* WeaponActor;//[Offset: 0x698, Size: 0x8]
	bool RotateEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 0x1]
	DataTable* OffsetTable;//[Offset: 0x6a8, Size: 0x8]
	<FName,Vector> LegendOffsets;//[Offset: 0x6b0, Size: 0x50]
	<FName,CurveVector*> AspCurves;//[Offset: 0x700, Size: 0x50]
	<FName,AnimMontage*> IdlePoseAnimMap;//[Offset: 0x760, Size: 0x50]
	float MaxIdlePoseInterval;//[Offset: 0x7b0, Size: 0x4]
	float MinIdlePoseInterval;//[Offset: 0x7b4, Size: 0x4]
	AnimMontage*[] IdleAnimArray;//[Offset: 0x7b8, Size: 0x10]
	AnimationAsset* DefaultPose;//[Offset: 0x7c8, Size: 0x8]
	bool bInSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]
	MaterialInterface* OriginMaterial;//[Offset: 0x7d8, Size: 0x8]
	enum CurrentLegendType;//[Offset: 0x7e0, Size: 0x1]
	enum CurrentWeaponType;//[Offset: 0x7e1, Size: 0x1]
	enum CurrentSceneMode;//[Offset: 0x7e2, Size: 0x1]
	enum CurrentStateMode;//[Offset: 0x7e3, Size: 0x1]
	FString SlotName;//[Offset: 0x7e8, Size: 0x10]
	FString PlayerName;//[Offset: 0x7f8, Size: 0x10]
	FString PlayerUid;//[Offset: 0x808, Size: 0x10]
	FString LegendID;//[Offset: 0x818, Size: 0x10]
	TimerHandle DisplayCharMontageTimer;//[Offset: 0x828, Size: 0x8]
	FName CurrentSkinId;//[Offset: 0x830, Size: 0x8]
	CameraComponent* FPPCamera;//[Offset: 0x838, Size: 0x8]
	Vector CameraLocation;//[Offset: 0x840, Size: 0xc]
	Rotator CameraRotator;//[Offset: 0x84c, Size: 0xc]
	enum FPPStateMode;//[Offset: 0x858, Size: 0x1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 0x1]
	CharacterMontageDataMapAsset* MontageTable;//[Offset: 0x860, Size: 0x8]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x868, Size: 0x28]
	delegate EnterFPPDelegate;//[Offset: 0x8a0, Size: 0x10]
	delegate EnterTPPDelegate;//[Offset: 0x8b0, Size: 0x10]
	Vector WeaponScale;//[Offset: 0x8c0, Size: 0xc]
	FName WeaponSocket;//[Offset: 0x8cc, Size: 0x8]
	void YawRotate(float Delta);// 0x79d1184
	void StopSound(int SoundHandle);// 0x79cf83c
	void ShowOutlineEffect();// 0xa1d39f8
	void ShowEffectOneTime(int EffectID);// 0xa0d9f70
	void SetWeaponVisiable(bool IsShow);// 0x79cf600
	void SetWeaponMesh(FString Path, FString[] Material, FString AnimClassPath);// 0x79d00bc
	void SetVisible(bool Visible, bool PlayAppearAnim);// 0x79d1254
	void SetStateMode(enum Mode, FName TargetAnimId, bool NeedHideBeforeMontage);// 0xa0d9d54
	void SetRotateEnable(bool enable);// 0x79d0fbc
	void SetOriginMaterial();// 0x79d0ac0
	void SetMeshLightChannel(int Channel);// 0x4f2bbcc
	void SetLegendWeapon(enum LegendType, enum WeaponType);// 0x79d085c
	void SetLegendOffsetByAlpha(FName StartName, FName EndName, float Alpha);// 0x79d0dd4
	void SetDisplaySceneMode(enum Mode);// 0x5c72a20
	void SetComponentVisiableWithTag(FName Tag, bool IsVisiable);// 0x79cf498
	void ResetRotate();// 0x79d1170
	void ReadSkinInfos(FString InLegendId, enum MeshMode);// 0x79d0620
	void ReadOriginMaterial();// 0x79d0a84
	void PlayRandomIdlePose();// 0xa0d9af0
	void PlayMontageById(FName MontageId);// 0x79d09b4
	void PlayCharacterMontage(enum MovementType);// 0x79cf9e4
	void OnStateChange(enum Last, enum Next, AnimMontage* LastMontage, AnimMontage* NextMontage, FName NextMontageId);// 0xa1d39f8
	void OnSkinChanged(Character* TargetCharacter, bool Success, FName SkinID);// 0x58f796c
	void OnSetDark();// 0xa1d39f8
	void OnMontageStarted(AnimMontage* Montage);// 0xa0d9b0c
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0xa0d9be4
	void OnFPPMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0xa0d9980
	void OnCancelDark();// 0xa1d39f8
	void OnArmoryStageChange(bool bEnter);// 0xa1d39f8
	void MoveWeapon(SkeletalMeshComponent* NewParent, FName SocketName);// 0x79cf6dc
	SkeletalMeshComponent* GetOwnMesh();// 0x79cf45c
	Vector GetLegendOffset(FName CurveName, FName OffsetName);// 0x79d0b0c
	AnimMontage* GetCharacterMontage();// 0x79cfab4
	AkAudioEvent* GetAkAudioEvent(FName SoundName);// 0x79cf90c
	void ForceSetLegendOffset(float MoveTime, Vector TargetRelaLoc);// 0x79d0c74
	void FixWeaponScale(Vector TargetScale);// 0x59ccaa0
	void EnterTPPDelegate__DelegateSignature();// 0xa1d39f8
	void EnterTPP();// 0x79d053c
	void EnterFPPDelegate__DelegateSignature();// 0xa1d39f8
	void DetachWeapon();// 0x55fd86c
	void ControllWeaponScale();// 0xa1d39f8
	void CloseEffect();// 0xa0d9f54
	void CleanWeaponComponent(FName SocketName, FName Tag);// 0x79cfae8
	void ChangeSkin(FName SkinID);// 0x5c86668
	void ChangeLegendOffset(float MoveTime, FName CurveName, FName OffsetName);// 0x434d340
	void ChangeEffectIntensity(float Intensity);// 0x79d10a0
	void AttachWeapon(Actor* Weapon);// 0x79d0550
	void AddComponentToWeapon(FString Path, FString[] SkinMaterial, FName SocketName, FName Tag);// 0x79cfc4c

--------------------------------
Class: ApexDisplayWeapon.Actor.Object
	DisplayWeaponMeshComponent* WeaponMeshComponent;//[Offset: 0x270, Size: 0x8]
	DisplayWeaponParticleComponent* WeaponParticleComponent;//[Offset: 0x278, Size: 0x8]
	WeaponDisplayActorComponent* WeaponDisplayComponent;//[Offset: 0x280, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x288, Size: 0x8]
	DisplayWeapon3DUIComponent* Weapon3DUIComponent;//[Offset: 0x290, Size: 0x8]
	DisplayWeapon3DUIComponent* Optical3DUIComponent;//[Offset: 0x298, Size: 0x8]
	DisplayWeaponEffectComponent* EffectComponent;//[Offset: 0x2a0, Size: 0x8]
	DisplayWeaponCharmComponent* CharmComponent;//[Offset: 0x2a8, Size: 0x8]
	FName CharmSocketName;//[Offset: 0x2b0, Size: 0x8]
	WeaponAnimDataAsset* WeaponAssetTable;//[Offset: 0x2b8, Size: 0x8]
	enum StateMode;//[Offset: 0x2c0, Size: 0x1]
	AnimMontage* TestMontage;//[Offset: 0x2d8, Size: 0x8]
	ArmoryWeaponAudioDataAsset* WeaponAudioTable;//[Offset: 0x2e0, Size: 0x8]
	<byte,WeaponBulletChangeNum> WeaponBulletColorNumMap;//[Offset: 0x2f8, Size: 0x50]
	DisplayWeaponSkinCfg WeaponSkinCfg;//[Offset: 0x348, Size: 0x18]
	void UpdateBulletNum(int MagLevel, int BulletNum, int ReserveBulletBudget);// 0x79d5538
	void StopWeaponMontage();// 0x79d4bb4
	void SetWeaponID(int ID);// 0x5f365c8
	void SetVisible(bool IsVisiable);// 0x597a618
	void SetSkinID(int ID);// 0x5c72628
	void SetOptical3DUIActorVisiable(bool IsVisiable);// 0x5e86dbc
	void SetMeshScale(Vector Scale);// 0x5b4f4f4
	void SetMeshOffset(Vector Offset);// 0x5717de4
	void SetMeshCompList(FString[] MeshCompList);// 0x4b1fb7c
	void SetCollisionEnabled(bool bEnabled);// 0x5aa9cfc
	void SetCharmVisiable(bool bState, bool bDestroy);// 0x5b4f304
	void SetAnimClass(FString AnimClassPath, bool IsAsynLoad);// 0x5fbd098
	void RemoveWeaponOutlineEffect();// 0x79d4d30
	void RemoveSkeletalMeshComp(FString Key, bool bChangeMesh, FString NewMeshPath, int Index, FString Material);// 0x5eb995c
	void RemoveOutlineEffect(FString Key);// 0x79d4e9c
	void RemoveOptical3DUIActor();// 0x79d571c
	void Remove3DUIActor();// 0x56abae8
	void PreloadCharmActor();// 0x5b57154
	float PlayWeaponAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x6188f54
	int PlayWeaponActionSound(enum MovementType);// 0x79d4adc
	void PlayKillSound();// 0x79d500c
	void OnUpdateAimShow(bool IsAiming, bool bHasEquipOptical);// 0x79d53c8
	void LoadKillEffectParticle();// 0x79d5020
	void LoadKillEffect();// 0x79d52e4
	void GoToDefaultState();// 0x5da9390
	AnimationAsset* GetWeaponAnimAsset(enum WeaponState, enum WeaponType);// 0x79d4bc8
	Vector GetSocketLocation(FName SocketName);// 0x5efa990
	SkeletalMeshComponent* GetSkeletalComponentByKey(FString Key);// 0x4e15a60
	SkeletalMeshComponent* GetMainMesh();// 0x5880330
	WeaponDisplayActorComponent* GetDisplayComponent();// 0xa0dadc4
	enum GetCurrentWeaponType();// 0x6007dc4
	SkeletalMeshComponent* GetCharmMesh();// 0x79d4628
	DisplayWeaponCharmComponent* GetCharmComponent();// 0x79d45c0
	CameraComponent* GetCharmCamera();// 0x79d45f4
	void CleanParticle(FName Tag);// 0x5dca830
	void CleanAllOutlineEffect();// 0x520dae0
	void CleanAllMeshComp();// 0x5654720
	void CleanAllKillEffect();// 0x5724368
	void ChangeStaticMeshMaterial(float Value, int InStackCount);// 0x79d5034
	void ChangeParticleColorByQuality(int Quality);// 0x79d52f8
	void ChangeOptical3DUIActor(FString ActorPath, FString ComponentKey);// 0x6100460
	void ChangeMainMeshMaterialFromKill(float Value, int InStackCount);// 0x79d518c
	void ChangeMainMesh(FString MeshPath, FString[] Material, FString ExtraMaterial, bool IsAsynLoad);// 0x5e3533c
	void ChangeCharm(FString MeshPath, FString[] Material, FString AnimClassPath);// 0x79d465c
	void Change3DUIActor(FString ActorPath);// 0x600a954
	void AttachMeshComp(FName SubObjectName, FString MeshPath, FName SocketName, FString[] Material, FString ExtraMaterial, bool IsAsnyLoad);// 0x58ced94
	void AddWeaponOutlineEffect(int EffectType, float Time);// 0x79d4d44
	void AddParticle(FString Key, FString AssetPath, FName SocketName, FName Tag, Rotator Ro, Vector Ve);// 0x6079880
	void AddOutlineEffect(FString Key, int EffectType, float Time);// 0x5faa9b4
	void AddCharm(FString MeshPath, FString[] Material);// 0x6043d18

--------------------------------
Class: DisplayWeaponMeshComponent.SceneComponent.ActorComponent.Object
	SkeletalMeshComponent* MainSkeletalMesh;//[Offset: 0x258, Size: 0x8]
	TimelineComponent* OutlineTimeline;//[Offset: 0x260, Size: 0x8]
	TimelineComponent* AttachMeshTimeline;//[Offset: 0x268, Size: 0x8]
	TimelineComponent* OutlineWeaponTimeline;//[Offset: 0x270, Size: 0x8]
	<FString,SkeletalMeshComponent*> SkeletalMeshCompList;//[Offset: 0x278, Size: 0x50]
	<FString,SkeletalMeshComponent*> OutLineEffectComp;//[Offset: 0x2c8, Size: 0x50]
	CurveFloat* OutLineOpacity;//[Offset: 0x368, Size: 0x8]
	CurveFloat* AttachMeshOpacity;//[Offset: 0x370, Size: 0x8]
	void OnOutlineWeaponLerp(float DeltaTime);// 0x541addc
	void OnOutlineWeaponFinish();// 0x599deac
	void OnOutlineLerp(float DeltaTime);// 0x563dcd0
	void OnOutlineFinish();// 0x6010134
	void OnMeshOpacityLerp(float DeltaTime);// 0x55e54b8
	void OnMeshOpacityFinish();// 0x5e8d42c
	void CheckIsLoadComplete();// 0x7bc6a30

--------------------------------
Class: DisplayWeaponParticleComponent.SceneComponent.ActorComponent.Object
	FName ColorParamName;//[Offset: 0x258, Size: 0x8]
	<int,Color> QualityColorArray;//[Offset: 0x260, Size: 0x50]
	<FName,ParticleSystemComponent*> ParticleCompList;//[Offset: 0x2b0, Size: 0x50]

--------------------------------
Class: WeaponDisplayActorComponent.ActorComponent.Object
	delegate ComponentMove;//[Offset: 0xf8, Size: 0x10]
	delegate ComponentMoveEnd;//[Offset: 0x108, Size: 0x10]
	delegate AutoRotateEnd;//[Offset: 0x118, Size: 0x10]
	float MinPitch;//[Offset: 0x128, Size: 0x4]
	float MaxPitch;//[Offset: 0x12c, Size: 0x4]
	Actor* ControllWeaponActor;//[Offset: 0x130, Size: 0x8]
	SkeletalMeshComponent* ControllWeaponMesh;//[Offset: 0x138, Size: 0x8]
	bool SetParentActor(Actor* ParentWeaponActor);// 0x7f4c69c
	void SetMoveSensitivity(float _Sensitivity);// 0x7f4c420
	void SetMoveMinRotation(float _MaxPitch);// 0x5b6c398
	void SetMoveMaxRotation(float _MinPitch);// 0x5b6c45c
	void SetMoveLock(bool isLock);// 0x7f4c4e4
	bool SetMainMesh(SkeletalMeshComponent* _MainMesh);// 0x7f4c5a4
	void SetDefaultRotation(Rotator DefaultRotate);// 0x7f4c354
	void SetDefaultMeshRotation(Rotator DefaultMeshRotate);// 0x7f4c288
	bool SetAttachActor(Actor* WeaponActor, FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform);// 0x7f4c794
	void ComponentMoveEnd__DelegateSignature();// 0xa1d39f8
	void ComponentMove__DelegateSignature(Vector2D DeltaVector);// 0xa1d39f8
	void AutoRotateEnd__DelegateSignature();// 0xa1d39f8

--------------------------------
Class: DisplayWeapon3DUIComponent.SceneComponent.ActorComponent.Object
	Weapon3DUIActor* DynamicMatActor;//[Offset: 0x258, Size: 0x8]
	MatConfig[] DynamicMatConfigList;//[Offset: 0x260, Size: 0x10]
	LinearColor[] Weapon3DUIColorList;//[Offset: 0x270, Size: 0x10]

--------------------------------
Class: MatConfig
	MaterialInstanceDynamic*[] DynamicMatList;//[Offset: 0x0, Size: 0x10]
	FString[] DynamicMatParams;//[Offset: 0x10, Size: 0x10]
	bool bOnlyAimShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bOnlyNotEquipShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	MeshComponent* MeshComponent;//[Offset: 0x28, Size: 0x8]
	TextRenderComponent* TextRenderComponent;//[Offset: 0x30, Size: 0x8]
	WidgetComponent* WidgetComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x560, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x578, Size: 0x8]
	Font* Font;//[Offset: 0x580, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x588, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x589, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x58c, Size: 0x4]
	float XScale;//[Offset: 0x590, Size: 0x4]
	float YScale;//[Offset: 0x594, Size: 0x4]
	float WorldSize;//[Offset: 0x598, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x59c, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x5a0, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x5a4, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a8, Size: 0x1]
	void SetYScale(float Value);// 0x99bf6ec
	void SetXScale(float Value);// 0x99bf780
	void SetWorldSize(float Value);// 0x99bf530
	void SetVertSpacingAdjust(float Value);// 0x99bf5c4
	void SetVerticalAlignment(byte Value);// 0x99bf8a4
	void SetTextRenderColor(Color Value);// 0x99bf814
	void SetTextMaterial(MaterialInterface* Material);// 0x99bfa60
	void SetText(FString Value);// 0x99bfbf4
	void SetHorizSpacingAdjust(float Value);// 0x99bf658
	void SetHorizontalAlignment(byte Value);// 0x99bf938
	void SetFont(Font* Value);// 0x99bf9cc
	void K2_SetText(out const FText Value);// 0x99bfaf4
	Vector GetTextWorldSize();// 0x99bf40c
	Vector GetTextLocalSize();// 0x99bf49c

--------------------------------
Class: DisplayWeaponEffectComponent.SceneComponent.ActorComponent.Object
	WeaponFrameEffectData* CurrentEffectData;//[Offset: 0x268, Size: 0x8]
	SoftObjectPath[] EffectPaths;//[Offset: 0x270, Size: 0x10]
	<FString,ParticleSystemComponent*> EffectParticleCompMap;//[Offset: 0x280, Size: 0x50]

--------------------------------
Class: DisplayWeaponCharmComponent.SceneComponent.ActorComponent.Object
	Object* CharmTemplate;//[Offset: 0x258, Size: 0x28]
	DisplayCharmActor* CharmActor;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: DisplayCharmActor.Actor.Object
	SkeletalMeshComponent* MainSkeletalMesh;//[Offset: 0x270, Size: 0x8]
	CameraComponent* MainCamera;//[Offset: 0x278, Size: 0x8]
	Object* DefaultMesh;//[Offset: 0x280, Size: 0x28]
	Object* DefaultMaterial;//[Offset: 0x2a8, Size: 0x28]

--------------------------------
Class: WeaponAnimDataAsset.DataAsset.Object
	<enum,WeaponAnimAssetMap> WeaponAnimDataMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: WeaponAnimAssetMap
	<enum,AnimationAsset*> WeaponAnimAssetMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ArmoryWeaponAudioDataAsset.DataAsset.Object
	<enum,WeaponAudioMapData> WeaponAudioData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: WeaponAudioMapData
	<enum,AkAudioEvent*> ActionAudioMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: WeaponBulletChangeNum
	byte ColorNum1;//[Offset: 0x0, Size: 0x1]
	byte ColorNum2;//[Offset: 0x1, Size: 0x1]
	byte ColorNum3;//[Offset: 0x2, Size: 0x1]
	byte FlashNum;//[Offset: 0x3, Size: 0x1]
	int MaxNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DisplayWeaponSkinCfg
	SoftObjectPath WeaponFrameEffect;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: CharacterMontageDataMapAsset.DataAsset.Object
	<enum,CharacterMontageMap> MontageDataMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: CharacterMontageMap
	<enum,WeaponMontageMap> CharacterMontageMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: WeaponMontageMap
	<enum,AnimMontage*> WeaponMontageMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SelectScreenBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_in;//[Offset: 0x248, Size: 0x8]
	WidgetAnimation* Anim_out;//[Offset: 0x250, Size: 0x8]
	void PlayAniout();// 0x544e400
	void PlayAniin();// 0x7e2ad70
	float GetAnioutDuration();// 0x5191870

--------------------------------
Class: UIS_CurtainBase.SelectLegendWidgetBase.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_in;//[Offset: 0x5f0, Size: 0x8]
	WidgetAnimation* Ani_SelectFadeOut;//[Offset: 0x5f8, Size: 0x8]
	void PlaySelectFadeOut();// 0x5848d80
	void PlayAnimIn();// 0x7f0e474
	float GetSelectFadeOutDuration();// 0x52aa92c

--------------------------------
Class: BattleBannerMgrComp.ActorComponent.Object
	BannerData[] SimulateDefenderDatas;//[Offset: 0x108, Size: 0x10]
	BannerData[] SimulateKillerDatas;//[Offset: 0x118, Size: 0x10]
	ApexPlayerState* KillKingCache;//[Offset: 0x138, Size: 0x8]
	<enum,AniSequences> AniSequencesMap;//[Offset: 0x140, Size: 0x50]
	<enum,AniSequences> AniSequencesMap_Poor;//[Offset: 0x190, Size: 0x50]
	Vector2D HighGradeSize;//[Offset: 0x1e0, Size: 0x8]
	Vector2D LowGradeSize;//[Offset: 0x1e8, Size: 0x8]
	float CustomCullDistance;//[Offset: 0x1f0, Size: 0x4]
	Transform[] LotTrans;//[Offset: 0x1f8, Size: 0x10]
	ApexPlayerState*[] DefenderTeam;//[Offset: 0x208, Size: 0x10]
	ApexPlayerState* KillKing;//[Offset: 0x218, Size: 0x8]
	int ControlWidgetCompIndex;//[Offset: 0x220, Size: 0x4]
	BattleBannerInfo SeqInfo;//[Offset: 0x224, Size: 0x8]
	CryptoDrone* CurrentDrone;//[Offset: 0x230, Size: 0x8]
	ScreenBannerRoot*[] ActiveRoots;//[Offset: 0x240, Size: 0x10]
	bool bSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	GameStatisticsManager* GameStatisticsManager;//[Offset: 0x278, Size: 0x8]
	void PlaySeqIterate(int CurrentIndex);// 0x7b0be14
	void OnRep_SeqInfo();// 0x7b0c4e4
	void OnRep_KillKing();// 0x7b0c504
	void OnRep_DefenderTeam();// 0x7b0c518
	void OnRegisterBannerRoot(bool bRegister, ScreenBannerRoot* BannerRoot);// 0x58d8d64
	void OnReceiveTeamInfo(out const TeammateItemData[] TeammateDatas, byte TeamSyncType, int64 PlayerKey);// 0x7b0c52c
	void OnKillKingOccur(enum MessageType, Controller* Killer, Controller* Victim, int KillCount);// 0x7b0c2b8
	void OnDroneChange(CryptoDrone* Drone);// 0x7b0bfe8
	void InitDefender(ApexPlayerState*[] InDefenderTeam, ApexPlayerState* MVP);// 0x7b0c0e0
	enum GetCurrentState();// 0x7b0c0a4
	void ExecutePerSecond();// 0x7b0bed0

--------------------------------
Class: ScreenBannerRoot.Actor.Object
	float CustomCullDistance;//[Offset: 0x274, Size: 0x4]
	Actor* CurrentActor;//[Offset: 0x278, Size: 0x8]
	class Actor* StaticModuleClass;//[Offset: 0x288, Size: 0x28]
	class Actor* DynamicModuleClass;//[Offset: 0x2b0, Size: 0x28]
	void OnTargetClassLoad();// 0x7e1e86c
	void DelayToClearWidget();// 0x7e1e880

--------------------------------
Class: AniSequences
	<FString,AniSequence> SeqMap;//[Offset: 0x0, Size: 0x50]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AniSequence
	AniItem[] Anis;//[Offset: 0x0, Size: 0x10]
	float Duration;//[Offset: 0x10, Size: 0x4]
	int DataIndex;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AniItem
	class ThunderScreenItem* WidgetClass;//[Offset: 0x0, Size: 0x28]
	enum AniType;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ThunderScreenItem.UserWidget.Widget.Visual.Object
	ScreenWidgetComponent* ParentWidget;//[Offset: 0x248, Size: 0x8]
	void SubInit();// 0xa1d39f8
	void ScreentContruct();// 0xa1d39f8
	void ResetHook();// 0xa1d39f8
	void Reset();// 0xa1d39f8
	void PlayUpOutAniHook();// 0xa1d39f8
	void PlayUpOutAni();// 0xa1d39f8
	void PlayUpInAniHook();// 0xa1d39f8
	void PlayUpInAni();// 0xa1d39f8
	void PlayFlickerAniHook();// 0xa1d39f8
	void PlayFlickerAni();// 0xa1d39f8
	void PlayFadeOutAniHook();// 0xa1d39f8
	void PlayFadeOutAni();// 0xa1d39f8
	void PlayFadeInAniHook();// 0xa1d39f8
	void PlayFadeInAni();// 0xa1d39f8
	void PlayDownOutAniHook();// 0xa1d39f8
	void PlayDownOutAni();// 0xa1d39f8
	void PlayDownInAniHook();// 0xa1d39f8
	void PlayDownInAni();// 0xa1d39f8
	void Init(BannerData InBannerData);// 0xa1d39f8

--------------------------------
Class: ScreenWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	<FName,ThunderScreenItem*> WidgetClassInstanceMap;//[Offset: 0x6e8, Size: 0x50]
	ScreenControlBase* ScreenControlWidget;//[Offset: 0x790, Size: 0x8]
	StaticMeshComponent* Masks;//[Offset: 0x7b0, Size: 0x8]
	MaterialInstanceDynamic* MaskMaterials;//[Offset: 0x7b8, Size: 0x8]
	TimelineComponent* CurveTimeLine;//[Offset: 0x7c0, Size: 0x8]
	BattleBannerMgrComp* ControllComp;//[Offset: 0x7c8, Size: 0x8]
	int WidgetCompIndex;//[Offset: 0x7d0, Size: 0x4]
	float AniDuration;//[Offset: 0x7d4, Size: 0x4]
	CurveFloat* MaskCurve;//[Offset: 0x7d8, Size: 0x8]
	bool bShowCrypto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	BattleBannerActor* BattleBannerActor;//[Offset: 0x7e8, Size: 0x8]
	void UpdateData();// 0x7e1f6b0
	void ScreenSizeFallbackChanged(bool bShow);// 0x7e1f7e0
	void PlayMaskAni();// 0x7e1f69c
	void OnMaskCurveUpdate(float Output);// 0x7e1f724
	void OnClassLoaded();// 0x7e1f710
	enum GetCurrentState();// 0x7e1f6c4

--------------------------------
Class: ScreenControlBase.UserWidget.Widget.Visual.Object
	ScreenWidgetComponent* ParentWidget;//[Offset: 0x258, Size: 0x8]
	AniSequence CacheSeq;//[Offset: 0x268, Size: 0x18]
	ThunderScreenItem* CurrentScreen;//[Offset: 0x280, Size: 0x8]
	BannerData CurrentBannerData;//[Offset: 0x288, Size: 0x48]
	BattleBannerMgrComp* ControlComp;//[Offset: 0x2d0, Size: 0x8]
	bool DronePanelVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	void ShowChild(int Index);// 0xa1d39f8
	void ScreenSizeFallbackChanged(bool bScreenSizeFallback);// 0xa1d39f8
	void PlayAniSequence(int AniSeqIndex, int ControlWidgetCompIndex, AniSequence[] AniSeqs);// 0x7e1ec80
	void OnSwitchBannerToCollapsed(bool bCollapsed);// 0xa1d39f8
	void OnDroneStaticsChange(int TeamNum);// 0xa1d39f8
	void OnChangeDronePanelVisibility(bool bVisibility);// 0xa1d39f8
	void HideChild();// 0xa1d39f8
	void ClearChild();// 0xa1d39f8
	void ChangeCoverVisibility(bool bShow);// 0xa1d39f8
	int AddChild(UserWidget* NewWidget);// 0xa1d39f8

--------------------------------
Class: BattleBannerActor.Actor.Object
	ScreenBannerRoot* MyRoot;//[Offset: 0x278, Size: 0x8]
	bool bUseCryptoPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	ScreenWidgetComponent* Left;//[Offset: 0x288, Size: 0x8]
	StaticMeshComponent* LeftFontMask;//[Offset: 0x290, Size: 0x8]
	ScreenWidgetComponent* Middle;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MiddleFontMask;//[Offset: 0x2a0, Size: 0x8]
	ScreenWidgetComponent* Right;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent* RightFontMask;//[Offset: 0x2b0, Size: 0x8]
	StaticMeshComponent*[] Masks;//[Offset: 0x2b8, Size: 0x10]
	ScreenWidgetComponent*[] Widgets;//[Offset: 0x2c8, Size: 0x10]
	void OnCyptoChange(bool bIsCrypto);// 0x7b0b9d0

--------------------------------
Class: BattleBannerInfo
	int SeqIndex;//[Offset: 0x0, Size: 0x4]
	enum StateType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: CryptoDrone.SkillActorBase.DynamicMovementActor.Actor.Object
	float HP;//[Offset: 0x588, Size: 0x4]
	bool bIsInDroneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	bool bIsInRecall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 0x1]
	bool bIsWaitingEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 0x1]
	bool bIsInDyingBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58f, Size: 0x1]
	int InRangeEnemyTeamNum;//[Offset: 0x590, Size: 0x4]
	BinActor*[] TargetList_Bin;//[Offset: 0x598, Size: 0x10]
	ApexDoor*[] TargetList_Door;//[Offset: 0x5a8, Size: 0x10]
	ApexCharacterBase*[] TargetList_Player;//[Offset: 0x5b8, Size: 0x10]
	LootRoller*[] TargetList_LootRoller;//[Offset: 0x5c8, Size: 0x10]
	LootDrones*[] TargetList_LootDrones;//[Offset: 0x5d8, Size: 0x10]
	CausticDirtyBomb*[] TargetList_CausticBomb;//[Offset: 0x5e8, Size: 0x10]
	LaunchPad*[] TargetList_ALaunchPadActor;//[Offset: 0x5f8, Size: 0x10]
	SkillActorBase*[] TargetList_OtherSkillActor;//[Offset: 0x608, Size: 0x10]
	CarePackage*[] TargetList_CarePackage;//[Offset: 0x618, Size: 0x10]
	bool bOptBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	bool bOptDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1]
	bool bIsOptDoorOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62a, Size: 0x1]
	bool bOptSurveyBeacon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62b, Size: 0x1]
	bool bOptRespawnBeacon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	bool bOptCarePackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 0x1]
	ApexDoor* OptPtr_Door;//[Offset: 0x630, Size: 0x8]
	bool bPerkRocketEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	float PerkRocketRemainTime;//[Offset: 0x63c, Size: 0x4]
	bool bPerkPickupEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]
	bool bIsInPickingItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x641, Size: 0x1]
	bool bPerkInvisibleEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x642, Size: 0x1]
	bool bIsCurInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x643, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 0x1]
	bool bIsCurInDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 0x1]
	float MaxHP;//[Offset: 0x664, Size: 0x4]
	float ScanSphereRadius;//[Offset: 0x668, Size: 0x4]
	byte[] FindObjectTypes;//[Offset: 0x670, Size: 0x10]
	enum EffectID_Bin;//[Offset: 0x680, Size: 0x1]
	enum EffectID_Door;//[Offset: 0x681, Size: 0x1]
	enum EffectID_Player;//[Offset: 0x682, Size: 0x1]
	enum EffectID_LootRoller;//[Offset: 0x683, Size: 0x1]
	enum EffectID_LootDrones;//[Offset: 0x684, Size: 0x1]
	enum EffectID_SkillActor;//[Offset: 0x685, Size: 0x1]
	enum EffectID_SelfDrone;//[Offset: 0x686, Size: 0x1]
	enum EffectID_SelfCrypto;//[Offset: 0x687, Size: 0x1]
	float FindViewAngle;//[Offset: 0x688, Size: 0x4]
	byte FindBlockChannel;//[Offset: 0x68c, Size: 0x1]
	float ScanEnemyTeamRange;//[Offset: 0x690, Size: 0x4]
	int ServerCheckSpace;//[Offset: 0x694, Size: 0x4]
	class Actor[] TraceIgnoreActor;//[Offset: 0x698, Size: 0x10]
	int SpaceTimeRPC;//[Offset: 0x6a8, Size: 0x4]
	bool bIsFlyHorizon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 0x1]
	int FlyVerticalMode;//[Offset: 0x6b8, Size: 0x4]
	BinActor*[] TmpList_Bin;//[Offset: 0x6d0, Size: 0x10]
	ApexDoor*[] TmpList_Door;//[Offset: 0x6e0, Size: 0x10]
	ApexCharacterBase*[] TmpList_Player;//[Offset: 0x6f0, Size: 0x10]
	LootRoller*[] TmpList_LootRoller;//[Offset: 0x700, Size: 0x10]
	LootDrones*[] TmpList_LootDrones;//[Offset: 0x710, Size: 0x10]
	CausticDirtyBomb*[] TmpList_CausticBomb;//[Offset: 0x720, Size: 0x10]
	LaunchPad*[] TmpList_ALaunchPadActor;//[Offset: 0x730, Size: 0x10]
	SkillActorBase*[] TmpList_OtherSkillActor;//[Offset: 0x740, Size: 0x10]
	CarePackage*[] TmpList_CarePackage;//[Offset: 0x750, Size: 0x10]
	<int,ApexCharacterBase*> TriangleUIMap_Player;//[Offset: 0x760, Size: 0x50]
	ApexCharacter*[] EMP_RangePlayer;//[Offset: 0x7b0, Size: 0x10]
	float OptDist_Bin;//[Offset: 0x7c0, Size: 0x4]
	float OptDist_Door;//[Offset: 0x7c4, Size: 0x4]
	float OptDist_CarePackage;//[Offset: 0x7c8, Size: 0x4]
	float OptDist_TombBox;//[Offset: 0x7cc, Size: 0x4]
	float OptDist_SurveyBeacon;//[Offset: 0x7d0, Size: 0x4]
	float OptDist_RespawnBeacon;//[Offset: 0x7d4, Size: 0x4]
	float OptViewAngle;//[Offset: 0x7d8, Size: 0x4]
	BinActor* OptPtr_Bin;//[Offset: 0x7e0, Size: 0x8]
	CarePackage* OptPtr_CarePackage;//[Offset: 0x7e8, Size: 0x8]
	ApexRespawnBeacon* OptPtr_RespawnBeacon;//[Offset: 0x7f0, Size: 0x8]
	SurveyBeacon* OptPtr_SurveyBeacon;//[Offset: 0x7f8, Size: 0x8]
	float HUD_DistYellowPercent;//[Offset: 0x804, Size: 0x4]
	float HUD_TargetMaxDist;//[Offset: 0x808, Size: 0x4]
	byte TargetBlockChannel;//[Offset: 0x80c, Size: 0x1]
	float HUD_AltitudeSpeed;//[Offset: 0x810, Size: 0x4]
	float HUD_DroneHealthPercent;//[Offset: 0x814, Size: 0x4]
	float HUD_HealthPercent;//[Offset: 0x818, Size: 0x4]
	float HUD_ShieldTotalValue;//[Offset: 0x81c, Size: 0x4]
	float HUD_ShieldPercent;//[Offset: 0x820, Size: 0x4]
	float HUD_TargetDist;//[Offset: 0x824, Size: 0x4]
	float HUD_LeftPercent;//[Offset: 0x828, Size: 0x4]
	float HUD_Altitude;//[Offset: 0x82c, Size: 0x4]
	float HUD_Direction;//[Offset: 0x830, Size: 0x4]
	float HUD_DistToCrypto;//[Offset: 0x834, Size: 0x4]
	float HUD_SpeedPercent;//[Offset: 0x838, Size: 0x4]
	bool bShowBlink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1]
	bool bShowBlinkBig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83d, Size: 0x1]
	FName DroneMeshSocket;//[Offset: 0x840, Size: 0x8]
	float BeginFunctionalTime;//[Offset: 0x84c, Size: 0x4]
	float DroneRecallTime;//[Offset: 0x850, Size: 0x4]
	float DroneWaitEMPTime;//[Offset: 0x854, Size: 0x4]
	float DroneEMPRadius;//[Offset: 0x858, Size: 0x4]
	float DroneEMPDamage;//[Offset: 0x85c, Size: 0x4]
	float DroneEMPDamageForMirageDecoy;//[Offset: 0x860, Size: 0x4]
	float DroneEMPDamageShield;//[Offset: 0x864, Size: 0x4]
	float DroneEMPDamageDropShieldTime;//[Offset: 0x868, Size: 0x4]
	byte[] EmpOverlapObjectTypes;//[Offset: 0x870, Size: 0x10]
	FName EMPPlayerBuffName;//[Offset: 0x880, Size: 0x8]
	FName EMPAlertBuffName;//[Offset: 0x888, Size: 0x8]
	class Actor[] EMPCountSkillActor;//[Offset: 0x890, Size: 0x10]
	int Sound_EnemyDestroyed;//[Offset: 0x8a0, Size: 0x4]
	int Sound_EMPHitBy;//[Offset: 0x8a4, Size: 0x4]
	int Sound_EMPWarning;//[Offset: 0x8a8, Size: 0x4]
	int Sound_ElimMine;//[Offset: 0x8ac, Size: 0x4]
	int Sound_droneRecall;//[Offset: 0x8b0, Size: 0x4]
	int Sound_droneViewEnd;//[Offset: 0x8b4, Size: 0x4]
	int Sound_droneViewStart;//[Offset: 0x8b8, Size: 0x4]
	int Sound_DroneUseSurveyBeacon;//[Offset: 0x8bc, Size: 0x4]
	int Sound_TeamNum0;//[Offset: 0x8c0, Size: 0x4]
	int Sound_TeamNum1;//[Offset: 0x8c4, Size: 0x4]
	int Sound_TeamNum2;//[Offset: 0x8c8, Size: 0x4]
	int Sound_TeamNum3;//[Offset: 0x8cc, Size: 0x4]
	int Sound_TeamNum4;//[Offset: 0x8d0, Size: 0x4]
	AkAudioEvent* UseSurveyBeaconSoundPtr;//[Offset: 0x8d8, Size: 0x28]
	<uint64,bool> FindEnemyList;//[Offset: 0x950, Size: 0x50]
	bool bIsOwnerClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 0x1]
	int BannerPing0;//[Offset: 0x9b4, Size: 0x4]
	int BannerPing1;//[Offset: 0x9b8, Size: 0x4]
	int BannerPing2;//[Offset: 0x9bc, Size: 0x4]
	int BannerPing3;//[Offset: 0x9c0, Size: 0x4]
	int BannerPingMore;//[Offset: 0x9c4, Size: 0x4]
	float AutoOpenDoor_MinSpeed;//[Offset: 0x9cc, Size: 0x4]
	float AutoOpenDoor_MaxAngle;//[Offset: 0x9d0, Size: 0x4]
	int PerkDyingBombID;//[Offset: 0x9d8, Size: 0x4]
	float PerkDyingBombDelay;//[Offset: 0x9dc, Size: 0x4]
	float PerkDyingBombRadius;//[Offset: 0x9e0, Size: 0x4]
	float PerkDyingBombDamage;//[Offset: 0x9e4, Size: 0x4]
	FName PerkDyingBombBuffName;//[Offset: 0x9e8, Size: 0x8]
	LinearColor PerkDyingBombTipColor;//[Offset: 0x9f0, Size: 0x10]
	int PerkRocketBombID;//[Offset: 0xa08, Size: 0x4]
	float PerkRocketCoolDownTime;//[Offset: 0xa10, Size: 0x4]
	int PerkPickupItemID;//[Offset: 0xa14, Size: 0x4]
	float PerkPickDelayTime;//[Offset: 0xa18, Size: 0x4]
	float PerkMaxPickRange;//[Offset: 0xa1c, Size: 0x4]
	LinearColor PerkPickupItemTipColor;//[Offset: 0xa20, Size: 0x10]
	PickUpReqData PickUpReqData;//[Offset: 0xa38, Size: 0xa8]
	float FlyUpValue_C;//[Offset: 0xae0, Size: 0x4]
	int PerkScanHealthID;//[Offset: 0xae4, Size: 0x4]
	FName PerkScanHealthCountDownBuffName;//[Offset: 0xae8, Size: 0x8]
	FName ShowEnemyHealthBuffName;//[Offset: 0xaf0, Size: 0x8]
	float SpyTimeSeconds;//[Offset: 0xaf8, Size: 0x4]
	int PerkInvisibleID;//[Offset: 0xafc, Size: 0x4]
	float InvisibleValue;//[Offset: 0xb00, Size: 0x4]
	SkeletalMeshComponent* DroneMesh;//[Offset: 0xb30, Size: 0x8]
	<ApexCharacterBase*,float> ShowEnemyMap;//[Offset: 0xb38, Size: 0x50]
	<ApexCharacterBase*,bool> StorageUIMap;//[Offset: 0xb88, Size: 0x50]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7b9f95c
	bool StuckInto(Actor* InActor);// 0x7b9ea80
	bool ServerStartEMP();// 0x7b9f748
	void ServerOpt_TombBox();// 0xa111f00
	void ServerOpt_SurveyBeacon_Inner();// 0xa111eac
	void ServerOpt_SurveyBeacon();// 0x7b9ebd8
	void ServerOpt_RespawnBeacon();// 0xa111ec8
	void ServerOpt_Door(bool bOpen);// 0x7b9f2d8
	void ServerOpt_CarePackage();// 0xa111ee4
	void ServerOpt_Bin();// 0xa111f1c
	void Server_Recall();// 0xa111e90
	void Server_PickupItem(PickUpReqData Data);// 0x7b9ec24
	void Server_NotifyTeamNumSound();// 0xa111e58
	void Server_FireRocketBomb();// 0xa111e74
	void RecallFunction();// 0x7b9f794
	void RealPickupItem();// 0x7b9fab8
	void OnRep_RocketRemainTime();// 0x7b9f514
	void OnRep_Player();// 0x5c0d2c0
	void OnRep_OtherSkillActor();// 0x7b9f570
	void OnRep_LootRoller();// 0x7b9f5c0
	void OnRep_LootDrones();// 0x7b9f5ac
	void OnRep_IsWaitingEMP();// 0x5e7591c
	void OnRep_IsInPickingItem();// 0x7b9f500
	void OnRep_IsInDyingBomb();// 0x7b9f734
	void OnRep_IsInDroneMode();// 0x613c840
	void OnRep_IsCurInvisible();// 0x7b9f4ec
	void OnRep_InRangeEnemyTeamNum();// 0x5fdedb8
	void OnRep_Door();// 0x5e1e990
	void OnRep_CausticBomb();// 0x7b9f598
	void OnRep_CarePackage();// 0x7b9f55c
	void OnRep_Bin();// 0x7b9f5d4
	void OnRep_ALaunchPadActor();// 0x7b9f584
	void OnReloadWeaponDone(int WeaponID);// 0x7b9f85c
	void OnGameModeFinish();// 0x7b9fae0
	bool NotifyTeamNumSound();// 0x7b9ebec
	void NotifyPickupRecoverBannerOnClient(uint32 RecoverBannerPlayerKey);// 0x7b9e9fc
	bool IsOptDoorTreasureOpened();// 0x7b9faf4
	bool IsOptDoorTreasure();// 0xa111fa8
	bool IsOptDoorHasCloseOption();// 0xa111fd4
	bool IsEMPEnergyReady();// 0x7b9e9c4
	Vector GetTrianglePos(int Index);// 0x7b9f364
	int GetPingBannerID();// 0x7b9f8d8
	Vector GetDronePlayerPos();// 0x7b9eba0
	void EMPFunction();// 0x7b9f780
	void DyingBombDestroy();// 0x7b9facc
	void ClientStartingRecall();// 0xa111f8c
	void ClientStartingDyingBomb();// 0xa111f70
	void ClientPickingItemEffect(PickUpWrapperActor* PickupActor, Vector WorldPos);// 0x7b9f5e8
	void ClientLaunchRocket();// 0xa111f54
	void ClientBeginDestroy(bool bIsDamagedDestroy);// 0x7b9f6a8
	bool CanStuckInto(Actor* InActor);// 0x7b9eb10
	void Broadcast_OnEmpActivate();// 0xa111f38
	void BP_PostEnemyTriangleSound();// 0xa1d39f8
	void BP_PickingItemEffect(PickUpWrapperActor* PickupActor, Vector Pos);// 0xa1d39f8
	void BP_OnStartingRecall();// 0xa1d39f8
	void BP_OnStartingDyingBomb();// 0xa1d39f8
	void BP_OnEmpActivate();// 0xa1d39f8
	void BP_OnDestroy(bool bIsDamagedDestroy);// 0xa1d39f8
	void BP_OnClientStartingEMP(bool bIsStartingEMP);// 0xa1d39f8
	void BP_OnChangePickingItem();// 0xa1d39f8
	void BP_OnChangeIntoDroneDS(bool bIsInto);// 0xa1d39f8
	void BP_OnChangeIntoDrone(bool bIsInto);// 0xa1d39f8
	void BP_CryptoChangeInvisible();// 0xa111e3c
	void BP_ClientStartLaunchRocket();// 0xa1d39f8
	void BeginFunctional();// 0x7b9f7a8

--------------------------------
Class: LootRoller.DynamicMovementActor.Actor.Object
	enum LootType;//[Offset: 0x300, Size: 0x1]
	AkComponent* AkComponent;//[Offset: 0x340, Size: 0x8]
	PrimitiveComponent* MeleeAttackCollision;//[Offset: 0x348, Size: 0x8]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool bIsAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	float OverlapImpulseValue;//[Offset: 0x354, Size: 0x4]
	bool bIsImpactGroundAkEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	float Health;//[Offset: 0x35c, Size: 0x4]
	float AttachHealth;//[Offset: 0x360, Size: 0x4]
	float DetachHealth;//[Offset: 0x364, Size: 0x4]
	ParticleSystem* RollerDestroyParticle;//[Offset: 0x368, Size: 0x8]
	FName DestroyColorParamName;//[Offset: 0x370, Size: 0x8]
	float DetachDeBounceTime;//[Offset: 0x378, Size: 0x4]
	Vector AttachLocationOffset;//[Offset: 0x37c, Size: 0xc]
	float FallMaxSpeed;//[Offset: 0x388, Size: 0x4]
	float RandomMaxYaw;//[Offset: 0x38c, Size: 0x4]
	float RandomMaxPitch;//[Offset: 0x390, Size: 0x4]
	bool bShouldDisappearWhenHitGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	float AliveTimeAfterHitGround;//[Offset: 0x398, Size: 0x4]
	bool bIsCyclesTier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool bIsRandomTier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]
	float CurrentTierEndTime;//[Offset: 0x3a0, Size: 0x4]
	LootRollerTierData[] LootRollerTierDataArray;//[Offset: 0x3a8, Size: 0x10]
	int SpecialRollerItemID;//[Offset: 0x3b8, Size: 0x4]
	bool bSelfRandomSpecialRoller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	int SelfRandomSpecialRollerRate;//[Offset: 0x3c0, Size: 0x4]
	float MinAdditionalSpeed;//[Offset: 0x3c4, Size: 0x4]
	float MaxAdditionalSpeed;//[Offset: 0x3c8, Size: 0x4]
	Vector AdditionalLocation;//[Offset: 0x3cc, Size: 0xc]
	bool bCanSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	AkAudioEvent* ImpactAkEvent;//[Offset: 0x3e0, Size: 0x8]
	AkAudioEvent* BombAkEvent;//[Offset: 0x3e8, Size: 0x8]
	AkAudioEvent* StartRollAkEvent;//[Offset: 0x3f0, Size: 0x8]
	AkAudioEvent* StopRollAkEvent;//[Offset: 0x3f8, Size: 0x8]
	float CheckRollSpeedInterval;//[Offset: 0x404, Size: 0x4]
	MaterialInterface* NormalEffectMaterial;//[Offset: 0x410, Size: 0x8]
	MaterialInterface* SpecialEffectMaterial;//[Offset: 0x418, Size: 0x8]
	MaterialInstanceDynamic* DynamicEffectMaterial;//[Offset: 0x420, Size: 0x8]
	FName ColorParamName;//[Offset: 0x428, Size: 0x8]
	FName RandomSlotParamName;//[Offset: 0x430, Size: 0x8]
	bool bAddForceOnAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	Vector AddForceVector;//[Offset: 0x43c, Size: 0xc]
	DynamicMovementComponent_Projetile* Projectile;//[Offset: 0x448, Size: 0x8]
	int CurrentTierIndex;//[Offset: 0x450, Size: 0x4]
	float DetachTime;//[Offset: 0x454, Size: 0x4]
	bool bIsSpecialRoller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool bActiveBlueprintPingType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x460, Size: 0x8]
	ActivityDynamicMaterialComponent* DynamicMaterialComp;//[Offset: 0x468, Size: 0x8]
	bool bIsSkipReceivePhysicState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	bool bIsCustomTickRigidBodyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 0x1]
	float LinearVelocityCoefficient;//[Offset: 0x4b0, Size: 0x4]
	float AngularVelocityCoefficient;//[Offset: 0x4b4, Size: 0x4]
	float PositionLerp;//[Offset: 0x4b8, Size: 0x4]
	float AngleLerp;//[Offset: 0x4bc, Size: 0x4]
	float MaxLinDiffSize;//[Offset: 0x4c0, Size: 0x4]
	float MinLinDiffSize;//[Offset: 0x4c4, Size: 0x4]
	RigidBodyState TargetRigidBodyState;//[Offset: 0x4d0, Size: 0x40]
	void TickOverlapAddForce();// 0xa145140
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7d174d8
	void SetupLootDronesFallState(Vector ForwardVector, float Speed);// 0x7d1712c
	void SetDetachTime(float InDetachTime);// 0x7d16ac4
	void RPCMulticastPostTakeDamage(Actor* Victim, float Damage, int DamageType, Pawn* Attacker);// 0x7d1726c
	void RPCMulticastLootRollerKilled();// 0xa14515c
	void RandomTierIndex();// 0x7d17924
	void OnRepTierIndex();// 0x4de134c
	void OnRepIsSpecialRoller();// 0x501a83c
	void OnRep_IsAttached();// 0x530163c
	void OnProjectileStop(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x7d17734
	void OnLootRollerEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x7d16b88
	void OnLootRollerBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7d16db4
	void LootRollerKilled(Controller* Killer);// 0x7d17938
	int GetBlueprintPingType();// 0xa145104

--------------------------------
Class: LootRollerTierData
	int RandomWeight;//[Offset: 0x0, Size: 0x4]
	float MinTime;//[Offset: 0xc, Size: 0x4]
	float MaxTime;//[Offset: 0x10, Size: 0x4]
	Color EffectColor;//[Offset: 0x14, Size: 0x4]
	int LootSpawnCount;//[Offset: 0x18, Size: 0x4]
	FName[] LootTableNames;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 0xc]
	Quat Quaternion;//[Offset: 0x10, Size: 0x10]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 0xc]
	byte Flags;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: LootDrones.Actor.Object
	delegate OnBrokenLootDrones;//[Offset: 0x2e0, Size: 0x10]
	LootDronesMovementComponent* LootDronesMovementComponent;//[Offset: 0x2f0, Size: 0x8]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x2f8, Size: 0x8]
	StaticMeshComponent* LootDronesMesh;//[Offset: 0x300, Size: 0x8]
	float Health;//[Offset: 0x308, Size: 0x4]
	float DetachFadeoutTime;//[Offset: 0x30c, Size: 0x4]
	TimerHandle DetachFadeoutTimerHandle;//[Offset: 0x310, Size: 0x8]
	Vector AddForceVolume;//[Offset: 0x318, Size: 0xc]
	float AngularVelocityScale;//[Offset: 0x324, Size: 0x4]
	Vector AddAngularVelocityVolume;//[Offset: 0x328, Size: 0xc]
	float BombDamage;//[Offset: 0x334, Size: 0x4]
	float Radius;//[Offset: 0x338, Size: 0x4]
	class Actor* AttachableClass;//[Offset: 0x340, Size: 0x8]
	ParticleSystem* DronesDestroyParticle;//[Offset: 0x348, Size: 0x8]
	Transform DronesDestroyParticleTrans;//[Offset: 0x350, Size: 0x30]
	ParticleSystem* DronesHitParticle;//[Offset: 0x380, Size: 0x8]
	Transform DronesHitParticleTrans;//[Offset: 0x390, Size: 0x30]
	ParticleSystem* NormalTailingParticle;//[Offset: 0x3c0, Size: 0x8]
	Transform NormalTailingParticleTrans;//[Offset: 0x3d0, Size: 0x30]
	ParticleSystem* FallTailingParticle;//[Offset: 0x400, Size: 0x8]
	Transform FallTailingParticleTrans;//[Offset: 0x410, Size: 0x30]
	StaticMesh* PanicFireMesh;//[Offset: 0x440, Size: 0x8]
	Transform PanicFireMeshTrans;//[Offset: 0x450, Size: 0x30]
	ParticleSystem* DisappearParticle;//[Offset: 0x480, Size: 0x8]
	Transform DisappearParticleTrans;//[Offset: 0x490, Size: 0x30]
	ParticleSystemComponent* TailingParticleComponent;//[Offset: 0x4c0, Size: 0x8]
	StaticMeshComponent* PanicFireMeshComponent;//[Offset: 0x4c8, Size: 0x8]
	float DisappearTime;//[Offset: 0x4d0, Size: 0x4]
	FName FadeParamName;//[Offset: 0x4d4, Size: 0x8]
	MaterialInstanceDynamic* FadeoutMaterialInstanceDynamic;//[Offset: 0x4e0, Size: 0x8]
	class Actor[] ImpactIgnoreActorClass;//[Offset: 0x4e8, Size: 0x10]
	int AttackLootDronesAudioID;//[Offset: 0x4f8, Size: 0x4]
	AkAudioEvent* HitAkEvent;//[Offset: 0x500, Size: 0x8]
	AkAudioEvent* ImpactAkEvent;//[Offset: 0x508, Size: 0x8]
	AkAudioEvent* DropAkEvent;//[Offset: 0x510, Size: 0x8]
	AkAudioEvent* FlyingAkEvent;//[Offset: 0x518, Size: 0x8]
	FName FlyingAkEventParam;//[Offset: 0x520, Size: 0x8]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x548, Size: 0x8]
	ActivityDynamicMaterialComponent* DynamicMaterialComp;//[Offset: 0x550, Size: 0x8]
	bool bIsSkipReceivePhysicState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7d148a0
	void SetPathIndex(int PathIndex);// 0x7d14488
	void SetPathActor(SplinePathActor* PathActor);// 0x7d14374
	void SetLootDroneIndex(int InIndex);// 0x7d142b8
	void RPCMulticastPostTakeDamage(Actor* Victim, float Damage, int DamageType, Pawn* Attacker);// 0x7d14634
	void RPCMulticastOnDronesImpact(Vector HitLocation);// 0x7d14544
	void RPCMulticastLootDronesFall();// 0xa145070
	void RPCMulticastFadeoutDisappear();// 0xa145054
	void OnNotifyDetachAttachment(Controller* Killer);// 0x7d14b94
	void OnBrokenLootDrones__DelegateSignature(LootDrones* Target, Controller* Killer);// 0xa1d39f8
	void LootDronesKilled(float DamageAmount, Actor* Attacker, Controller* EventInstigator);// 0x7d14c50
	bool IsFinalHitLootDrones();// 0x7d14b30
	int GetAttachmentColorIndex();// 0x7d14afc

--------------------------------
Class: LootDronesMovementComponent.SplinePathMovementComponent.MovementComponent.ActorComponent.Object
	float FlightSpeedMax;//[Offset: 0x16c, Size: 0x4]
	float RollAngleMax;//[Offset: 0x170, Size: 0x4]
	float FlightAcceleration;//[Offset: 0x174, Size: 0x4]
	float LookAheadDistance;//[Offset: 0x178, Size: 0x4]
	float PanicRollAngleMax;//[Offset: 0x17c, Size: 0x4]
	float PanicFlightSpeedMax;//[Offset: 0x180, Size: 0x4]
	float PanicDuration;//[Offset: 0x184, Size: 0x4]
	int SplinePathIndex;//[Offset: 0x188, Size: 0x4]
	class SplinePathActor* SplinePathActorClassPtr;//[Offset: 0x190, Size: 0x28]
	SplinePathActor* LootDronesPathActor;//[Offset: 0x1b8, Size: 0x8]
	SplinePathActor* LootDronesPathActorWithRep;//[Offset: 0x1c0, Size: 0x8]
	bool bEnableMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bIsPanic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	float PanicEndTime;//[Offset: 0x1cc, Size: 0x4]
	float NormalInterval;//[Offset: 0x1d0, Size: 0x4]
	float PanicInterval;//[Offset: 0x1d4, Size: 0x4]
	void UpdateMoveSpeed(float DeltaTime);// 0x7d15da8
	void SetPathActor(SplinePathActor* PathActor);// 0x7d15b80
	void SetEnableMove(bool bEnable);// 0x7d15ca4
	void SetDronesPanic();// 0x7d15d68
	void OnRepSplinePathIndex();// 0x7d15d90
	void OnRepIsPanic();// 0x5e648fc
	void OnRep_LootDronesPathActorWithRep();// 0x7d15d7c
	void OnAsyncLoadingSplinePathClassFinished();// 0x7d15c90

--------------------------------
Class: SplinePathMovementComponent.MovementComponent.ActorComponent.Object
	float MaxLerpDistance;//[Offset: 0x134, Size: 0x4]
	float TotalLerpTime;//[Offset: 0x138, Size: 0x4]
	float UpdateNetMoveDistanceInterval;//[Offset: 0x13c, Size: 0x4]
	float CurrentMoveSpeed;//[Offset: 0x140, Size: 0x4]
	bool bRotateAlongSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	float LeftLerpDistance;//[Offset: 0x148, Size: 0x4]
	float LerpDistancePreSecond;//[Offset: 0x14c, Size: 0x4]
	float PreUpdateNetMoveDistanceTime;//[Offset: 0x150, Size: 0x4]
	float CurrentMoveDistance;//[Offset: 0x154, Size: 0x4]
	float NetMoveDistance;//[Offset: 0x158, Size: 0x4]
	SplineComponent* SplineComponent;//[Offset: 0x160, Size: 0x8]
	void OnRepNetMoveDistance();// 0xa17ae34
	float GetCurrentMoveSpeed();// 0x7e77c34
	float GetCurrentMoveDistance();// 0x7e77bf8

--------------------------------
Class: CausticDirtyBomb.CausticProjectile.SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	float DirtyBombHeight;//[Offset: 0x970, Size: 0x4]
	float DirtyBombBottomHeight;//[Offset: 0x974, Size: 0x4]
	bool bCanTriggerByTeammateShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 0x1]
	bool bCanDestroyByTeammateShootBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x979, Size: 0x1]
	TrackerData ActiveTrackerData;//[Offset: 0x97c, Size: 0x18]
	class Object[] StopMoveCompMovementBaseArray;//[Offset: 0x998, Size: 0x10]
	byte ChangeToObjTypeWhenDeployed;//[Offset: 0x9a8, Size: 0x1]
	bool bAutoPingOnDeploy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 0x1]
	float AntiCheatRecycleDistance;//[Offset: 0x9ac, Size: 0x4]
	SkillActorHealthComponent* HealthComp;//[Offset: 0x9b0, Size: 0x8]
	float DestroyStopFunctionTime;//[Offset: 0x9b8, Size: 0x4]
	CausticDirtyBombStatus StatusData;//[Offset: 0x9c0, Size: 0xb8]
	float ThrowPowerScale;//[Offset: 0xa78, Size: 0x4]
	float DeployTime;//[Offset: 0xa7c, Size: 0x4]
	enum BombDestroyStage;//[Offset: 0xa81, Size: 0x1]
	void TriggerExternalEvent(enum ExternalEvent);// 0x7b4d010
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xa108f04
	bool ShouldTurnOnDynMoveComp();// 0x7b4cb8c
	void SetThrowPowerScale(float InThrowPowerScale);// 0x7b4caa8
	void SetDeployTime(float InDeployTime);// 0x7b4c9d8
	void ServerNotifyDestroyFromDeploy();// 0xa108ee8
	void RemoveAutoPing();// 0x7b4d0f4
	void OnRep_ThrowPowerScale();// 0x7b4cb78
	void OnRep_BombDestroyStage();// 0x5f9773c
	void OnDynamicStopSimulating(out const HitResult HitResult, bool bServer, Actor* OwnerActor);// 0x58c3868
	void OnDynamicBounceLimitReached();// 0x7b4ce48
	void OnCharacterRespawn(int RescuerKey, int VictimKey, enum RespawnType);// 0xa108cfc
	void OnBinActorOpen(Character* OpenChar, Actor* BinActor);// 0x7b4cce8
	void NotifyTrackerManagerDirtyBombActived();// 0x7b4ce90
	void NotifyRecycle();// 0x7b4d0e0
	static void NotifyLuaDirtyBombUpdate(Object* Context, int Current, int Max);// 0x578a058
	Vector GetToxicSmokeSize(int PhaseIndex, int ActionIndex);// 0x7b4cea4
	float GetRecyclePriority();// 0x7b4ce5c
	void DoRecycle();// 0x61d61c0
	void DelayStopFunction();// 0x7b4c9c4
	void BP_OnBombDestroyStageChanged(enum Stage);// 0xa1d39f8
	void AddPingOnDeploy();// 0x7b4d124

--------------------------------
Class: CausticProjectile.SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	enum LastApexSkillEvent;//[Offset: 0x8d1, Size: 0x1]
	enum[] ApexSkillEventArray;//[Offset: 0x8d8, Size: 0x10]
	Vector SavedAimingLocation;//[Offset: 0x8e8, Size: 0xc]
	DebugDrawData DebugDrawData;//[Offset: 0x908, Size: 0x48]
	void OnUpdateLastApexSkillEvent(enum inApexSkillevent);// 0xa10a7a4
	void OnRep_LastApexSkillEvent(enum PrevApexSkillEvent);// 0xa10a6cc

--------------------------------
Class: SkillProjectileBase.UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bNeedSkillCooldownWhenFellOutOfWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]
	bool DrawPredictionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 0x1]
	bool AutonomousNeedDrawPredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64a, Size: 0x1]
	bool EnablePredictionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64b, Size: 0x1]
	bool EnablePredictionLineForFpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1]
	bool EnablePredictionLineForTpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 0x1]
	bool PredictionLineSplineAlwaysFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64e, Size: 0x1]
	GrenadePredictLine* PredictionLine;//[Offset: 0x650, Size: 0x8]
	StaticMesh* PredictionLineMesh;//[Offset: 0x658, Size: 0x8]
	ParticleSystem* PredictionLineTargetParticle;//[Offset: 0x660, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInst;//[Offset: 0x668, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInst;//[Offset: 0x670, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInstTPP;//[Offset: 0x678, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInstTPP;//[Offset: 0x680, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInst;//[Offset: 0x688, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInstTPP;//[Offset: 0x690, Size: 0x8]
	SkillPredictionLineConfigData SkillPredictionLineConfigData;//[Offset: 0x698, Size: 0x238]
	bool bShouldIgnoreCollsionWithOwner_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 0x1]
	void TickPredictLine(float DeltaSeconds);// 0x7e6bae4
	void SetDrawPredictionLine(bool InDrawPredictionLine);// 0x579d010
	bool RequirePredictionLine();// 0xa177ad8
	void InitPredictLineRes();// 0x7e6bad0
	GrenadePredictLine* GetPreditionLine();// 0x7e6ba9c
	bool GetDrawPredictionLine();// 0x7e6ba5c
	void ClearPreditionLine();// 0xa177abc
	bool CheckEnablePredicationLineByCameraMode(ApexCharacter* OwnerCharacter);// 0x7e6bbb4
	void BP_UpdateProjectileMesh();// 0xa177aa0
	void BP_TickPredictLine(float DeltaSeconds);// 0xa1d39f8

--------------------------------
Class: UAEProjectile.SkillActorBase.DynamicMovementActor.Actor.Object
	delegate OnStartFly;//[Offset: 0x560, Size: 0x10]
	bool HasLocalStartFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	ServerStartFlyInfo ServerStartFlyInfo;//[Offset: 0x574, Size: 0x40]
	byte ProjectileThrowMode;//[Offset: 0x5b4, Size: 0x1]
	bool IsSpawnFromCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 0x1]
	float ThrowPitchLimit;//[Offset: 0x5b8, Size: 0x4]
	bool bNetRelevantUseDist2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	int ItemID;//[Offset: 0x5c0, Size: 0x4]
	int ItemType;//[Offset: 0x5c4, Size: 0x4]
	Controller* InstigatorController;//[Offset: 0x5c8, Size: 0x8]
	bool bDestroySelfWhenSkillFinishAndNotFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	ProjAnimationComponent* ProjAnimationComponent;//[Offset: 0x5d8, Size: 0x8]
	NativeMigrationData NativeMigrationData;//[Offset: 0x5e0, Size: 0x2]
	float AdjustLocationMinDiff;//[Offset: 0x5e4, Size: 0x4]
	float ProjectileFindFloorCheckHalfHeight;//[Offset: 0x5e8, Size: 0x4]
	bool HasBeenThrowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 0x1]
	bool HasStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 0x1]
	bool HasBounced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ee, Size: 0x1]
	float StartFlyTime;//[Offset: 0x5f0, Size: 0x4]
	float AutomousLaunchDataValidDistanceSquared;//[Offset: 0x5f4, Size: 0x4]
	float DSWaitForThrowGrenadeTime;//[Offset: 0x5f8, Size: 0x4]
	Vector InitLocationBP;//[Offset: 0x5fc, Size: 0xc]
	Rotator InitRotationBP;//[Offset: 0x608, Size: 0xc]
	Vector InitVelocityBP;//[Offset: 0x614, Size: 0xc]
	void WorkAsBuffApplierEvent(out const FString BuffName, Pawn* BuffTarget);// 0x7ebecec
	void UnbindEvents();// 0x7ebe7e0
	void SyncLocationAndRotationWithServer();// 0x7ebe7cc
	void SwitchThrowMode(byte ThrowMode);// 0x7ebec14
	void StartFly(const Vector InitLocation, const Rotator InitRotation, const Vector InitVelocity, bool ServerCanStartFly);// 0xa183784
	void SetProjectileThrowMode(byte NewProjectileThrowMode);// 0x7ebef0c
	void SetAnimationState(byte EventType);// 0x52edf0c
	void ServerStartFly(const Vector InitLocation, const Rotator InitRotation, const Vector InitVelocity);// 0xa18358c
	void ReportThrowingFlow(out const Vector AuthLocation);// 0x7ebe808
	void OnServerStartFlyInfoRecivedBP();// 0xa1d39f8
	void OnServerStartFlyInfoRecived();// 0xa1833cc
	void OnRep_ServerStartFlyInfo(ServerStartFlyInfo LastServerStartFlyInfo);// 0x5199a00
	void OnReceiveSkillCustomEvent(byte SkillEvent, Actor* SkillOwner);// 0xa1833e8
	bool IsOwnerInFPPMode();// 0x7ebebdc
	bool IsOwnerAutomous();// 0x7ebee98
	bool HasStartFly(bool IsLocal);// 0xa1832c8
	float GetRemainingEffectTime();// 0xa183550
	byte GetProjectileThrowMode();// 0x7ebeed0
	Vector GetProjectileMeshLaunchVelocity(out float Time);// 0x7ebeaf0
	Vector GetProjectileLaunchVelocity();// 0x7ebea1c
	Vector GetProjectileLaunchPosition();// 0x7ebea54
	HitResult GetProjectileHitLocation();// 0x7ebea8c
	bool GetPredictProjectilePath(out PredictProjectilePathResult PredictResult);// 0x7ebe8e4
	Vector GetCustomClientProjectileStartPosition();// 0xa183288
	float GetCurrentThrowSpeed();// 0xa1d39f8
	float GetCurrentThrowPitchOffset();// 0xa1d39f8
	void BindEvents();// 0x7ebe7f4
	void AlignToSurface();// 0x58835a4

--------------------------------
Class: DebugDrawData
	DebugLine[] ServerLineArray;//[Offset: 0x0, Size: 0x10]
	DebugLine[] LocalLineArray;//[Offset: 0x10, Size: 0x10]
	DebugSphere[] ServerSphereArray;//[Offset: 0x20, Size: 0x10]
	DebugSphere[] LocalSphereArray;//[Offset: 0x30, Size: 0x10]
	float DistanceLimit;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: DebugLine
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector EndPos;//[Offset: 0xc, Size: 0xc]
	Color Color;//[Offset: 0x18, Size: 0x4]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DebugSphere
	Vector CenterPos;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	int Segments;//[Offset: 0x10, Size: 0x4]
	Color Color;//[Offset: 0x14, Size: 0x4]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ServerStartFlyInfo
	Vector InitLocation;//[Offset: 0x0, Size: 0xc]
	Rotator InitRotation;//[Offset: 0xc, Size: 0xc]
	Vector InitVelocity;//[Offset: 0x18, Size: 0xc]
	Vector FinishLocation;//[Offset: 0x24, Size: 0xc]
	Rotator FinishRotation;//[Offset: 0x30, Size: 0xc]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool HasLaunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	HitResult HitInfo;//[Offset: 0x270, Size: 0x88]
	Actor* OwnerProjectile;//[Offset: 0x2f8, Size: 0x8]
	bool UseLocalRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bClearSplineMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	bool bDestroyAfterClearSplineMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 0x1]
	SplineMeshComponent*[] SplineMeshArray;//[Offset: 0x308, Size: 0x10]
	SkillActorCompInstPool SplineMeshInstPool;//[Offset: 0x318, Size: 0x38]
	PredictLineRuntimeEffectConfig RuntimeEffectConfig;//[Offset: 0x350, Size: 0x58]
	int MaxSplineMeshNumForOneMesh;//[Offset: 0x3a8, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	ParticleSystemComponent* PredictTargetParticle;//[Offset: 0x3b0, Size: 0x8]
	ParticleSystemComponent* PredictTargetAreaParticle;//[Offset: 0x3b8, Size: 0x8]
	SplineComponent* SplineComp;//[Offset: 0x3c0, Size: 0x8]
	Vector HighThrowOffset;//[Offset: 0x3c8, Size: 0xc]
	Vector LowThrowOffset;//[Offset: 0x3d4, Size: 0xc]
	byte ThrowMode;//[Offset: 0x3e0, Size: 0x1]
	float PredictLineVelocityScale;//[Offset: 0x3e4, Size: 0x4]
	float MaxSimTime;//[Offset: 0x3e8, Size: 0x4]
	int SplineMeshDefaultPoolSize;//[Offset: 0x3ec, Size: 0x4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x3f0, Size: 0x30]
	float StraightPartLength;//[Offset: 0x420, Size: 0x4]
	float GrenadeRadius;//[Offset: 0x424, Size: 0x4]
	Vector PredictLineStartLocation;//[Offset: 0x428, Size: 0xc]
	Vector PredictLineStartVelocity;//[Offset: 0x434, Size: 0xc]
	PredictProjectilePathParams PredictParams;//[Offset: 0x440, Size: 0x60]
	Vector PredictionEndPosition;//[Offset: 0x4a0, Size: 0xc]
	void UpdateSplines(out const Vector Velocity);// 0x7c8ec38
	void UpdatePredictLine();// 0x48a1814
	void UnInitTriggers();// 0x7c8edf8
	void TickDestroy(float DeltaSeconds);// 0x7c8ed28
	void OnSplineMeshInstUpdateState();// 0x7c8e320
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0xa134e14
	void NotifyPredictLineUpdate(out const PredictProjectilePathResult outPredictProjectilePathResult);// 0x7c8e8b0
	bool IsOwnerInFPPMode();// 0x7c8e29c
	void InitTriggers();// 0x7c8ee0c
	void InitPredictLineStatus(Actor* InOwnerProjectile);// 0x56cd594
	Rotator GetSplineMeshRotFacingCamera(out const Vector SplineMeshDirection, out const Vector MeshToCameraDirection);// 0x7c8e9dc
	ActorComponent*[] GetSplineMeshInstArray(SkillActorCompInstPool SkillActorCompInstPool);// 0x4e8aa48
	Vector GetProjectileLaunchPosition();// 0x7c8e334
	bool GetPredictProjectilePath(out PredictProjectilePathResult PredictResult);// 0x7c8e36c
	PredictLineRuntimeEffectConfig GetPredictLineEffectConfig();// 0x7c8e2d4
	static GrenadePredictLine* GetPredictionLine(Actor* ProjectileActor, class Object PredictionLineCls);// 0x55d266c
	Vector[] GetPathForSequencer(const int MaxSimStep, const Vector StartLocation, const Vector EndLocation, const float GravityScale, const float GravityBase, const float LaunchVelocityZ);// 0x7c8e4a4
	Vector GetLaunchVelocity(Vector StartPosition, Vector EndPosition, float DeltaTime, Vector Acceleration, int StepCount);// 0xa1d39f8
	static GrenadePredictLine* FindPredictionLine(Actor* OwnerActor);// 0x7c8eb68
	void DestroyPredictLine();// 0x7c8ed14
	void ClearPredictLineStatus(bool ShouldClearSplineMesh, bool ShouldDelayDestroy);// 0x55be3f8
	void BP_UpdateSplines(out const Vector Velocity);// 0xa1d39f8
	void BP_UpdatePredictLine();// 0xa1d39f8
	void BP_UnInitTriggers();// 0xa1d39f8
	void BP_TickDestroy(float DeltaSeconds);// 0xa1d39f8
	void BP_OnSplineMeshInstUpdateState(out const PredictLineRuntimeEffectConfig EffectConfig);// 0xa1d39f8
	void BP_InitTriggers();// 0xa1d39f8
	void BP_InitPredictLineStatus(Actor* InOwnerProjectile);// 0xa1d39f8
	void BP_DestroyPredictLine();// 0xa1d39f8
	void BP_ClearPredictLineStatus(bool ShouldClearSplineMesh, bool ShouldDelayDestroy);// 0xa1d39f8

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x6c8, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x720, Size: 0xc]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x72d, Size: 0x1]
	float SplineBoundaryMin;//[Offset: 0x730, Size: 0x4]
	float SplineBoundaryMax;//[Offset: 0x734, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x738, Size: 0x8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x740, Size: 0x10]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750, Size: 0x1]
	void UpdateMesh();// 0x99b5c64
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x99b5904
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x99b5094
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x99b4ef8
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x99b5ab4
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x99b4d54
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x99b5238
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x99b449c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x99b46cc
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x99b55a4
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x99b4bb0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x99b4a1c
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x99b5754
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x99b4878
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x99b4300
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x99b4164
	Vector GetStartTangent();// 0x99b5a6c
	Vector2D GetStartScale();// 0x99b51f8
	float GetStartRoll();// 0x99b5058
	Vector GetStartPosition();// 0x99b5c1c
	Vector2D GetStartOffset();// 0x99b4eb8
	Vector GetSplineUpDir();// 0x99b4684
	byte GetForwardAxis();// 0x99b483c
	Vector GetEndTangent();// 0x99b570c
	Vector2D GetEndScale();// 0x99b4d14
	float GetEndRoll();// 0x99b4b7c
	Vector GetEndPosition();// 0x99b58bc
	Vector2D GetEndOffset();// 0x99b49dc
	float GetBoundaryMin();// 0x99b4460
	float GetBoundaryMax();// 0x99b42c4

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SkillActorCompInstPool
	int ActorCompInstPoolSize;//[Offset: 0x0, Size: 0x4]
	int MaxActorCompInstPoolSize;//[Offset: 0x4, Size: 0x4]
	double MaxMillisecondForTick;//[Offset: 0x8, Size: 0x8]
	class Object* ClassToInstance;//[Offset: 0x10, Size: 0x8]
	ActorComponent*[] ActorCompInstArray;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PredictLineRuntimeEffectConfig
	byte PredictLineForwardAxis;//[Offset: 0x0, Size: 0x1]
	StaticMesh* PredictionLineMesh;//[Offset: 0x8, Size: 0x8]
	ParticleSystem* PredictionLineTargetParticle;//[Offset: 0x10, Size: 0x8]
	ParticleSystem* PredictionLineTargetAreaParticle;//[Offset: 0x18, Size: 0x8]
	FName PredictionLineMaterialSlotName;//[Offset: 0x20, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInst;//[Offset: 0x28, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInst;//[Offset: 0x30, Size: 0x8]
	int PredictionTargetMaterialSlotIndex;//[Offset: 0x38, Size: 0x4]
	MaterialInstanceDynamic* PredictionTargetMaterialInst;//[Offset: 0x40, Size: 0x8]
	Vector2D PredictionLineScale;//[Offset: 0x48, Size: 0x8]
	float PredictionLineRoll;//[Offset: 0x50, Size: 0x4]
	bool IsFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	enum RenderPass;//[Offset: 0x55, Size: 0x1]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 0x10]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector HitActorLocation;//[Offset: 0x14, Size: 0xc]
	Rotator HitActorRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4]
	float MaxSimTime;//[Offset: 0x20, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	byte TraceChannel;//[Offset: 0x25, Size: 0x1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10]
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10]
	float SimFrequency;//[Offset: 0x48, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4]
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c]
	HitResult HitResult;//[Offset: 0x2c, Size: 0x88]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkillPredictionLineConfigData
	class Object* PredictionLineCls;//[Offset: 0x0, Size: 0x8]
	byte PredictLineForwardAxis;//[Offset: 0x8, Size: 0x1]
	float PredictionLineRoll;//[Offset: 0xc, Size: 0x4]
	float PredictionLineRollTPP;//[Offset: 0x10, Size: 0x4]
	bool IsFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	enum RenderPass;//[Offset: 0x15, Size: 0x1]
	Vector2D PredictionLineScale;//[Offset: 0x18, Size: 0x8]
	Vector2D PredictionLineScaleTPP;//[Offset: 0x20, Size: 0x8]
	LinearColor PredictionLineColor;//[Offset: 0x28, Size: 0x10]
	LinearColor PredictionLineColor_PDCC;//[Offset: 0x38, Size: 0x10]
	LinearColor PredictionLineTargetColor;//[Offset: 0x48, Size: 0x10]
	LinearColor PredictionLineTargetColor_PDCC;//[Offset: 0x58, Size: 0x10]
	LinearColor PredictionLineTargetColorSecond;//[Offset: 0x68, Size: 0x10]
	LinearColor PredictionLineTargetColorSecond_PDCC;//[Offset: 0x78, Size: 0x10]
	StaticMesh* PredictionLineMeshClass;//[Offset: 0x88, Size: 0x28]
	ParticleSystem* PredictionLineTargetParticleClass;//[Offset: 0xb0, Size: 0x28]
	ParticleSystem* PredictionLineTargetAreaParticleClass;//[Offset: 0xd8, Size: 0x28]
	MaterialInstance* PredictionLineMaterialStart;//[Offset: 0x100, Size: 0x28]
	MaterialInstance* PredictionLineMaterialEnd;//[Offset: 0x128, Size: 0x28]
	MaterialInstance* PredictionLineMaterialStartTPP;//[Offset: 0x150, Size: 0x28]
	MaterialInstance* PredictionLineMaterialEndTPP;//[Offset: 0x178, Size: 0x28]
	MaterialInstance* PredictionLineTargetMaterial;//[Offset: 0x1a0, Size: 0x28]
	MaterialInstance* PredictionLineTargetMaterialTPP;//[Offset: 0x1c8, Size: 0x28]
	StaticMesh* PredictionLineMesh;//[Offset: 0x1f0, Size: 0x8]
	ParticleSystem* PredictionLineTargetParticle;//[Offset: 0x1f8, Size: 0x8]
	ParticleSystem* PredictionLineTargetAreaParticle;//[Offset: 0x200, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInst;//[Offset: 0x208, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInst;//[Offset: 0x210, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialStartInstTPP;//[Offset: 0x218, Size: 0x8]
	MaterialInstanceDynamic* PredictionLineMaterialEndInstTPP;//[Offset: 0x220, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInst;//[Offset: 0x228, Size: 0x8]
	MaterialInstanceDynamic* PredictionTargetMaterialInstTPP;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: ProjAnimationComponent.ActorComponent.Object
	CharacterAnimAssetLoader* AnimAssetLoader;//[Offset: 0xf8, Size: 0x8]
	bool bEnableOnFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	byte AnimationState;//[Offset: 0x101, Size: 0x1]
	AnimSequence* OnPinPullAnimation;//[Offset: 0x108, Size: 0x8]
	AnimSequence* OnHoldAnimation;//[Offset: 0x110, Size: 0x8]
	AnimSequence* OnThrowAnimation;//[Offset: 0x118, Size: 0x8]
	AnimSequence* OnLandAnimation;//[Offset: 0x120, Size: 0x8]
	AnimSequence* OnDeployAnimation;//[Offset: 0x128, Size: 0x8]
	AnimSequence* OnReadyAnimation;//[Offset: 0x130, Size: 0x8]
	AnimSequence* OnActivateAnimation;//[Offset: 0x138, Size: 0x8]
	AnimSequence* OnDestroyAnimation;//[Offset: 0x140, Size: 0x8]
	void SetAnimationState(byte EventType);// 0x7df74f4
	void SetAnimation(const byte AnimationType, AnimationAsset* AnimationAsset);// 0x7df7234
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0x7df7394
	void OnPerLoadCompleted(out AnimSoftObject[] AnimArray);// 0x7df7054
	void LoadAnimations(AnimationAsset* PinPullAinm, AnimationAsset* HoldAnim, AnimationAsset* ThrowAinm, AnimationAsset* LandAinm, AnimationAsset* DeployAinm, AnimationAsset* ReadyAinm, AnimationAsset* ActivateAinm, AnimationAsset* DestroyAinm);// 0x5c40398
	void BindSkillEvent(bool bBind);// 0x7df6f7c

--------------------------------
Class: CharacterAnimAssetLoader.BaseAssetLoader.Object

--------------------------------
Class: BaseAssetLoader.Object
	uint32 CurrentLoadId;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: NativeMigrationData
	bool bStartFlyOnThrowGrenadeEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUnbindEventOnStartFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: CausticDirtyBombStatus

--------------------------------
Class: LaunchPad.SkillActorBase.DynamicMovementActor.Actor.Object
	TrackerData LaunchTeammateTrackerData;//[Offset: 0x588, Size: 0x18]
	enum AutopingType;//[Offset: 0x5a0, Size: 0x1]
	SkillActorHealthComponent* HealthComp;//[Offset: 0x5a8, Size: 0x8]
	DynamicMovementComponent_Projetile* MovementComponent;//[Offset: 0x5b0, Size: 0x8]
	Actor* HitActor;//[Offset: 0x5b8, Size: 0x8]
	class Object[] NeedDestroyOnTheseBases;//[Offset: 0x5c8, Size: 0x10]
	float FloorBaseDistance;//[Offset: 0x5d8, Size: 0x4]
	byte FindBlockChannel;//[Offset: 0x5dc, Size: 0x1]
	float PreJumpDelayTime;//[Offset: 0x5e0, Size: 0x4]
	Vector AntiCheatIntersectBox;//[Offset: 0x5e4, Size: 0xc]
	enum[] CanNotLaunchPawnStateArray;//[Offset: 0x5f0, Size: 0x10]
	<class Object,LaunchItemConfigData> LaunchItemConfigData;//[Offset: 0x600, Size: 0x50]
	<class Object,LaunchItemConfigData> FollowingLaunchItemConfigData;//[Offset: 0x650, Size: 0x50]
	<class Object,float> LaunchItemAreaConfigData;//[Offset: 0x6a0, Size: 0x50]
	class Object[] LaunchItemClassBlackList;//[Offset: 0x6f0, Size: 0x10]
	int TriplePerkID;//[Offset: 0x700, Size: 0x4]
	float LaunchItemMinInterval;//[Offset: 0x704, Size: 0x4]
	bool bEnableDoubleJumpOnLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	<Actor*,float> LaunchItemTimestampMap;//[Offset: 0x710, Size: 0x50]
	LaunchCharacterConfigData PreJumpVelocityConfig;//[Offset: 0x760, Size: 0x30]
	LaunchCharacterConfigData StrongJumpVelocityConfig;//[Offset: 0x790, Size: 0x30]
	LaunchCharacterConfigData LandVelocityConfig;//[Offset: 0x7c0, Size: 0x30]
	LaunchCharacterConfigData DefaultVelocityConfig;//[Offset: 0x7f0, Size: 0x30]
	LaunchCharacterConfigData[] NormalJumpVelocityArray;//[Offset: 0x820, Size: 0x10]
	<enum,AkAudioEvent*> LaunchPlayerAudioMap1P;//[Offset: 0x830, Size: 0x50]
	<enum,AkAudioEvent*> LaunchPlayerAudioMap3P;//[Offset: 0x880, Size: 0x50]
	Vector PreCharVelocity;//[Offset: 0x8d0, Size: 0xc]
	int LaunchSameItemMaxCount;//[Offset: 0x8dc, Size: 0x4]
	JumpItemData[] LaunchSameItemRecords;//[Offset: 0x8e0, Size: 0x10]
	LaunchPadRuntimeData RuntimeData;//[Offset: 0x8f0, Size: 0x20]
	LaunchPadRuntimeData ClientRuntimeData;//[Offset: 0x910, Size: 0x20]
	void ReportLaunchpadFlowData();// 0x7ce7f64
	void PrepareJump(ApexCharacterBase* TargetCharacter);// 0x591b95c
	void PreJump(ApexCharacterBase* TargetCharacter);// 0x548c18c
	void PlayerLaunchHeroAudio(ApexCharacterBase* TargetCharacter);// 0x5c079cc
	void OutOfNumLimiteDestroy();// 0x7ce7c2c
	void OnRep_RuntimeData();// 0x56755e4
	void LaunchSameItemMoreThanMaxCount(Actor* ItemActor);// 0x7ce7b68
	void LaunchItem(Actor* ItemActor, out const HitResult Hit);// 0x5bee564
	void LaunchCharacter(ApexCharacterBase* TargetCharacter);// 0x5883c24
	void JumpCue(ApexCharacterBase* TargetCharacter);// 0xa1d39f8
	void Jump(ApexCharacterBase* TargetCharacter);// 0x58e6d08
	bool IsLevelPersistent();// 0xa13f5e0
	bool IsLaunchItemValid(Actor* ItemActor);// 0x7ce8794
	bool IsLaunchItemAreaValid(Actor* ItemActor);// 0x7ce885c
	bool IsCanLaunchCharacterBP(ApexCharacterBase* Character);// 0x7ce7f78
	bool IsCanLaunchCharacter(ApexCharacterBase* Character);// 0x7ce8048
	bool InnerLaunchItem(Actor* ItemActor, out const HitResult Hit);// 0x7ce854c
	bool InnerLaunchCharacter(ApexCharacterBase* TargetCharacter);// 0x7ce86c4
	bool InnerGetLaunchItemConfig(Actor* ItemActor, out const <class Object,LaunchItemConfigData> InLaunchItemConfigData, out LaunchItemConfigData OutLaunchItemConfigData);// 0x7ce8110
	Vector GetLaunchItemVelocity(Actor* ItemActor, out const Vector DefaultLaunchVel);// 0x7ce83f4
	bool GetLaunchItemConfig(Actor* ItemActor, out LaunchItemConfigData OutLaunchItemConfigData);// 0x7ce8924
	LaunchCharacterConfigData GetLaunchCharacterConfig(ApexCharacterBase* TargetCharacter, out const LaunchCharacterConfigData[] VelocityConfigArray, out const LaunchCharacterConfigData DefaultConfig);// 0x7ce7c44
	void ClearAllTag(ApexCharacterBase* TargetCharacter);// 0x7ce7ea8
	void BP_OnDamage();// 0xa1d39f8

--------------------------------
Class: LaunchItemConfigData
	float Slop;//[Offset: 0x0, Size: 0x4]
	float BaseVelocity;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LaunchCharacterConfigData
	enum PawnState;//[Offset: 0x0, Size: 0x1]
	float Slop;//[Offset: 0x4, Size: 0x4]
	bool bInfiniteSlop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float BaseVelocity;//[Offset: 0xc, Size: 0x4]
	bool ShouldOverrideXY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool ShouldOverrideZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	CurveFloat* DirectionVelocityCurve;//[Offset: 0x18, Size: 0x8]
	enum LaunchReason;//[Offset: 0x20, Size: 0x1]
	Vector IntersectionBox;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: JumpItemData
	Actor* TargetItem;//[Offset: 0x0, Size: 0x8]
	int count;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LaunchPadRuntimeData
	bool IsLevelPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int LaunchCharacterCount;//[Offset: 0x4, Size: 0x4]
	int OwnerPlayerKey;//[Offset: 0x8, Size: 0x4]
	int MaxNumLimit;//[Offset: 0xc, Size: 0x4]
	JumpCharacterData[] JumpCharacterArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: JumpCharacterData
	ApexCharacterBase* TargetCharacter;//[Offset: 0x0, Size: 0x8]
	bool IsSlidingEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsStrongJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	float JumpDelay;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GameStateInGameChatComp_BP_C.InGameChatManagerComponent.ActorComponent.Object
	FString GetModuleName();// 0xa1d39f8

--------------------------------
Class: InGameChatManagerComponent.ActorComponent.Object
	InGameChatDataReporter* DataReporter;//[Offset: 0x148, Size: 0x8]
	void UnRegisterTextFilterRsp();// 0xa1d39f8
	void RegisterTextFilterRsp();// 0xa1d39f8
	void OnFilterTextRsp(FString ContentRsp);// 0x7cc2510
	void OnFilterText(int64 PlayerKey, FString Content);// 0xa1d39f8
	FString GetQuickMsgContent(const int QuickMsgID);// 0x7cc1f18
	FString GetParachutingMsg(FString Info);// 0x7cc2084
	FString GetChatContent(out const InGameChatInfo Info);// 0x7cc2218

--------------------------------
Class: InGameChatDataReporter.Object
	void SendDataStatisticsFlow(out const InGameChatReportData ReportData);// 0x7cbeee8

--------------------------------
Class: InGameChatReportData

--------------------------------
Class: GameStateHotZoneMgr.ActorComponent.Object
	HotZoneVolume*[] HotZoneVolumeArray;//[Offset: 0xf8, Size: 0x10]
	HotZoneVolume* ActiveHotZoneVolume;//[Offset: 0x108, Size: 0x8]
	bool bIsEnableHotZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	FString[] DisableHotZones;//[Offset: 0x118, Size: 0x10]
	void OnCircleSafeZoneTips(float BlueCircleStartLessenTime);// 0x7c4f1bc
	HotZoneVolume* GetActiveHotZoneVolume();// 0xa12b810

--------------------------------
Class: HotZoneVolume.Volume.Brush.Actor.Object
	bool bIsActiveHotZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	ParticleSystemComponent* ParticleEffectComponent;//[Offset: 0x2b0, Size: 0x8]
	FString LootZoneID;//[Offset: 0x2c0, Size: 0x10]
	float Radius;//[Offset: 0x2d0, Size: 0x4]
	int RandomWeight;//[Offset: 0x2d4, Size: 0x4]
	LootZoneTypeInfo LootZoneTypeInfo;//[Offset: 0x2d8, Size: 0x18]
	LootZoneTypeInfo[] ReplaceLootZoneTypeInfos;//[Offset: 0x2f0, Size: 0x10]
	ParticleSystem* HotZoneEffectParticle;//[Offset: 0x300, Size: 0x8]
	Vector HotZoneEffectLocation;//[Offset: 0x308, Size: 0xc]
	void OnRepActiveHotZone();// 0x4f311a0
	bool IsPointInLootZone(Vector PointVector);// 0x7cb17cc

--------------------------------
Class: GameStateLootZoneNameMgr.ActorComponent.Object
	int MaxHistoryCount;//[Offset: 0x118, Size: 0x4]
	float ShowTipsTime;//[Offset: 0x11c, Size: 0x4]
	void OnRespawnExitHatchDone(Actor* Actor);// 0x7c504f4

--------------------------------
Class: GameStateTeamInfoComp.ActorComponent.Object
	LinearColor[] TeamColorCollection;//[Offset: 0xf8, Size: 0x10]
	ParachuteEffectSuitCfg[] TeamNormalParachuteEffectCollection;//[Offset: 0x108, Size: 0x10]
	<int,ParachuteEffectSuitCfg> SuitID2SpecialParachuteEffectCollection;//[Offset: 0x118, Size: 0x50]
	int MaxTeamNumForRandomColor;//[Offset: 0x168, Size: 0x4]

--------------------------------
Class: ParachuteEffectSuitCfg
	ParticleEffectSetCfg ParachuteEffects;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: GameStatePlane_BP_C.GameStatePlaneComponent.ActorComponent.Object
	FString GetModuleName();// 0xa1d39f8

--------------------------------
Class: GameStateRadiationCircle_BP_C.RadiationCircleStateComponent.ActorComponent.Object
	FString GetModuleName();// 0xa1d39f8

--------------------------------
Class: BP_HitTip3D_C.HitTip3D.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d0, Size: 0x8]
	ArrowComponent* Arrow;//[Offset: 0x2d8, Size: 0x8]
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void ExecuteUbergraph_BP_HitTip3D(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0xa1d39f8

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x55c, Size: 0x4]
	float ArrowSize;//[Offset: 0x560, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	float ScreenSize;//[Offset: 0x568, Size: 0x4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x98048e4

--------------------------------
Class: BP_AutoEffectBullet_C.AutoEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x340, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: BP_OBEffectBullet_C.OBEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x2f0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f8, Size: 0x8]

--------------------------------
Class: RifleBullet_C.ShootWeaponBullet.SignificanceManagedActor.Actor.Object
	SphereComponent* Sphere;//[Offset: 0x3b0, Size: 0x8]

--------------------------------
Class: BP_RespawnBeaconPistol_C.RespawnBeaconPistol.BasePropsWeapon.Actor.Object
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x4a8, Size: 0x8]

--------------------------------
Class: RespawnBeaconPistol.BasePropsWeapon.Actor.Object
	DynamicRespawnBeaconIndicator* BeaconIndicator;//[Offset: 0x4a0, Size: 0x8]
	void SpawnRespawnBeaconIndicator();// 0x7e12900
	void RequestRespawnBeacon();// 0x7e128ec

--------------------------------
Class: BasePropsWeapon.Actor.Object
	<int,AnimationAsset*> TempAnimationAssetMap;//[Offset: 0x270, Size: 0x50]
	enum EndReason;//[Offset: 0x2c0, Size: 0x1]
	bool bMeshHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	bool bCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c3, Size: 0x1]
	bool bInFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	bool bFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	FName AttachSocketName;//[Offset: 0x2c8, Size: 0x8]
	int PropsItemId;//[Offset: 0x2d0, Size: 0x4]
	enum CharAnimSkillHandType;//[Offset: 0x2d4, Size: 0x1]
	FireBtnData FireBtnData;//[Offset: 0x2d8, Size: 0x78]
	bool bShowCancelBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	FName CancelWidgetName;//[Offset: 0x354, Size: 0x8]
	FName CancelWidgetName2;//[Offset: 0x35c, Size: 0x8]
	float FadeOutTime;//[Offset: 0x364, Size: 0x4]
	float TppFadeOutTime;//[Offset: 0x368, Size: 0x4]
	float FireFadeOutTime;//[Offset: 0x36c, Size: 0x4]
	AkAudioEvent* AutonomousPutOnAudio;//[Offset: 0x370, Size: 0x28]
	AkAudioEvent* AutonomousPutOffAudio;//[Offset: 0x398, Size: 0x28]
	AkAudioEvent* AutonomousFireAudio;//[Offset: 0x3c0, Size: 0x28]
	AkAudioEvent* SimulatedPutOnAudio;//[Offset: 0x3e8, Size: 0x28]
	AkAudioEvent* SimulatedPutOffAudio;//[Offset: 0x410, Size: 0x28]
	AkAudioEvent* SimulatedFireAudio;//[Offset: 0x438, Size: 0x28]
	FName FollowHideTag;//[Offset: 0x460, Size: 0x8]
	class AnimInstance* SoftAnimBp;//[Offset: 0x468, Size: 0x28]
	bool CacheAnimForceToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	void RemoveCharacterAnim();// 0x7b08ca8
	void PutOnWeaponMontage();// 0x7b08c6c
	void PutOffWeaponMontage(byte AnimType);// 0x7b08bb0
	void PlayAudio(out const AkAudioEvent* AudioEvent, bool bStopWhenAttachedToDestroyed);// 0x7b08a10
	void OnCameraChanged();// 0x6039430
	void OnAnimBpLoaded();// 0x7b089fc
	void LeaveState();// 0x7b08c80
	bool GetActive();// 0xa100640
	void EnterState();// 0x7b08c94
	void EnterDispose(enum Reason);// 0x7b08e3c
	void Clean(enum Reason);// 0x7b08d78
	void CancelPropsWeapon();// 0xa100624
	void CameraType();// 0x7b08ef8
	void AddCharacterAnim(int AnimFlag);// 0x7b08cbc

--------------------------------
Class: FireBtnData
	int ID;//[Offset: 0x0, Size: 0x4]
	FName IconType;//[Offset: 0x4, Size: 0x8]
	FName AnimName;//[Offset: 0xc, Size: 0x8]
	LinearColor EffectColor;//[Offset: 0x14, Size: 0x10]
	Object* NormalIcon;//[Offset: 0x28, Size: 0x8]
	Object* HoverIcon;//[Offset: 0x30, Size: 0x8]
	Object* PressIcon;//[Offset: 0x38, Size: 0x8]
	Object* NormalIconLeft;//[Offset: 0x40, Size: 0x8]
	Object* PressIconLeft;//[Offset: 0x48, Size: 0x8]
	Object* NormalIconWaistShoot;//[Offset: 0x50, Size: 0x8]
	Object* PressIconWaistShoot;//[Offset: 0x58, Size: 0x8]
	class UserWidget* EffectWidgetClass;//[Offset: 0x60, Size: 0x8]
	FName PressAnimNameRight;//[Offset: 0x68, Size: 0x8]
	FName NormalAnimNameRight;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: DynamicRespawnBeaconIndicator.Actor.Object
	PrimitiveComponent* IndicatorMesh;//[Offset: 0x270, Size: 0x8]
	bool bAllowLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	int IndicatorEffectId;//[Offset: 0x27c, Size: 0x4]
	int NotAllowLandEffectId;//[Offset: 0x280, Size: 0x4]
	int AllowLandEffectId;//[Offset: 0x284, Size: 0x4]
	float NearHideDist;//[Offset: 0x288, Size: 0x4]
	void UpdateIndicator();// 0x7bd79b0

--------------------------------
Class: BP_PropsFragGrenade_C.ThrowablePropsWeapon.BasePropsWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x668, Size: 0x8]
	ParticleSystemComponent* FlashingParticle;//[Offset: 0x670, Size: 0x8]
	ParticleSystemComponent* HitPoint;//[Offset: 0x678, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x680, Size: 0x8]
	SkeletalMeshComponent* SK_W_FragGrenade_A001;//[Offset: 0x688, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_PropsFragGrenade(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: ThrowablePropsWeapon.BasePropsWeapon.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x4a0, Size: 0x8]
	ParticleSystemComponent* HitPointPs;//[Offset: 0x4a8, Size: 0x8]
	ParticleSystemComponent* NormalHitPointPs;//[Offset: 0x4b0, Size: 0x8]
	ParticleSystemComponent* FlashingPs;//[Offset: 0x4b8, Size: 0x8]
	SplineMeshComponent*[] SplineMeshComponents;//[Offset: 0x4c0, Size: 0x10]
	int NumSegment;//[Offset: 0x4d0, Size: 0x4]
	StaticMesh* SoftSegmentStaticMesh;//[Offset: 0x4d8, Size: 0x28]
	MaterialInterface* SoftSegmentMaterial;//[Offset: 0x500, Size: 0x28]
	LinearColor SegmentColor;//[Offset: 0x528, Size: 0x10]
	LinearColor LineColor;//[Offset: 0x538, Size: 0x10]
	MaterialInstanceDynamic* SegmentMaterialDynamic;//[Offset: 0x548, Size: 0x8]
	FName MatSlotName;//[Offset: 0x550, Size: 0x8]
	float SegmentRoll;//[Offset: 0x558, Size: 0x4]
	float SegmentScaleAlpha;//[Offset: 0x55c, Size: 0x4]
	float SegmentRadius;//[Offset: 0x560, Size: 0x4]
	enum CurrentPhase;//[Offset: 0x564, Size: 0x1]
	float HighPitch;//[Offset: 0x568, Size: 0x4]
	float LowPitch;//[Offset: 0x56c, Size: 0x4]
	float HighSpeed;//[Offset: 0x570, Size: 0x4]
	float LowSpeed;//[Offset: 0x574, Size: 0x4]
	bool bDebugAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	float AntiCheatTestSpeed;//[Offset: 0x57c, Size: 0x4]
	CurveFloat* PredictCurve;//[Offset: 0x580, Size: 0x8]
	float PredictCurvePitch;//[Offset: 0x588, Size: 0x4]
	bool bEnableObstacleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	bool bUseViewRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 0x1]
	float HitPointPsBias;//[Offset: 0x590, Size: 0x4]
	Vector LaunchLocation;//[Offset: 0x594, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0x5a0, Size: 0xc]
	Vector FirePressLocation;//[Offset: 0x5ac, Size: 0xc]
	bool bFastThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	float FastThrowTime;//[Offset: 0x5bc, Size: 0x4]
	float FastThrowDeltaTime;//[Offset: 0x5c0, Size: 0x4]
	AkAudioEvent* AutonomousPullAudio;//[Offset: 0x5c8, Size: 0x28]
	AkAudioEvent* SimulatedPullAudio;//[Offset: 0x5f0, Size: 0x28]
	bool bAimExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	float AimExplodeTime;//[Offset: 0x61c, Size: 0x4]
	float AimExplodeRealTime;//[Offset: 0x620, Size: 0x4]
	float ExplodeLeftTime;//[Offset: 0x624, Size: 0x4]
	bool bTickAimExplodeRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	bool bAimExplodeDisposed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1]
	Vector AimExplodeCountDownOffset;//[Offset: 0x62c, Size: 0xc]
	float TimingBegin;//[Offset: 0x640, Size: 0x4]
	class WarningActor* ExplosionIndicatorBp;//[Offset: 0x648, Size: 0x8]
	WarningActor* ExplosionIndicator;//[Offset: 0x650, Size: 0x8]
	bool bHitPointPsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	bool bCanSwitchHighLowThrowMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	bool bHitPointDynamicScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x662, Size: 0x1]

--------------------------------
Class: SkeletalMeshAsync.AsyncLoaderBase.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x38, Size: 0x8]
	SkeletalMesh* SOPSkeletalMesh;//[Offset: 0x40, Size: 0x28]
	class AnimInstance* AnimClass;//[Offset: 0x68, Size: 0x8]
	class AnimInstance* SOPAnimClass;//[Offset: 0x70, Size: 0x28]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0xa0, Size: 0x8]
	void StopAnimation();// 0x7e51254
	void OnLoadSkeletalMeshFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, SkeletalMesh* NewMesh);// 0x7e50b74
	void OnLoadAnimClassFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, class AnimInstance NewClass);// 0x7e50704
	void OnLoadAnimAssetFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, AnimationAsset* NewAnimToPlay);// 0x7e50294
	void K2_SetSkeletalMesh(SkeletalMeshComponent* NewMeshComp, SkeletalMesh* NewMesh, out const delegate FinishedCallback);// 0x7e51268
	SkeletalMesh* GetSOPSkeletalMesh();// 0x7e5111c
	class AnimInstance GetSOPAnimClass();// 0x7e50fe4
	SkeletalMesh* GetSkeletalMesh();// 0x7e51218
	class AnimInstance GetAinmClass();// 0x7e510e0

--------------------------------
Class: BP_PropsThermiteGrenade_C.ThrowablePropsWeapon.BasePropsWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x668, Size: 0x8]
	ParticleSystemComponent* ParticleSystemIdleDown;//[Offset: 0x670, Size: 0x8]
	ParticleSystemComponent* ParticleSystemIdleUp;//[Offset: 0x678, Size: 0x8]
	ParticleSystemComponent* HitPoint;//[Offset: 0x680, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x688, Size: 0x8]
	SkeletalMeshComponent* SK_W_Thermite_001_FPP;//[Offset: 0x690, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_PropsThermiteGrenade(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: BP_PropsArcStarGrenade_C.ThrowablePropsWeapon.BasePropsWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x668, Size: 0x8]
	ParticleSystemComponent* HitPoint;//[Offset: 0x670, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x678, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x680, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_PropsArcStarGrenade(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: BP_PropsHeatShield_C.PropsHeatShield.ThrowablePropsWeapon.BasePropsWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x668, Size: 0x8]
	ParticleSystemComponent* NormalHitPoint;//[Offset: 0x670, Size: 0x8]
	ParticleSystemComponent* TopEfx;//[Offset: 0x678, Size: 0x8]
	ParticleSystemComponent* HitPoint;//[Offset: 0x680, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x688, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x690, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_PropsHeatShield(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: PropsHeatShield.ThrowablePropsWeapon.BasePropsWeapon.Actor.Object

--------------------------------
Class: BP_PropsSnowBallGrenade_C.ThrowablePropsWeapon.BasePropsWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x668, Size: 0x8]
	ParticleSystemComponent* FlashingParticle;//[Offset: 0x670, Size: 0x8]
	ParticleSystemComponent* HitPoint;//[Offset: 0x678, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x680, Size: 0x8]
	SkeletalMeshComponent* SK_W_SnowBallGrenade_A001;//[Offset: 0x688, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_PropsSnowBallGrenade(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: BP_PropsSkeletonGrenade_C.ThrowablePropsWeapon.BasePropsWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x668, Size: 0x8]
	ParticleSystemComponent* FlashingParticle;//[Offset: 0x670, Size: 0x8]
	ParticleSystemComponent* HitPoint;//[Offset: 0x678, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x680, Size: 0x8]
	SkeletalMeshComponent* SK_W_Grenade;//[Offset: 0x688, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_PropsSkeletonGrenade(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: BP_RespawnBeacon_C.ApexRespawnBeacon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 0x8]
	ApexNavMeshModifierComponent* ApexNavMeshModifier;//[Offset: 0x3a8, Size: 0x8]
	NavObstacleComponent* NavObstacle;//[Offset: 0x3b0, Size: 0x8]
	WidgetComponent* Widget;//[Offset: 0x3b8, Size: 0x8]
	SphereComponent* HUDSphere;//[Offset: 0x3c0, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x3c8, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x3d0, Size: 0x8]
	Actor* InActor;//[Offset: 0x3d8, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void NotifyUseComplete();// 0xa1d39f8
	void OnBlueprintInteractiveBeginOverlap(Actor* OtherActor);// 0xa1d39f8
	void OnBlueprintInteractiveEndOverlap(Actor* OtherActor);// 0xa1d39f8
	void OnBlueprintHUDBeginOverlap(Actor* OtherActor);// 0xa1d39f8
	void OnBlueprintHUDEndOverlap(Actor* OtherActor);// 0xa1d39f8
	void ExecuteUbergraph_BP_RespawnBeacon(int EntryPoint, Actor* K2Node_Event_OtherActor, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Useable_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Useable_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, Actor* K2Node_Event_OtherActor, Actor* K2Node_Event_OtherActor, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, Controller* CallFunc_GetController_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, RespawnOperateComponent* CallFunc_GetRespawnOperateComponent_ReturnValue, RespawnOperateComponent* CallFunc_GetRespawnOperateComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Actor* K2Node_Event_OtherActor, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsObedInCurrentClient_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xa1d39f8

--------------------------------
Class: ApexNavMeshModifierComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0x560, Size: 0x8]
	enum Shape;//[Offset: 0x568, Size: 0x1]
	Vector BoxExtent;//[Offset: 0x56c, Size: 0xc]
	float CylinderRadius;//[Offset: 0x578, Size: 0x4]
	float CylinderHeight;//[Offset: 0x57c, Size: 0x4]

--------------------------------
Class: NavObstacleComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_CommDiscardMag_C.CommDiscardMagDisplay.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x278, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x280, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x288, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void LoadSkeletalMesh(enum InMeshType);// 0xa1d39f8
	void ExecuteUbergraph_BP_CommDiscardMag(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, enum K2Node_Event_InMeshType, bool K2Node_SwitchEnum_CmpSuccess, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: CommDiscardMagDisplay.Actor.Object
	void LoadSkeletalMesh(enum InMeshType);// 0xa1d39f8

--------------------------------
Class: BP_InGameDisplayCharacter_C.InGameDisplayCharacter.ApexDisplayCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa80, Size: 0x8]
	float DitherTimeLine_Dither_C62FD3504BB4E1F639085081BE7E2C1D;//[Offset: 0xa88, Size: 0x4]
	byte DitherTimeLine__Direction_C62FD3504BB4E1F639085081BE7E2C1D;//[Offset: 0xa8c, Size: 0x1]
	TimelineComponent* DitherTimeLine;//[Offset: 0xa90, Size: 0x8]
	void DitherTimeLine__FinishedFunc();// 0xa1d39f8
	void DitherTimeLine__UpdateFunc();// 0xa1d39f8
	void RefreshAniBlueprint(AnimSequence* Ani);// 0xa1d39f8
	void ExecuteUbergraph_BP_InGameDisplayCharacter(int EntryPoint, AnimSequence* K2Node_Event_Ani, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, InGameCharacter_Anim_ABP_C* K2Node_DynamicCast_AsIn_Game_Character_Anim_ABP, bool K2Node_DynamicCast_bSuccess);// 0xa1d39f8

--------------------------------
Class: InGameCharacter_Anim_ABP_C.APEXAnimInstance.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x13b0, Size: 0x8]
	AnimNode_Root AnimGraphNode_Root_C56EC6294D550ABE91DBEDAC3581DA82;//[Offset: 0x13b8, Size: 0x40]
	AnimNode_Slot AnimGraphNode_Slot_C87ECD1C4FD0D7A202D062B574F69D43;//[Offset: 0x13f8, Size: 0x58]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_0A0E23EF4730AF8029AFC5B7CCC2B687;//[Offset: 0x1450, Size: 0x88]
	AnimNode_Slot AnimGraphNode_Slot_042590D442528AECDC2C26BE27160F59;//[Offset: 0x14d8, Size: 0x58]
	AnimSequenceBase* IdelPose;//[Offset: 0x1530, Size: 0x8]
	void AnimGraph(out PoseLink AnimGraph);// 0xa1d39f8
	void SetIdlePose(AnimSequenceBase* IdelPose);// 0xa1d39f8
	void ExecuteUbergraph_InGameCharacter_Anim_ABP(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: APEXAnimInstance.AnimInstance.Object
	bool bAnimIsNewer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool NativeSlideEndTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool NativeLandTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	APEXAnimInstanceProxy Proxy;//[Offset: 0x270, Size: 0x860]
	enum PawnHoldWeaponType;//[Offset: 0xad0, Size: 0x1]
	enum ExposeSignificanceType;//[Offset: 0xad1, Size: 0x1]
	enum PawnLegendType;//[Offset: 0xad2, Size: 0x1]
	bool bPawnIsBangalore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad3, Size: 0x1]
	bool bPawnIsBloodhound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 0x1]
	bool bPawnIsCaustic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad5, Size: 0x1]
	bool bPawnIsCrypto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad6, Size: 0x1]
	bool bPawnIsDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad7, Size: 0x1]
	bool bPawnIsGibraltar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]
	bool bPawnIsHorizon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 0x1]
	bool bPawnIsLifeline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xada, Size: 0x1]
	bool bPawnIsLoba;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadb, Size: 0x1]
	bool bPawnIsMirage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 0x1]
	bool bPawnIsOctane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadd, Size: 0x1]
	bool bPawnIsPathfinder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xade, Size: 0x1]
	bool bPawnIsPhantom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadf, Size: 0x1]
	bool bPawnIsReidel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]
	bool bPawnIsRevenant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 0x1]
	bool bPawnIsSeeker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae2, Size: 0x1]
	bool bPawnIsSpider;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae3, Size: 0x1]
	bool bPawnIsWattson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae4, Size: 0x1]
	bool bPawnIsWraith;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae5, Size: 0x1]
	bool bPawnIsDJ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae6, Size: 0x1]
	bool bPawnIsMonkeyKing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae7, Size: 0x1]
	bool bPawnIsAsh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 0x1]
	bool bPawnIsValkyrie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae9, Size: 0x1]
	Vector ZipVerticalHandLocation;//[Offset: 0xaec, Size: 0xc]
	RandomPlayerSequenceEntryContainer TppIdleRandomContainer;//[Offset: 0xaf8, Size: 0x10]
	bool TppIdleRandomContainerIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 0x1]
	AnimSequence* ZiplineStart_Horizontal_Unarmed;//[Offset: 0xb10, Size: 0x8]
	AnimSequence* ZiplineStart_Horizontal_Pistol;//[Offset: 0xb18, Size: 0x8]
	AnimSequence* ZiplineStart_Horizontal_Rifle;//[Offset: 0xb20, Size: 0x8]
	AnimSequence* ZiplineStart_Vertical_Unarmed;//[Offset: 0xb28, Size: 0x8]
	AnimSequence* ZiplineStart_Vertical_Pistol;//[Offset: 0xb30, Size: 0x8]
	AnimSequence* ZiplineStart_Vertical_Rifle;//[Offset: 0xb38, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Unarmed;//[Offset: 0xb40, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Pistol;//[Offset: 0xb48, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Rifle;//[Offset: 0xb50, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Unarmed;//[Offset: 0xb58, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Pistol;//[Offset: 0xb60, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Rifle;//[Offset: 0xb68, Size: 0x8]
	AnimSequence* ZiplineLoop_Horizontal_Skill;//[Offset: 0xb70, Size: 0x8]
	AnimSequence* ZiplineLoop_Vertical_Skill;//[Offset: 0xb78, Size: 0x8]
	bool bEnableAnimLodSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 0x1]
	AnimBPLodConfig[] AnimLodConfig;//[Offset: 0xb88, Size: 0x10]
	AnimSignificanceInfo[] CurSignificanceInfos;//[Offset: 0xb98, Size: 0x10]
	bool ExposeEnableFootIk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba9, Size: 0x1]
	float ExposeLeftFootOffsetZ;//[Offset: 0xbac, Size: 0x4]
	float ExposeRightFootOffsetZ;//[Offset: 0xbb0, Size: 0x4]
	float ExposePelvisOffset;//[Offset: 0xbb4, Size: 0x4]
	Vector ExposeLeftFootOffsetVec;//[Offset: 0xbb8, Size: 0xc]
	Vector ExposeRightFootOffsetVec;//[Offset: 0xbc4, Size: 0xc]
	Vector ExposePelvisOffsetVec;//[Offset: 0xbd0, Size: 0xc]
	Rotator ExposePelvisOffsetRotation;//[Offset: 0xbdc, Size: 0xc]
	byte AniMovementMode;//[Offset: 0xbec, Size: 0x1]
	bool B_Death;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbed, Size: 0x1]
	bool B_Sprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbee, Size: 0x1]
	bool bSprintPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbef, Size: 0x1]
	bool bFallingPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 0x1]
	bool bDirectionPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf1, Size: 0x1]
	Vector ViewRotationOffset;//[Offset: 0xbf4, Size: 0xc]
	bool B_ScopeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 0x1]
	bool B_ScopeOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc01, Size: 0x1]
	bool B_Landed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc02, Size: 0x1]
	bool B_Frisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc03, Size: 0x1]
	bool B_KnockdownShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 0x1]
	float F_ParachuteTurnInput;//[Offset: 0xc08, Size: 0x4]
	bool B_IsParachuteOverIntermediateVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 0x1]
	bool ExposeParachuteOverIntermediateVelState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0d, Size: 0x1]
	bool B_SlidingToAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0e, Size: 0x1]
	bool B_AirToSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0f, Size: 0x1]
	byte E_PoseType;//[Offset: 0xc10, Size: 0x1]
	float F_LogicSpeed;//[Offset: 0xc14, Size: 0x4]
	Vector V_LastLocation;//[Offset: 0xc18, Size: 0xc]
	bool B_HasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc24, Size: 0x1]
	float MaxShovelYawAngle;//[Offset: 0xc28, Size: 0x4]
	bool MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2c, Size: 0x1]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2d, Size: 0x1]
	Rotator ShovelingRotation;//[Offset: 0xc30, Size: 0xc]
	Rotator nowShovelingRotation;//[Offset: 0xc3c, Size: 0xc]
	float ShovelingRotationoffset;//[Offset: 0xc48, Size: 0x4]
	Rotator UpShovelingRotationAdd;//[Offset: 0xc4c, Size: 0xc]
	bool ShouldJumpFromStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 0x1]
	bool ShouldJumpFromFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc59, Size: 0x1]
	bool ShouldLandingLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5a, Size: 0x1]
	bool ShouldLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5b, Size: 0x1]
	bool ShouldAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c, Size: 0x1]
	bool ShouldGrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5d, Size: 0x1]
	bool Parachute_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5e, Size: 0x1]
	bool Parachute_FreeFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5f, Size: 0x1]
	bool Parachute_Expression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]
	bool Parachute_Opening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 0x1]
	bool IsNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc62, Size: 0x1]
	bool ImmediatelyKnockdownPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc63, Size: 0x1]
	byte CurrentMovementMode;//[Offset: 0xc64, Size: 0x1]
	byte CurrentCustomMovementMode;//[Offset: 0xc65, Size: 0x1]
	byte LastMovementMode;//[Offset: 0xc66, Size: 0x1]
	byte LastCustomMovementMode;//[Offset: 0xc67, Size: 0x1]
	Vector MoveVelocity;//[Offset: 0xc68, Size: 0xc]
	Vector MoveDir;//[Offset: 0xc74, Size: 0xc]
	Rotator ControlRotation;//[Offset: 0xc80, Size: 0xc]
	Vector GrapplingAimDirection;//[Offset: 0xc8c, Size: 0xc]
	float Significance;//[Offset: 0xc98, Size: 0x4]
	float Significance002;//[Offset: 0xc9c, Size: 0x4]
	float Significance0015;//[Offset: 0xca0, Size: 0x4]
	enum AnimInstanceType;//[Offset: 0xca4, Size: 0x1]
	float UpdateDeltaTimeWhenNotRendered;//[Offset: 0xca8, Size: 0x4]
	byte AnimHandType;//[Offset: 0xcac, Size: 0x1]
	bool AnimHandPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcad, Size: 0x1]
	bool bInLeftHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcae, Size: 0x1]
	bool bInRightHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcaf, Size: 0x1]
	bool bInBothHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 0x1]
	bool bInLeftAndRightHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb1, Size: 0x1]
	bool bInLeftAndBothHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb2, Size: 0x1]
	bool bInRightAndBothHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb3, Size: 0x1]
	bool bInHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 0x1]
	bool bIsBeFinisher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb5, Size: 0x1]
	bool bOnSwitchThrowMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb6, Size: 0x1]
	float ExposeBlendThrowMode;//[Offset: 0xcb8, Size: 0x4]
	Rotator ExposeWeaponRotation;//[Offset: 0xcbc, Size: 0xc]
	enum AnimRescueType;//[Offset: 0xcc8, Size: 0x1]
	float RescueAnimPlayRate;//[Offset: 0xccc, Size: 0x4]
	enum ClimbOverAnimType;//[Offset: 0xcd0, Size: 0x1]
	float ClimbAnimVelocity;//[Offset: 0xcd4, Size: 0x4]
	Vector HangingPosition;//[Offset: 0xcd8, Size: 0xc]
	bool bFoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce4, Size: 0x1]
	float FoldGunFactor;//[Offset: 0xce8, Size: 0x4]
	bool bInUseSyringe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcec, Size: 0x1]
	bool bInUseShieldCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xced, Size: 0x1]
	bool bInBlendUseSyringe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcee, Size: 0x1]
	bool bInBlendUseShieldCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcef, Size: 0x1]
	bool bInBackpackSwitchGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1]
	float BackpackSwitchGunAlpha;//[Offset: 0xcf4, Size: 0x4]
	bool bBackpackSwitchGunPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 0x1]
	bool bInSwitchingStandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf9, Size: 0x1]
	bool bInSwitchingMoveDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfa, Size: 0x1]
	bool bSlideAlongSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfb, Size: 0x1]
	bool BeginTransitionStandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfc, Size: 0x1]
	bool BeginTransitionMoveDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfd, Size: 0x1]
	bool bMoveBackDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfe, Size: 0x1]
	bool bMoveLeftDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcff, Size: 0x1]
	bool bUsingReplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 0x1]
	AnimMontage* ADS_ON;//[Offset: 0xd08, Size: 0x8]
	AnimMontage* ADS_OFF;//[Offset: 0xd10, Size: 0x8]
	BlendSpace1D* Sprint;//[Offset: 0xd18, Size: 0x8]
	AnimSequence* Breathe;//[Offset: 0xd20, Size: 0x8]
	AnimSequence* Frisk;//[Offset: 0xd28, Size: 0x8]
	AnimSequence* SingleRightHandGun;//[Offset: 0xd30, Size: 0x8]
	AnimSequence* SwitchGun;//[Offset: 0xd38, Size: 0x8]
	AnimSequence* Shovel;//[Offset: 0xd40, Size: 0x8]
	AnimSequence* SlideStart;//[Offset: 0xd48, Size: 0x8]
	AnimSequence* SlideLoop;//[Offset: 0xd50, Size: 0x8]
	AnimSequence* SlideEnd;//[Offset: 0xd58, Size: 0x8]
	AnimSequence* SlideAim;//[Offset: 0xd60, Size: 0x8]
	AnimSequence* RescueOther;//[Offset: 0xd68, Size: 0x8]
	AnimSequence* RescueSelf;//[Offset: 0xd70, Size: 0x8]
	AnimSequence* BeRescue;//[Offset: 0xd78, Size: 0x8]
	AnimSequence* ADSLeftShield;//[Offset: 0xd80, Size: 0x8]
	AnimSequence* ADSBreatheAdd;//[Offset: 0xd88, Size: 0x8]
	BlendSpace1D* TPPFoldGunBS1D;//[Offset: 0xd90, Size: 0x8]
	AnimSequence* ClimbMove;//[Offset: 0xd98, Size: 0x8]
	AnimSequence* ClimbHangingIdle;//[Offset: 0xda0, Size: 0x8]
	AnimSequence* ClimbVault;//[Offset: 0xda8, Size: 0x8]
	BlendSpace* MovementBSCache_Cur;//[Offset: 0xdb0, Size: 0x8]
	BlendSpace* MovementBSCache_Dest;//[Offset: 0xdb8, Size: 0x8]
	bool OrientationWarpingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 0x1]
	bool IsUsingBowNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 0x1]
	BlendSpace* CurrentOrientationWarpingBS;//[Offset: 0xdc8, Size: 0x8]
	int CurrentOrientationWarpingDirection;//[Offset: 0xdd0, Size: 0x4]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting;//[Offset: 0xdd8, Size: 0x30]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting_Crouch;//[Offset: 0xe08, Size: 0x30]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting_Bow;//[Offset: 0xe38, Size: 0x30]
	CustomizedOrientationWarpingAngleSetting OrientationWarpingAngleSetting_Bow_Crouch;//[Offset: 0xe68, Size: 0x30]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand;//[Offset: 0xe98, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch;//[Offset: 0xea0, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand_WithWeapon;//[Offset: 0xea8, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch_WithWeapon;//[Offset: 0xeb0, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand_Syringe_ShieldCell;//[Offset: 0xeb8, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch_Syringe_ShieldCell;//[Offset: 0xec0, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigStand_Aiming;//[Offset: 0xec8, Size: 0x8]
	CharacterSpeedLayerConfig* CharacterSpeedLayerConfigCrouch_Aiming;//[Offset: 0xed0, Size: 0x8]
	float OrientationWarpingDirectionSwitchBuffer;//[Offset: 0xed8, Size: 0x4]
	BlendSpace* JumpStart;//[Offset: 0xee0, Size: 0x8]
	BlendSpace* FallingBS;//[Offset: 0xee8, Size: 0x8]
	BlendSpace* LightLanding;//[Offset: 0xef0, Size: 0x8]
	BlendSpace* HardLanding;//[Offset: 0xef8, Size: 0x8]
	AimOffsetBlendSpace* AimOffsetBS;//[Offset: 0xf00, Size: 0x8]
	AnimSequence* HandAnimLeft;//[Offset: 0xf08, Size: 0x8]
	AnimSequence* HandAnimRight;//[Offset: 0xf10, Size: 0x8]
	AnimSequence* HandAnimBoth;//[Offset: 0xf18, Size: 0x8]
	AnimSequence* GoUpZipline;//[Offset: 0xf20, Size: 0x8]
	AnimSequence* LoopZipline;//[Offset: 0xf28, Size: 0x8]
	AnimSequence* GoDownZipline;//[Offset: 0xf30, Size: 0x8]
	BlendSpace* Parachute_XFreeFallingAnim;//[Offset: 0xf38, Size: 0x8]
	BlendSpace* Parachute_YFreeFallingAnim;//[Offset: 0xf40, Size: 0x8]
	AnimSequence* Parachute_PreOpenAnim;//[Offset: 0xf48, Size: 0x8]
	AnimSequence* Parachute_PostOpenAnim;//[Offset: 0xf50, Size: 0x8]
	AnimSequence* Parachute_LandingAnim;//[Offset: 0xf58, Size: 0x8]
	AnimSequence* EquipAttachment;//[Offset: 0xf60, Size: 0x8]
	float ParachuteTurnInput;//[Offset: 0xf84, Size: 0x4]
	bool bEnableEmotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 0x1]
	float HandAnimLeftPlayRate;//[Offset: 0xf8c, Size: 0x4]
	float HandAnimRightPlayRate;//[Offset: 0xf90, Size: 0x4]
	float HandAnimBothPlayRate;//[Offset: 0xf94, Size: 0x4]
	<FName,bool> ExposeSkillCustomParams;//[Offset: 0xf98, Size: 0x50]
	bool ExposeOpenCastAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 0x1]
	bool ExposeCloseRightHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe9, Size: 0x1]
	bool ExposeCloseLeftHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfea, Size: 0x1]
	bool ExposeCloseTwoHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfeb, Size: 0x1]
	bool ExposeCloseGrenadeLeftHandSeq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 0x1]
	bool ExposeGrenadeTwoHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfed, Size: 0x1]
	bool ExposeOpenCastAoSP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfee, Size: 0x1]
	bool ExposeDisableSmallEye;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfef, Size: 0x1]
	bool ExposeGrapplingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff0, Size: 0x1]
	bool ExposeSetPathfinderAimState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff1, Size: 0x1]
	bool ExposeSetPathfinderStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff2, Size: 0x1]
	bool ExposeMoveNearlyZeroShakeBefore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff3, Size: 0x1]
	bool ExposedPathfinderGrappleVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff4, Size: 0x1]
	bool ExposeSkillZiplineIsLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff5, Size: 0x1]
	bool ExposedPathfinderGrappleCasterFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff6, Size: 0x1]
	bool ExposeAshSkillScaleProp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff7, Size: 0x1]
	BlendSpace* ExposeStandBs;//[Offset: 0xff8, Size: 0x8]
	BlendSpace* ExposeCrouchBs;//[Offset: 0x1000, Size: 0x8]
	BlendSpace* ExposeOneHandStandBs;//[Offset: 0x1008, Size: 0x8]
	BlendSpace* ExposeOneHandCrouchBs;//[Offset: 0x1010, Size: 0x8]
	BlendSpace1D* ExposeSprintBs;//[Offset: 0x1018, Size: 0x8]
	BlendSpace1D* ExposeOneHandSprintBs;//[Offset: 0x1020, Size: 0x8]
	BlendSpace* ExposeForwardFallingBs;//[Offset: 0x1028, Size: 0x8]
	BlendSpace* ExposeBackwardFallingBs;//[Offset: 0x1030, Size: 0x8]
	BlendSpace* ExposeSprintForwardFallingBs;//[Offset: 0x1038, Size: 0x8]
	BlendSpace* ExposeForwardMoveBs;//[Offset: 0x1040, Size: 0x8]
	BlendSpace* ExposeBackwardMoveBs;//[Offset: 0x1048, Size: 0x8]
	AimOffsetBlendSpace* ExposeSkillAo;//[Offset: 0x1050, Size: 0x8]
	BlendSpace* ExposeSkillBs;//[Offset: 0x1058, Size: 0x8]
	AnimSequence* ExposeSkillSeq;//[Offset: 0x1060, Size: 0x8]
	AnimSequence* ExposeGroundSlideStart;//[Offset: 0x1068, Size: 0x8]
	float ExposeDeltaTime;//[Offset: 0x1070, Size: 0x4]
	bool ExposeIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074, Size: 0x1]
	bool ExposeIsAimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1075, Size: 0x1]
	bool ExposeIsGibraltarAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1076, Size: 0x1]
	bool ExposeAimAndBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1077, Size: 0x1]
	float ExposeAlphaAimming;//[Offset: 0x1078, Size: 0x4]
	bool ExposeMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107c, Size: 0x1]
	bool ExposeMoveBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107d, Size: 0x1]
	bool ExposeMoveLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107e, Size: 0x1]
	bool ExposeMoveRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107f, Size: 0x1]
	float ExposeAimPitch;//[Offset: 0x1080, Size: 0x4]
	float ExposeAimYaw;//[Offset: 0x1084, Size: 0x4]
	float ExposeClimbProgress;//[Offset: 0x1088, Size: 0x4]
	bool ExposePoseIsStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 0x1]
	bool ExposePoseIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108d, Size: 0x1]
	bool ExposePoseIsOneHandStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108e, Size: 0x1]
	bool ExposePoseIsOneHandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108f, Size: 0x1]
	bool ExposePawnStateIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1090, Size: 0x1]
	bool ExposeIsFallingCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1091, Size: 0x1]
	bool ExposePoseIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1092, Size: 0x1]
	bool ExposePoseIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1093, Size: 0x1]
	bool ExposePoseIsClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 0x1]
	bool ExposePoseIsHang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1095, Size: 0x1]
	bool ExposePoseIsClimbOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1096, Size: 0x1]
	bool ExposePoseIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1097, Size: 0x1]
	bool ExposePoseIsLittleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 0x1]
	bool ExposeLastMoveIsSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1099, Size: 0x1]
	bool ExposeZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109a, Size: 0x1]
	bool ExposeZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109b, Size: 0x1]
	bool ExposeZiplineOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c, Size: 0x1]
	bool ExposeHoldGrenadeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109d, Size: 0x1]
	bool ExposeHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109e, Size: 0x1]
	bool ExposeHoldHeatShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109f, Size: 0x1]
	bool ExposeInAttachmentShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a0, Size: 0x1]
	float ExposeHangLocation;//[Offset: 0x10a4, Size: 0x4]
	Vector ExposeWeaponAimLocation;//[Offset: 0x10a8, Size: 0xc]
	float ExposeAttachmentShakeAlpha;//[Offset: 0x10b4, Size: 0x4]
	float ExposeBreathAlpha;//[Offset: 0x10b8, Size: 0x4]
	float ExposeBreathAddRate;//[Offset: 0x10bc, Size: 0x4]
	bool ExposeInFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 0x1]
	bool ExposeInStateFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c1, Size: 0x1]
	bool ExposeInSingleFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c2, Size: 0x1]
	bool ExposeMeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c3, Size: 0x1]
	Vector LastLocation;//[Offset: 0x10c4, Size: 0xc]
	bool ExposeIsUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 0x1]
	bool ExposeInArmedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 0x1]
	bool ExposeIsLongGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d2, Size: 0x1]
	bool ExposeIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d3, Size: 0x1]
	bool ExposeIsPeaceKeeper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d4, Size: 0x1]
	float ExposeRaiseWeaponTime;//[Offset: 0x10d8, Size: 0x4]
	float ExposeLowerWeaponTime;//[Offset: 0x10dc, Size: 0x4]
	float ExposeRaiseRateAfterClimb;//[Offset: 0x10e0, Size: 0x4]
	float ExposeRaiseAfterClimbTime;//[Offset: 0x10e4, Size: 0x4]
	Vector ExposeScalingCounter3D;//[Offset: 0x10e8, Size: 0xc]
	float ExposeWeaponTPPAO;//[Offset: 0x10f4, Size: 0x4]
	Vector ExposeWeaponTPPOffsetHand;//[Offset: 0x10f8, Size: 0xc]
	bool ExposeRandomBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1104, Size: 0x1]
	Vector ExposeBlendedVelocity;//[Offset: 0x1108, Size: 0xc]
	float ExposeYawDelta;//[Offset: 0x1114, Size: 0x4]
	bool ExposeIsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1118, Size: 0x1]
	Vector ExposeHurtDir;//[Offset: 0x111c, Size: 0xc]
	enum ExposeHitPositionDetailed;//[Offset: 0x1128, Size: 0x1]
	bool ExposeIsReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1129, Size: 0x1]
	bool ExposePutOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112a, Size: 0x1]
	bool ExposePutOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112b, Size: 0x1]
	bool ExposeUseSmallEye;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112c, Size: 0x1]
	bool ExposePlantBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112d, Size: 0x1]
	bool ExposeDefuseBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112e, Size: 0x1]
	bool ExposeDefuseBombSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112f, Size: 0x1]
	bool ExposePawnStateFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 0x1]
	bool ExposePawnStateBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1131, Size: 0x1]
	bool ExposeWeaponCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1132, Size: 0x1]
	Vector ExposeBackSocketLocation;//[Offset: 0x1134, Size: 0xc]
	Rotator ExposeBackSocketRotation;//[Offset: 0x1140, Size: 0xc]
	bool ExposeLeftSideCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114c, Size: 0x1]
	float ExposeIKHandR;//[Offset: 0x1150, Size: 0x4]
	float ExposeIKHandL;//[Offset: 0x1154, Size: 0x4]
	float ExposeHangOffset;//[Offset: 0x1158, Size: 0x4]
	bool ExposeMoveNearlyZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115c, Size: 0x1]
	Rotator ExposeWeaponRotate;//[Offset: 0x1160, Size: 0xc]
	Vector ExposeWeaponLocation;//[Offset: 0x116c, Size: 0xc]
	bool ExposeIsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1178, Size: 0x1]
	bool ExposeHasLookAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1179, Size: 0x1]
	Vector ExposeLookAtLocation;//[Offset: 0x117c, Size: 0xc]
	Rotator ExposeSpineRotation;//[Offset: 0x1188, Size: 0xc]
	float ExposeSkillAimPitchUp;//[Offset: 0x1194, Size: 0x4]
	float ExposeSkillAimPitchDown;//[Offset: 0x1198, Size: 0x4]
	float ExposeYawOffset;//[Offset: 0x119c, Size: 0x4]
	Vector ExposeTppArmLocation;//[Offset: 0x11a0, Size: 0xc]
	bool ExposeViewNotOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ac, Size: 0x1]
	bool ExposeMoveVelNotZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ad, Size: 0x1]
	bool ExposeForceInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ae, Size: 0x1]
	bool ExposeForceInFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11af, Size: 0x1]
	bool ExposeForceInFallingDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 0x1]
	float ExposeSprintPlayRate;//[Offset: 0x11b4, Size: 0x4]
	bool ExposeRandomIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b8, Size: 0x1]
	bool ExposeFireDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b9, Size: 0x1]
	bool ExposePadJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ba, Size: 0x1]
	bool ExposePadDoubleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11bb, Size: 0x1]
	bool ExposePropsWeaponRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11bc, Size: 0x1]
	float ExposeCastYaw;//[Offset: 0x11c0, Size: 0x4]
	float ExposeGrapplingPitch;//[Offset: 0x11c4, Size: 0x4]
	float ExposeGrapplingYaw;//[Offset: 0x11c8, Size: 0x4]
	bool ExposeIsDroneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cc, Size: 0x1]
	bool ExposeIsDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cd, Size: 0x1]
	bool ExposeIsHeirloomOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ce, Size: 0x1]
	bool ExposeIsFastTurningWithMeleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cf, Size: 0x1]
	float ExposeAimingAngle;//[Offset: 0x11d0, Size: 0x4]
	AnimSequence* ExposeZiplineStart;//[Offset: 0x11d8, Size: 0x8]
	AnimSequence* ExposeZiplineLoop;//[Offset: 0x11e0, Size: 0x8]
	AnimSequence* ExposeZiplineLoopSkill;//[Offset: 0x11e8, Size: 0x8]
	Vector ExposeZiplineHandGrabLoc;//[Offset: 0x11f0, Size: 0xc]
	float ExposeBlendedVelocityMakeRotZ;//[Offset: 0x11fc, Size: 0x4]
	bool ExposeNearWallRootOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1200, Size: 0x1]
	Vector ExposeNearWallRootOffsetVec;//[Offset: 0x1204, Size: 0xc]
	bool ExposeAimCenterAndNotPutOnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 0x1]
	float ExposeSlidingYawOffset;//[Offset: 0x1214, Size: 0x4]
	Rotator ExposePelvisSlidingYawOffset;//[Offset: 0x1218, Size: 0xc]
	float SlidingOffsetAngleThreshold;//[Offset: 0x1224, Size: 0x4]
	bool ExposeFinalCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 0x1]
	bool ExposeReplaceHeirloomPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1229, Size: 0x1]
	bool ExposeIsFinalFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122a, Size: 0x1]
	bool ExposeIsFinalRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122b, Size: 0x1]
	bool ExposeLeftHandNotZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122c, Size: 0x1]
	bool ExposeDistinguishUnarmedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122d, Size: 0x1]
	bool ExposeSyringeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122e, Size: 0x1]
	bool ExposeIsFinalSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122f, Size: 0x1]
	bool ExposeIsIkHandLOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1230, Size: 0x1]
	bool ExposeHeroIsMirageWattsonRevenant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1231, Size: 0x1]
	bool ExposeCloseBackSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1232, Size: 0x1]
	bool ExposeOpenBackSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1233, Size: 0x1]
	bool ExposeBaseMoveToFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1234, Size: 0x1]
	bool ExposeJumpStartToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1235, Size: 0x1]
	bool ExposeDelayClimbTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1236, Size: 0x1]
	bool ExposeMoveVelocityTolerance400;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1237, Size: 0x1]
	bool ExposeZiplineNotLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1238, Size: 0x1]
	bool ExposeZiplineSkillNotLeftHandUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1239, Size: 0x1]
	bool ExposeBombState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123a, Size: 0x1]
	bool ExposeAimmingCrouchAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123b, Size: 0x1]
	bool ExposeFoldGunNotSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123c, Size: 0x1]
	bool ExposeFinalHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123d, Size: 0x1]
	bool ExposeFinalOpenCastAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123e, Size: 0x1]
	bool ExposeOpenCastAoInPathfinder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123f, Size: 0x1]
	bool ExposeIsRescuingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1240, Size: 0x1]
	bool ExposeFinalNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1241, Size: 0x1]
	bool ExposeFullBodySkillPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1242, Size: 0x1]
	bool ExposeEnableWeaponFireAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1243, Size: 0x1]
	bool ExposeOpenSkillAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1244, Size: 0x1]
	bool ExposeOpenLeftHandSkillAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1245, Size: 0x1]
	bool ExposeTwoHandToLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1246, Size: 0x1]
	bool ExposeRightHandToTwoHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1247, Size: 0x1]
	bool ExposeSuppliesStateOrLeftAndBothHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1248, Size: 0x1]
	bool ExposeSyringeOrShieldCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1249, Size: 0x1]
	bool ExposeParachuteState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124a, Size: 0x1]
	float ExposeParachuteTurnInputVel;//[Offset: 0x124c, Size: 0x4]
	bool ExposeMirageBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1250, Size: 0x1]
	bool ExposeEnableBotEmotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1251, Size: 0x1]
	bool ExposeLeftHandAnimBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1252, Size: 0x1]
	float ExposeLeftHandAnimFloat;//[Offset: 0x1254, Size: 0x4]
	float ExposeFinalWeaponTPPAO;//[Offset: 0x1258, Size: 0x4]
	bool ExposeSignificance002;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125c, Size: 0x1]
	bool ExposeSignificance0015;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125d, Size: 0x1]
	bool ExposeStandAndNearlyZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125e, Size: 0x1]
	bool ExposeCrouchAndNearlyZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125f, Size: 0x1]
	bool ExposeStandAndNearlyZeroInGrenadeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1260, Size: 0x1]
	bool ExposeReventAndMonkeyKing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1261, Size: 0x1]
	bool ExposeOpenLeftHandAo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1262, Size: 0x1]
	bool ExposeRingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1263, Size: 0x1]
	Rotator ExposeAimingAngleVel;//[Offset: 0x1264, Size: 0xc]
	bool ExposeLayeredSlotInWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 0x1]
	bool ExposeFinalFireOrBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1271, Size: 0x1]
	bool ExposeFinalUseSmallEye;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1272, Size: 0x1]
	bool ExposeUnarmedOrPutOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1273, Size: 0x1]
	bool ExposeUnarmedOrWraithPistolSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1274, Size: 0x1]
	bool ExposeClimbOverAndWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1275, Size: 0x1]
	bool ExposeHoldGrenadeState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1276, Size: 0x1]
	bool ExposeFinalStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1277, Size: 0x1]
	Vector ExposeHangLocationVel;//[Offset: 0x1278, Size: 0xc]
	Vector ExposeFinalHangOffset;//[Offset: 0x1284, Size: 0xc]
	bool ExposeEnableAimCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1290, Size: 0x1]
	bool ExposeEnableTwoHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1291, Size: 0x1]
	bool ExposeEnableTwoHandIkPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1292, Size: 0x1]
	Vector ExposeAnimFinalHangOffset;//[Offset: 0x1294, Size: 0xc]
	float ExposeOverlayClavicleR;//[Offset: 0x12a0, Size: 0x4]
	float ExposeOverlayClavicleL;//[Offset: 0x12a4, Size: 0x4]
	float ExposeOverlayRoot;//[Offset: 0x12a8, Size: 0x4]
	float ExposeOverlayHandL;//[Offset: 0x12ac, Size: 0x4]
	float ExposeOverlayHandR;//[Offset: 0x12b0, Size: 0x4]
	float ExposeItemBlendWorldLocation;//[Offset: 0x12b4, Size: 0x4]
	bool ExposeIsFallingCrouchAndNotGrapplingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b8, Size: 0x1]
	bool ExposeGrenadeState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b9, Size: 0x1]
	bool ExposeEntryToKnockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ba, Size: 0x1]
	bool ExposeEntryToRescuing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12bb, Size: 0x1]
	bool ExposeDownMoveToRescuing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12bc, Size: 0x1]
	bool ExposeRescuingToDownMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12bd, Size: 0x1]
	bool ExposeEntryToClimeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12be, Size: 0x1]
	bool ExposeClimeMoveToEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12bf, Size: 0x1]
	bool ExposeEdgeHangToEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c0, Size: 0x1]
	bool ExposeClimbUpToEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c1, Size: 0x1]
	bool ExposeHangClimbToEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c2, Size: 0x1]
	bool ExposeGroundMoveToClimbMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c3, Size: 0x1]
	bool ExposeClimbMoveToGroundMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c4, Size: 0x1]
	bool ExposeHandSkillState14;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c5, Size: 0x1]
	bool ExposeHandSkillState13;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c6, Size: 0x1]
	bool ExposeHandSkillState7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c7, Size: 0x1]
	bool ExposeHandSkillState6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8, Size: 0x1]
	bool ExposeHandSkillState5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c9, Size: 0x1]
	bool ExposeMoveNearlyZeroNotCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ca, Size: 0x1]
	bool ExposeMoveNearlyZeroNotStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cb, Size: 0x1]
	bool ExposeStandZeroUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cc, Size: 0x1]
	bool ExposePathfinderStartNotSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cd, Size: 0x1]
	bool ExposeEntryToSlideStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ce, Size: 0x1]
	bool ExposeEntryToSlideLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cf, Size: 0x1]
	bool ExposeEntryToSlideStartLandingPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 0x1]
	bool ExposeEntryToSlideStartLandingRifle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d1, Size: 0x1]
	bool ExposeNormalMoveToCacheMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d2, Size: 0x1]
	bool ExposeNormalMoveToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d3, Size: 0x1]
	bool ExposeBaseMoveToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d4, Size: 0x1]
	bool ExposeCacheMoveToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d5, Size: 0x1]
	bool ExposeSprintToNormalMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d6, Size: 0x1]
	bool ExposeSprintToBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d7, Size: 0x1]
	bool ExposeSlideSMToSlideEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d8, Size: 0x1]
	bool ExposeSlideSMToNormalMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d9, Size: 0x1]
	bool ExposeBaseMoveToFallingRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12da, Size: 0x1]
	bool ExposeFallingToBaseMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12db, Size: 0x1]
	bool ExposeFallingToLandRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12dc, Size: 0x1]
	bool ExposeLandToBaseMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12dd, Size: 0x1]
	bool ExposeLandToFallingRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12de, Size: 0x1]
	bool ExposeJumpSMLandToBaseMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12df, Size: 0x1]
	bool ExposeDoubleJumpToLandRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e0, Size: 0x1]
	bool ExposeUnarmedSprintOrSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e1, Size: 0x1]
	bool ExposeMovementToStandSprintRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e2, Size: 0x1]
	bool ExposeSprintSpToSprintSlideRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e3, Size: 0x1]
	bool ExposeSprintSpToSprintStandRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e4, Size: 0x1]
	bool ExposeHitEnableFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e5, Size: 0x1]
	bool ExposeIsFinalTwoHandToOneHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e6, Size: 0x1]
	bool ExposeIsZiplineNotLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e7, Size: 0x1]
	Vector ExposeFppArmLocation;//[Offset: 0x12e8, Size: 0xc]
	bool ExposeIsUseKnockDownSMPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f4, Size: 0x1]
	bool ExposeIsOneHandCrouchORCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f5, Size: 0x1]
	bool ExposeIsCrouchORSlidingToAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f6, Size: 0x1]
	bool ExposeIsHeirloomOnAndUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f7, Size: 0x1]
	bool ExposeIsClimbingORHangANDIsOctaneAndInHandAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f8, Size: 0x1]
	bool ExposeIsMoveVelNotZeroANDSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f9, Size: 0x1]
	bool ExposeIsClimbMoveUseLeftHandPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fa, Size: 0x1]
	bool ExposeIsClimbOverAnimTypeEqualLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fb, Size: 0x1]
	bool ExposeIsProsWeaponRightPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fc, Size: 0x1]
	bool ExposeIsBaseMoveToSlideSMRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fd, Size: 0x1]
	bool ExposeIsBaseMoveToFallingRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fe, Size: 0x1]
	bool ExposeIsBaseMoveToJumpStartRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ff, Size: 0x1]
	bool ExposeIsJumpStartToBaseMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1300, Size: 0x1]
	bool ExposeIsFallingToBaseMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1301, Size: 0x1]
	bool ExposeIsFallingToLandingRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1302, Size: 0x1]
	bool ExposeIsLandToBaseMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1303, Size: 0x1]
	bool ExposeIsSlideSMToBaseMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1304, Size: 0x1]
	bool ExposeIsZiplineStateToJumpStateRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1305, Size: 0x1]
	bool ExposeIsMovementToStandToSprintRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1306, Size: 0x1]
	bool ExposeIsSprintSPToSprintTOSlideRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1307, Size: 0x1]
	bool ExposeIsMovementStateToEnterKeepZiplineRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 0x1]
	bool ExposeIsEnterKeepZiplineToLeaveZiplineRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1309, Size: 0x1]
	bool ExposeIsLeaveZiplineToEnterKeepZipLineRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130a, Size: 0x1]
	bool ExposeIsLeftAndRightToTwoHandRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130b, Size: 0x1]
	bool ExposeIsClimMoveToEntryRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130c, Size: 0x1]
	bool ExposeIsGroundMoveToClimbMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130d, Size: 0x1]
	bool ExposeIsClimbMoveToGroundMoveRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130e, Size: 0x1]
	bool ExposeIsNormalMovementToCacheMovementRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130f, Size: 0x1]
	bool ExposeIsCacheMovementToSlideSMRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1310, Size: 0x1]
	bool ExposeIsUseSyringeInAddLeftPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1311, Size: 0x1]
	bool ExposeIsUseLeftHandInSkillNormalSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1312, Size: 0x1]
	bool ExposeIsUseSwitchGunPoseFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1313, Size: 0x1]
	bool ExposeIsUseAimOffsetMoveLeftCachePoseFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1314, Size: 0x1]
	bool ExposeIsUseAimOffsetMoveRightCachePoseFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1315, Size: 0x1]
	bool ExposeIsUseSyringeInAddLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1316, Size: 0x1]
	bool ExposeIsUseSyringInStateFPPC1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1317, Size: 0x1]
	bool ExposeIsUseSyringInStateFPPC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1318, Size: 0x1]
	Vector ExposeEdgeClimbUpStateTranf;//[Offset: 0x131c, Size: 0xc]
	Vector ExposeEdgeHangStateTranf;//[Offset: 0x1328, Size: 0xc]
	Rotator ExposeCameraSpringRotFPP;//[Offset: 0x1334, Size: 0xc]
	bool ExposeLandToBaseMoveRuleFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1340, Size: 0x1]
	bool ExposeEnableModifyBoneTransWhenClimbMoveFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1341, Size: 0x1]
	float LandToBaseMoveRelevantTimeThreshold;//[Offset: 0x1344, Size: 0x4]
	bool ExposeSprintToStandToSTSprintRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1348, Size: 0x1]
	bool ExposeSprintToSlideToMovementRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1349, Size: 0x1]
	bool ExposeStandToSprintToSprintSPRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134a, Size: 0x1]
	bool ExposeSprintToStandToMovementRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134b, Size: 0x1]
	bool C_IsJumpStateFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134c, Size: 0x1]
	bool ExposeSprintSPToSprintToStandRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134d, Size: 0x1]
	bool ExposeIsClimbMoveModifyBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134e, Size: 0x1]
	bool ExposeIsTransjecControllerBoneFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134f, Size: 0x1]
	bool GetPawnOwnerFromParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1350, Size: 0x1]
	ApexCharacter* OwnerPawn;//[Offset: 0x1358, Size: 0x8]
	AnimSequence* EnterSprintRtSeq;//[Offset: 0x1368, Size: 0x8]
	AnimSequence* KeepSprintPoseRtSeq;//[Offset: 0x1370, Size: 0x8]
	AnimSequence* LeaveSprintInStandRtSeq;//[Offset: 0x1378, Size: 0x8]
	AnimSequence* LeaveSprintInSlideRtSeq;//[Offset: 0x1380, Size: 0x8]
	AnimSequence* EnterZiplineWeaponRtSeq;//[Offset: 0x1388, Size: 0x8]
	AnimSequence* KeepZiplineWeaponPoseRtSeq;//[Offset: 0x1390, Size: 0x8]
	AnimSequence* LeaveZiplineWeaponRtSeq;//[Offset: 0x1398, Size: 0x8]
	BlendSpace* MovingUpBodyOverlayRtBS;//[Offset: 0x13a0, Size: 0x8]
	void StopAnimMontageByAnimTypeAndLayer(byte AnimType, byte AnimLayer);// 0x5ee7e68
	void SetExposeCloseLeftHandSeq(bool InExposeCloseLeftHandSeq);// 0x7976820
	void OnCharacterHitByOther(ApexCharacter* TargetCharacter, out const ApexDamageInfo DamageInfo);// 0x4833900
	void InnerHandlePlayAnimType(byte CharacterAnimType, float InPlayRate, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x79771d0
	void HandlePlayPawnMontageByAnimPoseType(byte InPawnAnimType, byte InPoseType, float InPlayRate, float InStart, bool bInStopAllMontages, bool bInIsFPP);// 0x4e9c9c0
	void HandlePlayerWeaponStateChanged(enum NewState, ApgameWeaponCoreComponent* InCoreComp);// 0x7977d20
	void HandlePlayerChangeFlyWingState(bool IsEnter);// 0x7976e38
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection);// 0x7977ad8
	void HandlePlayAnimTypeTwoViews(byte CharacterAnimType, float InPlayRate, float InTimeToStartMontageAt, bool bStopAllMontages, bool bIsFPP);// 0x7976f04
	void HandlePlayAnimType(byte CharacterAnimType, bool bPlayOrStop);// 0x797740c
	void HandlePlayAnimMontageDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, APEXAnimInstance* AnimInstance, bool bStopAllMontage);// 0x79768e0
	void HandleOnMontageStop(AnimMontage* MontageToStop, bool IsInterrupted);// 0x7976c24
	void HandleMontagePlayByCameraModeDelegate(AnimMontage* FPPMontageToPlay, AnimMontage* TPPMontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection);// 0x7977814
	void HandleIsEnterNearDeathDelegate(bool InIsNearDeath);// 0x7976d6c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float BlendTime);// 0x7977554

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: APEXAnimInstanceProxy.AnimInstanceProxy
	ApexCharacterBase* OwnerPawn;//[Offset: 0x7b0, Size: 0x8]
	APEXAnimInstance* ParentAnimInst;//[Offset: 0x7b8, Size: 0x8]
	bool LastMoveDirIsBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	bool LastMoveDirIsLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 0x1]
	OrientationWarpingAngleConfig OrientationWarpingAngle;//[Offset: 0x7c8, Size: 0x10]
	int CurrentOrientationWarpingDirectionIndex;//[Offset: 0x7d8, Size: 0x4]
	int PreviousOrientationWarpingDirectionIndex;//[Offset: 0x7dc, Size: 0x4]
	float CurrentPlayRate;//[Offset: 0x7e0, Size: 0x4]
	float CurrentDirectionValue;//[Offset: 0x7e4, Size: 0x4]
	float CurrentGearValue;//[Offset: 0x7e8, Size: 0x4]
	int CurrentGearIndex;//[Offset: 0x7ec, Size: 0x4]
	int PreviousGearIndex;//[Offset: 0x7f0, Size: 0x4]
	bool CacheBlendToggleStandCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 0x1]
	FName IKHandRName;//[Offset: 0x828, Size: 0x8]
	FName IKHandLName;//[Offset: 0x830, Size: 0x8]
	FName HeadSocketName;//[Offset: 0x838, Size: 0x8]
	float RandomIdleTime;//[Offset: 0x840, Size: 0x4]
	float FireDelayTime;//[Offset: 0x844, Size: 0x4]
	float ForceInFallingRealtime;//[Offset: 0x84c, Size: 0x4]
	bool DelayClimbOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 0x1]
	bool UpdateSkillStateLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 0x1]

--------------------------------
Class: AnimInstanceProxy
	float SimulateInternalTimeAccumulator;//[Offset: 0x6dc, Size: 0x4]

--------------------------------
Class: OrientationWarpingAngleConfig
	float[] OrientationWarpingAngles;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x20, Size: 0x10]
	FName Name;//[Offset: 0x30, Size: 0x8]
	FName Group;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AnimNode_Base
	float SignificanceThreshold;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x20, Size: 0x10]
	FName SlotName;//[Offset: 0x30, Size: 0x8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x40, Size: 0x8]
	float PlayRateBasis;//[Offset: 0x48, Size: 0x4]
	float PlayRate;//[Offset: 0x4c, Size: 0x4]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x50, Size: 0x30]
	float StartPosition;//[Offset: 0x80, Size: 0x4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x1c, Size: 0x4]
	byte GroupRole;//[Offset: 0x20, Size: 0x1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	float BlendWeight;//[Offset: 0x24, Size: 0x4]
	float InternalTimeAccumulator;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	InputRange InRange;//[Offset: 0x4, Size: 0x8]
	InputRange OutRange;//[Offset: 0xc, Size: 0x8]
	float Scale;//[Offset: 0x14, Size: 0x4]
	float Bias;//[Offset: 0x18, Size: 0x4]
	float ClampMin;//[Offset: 0x1c, Size: 0x4]
	float ClampMax;//[Offset: 0x20, Size: 0x4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AnimBPLodConfig
	enum Grade;//[Offset: 0x0, Size: 0x1]
	AnimSignificanceInfo[] AnimSignificanceDataArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimSignificanceInfo
	enum Type;//[Offset: 0x0, Size: 0x1]
	float Significance;//[Offset: 0x4, Size: 0x4]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableNearWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: CustomizedOrientationWarpingAngleSetting
	CustomizedOrientationWarpingAngleRange[] RangeSetting;//[Offset: 0x0, Size: 0x10]
	float[] DirectionAngleSetting;//[Offset: 0x10, Size: 0x10]
	CustomizedOrientationWarpingIndexGroup[] DirectionGroups;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CustomizedOrientationWarpingAngleRange
	Vector2D AngleRange;//[Offset: 0x0, Size: 0x8]
	int DirectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CustomizedOrientationWarpingIndexGroup
	<int> DirectionGroup;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ApexDamageInfo

--------------------------------
Class: CharacterSpeedLayerConfig.Object
	SingleCharacterSpeedLayer[] Layers;//[Offset: 0x28, Size: 0x10]
	SingleCharacterSpeedLayer LowSpeedLayer;//[Offset: 0x38, Size: 0x10]
	int LowSpeedGearIndex;//[Offset: 0x48, Size: 0x4]
	float SpeedRangeBuffer;//[Offset: 0x4c, Size: 0x4]
	int CalculateCurrentLayerIndex(int inPreviousIndex, float inCurrentVelocity, out float outPlayRate);// 0x6755664

--------------------------------
Class: SingleCharacterSpeedLayer
	float AnimationStandardVelocity;//[Offset: 0x0, Size: 0x4]
	float AnimationLayerSpeed;//[Offset: 0x4, Size: 0x4]
	Vector2D LayerRange;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: CircleAudio_BP_C.RadiationCircleAudio.Actor.Object
	AudioEffectManager* CircleAudioEffect;//[Offset: 0x300, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 0x8]

--------------------------------
Class: RadiationCircleAudio.Actor.Object
	AudioEffectManager* OwnedAudioEffectManager;//[Offset: 0x270, Size: 0x8]
	RadiationCircleStateComponent* CurCircleState;//[Offset: 0x278, Size: 0x8]
	<int,CircleAudioConfig> CircleIndex2CircleAudioConfig;//[Offset: 0x280, Size: 0x50]
	CircleAudioConfig DefaultCircleAudioConf;//[Offset: 0x2d0, Size: 0x18]
	float ListenHeightOffset;//[Offset: 0x2e8, Size: 0x4]
	float PosUpdateInterval;//[Offset: 0x2ec, Size: 0x4]
	float UpdateInterval;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: CircleAudioConfig
	FName AudioID_CircleMoving;//[Offset: 0x0, Size: 0x8]
	FName AudioID_CircleStop;//[Offset: 0x8, Size: 0x8]
	FName AudioID_CircleStay;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BP_PlaneCharacter_C.PlaneCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6c0, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x6c8, Size: 0x8]
	CameraFOVHandler* TPP_CameraFOVHandler;//[Offset: 0x6d0, Size: 0x8]
	TargetViewCameraModeHandler* TargetViewCameraModeHandler1;//[Offset: 0x6d8, Size: 0x8]
	CameraComponent* TPP_Camera;//[Offset: 0x6e0, Size: 0x8]
	CustomSpringArmComponent* TPP_SpringArm;//[Offset: 0x6e8, Size: 0x8]
	CameraFOVHandler* FPP_CameraFOVHandler;//[Offset: 0x6f0, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x6f8, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_08;//[Offset: 0x700, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_07;//[Offset: 0x708, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_06;//[Offset: 0x710, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_05;//[Offset: 0x718, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_03;//[Offset: 0x720, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_02;//[Offset: 0x728, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_01;//[Offset: 0x730, Size: 0x8]
	ParticleSystemComponent* P_JumpAirship_Airflow_04;//[Offset: 0x738, Size: 0x8]
	CustomSpringArmComponent* FPP_SpringArm;//[Offset: 0x740, Size: 0x8]
	StaticMeshComponent* ST_Machinery_JumpAirship;//[Offset: 0x748, Size: 0x8]
	CameraComponent* FPP_Camera;//[Offset: 0x750, Size: 0x8]
	UserWidget* ParachuteWidget;//[Offset: 0x758, Size: 0x8]
	AkAudioEvent* PlaneEngineEvent;//[Offset: 0x760, Size: 0x28]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_PlaneCharacter(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, StaticMeshAsync* CallFunc_SetStaticMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue);// 0xa1d39f8

--------------------------------
Class: PlaneCharacter.Character.Pawn.Actor.Object
	bool bUsedSpringArmRotWhenBecomeViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool bFlyToJumpPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x689, Size: 0x1]
	FString PlaneEngineSound;//[Offset: 0x690, Size: 0x10]
	ApexPlayerController* ClientPC;//[Offset: 0x6a0, Size: 0x8]
	TargetViewCameraModeHandler* TargetViewCameraModeHandler;//[Offset: 0x6a8, Size: 0x8]
	enum ParachuteTriggerReason;//[Offset: 0x6b0, Size: 0x1]
	void OnRep_bFlyToJumpPoint();// 0xa163788
	Vector GetPlayerLeavePlanePos();// 0x7de5a4c
	CameraComponent* GetPlaneFPPCamera();// 0x7de5b20
	SpringArmComponent* GetCurSpringArm();// 0x7de5aec
	CameraFOVHandler* GetCurFOVHandler();// 0x7de5ab8
	TargetViewCameraModeHandler* GetCameraModeHandler();// 0x7de5a84

--------------------------------
Class: StaticMeshAsync.AsyncLoaderBase.Object
	StaticMesh* StaticMesh;//[Offset: 0x38, Size: 0x8]
	StaticMesh* SOPStaticMesh;//[Offset: 0x40, Size: 0x28]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x68, Size: 0x8]
	void SetStaticMesh(StaticMeshComponent* NewMeshComp, StaticMesh* NewMesh, out const delegate FinishedCallback);// 0x7e7e8a4
	void OnLoadStaticMeshFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, StaticMesh* NewMesh);// 0x7e7e2fc
	StaticMesh* GetStaticMesh();// 0x7e7e868
	StaticMesh* GetSOPStaticMesh();// 0x7e7e76c

--------------------------------
Class: CameraFOVHandler.ActorComponent.Object
	float DefaultTargetFOV;//[Offset: 0xf8, Size: 0x4]
	float LerpSpeed;//[Offset: 0xfc, Size: 0x4]
	float Tolerance;//[Offset: 0x100, Size: 0x4]
	CameraComponent* CacheCam;//[Offset: 0x108, Size: 0x8]
	Vector2D OwnerHiddenFOVRange;//[Offset: 0x110, Size: 0x8]
	float NearClippingPlaneValue;//[Offset: 0x118, Size: 0x4]
	void SetCamera(CameraComponent* Cam);// 0x7b44a4c
	void LerpToTargetFOV(float NewLerpSpeed, float NewTargetFOV);// 0x7b44b44
	void LerpToDefaultFOV(float NewLerpSpeed);// 0x7b44c7c
	CameraComponent* GetCamera();// 0x7b44b08

--------------------------------
Class: TargetViewCameraModeHandler.ActorComponent.Object
	TargetViewCameraModeItem* DefaultCameraModeItem;//[Offset: 0x100, Size: 0x8]
	<enum,FName> MapCamModeID2MatchCompTag;//[Offset: 0x108, Size: 0x50]
	<enum,TargetViewCameraModeItem*> MapCamModeID2CameraModeItem;//[Offset: 0x158, Size: 0x50]
	void SwitchCameraMode(enum NewCameraModeID);// 0x7e8ddcc
	void SetCameraModeItemEnable(enum CameraModeID, bool enable);// 0x7e8dc8c
	void RefreshCameraModeItems();// 0x7e8e250
	void OnJumpCameraChange();// 0x7e8dc78
	void OnCharacterCameraModeChanged();// 0x4f9b0cc
	void InitCameraModeItems();// 0x7e8e264
	enum GetPlayerCurCharacterCameraMode();// 0x7e8e094
	SpringArmComponent* GetCurSpringArm();// 0x7e8df8c
	CameraFOVHandler* GetCurFOVHandler();// 0x7e8de88
	TargetViewCameraModeItem* GetCurCameraModeItem();// 0x7e8e18c
	enum GetCurCameraModeID();// 0x7e8e058
	CameraComponent* GetCurCamera();// 0x7e8debc
	TargetViewCameraModeItem* GetCameraModeItem(enum CameraModeID);// 0x7e8e0c8

--------------------------------
Class: TargetViewCameraModeItem.Object
	CameraComponent* CamComp;//[Offset: 0x28, Size: 0x8]
	SpringArmComponent* SpringArmComp;//[Offset: 0x30, Size: 0x8]
	CameraFOVHandler* CameraFOVHandler;//[Offset: 0x38, Size: 0x8]
	FName MatchCompTag;//[Offset: 0x40, Size: 0x8]
	Actor* TargetViewActor;//[Offset: 0x48, Size: 0x8]
	void SetCameraModeEnable(bool enable);// 0x7e8d608
	void InitDefaultCameraModeItem(Actor* TargetView);// 0x7e8d6cc
	void InitCameraModeItem(Actor* TargetView, FName MatchTag);// 0x7e8d788

--------------------------------
Class: CustomSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: Character_Ash_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2538, Size: 0x8]
	AshComponent* Ash;//[Offset: 0x2540, Size: 0x8]
	ParticleSystemComponent* Efx;//[Offset: 0x2548, Size: 0x8]
	void NewFunction(out float OutGravity);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void ExecuteUbergraph_Character_Ash(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0xa1d39f8

--------------------------------
Class: APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2480, Size: 0x8]
	GameplayTasksComponent* GameplayTasks;//[Offset: 0x2488, Size: 0x8]
	AutoShootTargetComponent* AutoShootTarget;//[Offset: 0x2490, Size: 0x8]
	EffectViewManager_BP_C* EffectViewManager_BP;//[Offset: 0x2498, Size: 0x8]
	CharacterAudioEffectManager_BP_C* CharacterAudioEffectManager_BP;//[Offset: 0x24a0, Size: 0x8]
	byte CurrentGunSlot;//[Offset: 0x24a8, Size: 0x1]
	bool is in air;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a9, Size: 0x1]
	Rotator NewVar;//[Offset: 0x24ac, Size: 0xc]
	bool JumpCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b8, Size: 0x1]
	bool LandCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b9, Size: 0x1]
	bool isSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ba, Size: 0x1]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24bb, Size: 0x1]
	float ClimbPrecess;//[Offset: 0x24bc, Size: 0x4]
	float Local Max Head Yaw;//[Offset: 0x24c0, Size: 0x4]
	Actor* Local Self;//[Offset: 0x24c8, Size: 0x8]
	Rotator HeadRotation;//[Offset: 0x24d0, Size: 0xc]
	bool PistolFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24dc, Size: 0x1]
	bool isPadJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24dd, Size: 0x1]
	bool IsJumpState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24de, Size: 0x1]
	Transform ZipHandGrabTransform;//[Offset: 0x24e0, Size: 0x30]
	bool ClimbSwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2510, Size: 0x1]
	bool RingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2511, Size: 0x1]
	Vector RecallEndPosition;//[Offset: 0x2514, Size: 0xc]
	RandowSpawnItemEntry[] PerkItemList;//[Offset: 0x2520, Size: 0x10]
	bool bHiddenAttachMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2530, Size: 0x1]
	void SpawnPerkItem(Actor* InActor, Vector LaunchPosition, Vector LaunchDirection, out RandowSpawnItemEntry[] ItemList, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasPerkPutOn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, APPerkManagerComponent* CallFunc_GetPerkManagerComp_ReturnValue, PickUpWrapperActor* CallFunc_RandomSpawnItemByWeight_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PickUpWrapperActor* CallFunc_RandomSpawnItemByWeight_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_HasBuff_ReturnValue);// 0xa1d39f8
	void IsInFinisher(out bool In, ApexPlayerState* K2Node_DynamicCast_AsApex_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFinisher_ReturnValue);// 0xa1d39f8
	void GetRoleType(out FName ReturnRoleType, bool CallFunc_IsObedInCurrentClient_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsStandalone_ReturnValue);// 0xa1d39f8
	void TPPorFPP(enum CallFunc_GetCurrentCameraMode_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xa1d39f8
	void SetPlayerNameColor();// 0xa1d39f8
	void OnClickChangeSkin();// 0xa1d39f8
	void OnClickCrouch(bool CallFunc_HasState_ReturnValue);// 0xa1d39f8
	void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0xa1d39f8
	void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0xa1d39f8
	void InpActEvt_Attack_K2Node_InputActionEvent(Key Key);// 0xa1d39f8
	void InpActEvt_Attack_K2Node_InputActionEvent(Key Key);// 0xa1d39f8
	void InpActEvt_UpToZipline_K2Node_InputActionEvent(Key Key);// 0xa1d39f8
	void OnLoaded_B9353F62426B7F6A6FD931B1BB446E13(class Object Loaded);// 0xa1d39f8
	void SetAllCollisionEnabled(bool bEnabled);// 0xa1d39f8
	void Draw Debug(Vector Location, float Radius, LinearColor Color, float Duration, float Thickness);// 0xa1d39f8
	void OnBPIsInvincibleChange();// 0xa1d39f8
	void ReceiveOnEnterPawnState(enum NewState);// 0xa1d39f8
	void OnPlayerStartFireDelegate_Event(Weapon* Weapon);// 0xa1d39f8
	void OnPlayTotemRecallTrailSFX(out const Vector StartPosition, out const Vector EndPosition);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_APGameCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, class Object K2Node_CustomEvent_Loaded, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, Key K2Node_InputActionEvent_Key, bool K2Node_Event_bEnabled, Vector K2Node_CustomEvent_Location, float K2Node_CustomEvent_Radius, LinearColor K2Node_CustomEvent_Color, float K2Node_CustomEvent_Duration, float K2Node_CustomEvent_Thickness, bool CallFunc_TriggerEvent_ReturnValue, bool CallFunc_TriggerEvent_ReturnValue, enum K2Node_Event_NewState, Weapon* K2Node_CustomEvent_Weapon, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, const Vector K2Node_Event_StartPosition, const Vector K2Node_Event_EndPosition, Transform CallFunc_Conv_VectorToTransform_ReturnValue, FName CallFunc_GetRoleType_ReturnRoleType, bool K2Node_SwitchName_CmpSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsInFinisher_In, Actor* CallFunc_FinishSpawningActor_ReturnValue, Key K2Node_InputActionEvent_Key, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess);// 0xa1d39f8

--------------------------------
Class: AutoShootTargetComponent.ActorComponent.Object
	ApexCharacter* ApexCharacter;//[Offset: 0xf8, Size: 0x8]
	bool IsTeammate(Pawn* Other);// 0x7ad4d78

--------------------------------
Class: EffectViewManager_BP_C.EffectViewManager.ActorComponent.Object

--------------------------------
Class: CharacterAudioEffectManager_BP_C.AudioEffectManager.ActorComponent.Object

--------------------------------
Class: AshComponent.ActorComponent.Object
	float ShowTipDistance;//[Offset: 0xf8, Size: 0x4]
	float ShowOperatorDistance;//[Offset: 0xfc, Size: 0x4]
	float BoxFov;//[Offset: 0x100, Size: 0x4]
	float EnemyFov;//[Offset: 0x104, Size: 0x4]
	bool DevForceDeathBoxUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	int PassiveSkillID;//[Offset: 0x10c, Size: 0x4]
	byte UsedMinimapMask;//[Offset: 0x110, Size: 0x1]
	int MapItemQltyPerkID;//[Offset: 0x114, Size: 0x4]
	int OpenTombBoxPerkID;//[Offset: 0x118, Size: 0x4]
	int MarkTombBoxPerkID;//[Offset: 0x11c, Size: 0x4]
	int TrackUnlockShield;//[Offset: 0x120, Size: 0x4]
	int TrackUnlockAutoPing;//[Offset: 0x124, Size: 0x4]
	float TrackDelta;//[Offset: 0x128, Size: 0x4]
	int TrackCount;//[Offset: 0x12c, Size: 0x4]
	int TombBoxSignID;//[Offset: 0x130, Size: 0x4]
	float TunnelStepDist;//[Offset: 0x134, Size: 0x4]
	float MinDistance;//[Offset: 0x138, Size: 0x4]
	PlayerTombBox* SelectTombBox;//[Offset: 0x160, Size: 0x8]
	PlayerTombBox*[] UsedTombBoxList;//[Offset: 0x168, Size: 0x10]
	OpenTombBoxSyncData[] OpenedTombBoxList;//[Offset: 0x178, Size: 0x10]
	AddTombBoxSyncData[] TombBoxLastKillers;//[Offset: 0x188, Size: 0x10]
	ApexPlayerState*[] TrackAliveList;//[Offset: 0x198, Size: 0x10]
	<PlayerTombBox*,int> TombBoxMapIconID;//[Offset: 0x1b0, Size: 0x50]
	int[] UsedTombBoxMapIconID;//[Offset: 0x200, Size: 0x10]
	PlayerTombBox*[] WaitForGetLastKillers;//[Offset: 0x210, Size: 0x10]
	float PerkEffectTime;//[Offset: 0x23c, Size: 0x4]
	bool bHadCastOnceThisCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	void UseDataKnife_SimpleForAI(PlayerTombBox* TombBox);// 0x7ab7778
	void UseDataKnife(PlayerTombBox* TombBox);// 0x7ab79fc
	void SpawnDataKnifeEffect(out Vector OutLocation, out Vector OutRotation);// 0x61d7818
	void ShowTrackTips(PlayerTombBox* TombBox, int count);// 0x7ab793c
	void ShowTrackHead(PlayerTombBox* TombBox, int count);// 0x7ab787c
	void SetSelectTombBox(PlayerTombBox* TombBox);// 0x7ab76b8
	void SetOpenedTombBoxList(int Index, int PlayerKey);// 0x7ab74c8
	void OnRep_HadCastOnceThisCD();// 0x7ab71f0
	void OnReceiveSkillEvent(int InSkillID, enum InSkillEvent, SkillEventParam* InParam);// 0x7ab7aa8
	void OnPlayerTombBoxUsed(PlayerTombBox* TombBox);// 0x7ab7c54
	void OnPlayerTombBoxRemove(PlayerTombBox* TombBox);// 0x7ab7d4c
	void OnPlayerTombBoxQuality(PlayerTombBox* TombBox);// 0x7ab7cd0
	void OnPlayerTombBoxOpen(uint32 PlayerKey, uint32 TombOwnerKey);// 0x7ab7b9c
	void OnPlayerTombBoxInit(PlayerTombBox* TombBox);// 0x7ab7dc8
	void OnPlayerTombBoxAdd(PlayerTombBox* TombBox);// 0x7ab7e44
	void OnCharacterGotoDie(ApexCharacter* HandleCharacter, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x7ab7ec0
	PlayerTombBox* GetSelectedTombBox();// 0x6007e78
	void GeneratePhaseBreachPathInfo(out PhaseBreachTargetInfo Info, const Vector EndPos);// 0x7ab7348
	void DeleteTombBoxTip();// 0x7ab7764
	void DeleteTipWidget(int ID);// 0x7ab7204
	int CreatTipWidget(const enum Type, Actor* FollowActor);// 0x7ab7280
	void CreateTombBoxTip();// 0x7ab7750
	void ClientUseDataKnife();// 0x7ab773c
	bool CanUseTombBox_SimpleForAI(PlayerTombBox* TombBox);// 0x7ab77f4
	void AddUsedTombBoxList(PlayerTombBox* TombBox);// 0x7ab763c
	void AddOpenedTombBoxList(out OpenTombBoxSyncData TombBoxData);// 0x7ab7580
	void AddKillerTombBoxList(PlayerTombBox* TombBox);// 0x7ab744c

--------------------------------
Class: OpenTombBoxSyncData
	PlayerTombBox* TombBox;//[Offset: 0x0, Size: 0x8]
	int[] OpenPlayerKeyList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AddTombBoxSyncData
	PlayerTombBox* TombBox;//[Offset: 0x0, Size: 0x8]
	ApexPlayerState* PlayerState;//[Offset: 0x8, Size: 0x8]
	enum From;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PhaseBreachTargetInfo
	Vector[] PosList;//[Offset: 0x0, Size: 0x10]
	Vector StartPos;//[Offset: 0x10, Size: 0xc]
	Vector EndPos;//[Offset: 0x1c, Size: 0xc]
	Vector PathDir;//[Offset: 0x28, Size: 0xc]
	float PathDistance;//[Offset: 0x34, Size: 0x4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: RandowSpawnItemEntry
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Weight;//[Offset: 0x4, Size: 0x4]
	int ItemCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Character_Wraith_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2538, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_Character_Wraith_BP(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: Character_Octane_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2538, Size: 0x8]
	float Perk100902003DurationMin;//[Offset: 0x2540, Size: 0x4]
	float Perk100902003Damage;//[Offset: 0x2544, Size: 0x4]
	float Perk100902003TickInterval;//[Offset: 0x2548, Size: 0x4]
	bool IsTecCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254c, Size: 0x1]
	float TecCastingTime;//[Offset: 0x2550, Size: 0x4]
	void CanBeStopPerk100902003(out bool bResult, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0xa1d39f8
	void HasPerk100902003(out bool Has, bool CallFunc_HasTag_ReturnValue);// 0xa1d39f8
	void GetTecPhaseDuration(out float PhaseDuration, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0xa1d39f8
	void CheckAndPlayAnimationSound(AnimMontage* CurrMontageAnim, AnimMontage* TriggerMontage, FName SectionName, AkAudioEvent* AkEvent, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const delegate Temp_delegate_Variable, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, int CallFunc_PostEvent_ReturnValue, FName CallFunc_Montage_GetCurrentSection_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void OnMontagePlayEnd(AnimMontage* Montage, bool bInterrupted);// 0xa1d39f8
	void OnMontagePlayStart(AnimMontage* Montage);// 0xa1d39f8
	void OnApexSkillEvent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0xa1d39f8
	void ExecuteUbergraph_Character_Octane_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, AnimMontage* K2Node_CustomEvent_Montage, bool K2Node_CustomEvent_bInterrupted, AnimMontage* K2Node_CustomEvent_Montage, int K2Node_CustomEvent_SkillID, enum K2Node_CustomEvent_SkillEvent, SkillEventParam* K2Node_CustomEvent_SkillEventParam, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue);// 0xa1d39f8

--------------------------------
Class: ClimbGuideActor_C.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x270, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: Octane_PassiveSkill_BP_C.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x560, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x568, Size: 0x8]
	float curCD;//[Offset: 0x570, Size: 0x4]
	float maxCD;//[Offset: 0x574, Size: 0x4]
	float PlayerMaxHP;//[Offset: 0x578, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x57c, Size: 0x4]
	float PrevHp;//[Offset: 0x580, Size: 0x4]
	float PreShieldValue;//[Offset: 0x584, Size: 0x4]
	float TimeRecoveryFromLastTick;//[Offset: 0x588, Size: 0x4]
	bool IsOnRegenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	float RecoverUpdateInterleave;//[Offset: 0x590, Size: 0x4]
	float TimeRecoveryHealingFromLastTick;//[Offset: 0x594, Size: 0x4]
	float TimeRecoveryHealthFromLastTick;//[Offset: 0x598, Size: 0x4]
	bool HealthRecoverFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 0x1]
	bool RecoverSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 0x1]
	bool IsInInterruptCDOnLastTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59e, Size: 0x1]
	bool IsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59f, Size: 0x1]
	float AccumlatedRecoveryHP;//[Offset: 0x5a0, Size: 0x4]
	void IsDisable(out bool Disable, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsDisableTriggerSkill_Result, Character_Octane_BP_C* K2Node_DynamicCast_AsCharacter_Octane_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSilenced_Silenced, bool CallFunc_IsBleedingOut_NewParam, bool CallFunc_IfRecvDamage_HasDamage, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xa1d39f8
	void IsDisableTriggerSkill(out bool Result, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDisableTriggerSkill_ReturnValue);// 0xa1d39f8
	void InternalRecovery(float TargetValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character);// 0xa1d39f8
	void IsSilenced(out bool Silenced, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsSilenced_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8
	void IsBleedingOut(out bool NewParam, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0xa1d39f8
	void AddAccumlatedRecoveryHPToTrakerManager(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetLegendID_ReturnValue, TrackerData K2Node_MakeStruct_TrackerData);// 0xa1d39f8
	void CheckStimSkillExecCorrection(float LocalHealth, ApexCharacter* LocalOwner, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealth_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue);// 0xa1d39f8
	void RestartCD(ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealthHealing_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0xa1d39f8
	void FloatWayBiger(float NewParam, float NewParam1, out bool NewParam2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xa1d39f8
	void AddPlayerHealth(float Heal, bool ForceSendTracker, float LocalFinalHP, float LocalCurrHP, float LocalAddHP, ApexCharacter* LocalCharacter, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_GetCharacterHealthMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character);// 0xa1d39f8
	void SetHealthHealing(float fHealthHealing, float AddedHP, float TargetHealthHealing, ApexCharacter* Character, float CharacterHealthHealing, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue);// 0xa1d39f8
	void PrintInfo(ApexCharacter* ApexCharacter, bool IsPrint, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xa1d39f8
	void FinishCurLoop(ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_GetCharacterShield_ReturnValue);// 0xa1d39f8
	void InitParamters(float maxCD, float recovSpeed, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealthMax_ReturnValue, float CallFunc_GetCharacterShield_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue);// 0xa1d39f8
	void GetOwningCharacter(out ApexCharacter* AsApex Character, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess);// 0xa1d39f8
	void IfRecvDamage(out bool HasDamage, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_GetCharacterShield_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0xa1d39f8
	void OnRecvDamageAction();// 0xa1d39f8
	void RecoverAction(float TickRate, float PrevHealth, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMod_Remainder, int CallFunc_FMod_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_FMod_Remainder, int CallFunc_FMod_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, float CallFunc_GetCharacterHealthMax_ReturnValue, float CallFunc_GetCharacterHealth_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0xa1d39f8
	void SkillLoop(float TickRate, bool CallFunc_IsDisable_Disable, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xa1d39f8
	void OnOctaneTakeDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xa1d39f8
	void OnSkillReleased(int SkillIndex, bool bReleased);// 0xa1d39f8
	void OnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Reuslt);// 0xa1d39f8
	void ReceiveEndPlay(byte EndPlayReason);// 0xa1d39f8
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void OnPlayerGainHPByPassive(float HpRecovered);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void OnPlayerTakeDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xa1d39f8
	void ExecuteUbergraph_Octane_PassiveSkill_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_GetLifeSpan_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsProtectedByDeathTotem_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, Actor* K2Node_CustomEvent_DamagedActor, float K2Node_CustomEvent_Damage, const DamageType* K2Node_CustomEvent_DamageType, Controller* K2Node_CustomEvent_InstigatedBy, Actor* K2Node_CustomEvent_DamageCauser, int K2Node_CustomEvent_SkillIndex, bool K2Node_CustomEvent_bReleased, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_SkillIndex, int K2Node_CustomEvent_PhaseIndex, bool K2Node_CustomEvent_Reuslt, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, byte K2Node_Event_EndPlayReason, float K2Node_Event_DeltaSeconds, float K2Node_CustomEvent_HpRecovered, ApexCharacter* CallFunc_GetOwningCharacter_AsApex_Character, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_CustomEvent_DamagedActor, float K2Node_CustomEvent_Damage, const DamageType* K2Node_CustomEvent_DamageType, Controller* K2Node_CustomEvent_InstigatedBy, Actor* K2Node_CustomEvent_DamageCauser);// 0xa1d39f8

--------------------------------
Class: Wraith_TriggerSpawner_BP_C.WraithTriggerSpawner.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5c0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5c8, Size: 0x8]
	void ReceiveOnTriggerSucceed();// 0xa1d39f8
	void ExecuteUbergraph_Wraith_TriggerSpawner_BP(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess, GameStatisticsManager* CallFunc_GetGameStatisticsManager_ReturnValue, UTSkill* CallFunc_GetSkill_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8

--------------------------------
Class: WraithTriggerSpawner.SkillActorBase.DynamicMovementActor.Actor.Object
	TWraithTriggerBase*[] Triggers;//[Offset: 0x558, Size: 0x10]
	int[] ArrPriorityIndex;//[Offset: 0x568, Size: 0x10]
	FText GameChatName;//[Offset: 0x578, Size: 0x18]
	int DistTipsPerkID;//[Offset: 0x590, Size: 0x4]
	TWraithTriggerBase* CurTrigger;//[Offset: 0x598, Size: 0x8]
	void ServerOnTrigger(int TriggerIndex, Actor* TriggerActor, float TriggerBeginTime);// 0x7f7e6fc
	void ReceiveOnTriggerSucceed();// 0xa1d39f8
	void ClientOnTriggerSucceed(int TriggerIndex, Actor* TriggerActor, bool bNeedTipDist);// 0x7f7e538
	void ClientOnTriggerFailure(int TriggerIndex, Actor* TriggerActor);// 0x7f7e3f8

--------------------------------
Class: TWraithTriggerBase.Object
	float Duration;//[Offset: 0x28, Size: 0x4]
	float CD;//[Offset: 0x2c, Size: 0x4]
	bool IgnoreBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float EffectiveMaxDistance;//[Offset: 0x34, Size: 0x4]
	float EffectiveMinDistance;//[Offset: 0x38, Size: 0x4]
	float StayTime;//[Offset: 0x3c, Size: 0x4]
	byte[] QueryObjectTypes;//[Offset: 0x40, Size: 0x10]
	int[] EventIDList;//[Offset: 0x50, Size: 0x10]
	Actor* Owner;//[Offset: 0x60, Size: 0x8]
	ApexCharacter* OwnerCharacter;//[Offset: 0x68, Size: 0x8]
	Actor*[] CacheActors;//[Offset: 0x70, Size: 0x10]
	<Actor*,float> CacheActorsStayTime;//[Offset: 0x80, Size: 0x50]
	<Actor*,float> ActorsStayTime;//[Offset: 0xd0, Size: 0x50]

--------------------------------
Class: ScreenBannerHigh_Static_C.Actor.Object
	SceneComponent* DefaultSceneRoot1;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* StaticMesh3;//[Offset: 0x278, Size: 0x8]
	StaticMeshComponent* StaticMesh2;//[Offset: 0x280, Size: 0x8]
	StaticMeshComponent* StaticMesh1;//[Offset: 0x288, Size: 0x8]
	BannerPingComp_BP_C* BannerPingComp_BP;//[Offset: 0x290, Size: 0x8]
	ChapterType_Tracks NewVar;//[Offset: 0x298, Size: 0x10]
	void SwitchDronePanelShow(bool Condition, SceneComponent* Widget, SceneComponent* Mesh);// 0xa1d39f8

--------------------------------
Class: BannerPingComp_BP_C.CommonPingComp.ActorComponent.Object
	int BP_GetPingType(PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, CryptoDrone* K2Node_DynamicCast_AsCrypto_Drone, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetPingBannerID_ReturnValue);// 0xa1d39f8

--------------------------------
Class: BP_ConveyorVehicle_C.ConveyorBeltVehicle.ApexTrain.Actor.Object

--------------------------------
Class: BP_ConveyorBeltCoach_C.TrainCoach.Actor.Object
	int GetPingType();// 0xa1d39f8

--------------------------------
Class: BP_TestBin_C.BinActor.SignificanceManagedActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x750, Size: 0x8]
	ApexNavMeshModifierComponent* ApexNavMeshModifier;//[Offset: 0x758, Size: 0x8]
	PickupPointComponent* PickupPoint3;//[Offset: 0x760, Size: 0x8]
	PickupPointComponent* PickupPoint2;//[Offset: 0x768, Size: 0x8]
	PickupPointComponent* PickupPoint1;//[Offset: 0x770, Size: 0x8]
	PickupPointComponent* PickupPoint;//[Offset: 0x778, Size: 0x8]
	ParticleSystem* OpenBinFX;//[Offset: 0x780, Size: 0x28]
	ParticleSystem* OpenBinBottomFX;//[Offset: 0x7a8, Size: 0x28]
	RandowSpawnItemEntry[] ItemList;//[Offset: 0x7d0, Size: 0x10]
	void BP_OnServerOpen(Character* OpenCharacter);// 0xa1d39f8
	void BP_BinBottomOpen_Callback();// 0xa1d39f8
	void BP_BinOpen_Callback();// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_TestBin(int EntryPoint, Vector CallFunc_K2_GetActorLocation_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PlaySoundAtLocationByName_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_PlaySoundAtLocationByName_ReturnValue, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, Character* K2Node_Event_OpenCharacter, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue);// 0xa1d39f8

--------------------------------
Class: PickupPointComponent.MyLineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum eZoneType;//[Offset: 0x565, Size: 0x1]
	LootZoneTypeInfo LootZoneTypeInfo;//[Offset: 0x568, Size: 0x18]
	bool bEnableDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	LinearColor DrawLocationColor;//[Offset: 0x584, Size: 0x10]

--------------------------------
Class: MyLineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float Radious;//[Offset: 0x55c, Size: 0x4]
	Color ShapeColor;//[Offset: 0x560, Size: 0x4]

--------------------------------
Class: BP_SurveyBeacon_C.SurveyBeacon.SignificanceManagedActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x358, Size: 0x8]
	CapsuleComponent* Capsule3;//[Offset: 0x360, Size: 0x8]
	CapsuleComponent* Capsule4;//[Offset: 0x368, Size: 0x8]
	CapsuleComponent* Capsule2;//[Offset: 0x370, Size: 0x8]
	CapsuleComponent* Capsule1;//[Offset: 0x378, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x380, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x388, Size: 0x8]
	WidgetComponent* Widget;//[Offset: 0x390, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x398, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a0, Size: 0x8]
	bool NeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool HasShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	<enum,AnimSequenceBase*> StartAnimMap;//[Offset: 0x3b0, Size: 0x50]
	<enum,AnimSequenceBase*> EndAnimMap;//[Offset: 0x400, Size: 0x50]
	AnimSequenceBase* IdleAnim;//[Offset: 0x450, Size: 0x8]
	float PingCd;//[Offset: 0x458, Size: 0x4]
	float PingStart;//[Offset: 0x45c, Size: 0x4]
	FString GetModuleName();// 0xa1d39f8
	void GetAnimByLegend(ApexCharacter* Character, bool HasInjected, bool bStart, out AnimSequenceBase* Anim, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetLegendType_ReturnValue, AnimSequenceBase* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AnimSequenceBase* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xa1d39f8
	void SetShowWidget(bool IsShow);// 0xa1d39f8
	void BP_OnShowChange(bool bNewShow);// 0xa1d39f8
	void BP_OnUseBeacon(ApexCharacter* Character);// 0xa1d39f8
	void BP_OnStopUseBeacon(bool bHasInjected, ApexCharacter* Character);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void BP_PingSelf();// 0xa1d39f8
	void BP_OnFade(float Opacity);// 0xa1d39f8
	void ExecuteUbergraph_BP_SurveyBeacon(int EntryPoint, bool K2Node_Event_bNewShow, ApexCharacter* K2Node_Event_Character, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, AnimSequenceBase* CallFunc_GetAnimByLegend_Anim, bool K2Node_Event_bHasInjected, ApexCharacter* K2Node_Event_Character, AnimSequenceBase* CallFunc_GetAnimByLegend_Anim, bool CallFunc_HasAuthority_ReturnValue, ApexPlayerController* CallFunc_GetApexPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, PingManagerComponent* CallFunc_GetPingManagerComponent_ReturnValue, int CallFunc_GetPingType_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float K2Node_Event_Opacity, SiglePingInfo K2Node_MakeStruct_SiglePingInfo, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LocalMakePing_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xa1d39f8

--------------------------------
Class: Character_LifeLine_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2538, Size: 0x8]
	Lifeline_CarePackage_BP_C*[] SpawnedCarePackage;//[Offset: 0x2540, Size: 0x10]
	int CarePackageLimit;//[Offset: 0x2550, Size: 0x4]
	Lifeline_HealingRobot_BP_C* FollowingHealingRobot;//[Offset: 0x2558, Size: 0x8]
	void SetSpawnedFollowingRobot(Lifeline_HealingRobot_BP_C* NewParam);// 0xa1d39f8
	void AddCarePackage(Lifeline_CarePackage_BP_C* InCarePackage, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Lifeline_CarePackage_BP_C* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_Character_LifeLine_BP(int EntryPoint);// 0xa1d39f8

--------------------------------
Class: Lifeline_HealingRobot_BP_C.HealingRobot.SkillActorBase.DynamicMovementActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x690, Size: 0x8]
	CustomCollisionCapsule* CustomCollisionCapsule;//[Offset: 0x698, Size: 0x8]
	DynamicMovementComponent_HealingRobot* DynamicMovement;//[Offset: 0x6a0, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x6a8, Size: 0x8]
	ParticleSystemComponent* MachineEngine3;//[Offset: 0x6b0, Size: 0x8]
	ParticleSystemComponent* MachineEngine2;//[Offset: 0x6b8, Size: 0x8]
	ParticleSystemComponent* MachineEngine1;//[Offset: 0x6c0, Size: 0x8]
	ParticleSystemComponent* MachineEngine;//[Offset: 0x6c8, Size: 0x8]
	ParticleSystemComponent* MachineLight;//[Offset: 0x6d0, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x6d8, Size: 0x8]
	float Timeline_0_FadeAlpha_16E4DE644DAB0F7D4C1F748974342BE1;//[Offset: 0x6e0, Size: 0x4]
	byte Timeline_0__Direction_16E4DE644DAB0F7D4C1F748974342BE1;//[Offset: 0x6e4, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x6e8, Size: 0x8]
	<ApexCharacter*,Actor*> ConnectList;//[Offset: 0x6f0, Size: 0x50]
	bool HasEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1]
	float FlyTime;//[Offset: 0x744, Size: 0x4]
	Transform TargetTrans;//[Offset: 0x750, Size: 0x30]
	Transform StartTrans;//[Offset: 0x780, Size: 0x30]
	Vector ForceDir;//[Offset: 0x7b0, Size: 0xc]
	float ForceVal;//[Offset: 0x7bc, Size: 0x4]
	float LastTime;//[Offset: 0x7c0, Size: 0x4]
	MaterialInterface* Anim_Soft;//[Offset: 0x7c8, Size: 0x28]
	Vector CountdownOffset;//[Offset: 0x7f0, Size: 0xc]
	BP_3DUI_SkillCountdown_C* CountDownActor;//[Offset: 0x800, Size: 0x8]
	float CountdownDistanceLimit;//[Offset: 0x808, Size: 0x4]
	int PingType;//[Offset: 0x80c, Size: 0x4]
	int StoredPingID;//[Offset: 0x810, Size: 0x4]
	ApexCharacter* FirstCureTarget;//[Offset: 0x818, Size: 0x8]
	Actor* FakeDronePawn;//[Offset: 0x820, Size: 0x8]
	ApexCharacter* nullobject;//[Offset: 0x828, Size: 0x8]
	void ModifyEndPos(Vector OriPos, float Yaw, Rotator CallFunc_MakeRotator_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorTransform_SweepHitResult, bool CallFunc_K2_SetActorTransform_ReturnValue);// 0xa1d39f8
	void StopPing(bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, PingManagerComponent* CallFunc_GetPingManagerComponent_ReturnValue);// 0xa1d39f8
	void StartPing(bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, PingManagerComponent* CallFunc_GetPingManagerComponent_ReturnValue, int CallFunc_StartPingItemFromActorByDS_ReturnValue);// 0xa1d39f8
	int GetPingType(int CallFunc_GetPingType_ReturnValue);// 0xa1d39f8
	void StartCountDown();// 0xa1d39f8
	void MoveHoverHeight(const Actor*[] Temp_object_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0xa1d39f8
	void DestroyParticals();// 0xa1d39f8
	void PreDisConnect(ApexCharacter* Player, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_IsLocallyControlled_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, bool CallFunc_Map_Remove_ReturnValue, Actor* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue);// 0xa1d39f8
	void SetParticleActive(bool IsActive);// 0xa1d39f8
	void SetTargetTrans(Rotator camRot, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GetAxes_X, Vector CallFunc_GetAxes_Y, Vector CallFunc_GetAxes_Z, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsSprinting_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Controller* CallFunc_GetController_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Rotator CallFunc_GetControlRotation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xa1d39f8
	void Timeline_0__FinishedFunc();// 0xa1d39f8
	void Timeline_0__UpdateFunc();// 0xa1d39f8
	void OnLoaded_63954C4349F19625C44011A92536CE7E(class Object Loaded);// 0xa1d39f8
	void HandleSkillEnd(int SkillID, enum Reason);// 0xa1d39f8
	void HandleSkillStart(int SkillID);// 0xa1d39f8
	void TriggerEvent(int SkillHandle, byte EventType);// 0xa1d39f8
	void TriggerCustomEvent(byte EventType, int SkillIndex);// 0xa1d39f8
	void TriggerStringEvent(FString EventString, int SkillIndex);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void BP_OnFinish();// 0xa1d39f8
	void InitFromSkill(UAEBaseSkill* SkillOwner);// 0xa1d39f8
	void SkillEvent(byte SkillEventType, Actor* SkillOwner);// 0xa1d39f8
	void FlyOut();// 0xa1d39f8
	void BP_OnConnectPlayer(ApexCharacter* Player, int Index);// 0xa1d39f8
	void BP_OnDisconnectPlayer(ApexCharacter* Player);// 0xa1d39f8
	void OnDestroyed_Event(Actor* DestroyedActor);// 0xa1d39f8
	void LoadMeshDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void LoadMatDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void OnRep_PlayerState(PlayerState* LocalCharacterPlayerState);// 0xa1d39f8
	void LocalDrawDebug();// 0xa1d39f8
	void NotifyClientDrawDebug(Vector Center, LinearColor Color);// 0xa1d39f8
	void ClientPreFly();// 0xa1d39f8
	void LoadAnimDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void ExecuteUbergraph_Lifeline_HealingRobot_BP(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, class Object K2Node_CustomEvent_Loaded, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, const delegate Temp_delegate_Variable, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int K2Node_Event_SkillID, enum K2Node_Event_Reason, int K2Node_Event_SkillID, int K2Node_Event_SkillHandle, byte K2Node_Event_EventType, byte K2Node_Event_EventType, int K2Node_Event_SkillIndex, FString K2Node_Event_EventString, int K2Node_Event_SkillIndex, UAEBaseSkill* K2Node_Event_SkillOwner, byte K2Node_CustomEvent_SkillEventType, Actor* K2Node_CustomEvent_SkillOwner, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, ApexCharacter* K2Node_Event_player, int K2Node_Event_Index, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, SkeletalMeshComponent* CallFunc_GetCurrentMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, ApexCharacter* K2Node_Event_player, const delegate Temp_delegate_Variable, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, Vector CallFunc_TransformFromBoneSpace_OutPosition, Rotator CallFunc_TransformFromBoneSpace_OutRotation, Actor* K2Node_CustomEvent_DestroyedActor, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, ApexCharacter*[] CallFunc_Map_Keys_Keys, BP_DroneCable_C* CallFunc_FinishSpawningActor_ReturnValue, ApexCharacter* CallFunc_Array_Get_Item, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, bool CallFunc_IsValid_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Object* CallFunc_LoadAsset_Blocking_ReturnValue, bool CallFunc_FreeDetach_ReturnValue, MaterialInterface* K2Node_DynamicCast_AsMaterial_Interface, bool K2Node_DynamicCast_bSuccess, TrackingVisionModule* CallFunc_GetInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, TrackingVisionModule* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, PlayerState* K2Node_Event_LocalCharacterPlayerState, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_Center, LinearColor K2Node_CustomEvent_Color, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, LinearColor K2Node_Select_Default, Actor* CallFunc_GetAttachParentActor_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_HasBuff_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Character_LifeLine_BP_C* K2Node_DynamicCast_AsCharacter_Life_Line_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasBuff_ReturnValue, ApexCharacter* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventAsync_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor*[] CallFunc_GetAttachedActors_OutActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Lifeline_HealingRobot_PredictBP_C* K2Node_DynamicCast_AsLifeline_Healing_Robot_Predict_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue);// 0xa1d39f8

--------------------------------
Class: HealingRobot.SkillActorBase.DynamicMovementActor.Actor.Object
	ApexCharacter*[] CachedPlayerInRange;//[Offset: 0x570, Size: 0x10]
	<ApexCharacter*,float> PlayerHealZoneEnterTime;//[Offset: 0x590, Size: 0x50]
	SkeletalMeshComponent* RobotMesh;//[Offset: 0x5e0, Size: 0x8]
	ApexCharacter*[] PlayerInRange;//[Offset: 0x5e8, Size: 0x10]
	float RemainHP;//[Offset: 0x5f8, Size: 0x4]
	float StartTime;//[Offset: 0x5fc, Size: 0x4]
	float HealRange;//[Offset: 0x600, Size: 0x4]
	float HealCylinderRadius;//[Offset: 0x604, Size: 0x4]
	float HealCylinderHalfHet;//[Offset: 0x608, Size: 0x4]
	float HealCylinderUpperZ;//[Offset: 0x60c, Size: 0x4]
	float HpLimit;//[Offset: 0x610, Size: 0x4]
	float HpPerSecond;//[Offset: 0x614, Size: 0x4]
	int ConnectLimit;//[Offset: 0x618, Size: 0x4]
	int PlayerConnectLimit;//[Offset: 0x61c, Size: 0x4]
	float DurationTime;//[Offset: 0x620, Size: 0x4]
	float HoverHeight;//[Offset: 0x624, Size: 0x4]
	float CheckTimeInterval;//[Offset: 0x628, Size: 0x4]
	float HealTimeInterval;//[Offset: 0x62c, Size: 0x4]
	float BeHitTimeInterval;//[Offset: 0x630, Size: 0x4]
	float DownGPercent;//[Offset: 0x634, Size: 0x4]
	float DroneRadius;//[Offset: 0x638, Size: 0x4]
	float PushAcc;//[Offset: 0x63c, Size: 0x4]
	float OutCircleBrokenTime;//[Offset: 0x640, Size: 0x4]
	float ThrowVelocity;//[Offset: 0x644, Size: 0x4]
	float ThrowPitchOffset;//[Offset: 0x648, Size: 0x4]
	float HealStartDelay;//[Offset: 0x64c, Size: 0x4]
	byte BlockCheckChannel;//[Offset: 0x650, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	bool bEnableFlowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x652, Size: 0x1]
	float DistSquareOfResetPos;//[Offset: 0x654, Size: 0x4]
	FName DroneFollowTargetName;//[Offset: 0x658, Size: 0x8]
	FName DroneConditionName;//[Offset: 0x660, Size: 0x8]
	enum DroneAutoMode;//[Offset: 0x668, Size: 0x1]
	ApexCharacter* FollowingActor;//[Offset: 0x66c, Size: 0x8]
	FlyingCharacter* FlyingActor;//[Offset: 0x674, Size: 0x8]
	bool StuckInto(Actor* InActor);// 0xa137c80
	void SetFollowingActor(ApexCharacter* NewFollowingActor);// 0x7ca7bb0
	void SetFlyVelocity();// 0x5631e9c
	void SetFlyingActor(FlyingCharacter* FlyingCharacter);// 0x7ca7ae0
	void SetDroneCondition(int NewValue);// 0xa137b8c
	void OnRep_RemainHP();// 0x7ca7c98
	void OnRep_IsActive();// 0x7ca7ce4
	void OnRep_FollowingActor();// 0x7ca7ab8
	void OnRep_DroneAutoMode();// 0x7ca7acc
	void OnRep_Array();// 0xa137e48
	void MoveToEndPos(Vector Pos, Rotator Rot);// 0x5aabb98
	ApexCharacter*[] GetPlayerArrInRange();// 0x7ca7d44
	int GetDroneCondition();// 0xa137c64
	enum GetDroneAutoMode();// 0xa137b70
	bool CanStuckInto(Actor* InActor);// 0xa137d64
	void BP_OnFinish();// 0xa1d39f8
	void BP_OnDisconnectPlayer(ApexCharacter* Player);// 0xa1d39f8
	void BP_OnConnectPlayer(ApexCharacter* Player, int Index);// 0xa1d39f8
	void BP_OnClientRemainHPChanged();// 0xa1d39f8
	void BP_OnAttachedToFollowActor(bool bAttached);// 0xa1d39f8

--------------------------------
Class: CustomCollisionCapsule.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	CustomCollisionInfo CustomCollisionInfo;//[Offset: 0x588, Size: 0x48]
	void UpdateLocationCheck();// 0x7ba64b4

--------------------------------
Class: CustomCollisionInfo
	enum CollisionType;//[Offset: 0x0, Size: 0x1]
	bool bGeneratorListenEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bGeneratorOverlapBrush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bTraceUseObjectType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	byte[] TraceObjectTypes;//[Offset: 0x8, Size: 0x10]
	bool bOneFrameBeginEndOverlapSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bCheckInServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bCheckInAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bCheckInSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	float CheckInterval;//[Offset: 0x1c, Size: 0x4]
	PrimitiveComponent*[] OverlappedComps;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: DynamicMovementComponent_HealingRobot.DynamicMovementComponent.MovementComponent.ActorComponent.Object
	float HoverHeightMin;//[Offset: 0x394, Size: 0x4]
	float HoverHeightMax;//[Offset: 0x398, Size: 0x4]
	float DownwardVelocity;//[Offset: 0x39c, Size: 0x4]
	float UpwardVelocity;//[Offset: 0x3a0, Size: 0x4]
	float FrictionSlow;//[Offset: 0x3a4, Size: 0x4]
	byte FindBlockChannel;//[Offset: 0x3a8, Size: 0x1]

--------------------------------
Class: FlyingCharacter.Character.Pawn.Actor.Object
	ApexCharacter* FakeDroneOwner;//[Offset: 0x688, Size: 0x8]
	Actor* PerkActor;//[Offset: 0x690, Size: 0x8]
	class ApexAIController* AIControllerSoftClass;//[Offset: 0x698, Size: 0x28]
	void SetPerkActor(Actor* Actor);// 0x7bfd5d0
	void SetFakeDroneOwner(ApexCharacter* OwnerCharacter);// 0x7bfd648
	Actor* GetPerkActor();// 0xa11f0c0
	ApexCharacter* GetFakeDroneOwner();// 0xa11f0dc

--------------------------------
Class: BP_3DUI_SkillCountdown_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	WidgetComponent* 3DUI_SkillCountdown;//[Offset: 0x278, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x280, Size: 0x8]
	float TotalTime;//[Offset: 0x288, Size: 0x4]
	float EndTime;//[Offset: 0x28c, Size: 0x4]
	Skill_Countdown_UIBP_C* WidgetCountdown;//[Offset: 0x290, Size: 0x8]
	bool bStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	bool bDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	float LimitDistanceSqu;//[Offset: 0x29c, Size: 0x4]
	void ResetRemainTime(float NewRemainTime, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xa1d39f8
	void RefreshVisibility(bool CallFunc_IsVisible_ReturnValue, ApexCharacter* CallFunc_GetViewedCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance2DSquared_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsVisible_ReturnValue);// 0xa1d39f8
	void SetDistanceLimit(bool bLimit, float Distance, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0xa1d39f8
	void RefreshRatio(float DeltaSeconds, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xa1d39f8
	void GenerateProgressObject(bool CallFunc_IsValid_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, Skill_Countdown_UIBP_C* K2Node_DynamicCast_AsSkill_Countdown_UIBP, bool K2Node_DynamicCast_bSuccess);// 0xa1d39f8
	void StartCountDown();// 0xa1d39f8
	void SetTotalTime(float NewTotalTime, bool bAutoStart, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xa1d39f8
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_BP_3DUI_SkillCountdown(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0xa1d39f8

--------------------------------
Class: Skill_Countdown_UIBP_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	Image* MI_Countdown;//[Offset: 0x250, Size: 0x8]
	TextBlock* Text_Countdown;//[Offset: 0x258, Size: 0x8]
	MaterialInstanceDynamic* UsedMaterail;//[Offset: 0x260, Size: 0x8]
	void SetRatioAndText(float Ratio, float ValueText, bool Temp_bool_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Round_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText K2Node_Select_Default);// 0xa1d39f8
	void PreConstruct(bool IsDesignTime);// 0xa1d39f8
	void ExecuteUbergraph_Skill_Countdown_UIBP(int EntryPoint, bool K2Node_Event_IsDesignTime, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xa1d39f8

--------------------------------
Class: BP_DroneCable_C.HealingCable.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x288, Size: 0x8]
	CableComponent* Cable;//[Offset: 0x290, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 0x8]
	MaterialInstance* CableMaterial;//[Offset: 0x2a0, Size: 0x28]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void CustomEvent(AsyncLoaderBase* Loader);// 0xa1d39f8
	void ExecuteUbergraph_BP_DroneCable(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, Character_LifeLine_BP_C* K2Node_DynamicCast_AsCharacter_Life_Line_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasBuff_ReturnValue, float K2Node_Event_DeltaSeconds, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Object* CallFunc_LoadAsset_Blocking_ReturnValue, MaterialInterface* K2Node_DynamicCast_AsMaterial_Interface, bool K2Node_DynamicCast_bSuccess, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xa1d39f8

--------------------------------
Class: HealingCable.Actor.Object
	bool bIsUseCableLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	CableComponent* MyCable;//[Offset: 0x280, Size: 0x8]
	void SetCableComponent(CableComponent* InCable);// 0xa137a14

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59a, Size: 0x1]
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59b, Size: 0x1]
	ComponentReference AttachEndTo;//[Offset: 0x5a0, Size: 0x28]
	FName AttachEndToSocketName;//[Offset: 0x5c8, Size: 0x8]
	Vector EndLocation;//[Offset: 0x5d0, Size: 0xc]
	float CableLength;//[Offset: 0x5dc, Size: 0x4]
	int NumSegments;//[Offset: 0x5e0, Size: 0x4]
	float SubStepTime;//[Offset: 0x5e4, Size: 0x4]
	int SolverIterations;//[Offset: 0x5e8, Size: 0x4]
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 0x1]
	float CollisionFriction;//[Offset: 0x5f0, Size: 0x4]
	Vector CableForce;//[Offset: 0x5f4, Size: 0xc]
	float CableGravityScale;//[Offset: 0x600, Size: 0x4]
	float CableWidth;//[Offset: 0x604, Size: 0x4]
	int NumSides;//[Offset: 0x608, Size: 0x4]
	float TileMaterial;//[Offset: 0x60c, Size: 0x4]
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x5550be8
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0x6852398
	void GetCableParticleLocations(out Vector[] Locations);// 0x6852254
	SceneComponent* GetAttachedComponent();// 0x6852328
	Actor* GetAttachedActor();// 0x685235c

--------------------------------
Class: TrackingVisionModule.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	TrackingVisionConfig* VisionConfigDataAsset;//[Offset: 0x88, Size: 0x28]
	<ApexCharacter*,FootprintInfo> FootprintInfos;//[Offset: 0x170, Size: 0x50]
	<ApexCharacter*,Vector> LastGroundTouchPosInfos;//[Offset: 0x1c0, Size: 0x50]
	<ApexCharacter*,bool> LaunchPadUsedInfos;//[Offset: 0x210, Size: 0x50]
	<ApexCharacter*,bool> ZiplinedInfos;//[Offset: 0x260, Size: 0x50]
	<ApexCharacter*,float> LastWeaponFireTimeInfos;//[Offset: 0x2b0, Size: 0x50]
	<ApexCharacter*,bool> TouchGroundInfos;//[Offset: 0x300, Size: 0x50]
	<ApexCharacter*> TrackingCharacters;//[Offset: 0x458, Size: 0x50]
	TrackingVisionConfig* VisionConfig;//[Offset: 0x4a8, Size: 0x8]
	<enum> IgnoreTrackingVisionPOITypes;//[Offset: 0x4b0, Size: 0x50]
	delegate TrackEvent;//[Offset: 0x510, Size: 0x10]
	void SetIgnoreTrack(bool bIgnore);// 0x7ead2ac
	void SetFilterByRestartTime(bool enable);// 0x7ead22c
	void OnTrackEvent(enum POIType, ApexCharacter* Character, Actor* Target, out const Vector Position);// 0x7ead0f0
	bool IsEnable();// 0xa17ec08
	<enum,TrackingVisionShowInfo> GetShowInfoMap();// 0x7ead66c
	static TrackingVisionModule* GetInstance(Object* Context);// 0x7ead358
	bool GetFilterByRestartTime();// 0xa17ec40
	<int,FText> GetDamageNames();// 0x7ead538
	void DeleteTrackingVisionPOI(int InfoId);// 0x7ead074

--------------------------------
Class: TrackingVisionConfig.DataAsset.Object
	int CellSize;//[Offset: 0x30, Size: 0x4]
	float LifeTime;//[Offset: 0x34, Size: 0x4]
	float TraversalPOIFootprintDistance;//[Offset: 0x38, Size: 0x4]
	float TrackingVisionTraversalPOIJumpDownDist;//[Offset: 0x3c, Size: 0x4]
	float TrackingVisionWeaponFirePOIDBounce;//[Offset: 0x40, Size: 0x4]
	float TrackingVisionDamagePOIHealthFrac;//[Offset: 0x44, Size: 0x4]
	bool bEnableSpacingOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float Spacing;//[Offset: 0x4c, Size: 0x4]
	FName[] IgnoreBeTrackedBuffs;//[Offset: 0x50, Size: 0x10]
	DataTable* TrackingVisionTable;//[Offset: 0x60, Size: 0x28]
	DataTable* DamageTypeDataTable;//[Offset: 0x88, Size: 0x28]
	DataTable* ArmoryItemTable;//[Offset: 0xb0, Size: 0x28]
	<enum> IgnoreTrackingVisionPOITypes;//[Offset: 0xd8, Size: 0x50]
	GameplayTag SignDirectionForTrackInfoTag;//[Offset: 0x128, Size: 0x8]
	float SignDirectionForTrackInfoLifeTime;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: FootprintInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrackingVisionShowInfo
	Object* TrackingVisionIcon;//[Offset: 0x0, Size: 0x28]
	int IconIndex;//[Offset: 0x28, Size: 0x4]
	FText TrackingVisionTip;//[Offset: 0x30, Size: 0x18]
	int PingType;//[Offset: 0x48, Size: 0x4]
	int PingType2;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: Lifeline_HealingRobot_PredictBP_C.BP_PredictActor_Base_C.SkillPredictionActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x588, Size: 0x8]
	ParticleSystemComponent* MachineLight;//[Offset: 0x590, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x598, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void LoadMeshDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void ExecuteUbergraph_Lifeline_HealingRobot_PredictBP(int EntryPoint, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8

--------------------------------
Class: BP_PredictActor_Base_C.SkillPredictionActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 0x8]
	GrenadePredictLine* ClientPredictionLine;//[Offset: 0x580, Size: 0x8]
	void GetPredictLine(bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8
	void AddPredictLine(GrenadePredictLine* CallFunc_GetPredictionLine_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ReceiveTick(float DeltaSeconds);// 0xa1d39f8
	void ReceiveEndPlay(byte EndPlayReason);// 0xa1d39f8
	void ReceiveOnRecycled();// 0xa1d39f8
	void ReceiveOnReused();// 0xa1d39f8
	void ExecuteUbergraph_BP_PredictActor_Base(int EntryPoint, float K2Node_Event_DeltaSeconds, byte K2Node_Event_EndPlayReason, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8

--------------------------------
Class: SkillPredictionActor.Actor.Object
	delegate OnBindSkillEvent;//[Offset: 0x270, Size: 0x10]
	int PoolSize;//[Offset: 0x280, Size: 0x4]
	ApexSkillThrowerProjectileData* ApexSkillThrowerProjectileData;//[Offset: 0x290, Size: 0x8]
	SkillActorAttachData AttachData;//[Offset: 0x298, Size: 0x48]
	SkillPredictionLineConfigData SkillPredictionLineConfigData;//[Offset: 0x2e0, Size: 0x238]
	UAEBaseSkill* OwnerBaseSkill;//[Offset: 0x518, Size: 0x8]
	<SceneComponent*,byte> AllComponentsMap;//[Offset: 0x520, Size: 0x50]
	void RefreshMeshCastShadowState(bool bAttached);// 0x7e6b49c
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0xa177900
	void OnDelayShow();// 0x7e6b46c
	void OnCharacterCameraModeSwitched_BP(enum NewMode);// 0xa1d39f8
	void OnCharacterCameraModeSwitched();// 0x616ac1c
	bool NotifyLanding();// 0xa1778c0
	bool IsOwnerInFPPMode();// 0x7e6b434
	void InitPredictLineRes();// 0x7e6b2e8
	Vector GetProjectileLaunchPosition();// 0x4b94ae0
	bool GetPredictProjectilePath(out PredictProjectilePathResult PredictResult);// 0x7e6b2fc
	Vector GetPredictionEndPosition();// 0xa1d39f8
	Vector GetCustomClientProjectileStartPosition();// 0xa177880
	void BP_ClearPredictionLine();// 0xa1d39f8

--------------------------------
Class: ApexSkillThrowerProjectileData.SkillEventParam.Object
	float ThrowPower;//[Offset: 0x60, Size: 0x4]
	float UnitThrowPowerVecity;//[Offset: 0x64, Size: 0x4]
	float SimulatedGravityScale;//[Offset: 0x68, Size: 0x4]
	float GravityScale;//[Offset: 0x6c, Size: 0x4]
	float GravityBase;//[Offset: 0x70, Size: 0x4]
	bool bApplyGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	float Bounciness;//[Offset: 0x78, Size: 0x4]
	float BounceFraction;//[Offset: 0x7c, Size: 0x4]
	int BounceTimeLimit;//[Offset: 0x80, Size: 0x4]
	float BounceAngleLimit;//[Offset: 0x84, Size: 0x4]
	float BounceMinSpeedLimit;//[Offset: 0x88, Size: 0x4]
	float NormalSpeedDecreaseFraction;//[Offset: 0x8c, Size: 0x4]
	float MaxFlyDistance;//[Offset: 0x90, Size: 0x4]
	bool UseTPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bLaunchFromPawnEyeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	float TPPPitchOffset;//[Offset: 0x98, Size: 0x4]
	float TPPYawOffset;//[Offset: 0x9c, Size: 0x4]
	float FPPPitchOffset;//[Offset: 0xa0, Size: 0x4]
	float FPPYawOffset;//[Offset: 0xa4, Size: 0x4]
	bool bOverrideTraceRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float TraceRadius;//[Offset: 0xac, Size: 0x4]
	bool bSnapToImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float SimFrequency;//[Offset: 0xb4, Size: 0x4]
	byte AdjustGroundCollisionChannel;//[Offset: 0xb8, Size: 0x1]
	float AdjustGroundHeightUp;//[Offset: 0xbc, Size: 0x4]
	float AdjustGroundHeightDown;//[Offset: 0xc0, Size: 0x4]
	class Object[] MustBounceActorClassArray;//[Offset: 0xc8, Size: 0x10]
	class Object[] MustAttachActorClassArray;//[Offset: 0xd8, Size: 0x10]
	bool AdjustLocationAndRotationAfterStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	class Object[] TryPlaceActorClassArray;//[Offset: 0xf0, Size: 0x10]
	class ApexProjectileMovementComponent* ApexProjectileMovementComponentClass;//[Offset: 0x100, Size: 0x8]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x10c, Size: 0x4]
	bool bDrawCheckGroundDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	FName UpdatedComponentTag;//[Offset: 0x114, Size: 0x8]
	class ActorComponent* UpdatedComponentClass;//[Offset: 0x120, Size: 0x8]
	FName UpdatedMeshComponentTag;//[Offset: 0x128, Size: 0x8]
	class ActorComponent* UpdatedMeshComponentClass;//[Offset: 0x130, Size: 0x8]
	bool bEnableAirFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	ParabolaAirFrictionData[] AirFrictionData;//[Offset: 0x140, Size: 0x10]
	float AirFrictionDataTimeScale;//[Offset: 0x150, Size: 0x4]
	bool ShouldStopBounce(const HitResult Hit);// 0x7a440bc
	SceneComponent* InitUpdatedMeshComponent(ActorComponent* ProjComp);// 0x7a44194
	SceneComponent* InitUpdatedComponent(ActorComponent* ProjComp);// 0x7a44218
	void InitProjectileComponent(ActorComponent* ProjComp);// 0x7a4429c
	Vector GetSimulatedLaunchVelocity(Actor* OwnerApexCharacter, Actor* Projectile, out float Time);// 0x7a43fa4
	Vector GetProjectileLaunchVelocity(Actor* OwnerApexCharacter, Actor* Projectile);// 0x7a43ed8
	HitResult GetHitLocation(Actor* OwnerApexCharacter, Actor* Projectile);// 0x7a43de8
	bool GetAdjustedLastLocationAndRotation(ActorComponent* ProjComp, out const HitResult StopSimulatingHitResult, out Vector outFinalLoc, out Rotator outFinalRot);// 0x7a43744
	ApexProjectileMovementComponent* CreateProjectileComponent(Actor* Owner);// 0x7a44318

--------------------------------
Class: ApexProjectileMovementComponent.DynamicMovementComponent_Projetile.DynamicMovementComponent.MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedMeshComponent;//[Offset: 0x4d0, Size: 0x8]
	SceneComponent* UpdatedMeshTracingComponent;//[Offset: 0x4d8, Size: 0x8]
	ApexSkillThrowerProjectileData* ApexSkillThrowerProjectileData;//[Offset: 0x4e0, Size: 0x8]
	ApexSkillRotator* ApexSkillRotator;//[Offset: 0x4e8, Size: 0x8]
	bool bResetRotationOnStopSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	bool NoTickOnCharacterSimulateProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 0x1]
	float InterpolateSpeed;//[Offset: 0x4f4, Size: 0x4]
	float InterpolateSpeedRate;//[Offset: 0x4f8, Size: 0x4]
	float InterpolateFrameNumOffset;//[Offset: 0x4fc, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	float DebugDrawLifeTime;//[Offset: 0x504, Size: 0x4]
	delegate OnDynamicFlyDistanceLimitReachedDelegate;//[Offset: 0x540, Size: 0x10]
	delegate OnApexDynamicStopSimulate;//[Offset: 0x550, Size: 0x10]
	ApexProjectilePosture ApexProjectilePosture;//[Offset: 0x560, Size: 0xd4]
	bool bTickUpdateMeshInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1]
	bool bTickUpdateMeshTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1]
	float UpdatedMeshInterpolationTime;//[Offset: 0x638, Size: 0x4]
	void UpdateApexProjectilePosture(Actor* OwnerApexCharacter, bool bRefreshUpdatedComponent);// 0x7a31ce0
	void TickUpdateMeshTracing(bool bTick);// 0x7a31af0
	void TickUpdateMeshInterpolation(bool bTick);// 0x7a31bbc
	void PostDynamicStopEvent(out const HitResult HitResult, bool bServer, Actor* Owner);// 0x7a322ac
	void OnEventDynamicBounce(out const HitResult HitResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* OwnerActor);// 0x7a31f1c
	void OnDynamicStopSimulating(out const HitResult HitResult, bool bServer, Actor* Owner);// 0x7a32494
	void OnDynamicFlyDistanceLimitReachedDelegate__DelegateSignature();// 0xa1d39f8
	void OnApexDynamicStopSimulate__DelegateSignature(HitResult HiResult, Vector FinPosition, Rotator FinRotation);// 0xa1d39f8
	bool GetTPPModeEnable();// 0x7a31c88
	ApexProjectilePosture GetPostureDataConst();// 0xa0ed964
	ApexProjectilePosture GetPostureData();// 0xa0eda18
	byte GetOwnerCharacterRole();// 0x7a31a94
	bool CanStopOnImpactHit(out const HitResult HitResult);// 0x7a31e28

--------------------------------
Class: ApexSkillRotator.SkillEventParam.Object
	Rotator RotationRate;//[Offset: 0x60, Size: 0xc]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	void DoRotator(float DeltaSec);// 0x7a45d08

--------------------------------
Class: ApexProjectilePosture
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0x18, Size: 0xc]
	Vector ProjectileMeshLocation;//[Offset: 0x24, Size: 0xc]
	Vector ProjectileMeshLaunchVelocity;//[Offset: 0x30, Size: 0xc]
	HitResult TargetHitResult;//[Offset: 0x3c, Size: 0x88]
	Vector TraceEnd;//[Offset: 0xc4, Size: 0xc]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: ParabolaAirFrictionData
	float GravityScale;//[Offset: 0x0, Size: 0x4]
	float AirFriction;//[Offset: 0x4, Size: 0x4]
	float TimeDuration;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Lifeline_CarePackage_BP_C.Base_CarePackage_BP_C.CarePackage.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x8a0, Size: 0x8]
	ApexNavMeshDynamicObstacleComponent* ApexNavMeshDynamicObstacle1;//[Offset: 0x8a8, Size: 0x8]
	void ReceiveBeginPlay();// 0xa1d39f8
	void ExecuteUbergraph_Lifeline_CarePackage_BP(int EntryPoint, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, MainTownGameStateBase* K2Node_DynamicCast_AsMain_Town_Game_State_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, ApexCharacter* CallFunc_GetOwnedApexCharacter_ReturnValue, Character_LifeLine_BP_C* K2Node_DynamicCast_AsCharacter_Life_Line_BP, bool K2Node_DynamicCast_bSuccess);// 0xa1d39f8

--------------------------------
Class: Base_CarePackage_BP_C.CarePackage.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x578, Size: 0x8]
	CapsuleComponent* DoorBlockCapsule;//[Offset: 0x580, Size: 0x8]
	SphereComponent* CarePackageSelfBlock;//[Offset: 0x588, Size: 0x8]
	ApexNavMeshDynamicObstacleComponent* ApexNavMeshDynamicObstacle;//[Offset: 0x590, Size: 0x8]
	CapsuleComponent* PickUpBlockCapsule;//[Offset: 0x598, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x5a0, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x5a8, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x5b0, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x5b8, Size: 0x8]
	ParticleSystemComponent* smoke1;//[Offset: 0x5c0, Size: 0x8]
	ParticleSystemComponent* Drag;//[Offset: 0x5c8, Size: 0x8]
	ParticleSystemComponent* engine1;//[Offset: 0x5d0, Size: 0x8]
	byte ServerTimeline__Direction_D70D8CFB4B28445A459858BCD422DAE8;//[Offset: 0x5d8, Size: 0x1]
	TimelineComponent* ServerTimeline;//[Offset: 0x5e0, Size: 0x8]
	byte ClinetTimeline__Direction_2A1CF2C944BE844B051F2C824AFDEABD;//[Offset: 0x5e8, Size: 0x1]
	TimelineComponent* ClinetTimeline;//[Offset: 0x5f0, Size: 0x8]
	float CreateDelayTime;//[Offset: 0x5f8, Size: 0x4]
	float CanCDTime;//[Offset: 0x5fc, Size: 0x4]
	float MaxWaitTime;//[Offset: 0x600, Size: 0x4]
	bool HasCDStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]
	float CheckRadius;//[Offset: 0x608, Size: 0x4]
	class CameraShake* ShakeBP;//[Offset: 0x610, Size: 0x8]
	float ShakeOuterRadius;//[Offset: 0x618, Size: 0x4]
	delegate OnNotifyCoolDown;//[Offset: 0x620, Size: 0x10]
	float AnimationStartTime;//[Offset: 0x630, Size: 0x4]
	AnimSequence* LandAnim;//[Offset: 0x638, Size: 0x28]
	AnimSequence* LandIdleAnim;//[Offset: 0x660, Size: 0x28]
	AkAudioEvent* DropPod_Open;//[Offset: 0x688, Size: 0x28]
	AkAudioEvent* DropPod_Burst;//[Offset: 0x6b0, Size: 0x28]
	AkAudioEvent* DropPod_Impact;//[Offset: 0x6d8, Size: 0x28]
	AkAudioEvent* DropPod_InitialLaunch;//[Offset: 0x700, Size: 0x28]
	AkAudioEvent* DropPod_SteamSizzle;//[Offset: 0x728, Size: 0x28]
	bool IsBeginLandingSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	class BP_PackageLandingCircle_C* LandingCircleClass;//[Offset: 0x758, Size: 0x8]
	MaterialInstance* Mat_Soft;//[Offset: 0x760, Size: 0x28]
	AkAudioEvent* DropPod_Incoming_Fly;//[Offset: 0x788, Size: 0x28]
	ParticleSystemAsync* BeforeLandingSmoke_Async;//[Offset: 0x7b0, Size: 0x8]
	float ServerPalyAnimationTime;//[Offset: 0x7b8, Size: 0x4]
	bool EnableServerStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 0x1]
	float LoadParticleDelay;//[Offset: 0x7c0, Size: 0x4]
	float LoadAudioDelay;//[Offset: 0x7c4, Size: 0x4]
	ParticleSystem* LightParticle;//[Offset: 0x7c8, Size: 0x28]
	ParticleSystem* EngineParticle;//[Offset: 0x7f0, Size: 0x28]
	ParticleSystem* DragLoopParticle;//[Offset: 0x818, Size: 0x28]
	ParticleSystem* SmokeParticle;//[Offset: 0x840, Size: 0x28]
	bool IsDragActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 0x1]
	int InCommingFlyPlayingID;//[Offset: 0x86c, Size: 0x4]
	bool BeginSetDeactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	float DistanceToPlayer;//[Offset: 0x874, Size: 0x4]
	Vector LaunchPosition;//[Offset: 0x878, Size: 0xc]
	RandowSpawnItemEntry[] ItemList;//[Offset: 0x888, Size: 0x10]
	BP_PackageLandingCircle_C* LandingCircleObj;//[Offset: 0x898, Size: 0x8]
	void LaunchTombBox(Actor* TmpActor, PlayerTombBox* K2Node_DynamicCast_AsPlayer_Tomb_Box, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetLaunchForce_ForceDir, bool CallFunc_GetLaunchForce_NeedLaunch);// 0xa1d39f8
	void GetLaunchForce(Vector ActorPos, out Vector ForceDir, out bool NeedLaunch, Vector tmpDir, float ForceValue, const Actor*[] Temp_object_Variable, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Cross_VectorVector_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Vector_Normal2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Vector_IsNearlyZero_ReturnValue);// 0xa1d39f8
	void TryKillFinisher(DamageEvent CarePackageDamage, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor*[] CallFunc_GetPlayerInSphereRange_ActorArr, bool CallFunc_GetPlayerInSphereRange_ReturnValue, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_TakeDamage_ReturnValue, ApexPlayerState* K2Node_DynamicCast_AsApex_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFinisher_ReturnValue);// 0xa1d39f8
	void StartPing(Actor* CallFunc_GetOwner_ReturnValue, ApexPlayerController* K2Node_DynamicCast_AsApex_Player_Controller, bool K2Node_DynamicCast_bSuccess, PingManagerComponent* CallFunc_GetPingManagerComponent_ReturnValue, int CallFunc_StartPingItemFromActorByDS_ReturnValue);// 0xa1d39f8
	void DestroyBeforeLandingSmoke(bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8
	void GetServerAnimationStartTime(out float NewStartTime, float CallFunc_Add_FloatFloat_ReturnValue);// 0xa1d39f8
	void ClientTimeLineTraceEvent(int Index);// 0xa1d39f8
	void LaunchCharacter(Actor* Player, Vector tmpDir, float ForceValue, ApexCharacterBase* K2Node_DynamicCast_AsApex_Character_Base, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetLaunchForce_ForceDir, bool CallFunc_GetLaunchForce_NeedLaunch);// 0xa1d39f8
	void StrikeActorList(out Actor*[] ActorList, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Greater_IntInt_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsStrike_Interface, bool K2Node_DynamicCast_bSuccess, bool CallFunc_DoesImplementInterface_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xa1d39f8
	void CheckStrikeObject(bool IsSphere, const byte[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Actor*[] CallFunc_SphereOverlapActors_OutActors, bool CallFunc_SphereOverlapActors_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, const byte[] K2Node_MakeArray_Array, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue);// 0xa1d39f8
	void PushPlayerAway(Vector tmpDir, float ForceValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor*[] CallFunc_GetPlayerInSphereRange_ActorArr, bool CallFunc_GetPlayerInSphereRange_ReturnValue, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0xa1d39f8
	void SetSmokeActive(bool IsActive);// 0xa1d39f8
	void SetDragActive(bool IsActive);// 0xa1d39f8
	void SetEngineActive(bool IsActive);// 0xa1d39f8
	void ClinetTimeline__FinishedFunc();// 0xa1d39f8
	void ClinetTimeline__UpdateFunc();// 0xa1d39f8
	void ClinetTimeline__Smoking__EventFunc();// 0xa1d39f8
	void ClinetTimeline__Landing__EventFunc();// 0xa1d39f8
	void ClinetTimeline__SpeedUp__EventFunc();// 0xa1d39f8
	void ClinetTimeline__IncomingFly__EventFunc();// 0xa1d39f8
	void ServerTimeline__FinishedFunc();// 0xa1d39f8
	void ServerTimeline__UpdateFunc();// 0xa1d39f8
	void OnLoaded_43FAF8DC4C3B047E1B1D0D901833714E(Object* Loaded);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void BP_OnOpenPackage();// 0xa1d39f8
	void BP_OnSpawnItem(PickUpWrapperActor* dropItem1, PickUpWrapperActor* dropItem2, PickUpWrapperActor* dropItem3, FString socket1, FString socket2, FString socket3);// 0xa1d39f8
	void NotifyCoolDown();// 0xa1d39f8
	void LoadMeshDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void DeleteUnOpenLight();// 0xa1d39f8
	void ReceiveDestroyed();// 0xa1d39f8
	void LoadAudioDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void CustomEvent(AsyncLoaderBase* Loader);// 0xa1d39f8
	void LoadMatDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void ExecuteUbergraph_Base_CarePackage_BP(int EntryPoint, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, Object* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, AnimSequence* K2Node_DynamicCast_AsAnim_Sequence, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PickUpWrapperActor* K2Node_Event_dropItem1, PickUpWrapperActor* K2Node_Event_dropItem2, PickUpWrapperActor* K2Node_Event_dropItem3, FString K2Node_Event_socket1, FString K2Node_Event_socket2, FString K2Node_Event_socket3, Vector CallFunc_K2_GetActorLocation_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, const delegate Temp_delegate_Variable, Object* K2Node_CustomEvent_Loaded, const delegate Temp_delegate_Variable, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, const delegate Temp_delegate_Variable, BP_PackageLandingCircle_C* CallFunc_FinishSpawningActor_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, const delegate Temp_delegate_Variable, int Temp_int_Array_Index_Variable, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, bool CallFunc_HasAuthority_ReturnValue, SkeletalMeshAsync* CallFunc_PlayAnimationAsync_ReturnValue, float CallFunc_GetServerAnimationStartTime_NewStartTime, float CallFunc_GetServerAnimationStartTime_NewStartTime, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Normal_ReturnValue, HitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, HitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult, HitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetHeadLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAtLocationAsync_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, AudioEventAsync* CallFunc_PostEventForAkComponentAsync_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor*[] CallFunc_GetPlayerInSphereRange_ActorArr, bool CallFunc_GetPlayerInSphereRange_ReturnValue, Actor* CallFunc_Array_Get_Item, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Object* CallFunc_LoadAsset_Blocking_ReturnValue, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, Object* CallFunc_LoadAsset_Blocking_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xa1d39f8
	void OnNotifyCoolDown__DelegateSignature();// 0xa1d39f8

--------------------------------
Class: ApexNavMeshDynamicObstacleComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x55c, Size: 0xc]
	class NavArea* NavArea;//[Offset: 0x568, Size: 0x8]

--------------------------------
Class: MainTownGameStateBase.GameStateBase_TeamMultiLevel.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	float RemainGameTime;//[Offset: 0xa18, Size: 0x4]
	float RemainTimeTipsShowTime;//[Offset: 0xa1c, Size: 0x4]
	void RemainTimeTipsMulticast();// 0xa145d0c

--------------------------------
Class: GameStateBase_TeamMultiLevel.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	int playerCount;//[Offset: 0xa10, Size: 0x4]
	int TeamCount;//[Offset: 0xa14, Size: 0x4]

--------------------------------
Class: BP_PackageLandingCircle_C.PackageLandingCircle.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x288, Size: 0x8]
	bool HasShowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	float AnimationStartTime;//[Offset: 0x294, Size: 0x4]
	float DestroyTime;//[Offset: 0x298, Size: 0x4]
	AkAudioEvent* CircleSoundEvent;//[Offset: 0x2a0, Size: 0x28]
	ParticleSystem* LadingEffect;//[Offset: 0x2c8, Size: 0x28]
	void SetShowUI(bool IsShow, Character* CallFunc_GetCharacterOrObViewTargetCharacter_ReturnValue, ApexCharacter* K2Node_DynamicCast_AsApex_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0xa1d39f8
	void ReceiveBeginPlay();// 0xa1d39f8
	void ReceiveDestroyed();// 0xa1d39f8
	void LoadAudioDone(AsyncLoaderBase* Loader);// 0xa1d39f8
	void UpdateUIShow(bool bIsShow);// 0xa1d39f8
	void ExecuteUbergraph_BP_PackageLandingCircle(int EntryPoint, bool K2Node_Event_bIsShow, const AkExternalSourceInfo[] Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, float CallFunc_Subtract_FloatFloat_ReturnValue, AsyncLoaderBase* CallFunc_LoadObjectAsync_ReturnValue, AsyncLoaderBase* K2Node_CustomEvent_Loader, Object* CallFunc_LoadAsset_Blocking_ReturnValue, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess, ParticleSystemAsync* CallFunc_SetParticleTemplateAsync_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0xa1d39f8

--------------------------------
Class: PackageLandingCircle.Actor.Object
	float Radius;//[Offset: 0x274, Size: 0x4]
	void UpdateUIShow(bool bIsShow);// 0xa151f94

--------------------------------
Class: BP_Mag_Light_Level2_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Ammo_Heavy_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Armor_Pickup_Lv1_UpGradeable_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Masksman_30-30_Wrapper_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Ammo_Light_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Lasersight_Level1_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Battery_Pickup_Small_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Rifle_R99_Wrapper_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_StandardStock_Level1_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Ammo_Shot_Lv1_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Shotgun_PeaceKeeper_Wrapper_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Rifle_Rampage_Wrapper_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Optical_3X_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Extended_Sniper_Mag_Pickup_2_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_ThermiteGrenade_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Ammo_Energy_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Rifle_P2020_Wrapper_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Volt_Wrapper_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_SubM_ASMG_Wrapper_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_MedKit_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Mag_Light_Level1_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Optical_1X_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Battery_Pickup_Phoenix_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Ammo_Sniper_Lv1_Pickup_C.PickUpWrapperActor.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Random_LootRoller_C.BP_Base_LootRoller_C.LootRoller.DynamicMovementActor.Actor.Object

--------------------------------
Class: BP_Base_LootRoller_C.LootRoller.DynamicMovementActor.Actor.Object
	CustomCollisionMesh* LootRollerMesh;//[Offset: 0x510, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x518, Size: 0x8]
	StaticMeshComponent* SM_CargoBot_025;//[Offset: 0x520, Size: 0x8]
	SphereComponent* PingCheck;//[Offset: 0x528, Size: 0x8]
	SphereComponent* MeleeAttackSphereCollision;//[Offset: 0x530, Size: 0x8]

--------------------------------
Class: CustomCollisionMesh.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	CustomCollisionInfo CustomCollisionInfo;//[Offset: 0x6c8, Size: 0x48]
	void UpdateLocationCheck();// 0x7ba7ae4

--------------------------------
Class: BP_BRLootDrones_C.BP_Base_LootDrones_C.LootDrones.Actor.Object

--------------------------------
Class: BP_Base_LootDrones_C.LootDrones.Actor.Object
	SphereComponent* PingCheck;//[Offset: 0x590, Size: 0x8]
	StaticMeshComponent* SM_CargoBot_004;//[Offset: 0x598, Size: 0x8]
	StaticMeshComponent* SM_CargoBot_003;//[Offset: 0x5a0, Size: 0x8]
	StaticMeshComponent* SM_CargoBot_001;//[Offset: 0x5a8, Size: 0x8]

--------------------------------
Class: LootDronesBezierPath10_C.LootDronesPathBase_C.SplinePathActor.Actor.Object

--------------------------------
Class: LootDronesPathBase_C.SplinePathActor.Actor.Object
	SplineComponent* Spline;//[Offset: 0x280, Size: 0x8]
	void 保存位置到配置                                                                               (Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0xa1d39f8
	void 恢复到配置位置                                                                               (HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0xa1d39f8

--------------------------------
